{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Misk is a new open source application container from Cash App. Misk is not ready for use. The API is not stable. Releases \u00b6 Our change log has release history. API is subject to change. implementation ( \"com.squareup.misk:misk:0.24.0\" ) Snapshot builds are available . Modules \u00b6 misk-actions \u00b6 The core annotations and interfaces necessary to define actions that can be hosted in Misk. This package has no dependency on the enclosing container (Misk!) and so your actions can be used in other environments without any heavy dependencies. Actions should extend WebAction , be annotated with a HTTP method like @Post , accept a request object and return a response object. Throw an exception like BadRequestException to fail the request without much boilerplate. misk-aws \u00b6 Integrate with Amazon Web Services, and includes packages to integrate with S3 and SQS. misk-aws-dynamodb \u00b6 Integrate with AWS DynamoDb using AWS SDK for Java 1.x. It should be safe to install side-by-side with misk-aws2-dynamodb if you need to use features in both. misk-aws-dynamodb-testing \u00b6 Integrate with this package to write tests for code that interacts with DynamoDb. Exposes APIs via AWS SDK for Java 1.x. Use alongside with misk-aws-dynamodb . Installing InProcessDynamoDbModule runs a DynamoDb Local instance in memory for your tests to run against. This module is recommended over DockerDynamoDbModule because there is less overhead in test execution performance. Installing DockerDynamoDbModule runs a DynamoDB Local instance in Docker for your tests to execute against. misk-aws2-dynamodb \u00b6 Integrate with AWS DynamoDb using AWS SDK for Java 2.x. It should be safe to install side-by-side with misk-aws-dynamodb if you need to use features in both. Please read the AWS SDK for Java 2.x Migration Guide for more details. misk-aws2-dynamodb-testing \u00b6 Integrate with this package to write tests for code that interacts with DynamoDb. Exposes APIs via AWS SDK for Java 2.x. Use alongside with misk-aws2-dynamodb . Installing InProcessDynamoDbModule runs a DynamoDb Local instance in memory for your tests to run against. This module is recommended over DockerDynamoDbModule because there is less overhead in test execution performance. Installing DockerDynamoDbModule runs a DynamoDB Local instance in Docker for your tests to execute against. misk-service \u00b6 Bind Guava services with inter-service dependencies. Any service can depend on any other service. ServiceManager won\u2019t start a service until the services it depends on are running. misk-inject \u00b6 Integrates Guice with Kotlin. Extending KAbstractModule instead of Guice\u2019s AbstractModule lets you use KClass instead of java.lang.Class and other conveniences. misk-feature \u00b6 Runtime feature flags. misk-launchdarkly is the reference implementation. misk-jobqueue \u00b6 A job queue with a high quality fake. AwsSqsJobQueueModule from misk-aws is the reference implementation. misk-events \u00b6 An event publisher + consumer. There is no open source reference implementation at this time. Looking for Misk-Web? \u00b6 Misk-Web powers the Misk Admin Dashboard with modular Typescript + React powered tabs. Check out Misk-Web ! What are the wisp* modules? \u00b6 The wisp* modules contain no Dependency Injection based code (i.e. no Guice, etc). These modules should never refer to misk* modules, although misk* modules can (and should) use wisp* modules. Also, modules that are wisp*-testing will only be used in test scope in other wisp modules, never in the api/implementation scope. If you are refactoring code from misk into the wisp modules, you must not break any external Misk dependencies or apis. It is ok to deprecate items in misk to encourage eventual migration to wisp directly if desired. If your refactoring does not fit one of the existing wisp modules, create a new module. For now, it is preferred to have many small modules rather than larger conglomerate modules requiring many different dependencies. It should be considered that wisp will be volatile for sometime with the potential for a lot of changes, additions, etc. Misk apps should use wisp modules directly with caution as breaking changes might be required.","title":"Overview"},{"location":"#releases","text":"Our change log has release history. API is subject to change. implementation ( \"com.squareup.misk:misk:0.24.0\" ) Snapshot builds are available .","title":"Releases"},{"location":"#modules","text":"","title":"Modules"},{"location":"#misk-actions","text":"The core annotations and interfaces necessary to define actions that can be hosted in Misk. This package has no dependency on the enclosing container (Misk!) and so your actions can be used in other environments without any heavy dependencies. Actions should extend WebAction , be annotated with a HTTP method like @Post , accept a request object and return a response object. Throw an exception like BadRequestException to fail the request without much boilerplate.","title":"misk-actions"},{"location":"#misk-aws","text":"Integrate with Amazon Web Services, and includes packages to integrate with S3 and SQS.","title":"misk-aws"},{"location":"#misk-aws-dynamodb","text":"Integrate with AWS DynamoDb using AWS SDK for Java 1.x. It should be safe to install side-by-side with misk-aws2-dynamodb if you need to use features in both.","title":"misk-aws-dynamodb"},{"location":"#misk-aws-dynamodb-testing","text":"Integrate with this package to write tests for code that interacts with DynamoDb. Exposes APIs via AWS SDK for Java 1.x. Use alongside with misk-aws-dynamodb . Installing InProcessDynamoDbModule runs a DynamoDb Local instance in memory for your tests to run against. This module is recommended over DockerDynamoDbModule because there is less overhead in test execution performance. Installing DockerDynamoDbModule runs a DynamoDB Local instance in Docker for your tests to execute against.","title":"misk-aws-dynamodb-testing"},{"location":"#misk-aws2-dynamodb","text":"Integrate with AWS DynamoDb using AWS SDK for Java 2.x. It should be safe to install side-by-side with misk-aws-dynamodb if you need to use features in both. Please read the AWS SDK for Java 2.x Migration Guide for more details.","title":"misk-aws2-dynamodb"},{"location":"#misk-aws2-dynamodb-testing","text":"Integrate with this package to write tests for code that interacts with DynamoDb. Exposes APIs via AWS SDK for Java 2.x. Use alongside with misk-aws2-dynamodb . Installing InProcessDynamoDbModule runs a DynamoDb Local instance in memory for your tests to run against. This module is recommended over DockerDynamoDbModule because there is less overhead in test execution performance. Installing DockerDynamoDbModule runs a DynamoDB Local instance in Docker for your tests to execute against.","title":"misk-aws2-dynamodb-testing"},{"location":"#misk-service","text":"Bind Guava services with inter-service dependencies. Any service can depend on any other service. ServiceManager won\u2019t start a service until the services it depends on are running.","title":"misk-service"},{"location":"#misk-inject","text":"Integrates Guice with Kotlin. Extending KAbstractModule instead of Guice\u2019s AbstractModule lets you use KClass instead of java.lang.Class and other conveniences.","title":"misk-inject"},{"location":"#misk-feature","text":"Runtime feature flags. misk-launchdarkly is the reference implementation.","title":"misk-feature"},{"location":"#misk-jobqueue","text":"A job queue with a high quality fake. AwsSqsJobQueueModule from misk-aws is the reference implementation.","title":"misk-jobqueue"},{"location":"#misk-events","text":"An event publisher + consumer. There is no open source reference implementation at this time.","title":"misk-events"},{"location":"#looking-for-misk-web","text":"Misk-Web powers the Misk Admin Dashboard with modular Typescript + React powered tabs. Check out Misk-Web !","title":"Looking for Misk-Web?"},{"location":"#what-are-the-wisp-modules","text":"The wisp* modules contain no Dependency Injection based code (i.e. no Guice, etc). These modules should never refer to misk* modules, although misk* modules can (and should) use wisp* modules. Also, modules that are wisp*-testing will only be used in test scope in other wisp modules, never in the api/implementation scope. If you are refactoring code from misk into the wisp modules, you must not break any external Misk dependencies or apis. It is ok to deprecate items in misk to encourage eventual migration to wisp directly if desired. If your refactoring does not fit one of the existing wisp modules, create a new module. For now, it is preferred to have many small modules rather than larger conglomerate modules requiring many different dependencies. It should be considered that wisp will be volatile for sometime with the potential for a lot of changes, additions, etc. Misk apps should use wisp modules directly with caution as breaking changes might be required.","title":"What are the wisp* modules?"},{"location":"actions/","text":"Actions \u00b6 Actions are Misk\u2019s unit for an endpoint. Misk lets you make HTTP actions, and gRPC actions via Wire . Web Actions \u00b6 Below are some example Web action declarations. Note that many of the annotations are optional. GET: @Singleton class HelloWebAction @Inject constructor () : WebAction { @Get ( \"/hello/{name}\" ) // Enclose path parameters in {} @ResponseContentType ( MediaTypes . APPLICATION_JSON ) @Authenticated ( services = [ \"my-other-app\" ] , capabilities = [ \"my-app_owners\" ] ) fun hello ( // Use @PathParam with the name of the param. Required if there's a param in the path pattern. @PathParam name : String , // RequestHeaders is optional: @RequestHeaders headers : Headers , // QueryParams are optional: @QueryParam nickName : String? , // e.g. /hello/abc?nickName=def @QueryParam greetings : List < String >? // e.g. /hello/abc?greetings=def&greetings=ghi ): HelloResponse { return HelloResponse ( name ) } } POST: @Singleton class HelloWebPostAction @Inject constructor () : WebAction { @Post ( \"/hello/{name}\" ) @RequestContentType ( MediaTypes . APPLICATION_JSON ) @ResponseContentType ( MediaTypes . APPLICATION_JSON ) @Authenticated ( services = [ \"my-other-app\" ] , capabilities = [ \"my-app_owners\" ] ) fun hello ( @PathParam name : String , // RequestBody is optional, and is automatically deserialized to the provided type. @RequestBody body : PostBody ): HelloPostResponse { return HelloPostResponse ( body . greeting , name ) } } data class HelloPostResponse ( val greeting : String , val name : String ) data class PostBody ( val greeting : String ) Setting up HTTP actions \u00b6 Install the action into a module: class HelloModule : KAbstractModule () { override fun configure () { install ( WebActionModule . create < HelloWebAction > ()) install ( WebActionModule . create < HelloWebPostAction > ()) } } And then put that module onto the top level MiskApplication . fun main ( args : Array < String > ) { MiskApplication ( // ... HelloModule (), // new! ). run ( args ) } Response type \u00b6 If you change the action\u2019s response type to Response<T> , it gives you better control over the response status code and headers. @Singleton class HelloWebResponseAction @Inject constructor () : WebAction { @Get ( \"/hello_but_203/{name}\" ) @ResponseContentType ( MediaTypes . APPLICATION_JSON ) fun hello ( @PathParam name : String ): Response < HelloResponse > = Response ( statusCode = 203 , headers = headersOf (), body = HelloResponse () ) } It\u2019s also possible to throw exceptions that are mapped to status codes. @Singleton class HelloWebResponseAction @Inject constructor () : WebAction { @Get ( \"/no_access/{name}\" ) fun hello ( @PathParam name : String ): HelloResponse { throw UnauthenticatedException () } } gRPC Actions \u00b6 Misk has support for gRPC actions via the Wire protocol buffer (protobuf) library. To create a gRPC action, first define the relevant protos for your service. Let\u2019s say we\u2019re creating a GreeterService that exposes one API, Hello . Create this file in src/main/proto/hello.proto : syntax = \"proto2\" ; package squareup . cash.hello ; option java_package = \"com.squareup.protos.cash.hello\" ; message HelloRequest { optional string message = 1 ; } message HelloResponse { optional string message = 1 ; } service GreeterService { rpc Hello ( HelloRequest ) returns ( HelloResponse ) {} } Next, in your project\u2019s build file (for this example, build.gradle.kts ), add a dependency on the wire plugin: plugins { id(\"com.squareup.wire\") } Add the following configuration to generate the gRPC interfaces for your service: wire { sourcePath { srcDir(\"src/main/proto\") } kotlin { include(\"squareup.cash.hello.GreeterService\") rpcCallStyle = \"blocking\" rpcRole = \"server\" singleMethodServices = true } java { } } Finally, implement and bind your gRPC action. GreeterServiceHelloBlockingServer is generated by Wire. @Singleton class HelloGrpcAction @Inject internal constructor () : GreeterServiceHelloBlockingServer , WebAction { @Unauthorized override fun Hello ( request : HelloRequest ): HelloResponse { return HelloResponse ( \"message\" ) } } // This module binds HelloGrpcAction. class GreeterActionModule : KAbstractModule () { override fun configure () { install ( WebActionModule . create < HelloGrpcAction > ()) } } Creating a gRPC action automatically creates a JSON endpoint with all of the same annotations in the path defined by the ...BlockingServer , typically /<package>.<service name>/<rpc name> . You can also create a second class that extends WebAction to customize this further. Read more about HTTP actions in Web Actions . If you\u2019re building both a gRPC and a HTTP action, a common pattern is to have them both use a common dependency: @Singleton class HelloGrpcAction @Inject constructor ( val greeter : Greeter ) : GreeterServiceHelloBlockingServer , WebAction { @Unauthorized override fun hello () = HelloResponse ( greeter . greet ()) } @Singleton class HelloWebAction @Inject constructor ( val greeter : Greeter ) : WebAction { @Unauthorized @Get ( \"/hello\" ) @ResponseContentType ( MediaTypes . APPLICATION_JSON ) fun hello () = HelloResponse ( greeter . greet ()) } @Singleton class Greeter @Inject constructor () { fun greet () = \"Hello world\" } ActionScoped \u00b6 ActionScoped gives an action access to context produced by the action\u2019s interceptors. Misk has a few ActionScoped items built in: MiskCaller - access derived authorization details HttpCall - access lower level HTTP details, e.g. request headers Testing \u00b6 Use tests annotated with @MiskTest to perform tests. There are two common patterns to testing actions: Test Action classes directly \u00b6 Make sure that the module under test contains a Guice binding for the action and its dependencies, then inject your action. class MyModule : KAbstractModule () { override fun configure () { install ( WebActionModule . create < HelloWebAction > ()) // Alternatively, a direct or just-in-time binding might be sufficient. } } @MiskTest class MyTest { @MiskTestModule val module = MyModule () @Inject lateinit var action : HelloWebAction // use action... } Testing ActionScoped \u00b6 Use @WithMiskCaller for ActionScoped<MiskCaller> : @MiskTest @WithMiskCaller class MyTest { @MiskTestModule val module = MyModule () @Inject lateinit var action : HelloWebAction @Inject lateinit var miskCaller : ActionScoped < MiskCaller > // use action... } Otherwise, use ActionScope directly: @MiskTest class MyTest { @MiskTestModule val module = MyModule () @Inject lateinit var actionScope : ActionScope @Inject lateinit var action : HelloWebAction @Inject lateinit var myScopedObject : ActionScoped < MyScopedObject > @BeforeEach fun setUp () { actionScope . enter ( mapOf ( keyOf < MyScopedObject > () to MyScopedObject () ) ) } @AfterEach fun tearDown () { actionScope . provider . get (). close () } // use action... } Integration tests \u00b6 It\u2019s possible to perform tests terminating at the app\u2019s HTTP/gRPC interface. The module under test should include WebServerTestingModule so that Misk stands up a server during tests: class MyModule : KAbstractModule () { override fun configure (){ install ( WebServerTestingModule ()) // install other modules... } } Then test HTTP requests using WebTestClient (assertions here were made using Kotest ): @MiskTest ( startService = true ) class HelloWebIntegrationTest { @Suppress ( \"unused\" ) @MiskTestModule val module = MyModule () @Inject lateinit var webTestClient : WebTestClient @Test fun `makes a call to the service` () { val response = webTestClient . post ( \"/hello\" , HelloRequest ( \"world\" )) response . response . code shouldBe 200 response . parseJson < HelloResponse > () shouldBe HelloResponse ( \"hello world\" ) } } Test gRPC requests by setting up a gRPC client pointing to the running app: class MyServerModule : KAbstractModule () { override fun configure () { install ( WebServerTestingModule ()) // Assume RobotLocatorWebAction is a gRPC action. install ( WebActionModule . create < RobotLocatorWebAction > ()) } } class MyClientModule ( val jetty : JettyService ): KAbstractModule () { override fun configure () { // Assume RobotLocator was generated via Wire. install ( GrpcClientModule . create < RobotLocator , GrpcRobotLocator > ( \"robots\" )) } @Provides @Singleton fun provideHttpClientConfig (): HttpClientsConfig { return HttpClientsConfig ( endpoints = mapOf ( \"robots\" to HttpClientEndpointConfig ( jetty . httpServerUrl . toString ()) ) ) } } @MiskTest ( startService = true ) class RobotLocatorIntegrationTest { @Suppress ( \"unused\" ) @MiskTestModule val module = MyServerModule () @Inject lateinit var jettyService : JettyService @Test fun `makes a call to the service` () { val robotLocator = Guice . createInjector ( MyClientModule ( jettyService )) . getInstance < RobotLocator > () robotLocator . SayHello (). executeBlocking ( HelloRequest . builder (). name ( \"world\" ). build ()) shouldBe HelloReply . Builder (). message ( \"hello world\" ). build () } }","title":"Actions"},{"location":"actions/#actions","text":"Actions are Misk\u2019s unit for an endpoint. Misk lets you make HTTP actions, and gRPC actions via Wire .","title":"Actions"},{"location":"actions/#web-actions","text":"Below are some example Web action declarations. Note that many of the annotations are optional. GET: @Singleton class HelloWebAction @Inject constructor () : WebAction { @Get ( \"/hello/{name}\" ) // Enclose path parameters in {} @ResponseContentType ( MediaTypes . APPLICATION_JSON ) @Authenticated ( services = [ \"my-other-app\" ] , capabilities = [ \"my-app_owners\" ] ) fun hello ( // Use @PathParam with the name of the param. Required if there's a param in the path pattern. @PathParam name : String , // RequestHeaders is optional: @RequestHeaders headers : Headers , // QueryParams are optional: @QueryParam nickName : String? , // e.g. /hello/abc?nickName=def @QueryParam greetings : List < String >? // e.g. /hello/abc?greetings=def&greetings=ghi ): HelloResponse { return HelloResponse ( name ) } } POST: @Singleton class HelloWebPostAction @Inject constructor () : WebAction { @Post ( \"/hello/{name}\" ) @RequestContentType ( MediaTypes . APPLICATION_JSON ) @ResponseContentType ( MediaTypes . APPLICATION_JSON ) @Authenticated ( services = [ \"my-other-app\" ] , capabilities = [ \"my-app_owners\" ] ) fun hello ( @PathParam name : String , // RequestBody is optional, and is automatically deserialized to the provided type. @RequestBody body : PostBody ): HelloPostResponse { return HelloPostResponse ( body . greeting , name ) } } data class HelloPostResponse ( val greeting : String , val name : String ) data class PostBody ( val greeting : String )","title":"Web Actions"},{"location":"actions/#setting-up-http-actions","text":"Install the action into a module: class HelloModule : KAbstractModule () { override fun configure () { install ( WebActionModule . create < HelloWebAction > ()) install ( WebActionModule . create < HelloWebPostAction > ()) } } And then put that module onto the top level MiskApplication . fun main ( args : Array < String > ) { MiskApplication ( // ... HelloModule (), // new! ). run ( args ) }","title":"Setting up HTTP actions"},{"location":"actions/#response-type","text":"If you change the action\u2019s response type to Response<T> , it gives you better control over the response status code and headers. @Singleton class HelloWebResponseAction @Inject constructor () : WebAction { @Get ( \"/hello_but_203/{name}\" ) @ResponseContentType ( MediaTypes . APPLICATION_JSON ) fun hello ( @PathParam name : String ): Response < HelloResponse > = Response ( statusCode = 203 , headers = headersOf (), body = HelloResponse () ) } It\u2019s also possible to throw exceptions that are mapped to status codes. @Singleton class HelloWebResponseAction @Inject constructor () : WebAction { @Get ( \"/no_access/{name}\" ) fun hello ( @PathParam name : String ): HelloResponse { throw UnauthenticatedException () } }","title":"Response type"},{"location":"actions/#grpc-actions","text":"Misk has support for gRPC actions via the Wire protocol buffer (protobuf) library. To create a gRPC action, first define the relevant protos for your service. Let\u2019s say we\u2019re creating a GreeterService that exposes one API, Hello . Create this file in src/main/proto/hello.proto : syntax = \"proto2\" ; package squareup . cash.hello ; option java_package = \"com.squareup.protos.cash.hello\" ; message HelloRequest { optional string message = 1 ; } message HelloResponse { optional string message = 1 ; } service GreeterService { rpc Hello ( HelloRequest ) returns ( HelloResponse ) {} } Next, in your project\u2019s build file (for this example, build.gradle.kts ), add a dependency on the wire plugin: plugins { id(\"com.squareup.wire\") } Add the following configuration to generate the gRPC interfaces for your service: wire { sourcePath { srcDir(\"src/main/proto\") } kotlin { include(\"squareup.cash.hello.GreeterService\") rpcCallStyle = \"blocking\" rpcRole = \"server\" singleMethodServices = true } java { } } Finally, implement and bind your gRPC action. GreeterServiceHelloBlockingServer is generated by Wire. @Singleton class HelloGrpcAction @Inject internal constructor () : GreeterServiceHelloBlockingServer , WebAction { @Unauthorized override fun Hello ( request : HelloRequest ): HelloResponse { return HelloResponse ( \"message\" ) } } // This module binds HelloGrpcAction. class GreeterActionModule : KAbstractModule () { override fun configure () { install ( WebActionModule . create < HelloGrpcAction > ()) } } Creating a gRPC action automatically creates a JSON endpoint with all of the same annotations in the path defined by the ...BlockingServer , typically /<package>.<service name>/<rpc name> . You can also create a second class that extends WebAction to customize this further. Read more about HTTP actions in Web Actions . If you\u2019re building both a gRPC and a HTTP action, a common pattern is to have them both use a common dependency: @Singleton class HelloGrpcAction @Inject constructor ( val greeter : Greeter ) : GreeterServiceHelloBlockingServer , WebAction { @Unauthorized override fun hello () = HelloResponse ( greeter . greet ()) } @Singleton class HelloWebAction @Inject constructor ( val greeter : Greeter ) : WebAction { @Unauthorized @Get ( \"/hello\" ) @ResponseContentType ( MediaTypes . APPLICATION_JSON ) fun hello () = HelloResponse ( greeter . greet ()) } @Singleton class Greeter @Inject constructor () { fun greet () = \"Hello world\" }","title":"gRPC Actions"},{"location":"actions/#actionscoped","text":"ActionScoped gives an action access to context produced by the action\u2019s interceptors. Misk has a few ActionScoped items built in: MiskCaller - access derived authorization details HttpCall - access lower level HTTP details, e.g. request headers","title":"ActionScoped"},{"location":"actions/#testing","text":"Use tests annotated with @MiskTest to perform tests. There are two common patterns to testing actions:","title":"Testing"},{"location":"actions/#test-action-classes-directly","text":"Make sure that the module under test contains a Guice binding for the action and its dependencies, then inject your action. class MyModule : KAbstractModule () { override fun configure () { install ( WebActionModule . create < HelloWebAction > ()) // Alternatively, a direct or just-in-time binding might be sufficient. } } @MiskTest class MyTest { @MiskTestModule val module = MyModule () @Inject lateinit var action : HelloWebAction // use action... }","title":"Test Action classes directly"},{"location":"actions/#testing-actionscoped","text":"Use @WithMiskCaller for ActionScoped<MiskCaller> : @MiskTest @WithMiskCaller class MyTest { @MiskTestModule val module = MyModule () @Inject lateinit var action : HelloWebAction @Inject lateinit var miskCaller : ActionScoped < MiskCaller > // use action... } Otherwise, use ActionScope directly: @MiskTest class MyTest { @MiskTestModule val module = MyModule () @Inject lateinit var actionScope : ActionScope @Inject lateinit var action : HelloWebAction @Inject lateinit var myScopedObject : ActionScoped < MyScopedObject > @BeforeEach fun setUp () { actionScope . enter ( mapOf ( keyOf < MyScopedObject > () to MyScopedObject () ) ) } @AfterEach fun tearDown () { actionScope . provider . get (). close () } // use action... }","title":"Testing ActionScoped"},{"location":"actions/#integration-tests","text":"It\u2019s possible to perform tests terminating at the app\u2019s HTTP/gRPC interface. The module under test should include WebServerTestingModule so that Misk stands up a server during tests: class MyModule : KAbstractModule () { override fun configure (){ install ( WebServerTestingModule ()) // install other modules... } } Then test HTTP requests using WebTestClient (assertions here were made using Kotest ): @MiskTest ( startService = true ) class HelloWebIntegrationTest { @Suppress ( \"unused\" ) @MiskTestModule val module = MyModule () @Inject lateinit var webTestClient : WebTestClient @Test fun `makes a call to the service` () { val response = webTestClient . post ( \"/hello\" , HelloRequest ( \"world\" )) response . response . code shouldBe 200 response . parseJson < HelloResponse > () shouldBe HelloResponse ( \"hello world\" ) } } Test gRPC requests by setting up a gRPC client pointing to the running app: class MyServerModule : KAbstractModule () { override fun configure () { install ( WebServerTestingModule ()) // Assume RobotLocatorWebAction is a gRPC action. install ( WebActionModule . create < RobotLocatorWebAction > ()) } } class MyClientModule ( val jetty : JettyService ): KAbstractModule () { override fun configure () { // Assume RobotLocator was generated via Wire. install ( GrpcClientModule . create < RobotLocator , GrpcRobotLocator > ( \"robots\" )) } @Provides @Singleton fun provideHttpClientConfig (): HttpClientsConfig { return HttpClientsConfig ( endpoints = mapOf ( \"robots\" to HttpClientEndpointConfig ( jetty . httpServerUrl . toString ()) ) ) } } @MiskTest ( startService = true ) class RobotLocatorIntegrationTest { @Suppress ( \"unused\" ) @MiskTestModule val module = MyServerModule () @Inject lateinit var jettyService : JettyService @Test fun `makes a call to the service` () { val robotLocator = Guice . createInjector ( MyClientModule ( jettyService )) . getInstance < RobotLocator > () robotLocator . SayHello (). executeBlocking ( HelloRequest . builder (). name ( \"world\" ). build ()) shouldBe HelloReply . Builder (). message ( \"hello world\" ). build () } }","title":"Integration tests"},{"location":"changelog/","text":"Change Log \u00b6 Version 0.24.0 (2022-04-13) \u00b6 Unstable public release. New features and fixes: Fill out the Misk BOM ( #2353 ) Restore a deleted WebConfig constructor ( #2352 ) enable kochiku in CI ( #2351 ) Version 0.23.0 (2022-03-30) \u00b6 Unstable public release. Thank you to all the contributors, as always. Breaking changes: Upgrade to use kotlin 1.6 ( #2323 ) Move ActionScope and related code to :misk-action-scopes ( #2301 ) Remove misk.flags.Flags ( #2341 ) misk-metrics: Allow configuring max_age_in_seconds for Prometheus ( #2292 ) New features: misk-actions: Multi-method WebActions ( #2198 ) misk-clients: Allow binding for application interceptors in grpc and typed clients ( #2201 ) misk-core: Support a configurable delay before shutting down services ( #2238 ) misk-core: Allow minimum thread pool size to be configured ( #2210 ) misk-core: Record client metrics for incomplete HTTP connections ( #2209 ) misk-jdbc: Provide more helpful error message when duplicate migration versions present ( #2325 ) misk-jdbc: Default to use modern TLS in JDBC connections ( #2221 ) misk-hibernate: add support for FlushEntity listener ( #2220 ) misk-feature: Make FakeFeatureFlag overrides composable with FakeFeatureFlagsOverrideModule ( #2306 ) misk-feature, wisp-feature: Add strongly typed feature flag support ( #2293 ) misk-feature, wisp-feature: Launch Darkly client will use system proxy settings if provided ( #2255 ) misk-redis: Implement Redis.hincrBy ( #2269 ) misk-zookeeper, wisp-lease: Extend LeaseManager to support Leases as AutoCloseable resources ( #2319 ) wisp-config: Add a filesystem preprocessor ( #2275 ) wisp-config: Add a classpath preprocessor ( #2268 ) Fixes: misk-admin: Web Actions Tab: handle long primitive when building web forms ( #2300 ) misk-clients: Do not require List<Client*Interceptor> to be bound when using TypedClientFactory stand-alone ( #2218 ) misk-core: Improve handling timeout/reset connection when reading request ( #2279 ) misk-core: Configure VegasLimit with higher initial limit ( #2250 ) misk-gcp: Properly shut down Google Spanner clients ( #2203 ) misk-hibernate: Move StartDatabaseService init code to explicit function ( #2294 ) misk-jooq: Use appropriate SQLDialect per configuration ( #2305 ) misk-jooq: Don\u2019t use \u201cselect * from\u201d ( #2231 ) Version 0.22.0 (2021-11-03) \u00b6 Unstable public release. Breaking changes: The /error action is no longer installed by default (#2190) New features and fixes: Ignore @transient fields when constructing queries (#2162) Add support for Google Spanner to misk-gcp (#2188) Add a default Moshi build in wisp, and move the builder from Misk (#2187) Add wisp-token* - copied from misk.tokens (#2186) Allow invalid accept headers (#2185) Put unack\u2019d jobs on the deadletter queue and remove FakeTransactionalJobQueue (#2180) Remove internal visibility modifier from PrometheusHttpService (#2181) Add wisp-tracing module (#2171) Version 0.21.0 (2021-10-18) \u00b6 Unstable public release. Version 0.20.0 (2021-08-31) \u00b6 Unstable public release. Breaking changes: Leases now use a different package Wisp Lease API is changing to handle explicit acquire/release on lease (#2113) Log on properties present in config yaml but not in object (#2118) Config now requires defaults for primitive types Move misk admin components to misk-admin (#2065) Reinstate WebActionExceptionMapper sending a response body based on the WebActionException\u2019s responseBody (#2050) New features and fixes: Add incr and incrBy operations to misk-redis (#2119) Add @fetch as a valid hibernate query annotation (#2112) When evaluating JSON LD feature flags, log unknown fields once (#2086) Make additional jooq configurations possible (#2078) Log a warning if health checks fail (#2063) Add support for double feature flags (#2029) Send gRPC errors properly (#1983) Bump log level for invalid access (#2024) misk-policy: To query specific paths, treat document path as urlencoded (#2030) Create LaunchDarkly in Wisp (#2088) Version 0.19.0 (2021-06-30) \u00b6 Unstable public release. Version 0.18.0 (2021-06-28) \u00b6 Unstable public release. Version 0.17.1 (2021-04-29) \u00b6 Unstable public release. Version 0.17.0 (2021-04-28) \u00b6 Unstable public release. Version 0.16.0 (2020-12-17) \u00b6 Unstable public release. Version 0.15.0 (2020-12-03) \u00b6 Unstable public release. Version 0.14.0 (2020-11-12) \u00b6 Unstable public release. Version 0.13.0 (2020-07-16) \u00b6 Unstable public release. Version 0.12.0 (2020-05-06) \u00b6 Unstable public release. Version 0.11.0 (2020-02-25) \u00b6 Unstable public release. Version 0.10.0 (2019-01-21) \u00b6 Unstable public release. Version 0.9.0 (2019-12-06) \u00b6 Unstable public release. Version 0.8.0 (2019-10-22) \u00b6 Unstable public release. Version 0.7.0 (2019-08-26) \u00b6 Unstable public release. Version 0.2.5 (2018-06-11) \u00b6 New \u00b6 Cluster interface and DataSourceCluster bindings Add a JPAEntityModule for binding entities for a DataSource Hook up raw Hibernate APIs Use JPA entity types in HibernateModule. Introduce FakeResourceLoader SchemaMigrator for running and tracking schema migrations. Update Misk version in Dockerfiles to 0.2.5 Drop support for unqualified datasources. move exemplars into sample directory in preparation for more of them Make all Kotlin warnings build errors Allow services to specify dependencies on other services. Fast fail on dependency cycles. jre8 was deprecated for kotlin 1.2 Early types for the Transacter APIs Queries in the Misk Hibernate API. Implement Query with dynamic proxies and reflection Offer strict validation and nice errors in ReflectionQueryFactory Log the reasons why liveness/readiness checks fail URL shortener sample Support more operators in Query Wire up Hibernate event listeners through Guice. HibernateTestingModule. Switch tests to MySQL Rollback transactions on exceptions Delete DataSourceModule. It\u2019s redundant with HibernateModule. Support ByteString columns Misk containers should not run as root DbTimestampedEntity Fix \u00b6 Don\u2019t inject until after services are started. Tidy up some test cases. Fix a missing dependency in exemplar Don\u2019t use KubernetesHealthCheck with LocalClusterConnector Version 0.2.4 (2018-05-14) \u00b6 New \u00b6 Add support for protobuf over HTTP Cloudwatch Trail logging support Add retry() helper Add Backoff/ExponentialBackoff MiskCaller and authz support Adds a DataSourceModule Add support for logging to StackDriver Fix \u00b6 Move static resources from web root into resources Move web-specific NetworkInterceptor into web Remove use of instance metadata endpoints Version 0.2.3 (2018-04-27) \u00b6 New \u00b6 Add kubernetes java client so that hosts can know their peers Use EventRouter for exemplarchat. Add a static resource mapper Create a cluster wide admin healthcheck page Change CacheBuilder to be mapOf since no concurrency Adds a healthcheck for the kubernetes client Adds a local cluster connector so that development functions Fix \u00b6 Don\u2019t treat assembly as a release when running in CI Fix tracing startup when none is configured Various event router fixes and refactorings Version 0.2.1 (2018-03-26) \u00b6 New \u00b6 Remove unnecessary check from uploadArchives task (#149) Add a RELEASING.md to outline misk release process (#150) Move chat into its own example project. (#146) Introduce event router api (#147) Add basic frontend for exemplarchat Add MoshiJsonAdapters and SocketEventJsonAdapter (#151) Expose client certificates as action scoped vars (#141) Add ClusterMapper interface, refactor RealEventRouter to event loop (#155) Handle cluster changes (#156) More tests to exercise EventRouter behaviors. (#158) Support loading keystores from combined private key and certificate chain PEM files (#157) Fix \u00b6 Fix event router tests (#159) Version 0.2.0 (2018-03-13) \u00b6 New \u00b6 Add _status action Split Interceptor into NetworkInterceptor and ApplicationInterceptor Introduce websocket support in misk Add tracing interceptor for web actions Add ActionExceptionLogLevelConfig to control log levels for ActionExceptions Allow binding an ExceptionMapper by an Exception type Google Cloud Datastore and Cloud Storage support Add backend for Zipkin tracer Add MiskTracer to facilitate ad-hoc method tracing Retrofit based typed client support (#112) Enable SSL for both clients and servers (#111) Support application/x-www-form-urlencoded parameters (#97) Add API for injecting dynamically sourced flags Add metrics backend for SignalFx Add support for commands Upgrade to Gradle 4.5 to support Java 9; add Java 9 to test matrix Allow customized exception mappings Add support for query strings in urls Fix \u00b6 Eliminate redundant _config suffix in config files Support Web actions that return Nothing Use proper snake-casing for default property names Fix Java path param dispatching Fix NotFoundAction handling (#134) Fix wildcard based content routing Fix a bug when a user-defined Interceptor returns a Response object Fix up Java translation from Moshi. (#107) Version 0.1.0 (2018-02-01) \u00b6 Initial release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-0240-2022-04-13","text":"Unstable public release. New features and fixes: Fill out the Misk BOM ( #2353 ) Restore a deleted WebConfig constructor ( #2352 ) enable kochiku in CI ( #2351 )","title":"Version 0.24.0 (2022-04-13)"},{"location":"changelog/#version-0230-2022-03-30","text":"Unstable public release. Thank you to all the contributors, as always. Breaking changes: Upgrade to use kotlin 1.6 ( #2323 ) Move ActionScope and related code to :misk-action-scopes ( #2301 ) Remove misk.flags.Flags ( #2341 ) misk-metrics: Allow configuring max_age_in_seconds for Prometheus ( #2292 ) New features: misk-actions: Multi-method WebActions ( #2198 ) misk-clients: Allow binding for application interceptors in grpc and typed clients ( #2201 ) misk-core: Support a configurable delay before shutting down services ( #2238 ) misk-core: Allow minimum thread pool size to be configured ( #2210 ) misk-core: Record client metrics for incomplete HTTP connections ( #2209 ) misk-jdbc: Provide more helpful error message when duplicate migration versions present ( #2325 ) misk-jdbc: Default to use modern TLS in JDBC connections ( #2221 ) misk-hibernate: add support for FlushEntity listener ( #2220 ) misk-feature: Make FakeFeatureFlag overrides composable with FakeFeatureFlagsOverrideModule ( #2306 ) misk-feature, wisp-feature: Add strongly typed feature flag support ( #2293 ) misk-feature, wisp-feature: Launch Darkly client will use system proxy settings if provided ( #2255 ) misk-redis: Implement Redis.hincrBy ( #2269 ) misk-zookeeper, wisp-lease: Extend LeaseManager to support Leases as AutoCloseable resources ( #2319 ) wisp-config: Add a filesystem preprocessor ( #2275 ) wisp-config: Add a classpath preprocessor ( #2268 ) Fixes: misk-admin: Web Actions Tab: handle long primitive when building web forms ( #2300 ) misk-clients: Do not require List<Client*Interceptor> to be bound when using TypedClientFactory stand-alone ( #2218 ) misk-core: Improve handling timeout/reset connection when reading request ( #2279 ) misk-core: Configure VegasLimit with higher initial limit ( #2250 ) misk-gcp: Properly shut down Google Spanner clients ( #2203 ) misk-hibernate: Move StartDatabaseService init code to explicit function ( #2294 ) misk-jooq: Use appropriate SQLDialect per configuration ( #2305 ) misk-jooq: Don\u2019t use \u201cselect * from\u201d ( #2231 )","title":"Version 0.23.0 (2022-03-30)"},{"location":"changelog/#version-0220-2021-11-03","text":"Unstable public release. Breaking changes: The /error action is no longer installed by default (#2190) New features and fixes: Ignore @transient fields when constructing queries (#2162) Add support for Google Spanner to misk-gcp (#2188) Add a default Moshi build in wisp, and move the builder from Misk (#2187) Add wisp-token* - copied from misk.tokens (#2186) Allow invalid accept headers (#2185) Put unack\u2019d jobs on the deadletter queue and remove FakeTransactionalJobQueue (#2180) Remove internal visibility modifier from PrometheusHttpService (#2181) Add wisp-tracing module (#2171)","title":"Version 0.22.0 (2021-11-03)"},{"location":"changelog/#version-0210-2021-10-18","text":"Unstable public release.","title":"Version 0.21.0 (2021-10-18)"},{"location":"changelog/#version-0200-2021-08-31","text":"Unstable public release. Breaking changes: Leases now use a different package Wisp Lease API is changing to handle explicit acquire/release on lease (#2113) Log on properties present in config yaml but not in object (#2118) Config now requires defaults for primitive types Move misk admin components to misk-admin (#2065) Reinstate WebActionExceptionMapper sending a response body based on the WebActionException\u2019s responseBody (#2050) New features and fixes: Add incr and incrBy operations to misk-redis (#2119) Add @fetch as a valid hibernate query annotation (#2112) When evaluating JSON LD feature flags, log unknown fields once (#2086) Make additional jooq configurations possible (#2078) Log a warning if health checks fail (#2063) Add support for double feature flags (#2029) Send gRPC errors properly (#1983) Bump log level for invalid access (#2024) misk-policy: To query specific paths, treat document path as urlencoded (#2030) Create LaunchDarkly in Wisp (#2088)","title":"Version 0.20.0 (2021-08-31)"},{"location":"changelog/#version-0190-2021-06-30","text":"Unstable public release.","title":"Version 0.19.0 (2021-06-30)"},{"location":"changelog/#version-0180-2021-06-28","text":"Unstable public release.","title":"Version 0.18.0 (2021-06-28)"},{"location":"changelog/#version-0171-2021-04-29","text":"Unstable public release.","title":"Version 0.17.1 (2021-04-29)"},{"location":"changelog/#version-0170-2021-04-28","text":"Unstable public release.","title":"Version 0.17.0 (2021-04-28)"},{"location":"changelog/#version-0160-2020-12-17","text":"Unstable public release.","title":"Version 0.16.0 (2020-12-17)"},{"location":"changelog/#version-0150-2020-12-03","text":"Unstable public release.","title":"Version 0.15.0 (2020-12-03)"},{"location":"changelog/#version-0140-2020-11-12","text":"Unstable public release.","title":"Version 0.14.0 (2020-11-12)"},{"location":"changelog/#version-0130-2020-07-16","text":"Unstable public release.","title":"Version 0.13.0 (2020-07-16)"},{"location":"changelog/#version-0120-2020-05-06","text":"Unstable public release.","title":"Version 0.12.0 (2020-05-06)"},{"location":"changelog/#version-0110-2020-02-25","text":"Unstable public release.","title":"Version 0.11.0 (2020-02-25)"},{"location":"changelog/#version-0100-2019-01-21","text":"Unstable public release.","title":"Version 0.10.0 (2019-01-21)"},{"location":"changelog/#version-090-2019-12-06","text":"Unstable public release.","title":"Version 0.9.0 (2019-12-06)"},{"location":"changelog/#version-080-2019-10-22","text":"Unstable public release.","title":"Version 0.8.0 (2019-10-22)"},{"location":"changelog/#version-070-2019-08-26","text":"Unstable public release.","title":"Version 0.7.0 (2019-08-26)"},{"location":"changelog/#version-025-2018-06-11","text":"","title":"Version 0.2.5 (2018-06-11)"},{"location":"changelog/#new","text":"Cluster interface and DataSourceCluster bindings Add a JPAEntityModule for binding entities for a DataSource Hook up raw Hibernate APIs Use JPA entity types in HibernateModule. Introduce FakeResourceLoader SchemaMigrator for running and tracking schema migrations. Update Misk version in Dockerfiles to 0.2.5 Drop support for unqualified datasources. move exemplars into sample directory in preparation for more of them Make all Kotlin warnings build errors Allow services to specify dependencies on other services. Fast fail on dependency cycles. jre8 was deprecated for kotlin 1.2 Early types for the Transacter APIs Queries in the Misk Hibernate API. Implement Query with dynamic proxies and reflection Offer strict validation and nice errors in ReflectionQueryFactory Log the reasons why liveness/readiness checks fail URL shortener sample Support more operators in Query Wire up Hibernate event listeners through Guice. HibernateTestingModule. Switch tests to MySQL Rollback transactions on exceptions Delete DataSourceModule. It\u2019s redundant with HibernateModule. Support ByteString columns Misk containers should not run as root DbTimestampedEntity","title":"New"},{"location":"changelog/#fix","text":"Don\u2019t inject until after services are started. Tidy up some test cases. Fix a missing dependency in exemplar Don\u2019t use KubernetesHealthCheck with LocalClusterConnector","title":"Fix"},{"location":"changelog/#version-024-2018-05-14","text":"","title":"Version 0.2.4 (2018-05-14)"},{"location":"changelog/#new_1","text":"Add support for protobuf over HTTP Cloudwatch Trail logging support Add retry() helper Add Backoff/ExponentialBackoff MiskCaller and authz support Adds a DataSourceModule Add support for logging to StackDriver","title":"New"},{"location":"changelog/#fix_1","text":"Move static resources from web root into resources Move web-specific NetworkInterceptor into web Remove use of instance metadata endpoints","title":"Fix"},{"location":"changelog/#version-023-2018-04-27","text":"","title":"Version 0.2.3 (2018-04-27)"},{"location":"changelog/#new_2","text":"Add kubernetes java client so that hosts can know their peers Use EventRouter for exemplarchat. Add a static resource mapper Create a cluster wide admin healthcheck page Change CacheBuilder to be mapOf since no concurrency Adds a healthcheck for the kubernetes client Adds a local cluster connector so that development functions","title":"New"},{"location":"changelog/#fix_2","text":"Don\u2019t treat assembly as a release when running in CI Fix tracing startup when none is configured Various event router fixes and refactorings","title":"Fix"},{"location":"changelog/#version-021-2018-03-26","text":"","title":"Version 0.2.1 (2018-03-26)"},{"location":"changelog/#new_3","text":"Remove unnecessary check from uploadArchives task (#149) Add a RELEASING.md to outline misk release process (#150) Move chat into its own example project. (#146) Introduce event router api (#147) Add basic frontend for exemplarchat Add MoshiJsonAdapters and SocketEventJsonAdapter (#151) Expose client certificates as action scoped vars (#141) Add ClusterMapper interface, refactor RealEventRouter to event loop (#155) Handle cluster changes (#156) More tests to exercise EventRouter behaviors. (#158) Support loading keystores from combined private key and certificate chain PEM files (#157)","title":"New"},{"location":"changelog/#fix_3","text":"Fix event router tests (#159)","title":"Fix"},{"location":"changelog/#version-020-2018-03-13","text":"","title":"Version 0.2.0 (2018-03-13)"},{"location":"changelog/#new_4","text":"Add _status action Split Interceptor into NetworkInterceptor and ApplicationInterceptor Introduce websocket support in misk Add tracing interceptor for web actions Add ActionExceptionLogLevelConfig to control log levels for ActionExceptions Allow binding an ExceptionMapper by an Exception type Google Cloud Datastore and Cloud Storage support Add backend for Zipkin tracer Add MiskTracer to facilitate ad-hoc method tracing Retrofit based typed client support (#112) Enable SSL for both clients and servers (#111) Support application/x-www-form-urlencoded parameters (#97) Add API for injecting dynamically sourced flags Add metrics backend for SignalFx Add support for commands Upgrade to Gradle 4.5 to support Java 9; add Java 9 to test matrix Allow customized exception mappings Add support for query strings in urls","title":"New"},{"location":"changelog/#fix_4","text":"Eliminate redundant _config suffix in config files Support Web actions that return Nothing Use proper snake-casing for default property names Fix Java path param dispatching Fix NotFoundAction handling (#134) Fix wildcard based content routing Fix a bug when a user-defined Interceptor returns a Response object Fix up Java translation from Moshi. (#107)","title":"Fix"},{"location":"changelog/#version-010-2018-02-01","text":"Initial release.","title":"Version 0.1.0 (2018-02-01)"},{"location":"clients/","text":"Clients \u00b6 Misk provides configurable HTTP clients built on top of OkHttp and Retrofit , and gRPC clients built on top of Wire . HTTP Clients \u00b6 Config \u00b6 Set up a Config object (and use MiskConfig.load to load config from a YAML file): data class MyServiceConfig ( val http_clients : HttpClientsConfig , // ... ) : Config In the configuration YAML, specify the target service\u2019s address: http_clients : ... endpoints : ... greeter : { url : \"https://hello.example.com\" } Create an OkHttpClient \u00b6 Use HttpClientModule : class MyClientModule : KAbstractModule () { override fun configure () { install ( HttpClientModule ( // Corresponds to the YAML config. Requires a bound HttpClientsConfig name = \"greeter\" , // Optional annotation to define how you inject your client dependency annotation = Names . named ( \"greeterHttp\" ) )) } } This binds an OkHttpClient that you can inject: class MyClient @Inject constructor ( @Named ( \"greeterHttp\" ) val client : OkHttpClient ) { fun callGreeter () { val response = client . newCall ( Request . Builder () . url ( \"http://localhost:8080/hello\" ) . build () ). execute () } } Create typed clients with Retrofit \u00b6 First, create a Retrofit interface. See the Retrofit docs for more details. interface GreeterApi { @POST ( \"/hello\" ) @Headers ( value = [ \"accept: application/json\" ] ) fun hello ( @Body request : HelloRequest ): Call < HelloResponse > } Next, install a TypedHttpClientModule with this interface. class HelloClientModule : KAbstractModule () { override fun configure () { install ( TypedHttpClientModule ( GreeterApi :: class , // Corresponds to the YAML config. Requires a bound HttpClientsConfig name = \"greeter\" , // Optional annotation to define how you inject your client dependency annotation = Names . named ( \"greeterApi\" ) ) ) } } Now you can inject an implementation of this client: @Singleton class MyApiClient @Inject constructor ( @Named ( \"greeterApi\" ) private val api : GreeterApi ) { fun hello ( message : String ): String { val response = api . hello ( HelloRequest ( message = message ) ). execute () } } gRPC Clients \u00b6 First, include the auto-generated gRPC client code at the caller module using the Wire Gradle plugin. plugins { id(\"com.squareup.wire\") } wire { sourcePath { srcDir(\"src/main/proto\") } // Generate Kotlin for the gRPC client API. kotlin { // Set this to false if you're generating client and server interfaces in one module exclusive = false includes (\"squareup.cash.hello.GreeterService\") rpcRole = \"client\" } java { } } Next, bind your client in code in a similar fashion to an HTTP client. Set up client configuration, as described in Config . Then, bind a GrpcClientModule : class GreeterClientModule : KAbstractModule () { override fun configure () { install ( GrpcClientModule . create < GreeterServiceClient , GrpcGreeterServiceClient > ( // Corresponds to the YAML config. Requires a bound HttpClientsConfig name = \"greeter\" , // Optional annotation to define how you inject your client dependency annotation = Names . named ( \"greeterGrpc\" ) )) } } With this all setup, you can now inject your client in source code and connect via gRPC: internal class GrpcGreeterServiceClient @Inject internal constructor ( @Named ( \"greeterGrpc\" ) private val greeterGrpc : GreeterServiceClient ) { fun get ( message : String ) { val response = greeterGrpc . Hello (). executeBlocking ( HelloRequest ( message )) // ... do something with the response here } }","title":"Clients"},{"location":"clients/#clients","text":"Misk provides configurable HTTP clients built on top of OkHttp and Retrofit , and gRPC clients built on top of Wire .","title":"Clients"},{"location":"clients/#http-clients","text":"","title":"HTTP Clients"},{"location":"clients/#config","text":"Set up a Config object (and use MiskConfig.load to load config from a YAML file): data class MyServiceConfig ( val http_clients : HttpClientsConfig , // ... ) : Config In the configuration YAML, specify the target service\u2019s address: http_clients : ... endpoints : ... greeter : { url : \"https://hello.example.com\" }","title":"Config"},{"location":"clients/#create-an-okhttpclient","text":"Use HttpClientModule : class MyClientModule : KAbstractModule () { override fun configure () { install ( HttpClientModule ( // Corresponds to the YAML config. Requires a bound HttpClientsConfig name = \"greeter\" , // Optional annotation to define how you inject your client dependency annotation = Names . named ( \"greeterHttp\" ) )) } } This binds an OkHttpClient that you can inject: class MyClient @Inject constructor ( @Named ( \"greeterHttp\" ) val client : OkHttpClient ) { fun callGreeter () { val response = client . newCall ( Request . Builder () . url ( \"http://localhost:8080/hello\" ) . build () ). execute () } }","title":"Create an OkHttpClient"},{"location":"clients/#create-typed-clients-with-retrofit","text":"First, create a Retrofit interface. See the Retrofit docs for more details. interface GreeterApi { @POST ( \"/hello\" ) @Headers ( value = [ \"accept: application/json\" ] ) fun hello ( @Body request : HelloRequest ): Call < HelloResponse > } Next, install a TypedHttpClientModule with this interface. class HelloClientModule : KAbstractModule () { override fun configure () { install ( TypedHttpClientModule ( GreeterApi :: class , // Corresponds to the YAML config. Requires a bound HttpClientsConfig name = \"greeter\" , // Optional annotation to define how you inject your client dependency annotation = Names . named ( \"greeterApi\" ) ) ) } } Now you can inject an implementation of this client: @Singleton class MyApiClient @Inject constructor ( @Named ( \"greeterApi\" ) private val api : GreeterApi ) { fun hello ( message : String ): String { val response = api . hello ( HelloRequest ( message = message ) ). execute () } }","title":"Create typed clients with Retrofit"},{"location":"clients/#grpc-clients","text":"First, include the auto-generated gRPC client code at the caller module using the Wire Gradle plugin. plugins { id(\"com.squareup.wire\") } wire { sourcePath { srcDir(\"src/main/proto\") } // Generate Kotlin for the gRPC client API. kotlin { // Set this to false if you're generating client and server interfaces in one module exclusive = false includes (\"squareup.cash.hello.GreeterService\") rpcRole = \"client\" } java { } } Next, bind your client in code in a similar fashion to an HTTP client. Set up client configuration, as described in Config . Then, bind a GrpcClientModule : class GreeterClientModule : KAbstractModule () { override fun configure () { install ( GrpcClientModule . create < GreeterServiceClient , GrpcGreeterServiceClient > ( // Corresponds to the YAML config. Requires a bound HttpClientsConfig name = \"greeter\" , // Optional annotation to define how you inject your client dependency annotation = Names . named ( \"greeterGrpc\" ) )) } } With this all setup, you can now inject your client in source code and connect via gRPC: internal class GrpcGreeterServiceClient @Inject internal constructor ( @Named ( \"greeterGrpc\" ) private val greeterGrpc : GreeterServiceClient ) { fun get ( message : String ) { val response = greeterGrpc . Hello (). executeBlocking ( HelloRequest ( message )) // ... do something with the response here } }","title":"gRPC Clients"},{"location":"contributing/","text":"Contributing \u00b6 If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) . Building Misk locally \u00b6 Use gradle to run all Kotlin tests locally: ./gradlew build misk-hibernate tests expect a mysql server running on localhost:3306 with no password set on the root user. You might stand up a server with a docker image, e.g. docker run -d --rm --name \"mysql-57\" -p 3306 :3306 -e MYSQL_ALLOW_EMPTY_PASSWORD = true -e MYSQL_LOG_CONSOLE = true mysql:5.7 --sql-mode = \"\" Breaking changes \u00b6 We use the Kotlin binary compatibility validator to check for API changes. If a change contains an API change and breaks the build, run the :apiDump task and commit the resulting changes to the .api files. .api files should not have removals and additions in the same change so that downstream apps do not immediately run into backwards-compatibility issues.","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#building-misk-locally","text":"Use gradle to run all Kotlin tests locally: ./gradlew build misk-hibernate tests expect a mysql server running on localhost:3306 with no password set on the root user. You might stand up a server with a docker image, e.g. docker run -d --rm --name \"mysql-57\" -p 3306 :3306 -e MYSQL_ALLOW_EMPTY_PASSWORD = true -e MYSQL_LOG_CONSOLE = true mysql:5.7 --sql-mode = \"\"","title":"Building Misk locally"},{"location":"contributing/#breaking-changes","text":"We use the Kotlin binary compatibility validator to check for API changes. If a change contains an API change and breaks the build, run the :apiDump task and commit the resulting changes to the .api files. .api files should not have removals and additions in the same change so that downstream apps do not immediately run into backwards-compatibility issues.","title":"Breaking changes"},{"location":"getting-started/","text":"Getting Started \u00b6 Misk is an application container for Kotlin. It provides libraries for common application concerns like serving endpoints, caching, queueing, persistence, distributed leasing, and clustering. The easiest way to get started is to copy the Misk exemplar project . This exemplar contains a Misk web app with the requisite dependencies. Start the service \u00b6 Run ExemplarService#main , or use gradle to run: ./gradlew run Set up bindings \u00b6 A Misk application is wired together using Guice . Features of Misk are managed by Guava Services , provided by Guice Modules , and configured using Misk Config s. For example, if your application needs a Redis cache, you would install RedisModule , and add a corresponding RedisConfig to your application\u2019s config YAML. Misk is unopinionated about which of its features your application chooses to use, and offers multiple alternatives for some common concerns. The main function \u00b6 The entry point to every Misk application is MiskApplication : fun main ( args : Array < String > ) { val environment = Environment . fromEnvironmentVariable () val env = Env ( environment . name ) val config = MiskConfig . load < ExemplarConfig > ( \"exemplar\" , env ) MiskApplication ( MiskRealServiceModule (), MiskWebModule ( config . web ), ExemplarAccessModule (), ExemplarWebActionsModule (), // e.g. to add an admin dashboard: AdminDashboardModule ( isDevelopment = true ) ). run ( args ) } Set up configuration \u00b6 Every Misk application has a top-level class that implements the Config marker interface. This Config encapsulates all of the configuration for the app. By default, configs are loaded from YAML files at the app\u2019s resources root. Each value in the config must have a corresponding entry in the YAML file. Modules in Misk that require configuration usually have their own Config objects. If you want to use the Module in your app, you should add them as properties of your app\u2019s Config object, for example: data class MyAppConfig ( val my_config_value : String , val http_clients : HttpClientsConfig ) : Config This then corresponds to a YAML file: my_config_value : \"this value\" http_clients : # ... config Config resolution \u00b6 Configs are loaded using the app\u2019s resource loader. The config loader looks for files in the following order by default: $SERVICE_NAME-common.yaml $SERVICE_NAME-$ENVIRONMENT.yaml At least one of $SERVICE_NAME-common.yaml or $SERVICE_NAME-$ENVIRONMENT.yaml must exist. Values from later files take precedence. Write an endpoint \u00b6 Actions are Misk\u2019s unit for an endpoint. Actions inherit from WebAction and have a @Get / @Post annotation: @Singleton class HelloWebAction @Inject constructor () : WebAction { @Get ( \"/hello/{name}\" ) @Unauthenticated @ResponseContentType ( MediaTypes . APPLICATION_JSON ) fun hello ( @PathParam name : String , ): HelloResponse { return HelloResponse ( name ) } } data class HelloResponse ( val name : String ) Read more about this in Actions . Test the endpoint \u00b6 You can unit test directly: class HelloWebActionTest { @Test fun `tests the unit` () { assertThat ( HelloWebAction (). hello ( \"sandy\" , headersOf (), null , null )) . isEqualTo ( HelloResponse ( \"sandy\" )) } } Integration tests set up a module for you, and adds an injector to the test class. You can use WebServerTestingModule to set up a running web server and make WebTestClient available. @MiskTest ( startService = true ) class HelloWebActionTest { @MiskTestModule val module = TestModule () @Inject private lateinit var webTestClient : WebTestClient @Test fun `tests a request being made` () { val hello = webTestClient . get ( \"/hello/sandy\" ) assertThat ( hello . response . code ). isEqualTo ( 200 ) assertThat ( hello . parseJson < HelloResponse > ()) . isEqualTo ( HelloResponse ( \"sandy\" )) } class TestModule : KAbstractModule () { override fun configure () { install ( WebServerTestingModule ()) install ( HelloModule ()) } } } Read more about this in Actions Create services \u00b6 The main function is just an entry point for wiring together components of Misk. Long-running threads that do the real work are written as Services using Guava\u2019s Service Framework . A Service is bound by installing a ServiceModule , for example: class MyServiceModule : KAbstractModule () { override fun configure () { install ( ServiceModule < MyService > ()) } } Notice that in this examplewe use KAbstractModule() , Misk\u2019s Kotlin wrapper for AbstractModule , as our base Module class. MiskApplication will start all services installed by a ServiceModule . If there is a Service that must be run after a other set of Services have started, the service dependency graph should be specified at the installation site. For example, if you are operating a movie service, which needs a database: class MovieServiceModule : KAbstractModule () { override fun configure () { // Note that DatabaseService does not have to be installed here. // It could be installed in another KAbstractModule if preferred. install ( ServiceModule < DatabaseService > ()) // Multiple dependencies can be added by chaining calls to `dependsOn`. install ( ServiceModule < MovieService > () . dependsOn < DatabaseService > ()) } } See ServiceModule for more details about the service graph. When writing Services , always prefer to inherit from one of the common base classes: AbstractIdleService , AbstractScheduledService , or AbstractExecutionThreadService . See Services Explained for details. If your service is can make use of exponential backoff and scheduling, take a look at using RepeatedTaskQueue .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Misk is an application container for Kotlin. It provides libraries for common application concerns like serving endpoints, caching, queueing, persistence, distributed leasing, and clustering. The easiest way to get started is to copy the Misk exemplar project . This exemplar contains a Misk web app with the requisite dependencies.","title":"Getting Started"},{"location":"getting-started/#start-the-service","text":"Run ExemplarService#main , or use gradle to run: ./gradlew run","title":"Start the service"},{"location":"getting-started/#set-up-bindings","text":"A Misk application is wired together using Guice . Features of Misk are managed by Guava Services , provided by Guice Modules , and configured using Misk Config s. For example, if your application needs a Redis cache, you would install RedisModule , and add a corresponding RedisConfig to your application\u2019s config YAML. Misk is unopinionated about which of its features your application chooses to use, and offers multiple alternatives for some common concerns.","title":"Set up bindings"},{"location":"getting-started/#the-main-function","text":"The entry point to every Misk application is MiskApplication : fun main ( args : Array < String > ) { val environment = Environment . fromEnvironmentVariable () val env = Env ( environment . name ) val config = MiskConfig . load < ExemplarConfig > ( \"exemplar\" , env ) MiskApplication ( MiskRealServiceModule (), MiskWebModule ( config . web ), ExemplarAccessModule (), ExemplarWebActionsModule (), // e.g. to add an admin dashboard: AdminDashboardModule ( isDevelopment = true ) ). run ( args ) }","title":"The main function"},{"location":"getting-started/#set-up-configuration","text":"Every Misk application has a top-level class that implements the Config marker interface. This Config encapsulates all of the configuration for the app. By default, configs are loaded from YAML files at the app\u2019s resources root. Each value in the config must have a corresponding entry in the YAML file. Modules in Misk that require configuration usually have their own Config objects. If you want to use the Module in your app, you should add them as properties of your app\u2019s Config object, for example: data class MyAppConfig ( val my_config_value : String , val http_clients : HttpClientsConfig ) : Config This then corresponds to a YAML file: my_config_value : \"this value\" http_clients : # ... config","title":"Set up configuration"},{"location":"getting-started/#config-resolution","text":"Configs are loaded using the app\u2019s resource loader. The config loader looks for files in the following order by default: $SERVICE_NAME-common.yaml $SERVICE_NAME-$ENVIRONMENT.yaml At least one of $SERVICE_NAME-common.yaml or $SERVICE_NAME-$ENVIRONMENT.yaml must exist. Values from later files take precedence.","title":"Config resolution"},{"location":"getting-started/#write-an-endpoint","text":"Actions are Misk\u2019s unit for an endpoint. Actions inherit from WebAction and have a @Get / @Post annotation: @Singleton class HelloWebAction @Inject constructor () : WebAction { @Get ( \"/hello/{name}\" ) @Unauthenticated @ResponseContentType ( MediaTypes . APPLICATION_JSON ) fun hello ( @PathParam name : String , ): HelloResponse { return HelloResponse ( name ) } } data class HelloResponse ( val name : String ) Read more about this in Actions .","title":"Write an endpoint"},{"location":"getting-started/#test-the-endpoint","text":"You can unit test directly: class HelloWebActionTest { @Test fun `tests the unit` () { assertThat ( HelloWebAction (). hello ( \"sandy\" , headersOf (), null , null )) . isEqualTo ( HelloResponse ( \"sandy\" )) } } Integration tests set up a module for you, and adds an injector to the test class. You can use WebServerTestingModule to set up a running web server and make WebTestClient available. @MiskTest ( startService = true ) class HelloWebActionTest { @MiskTestModule val module = TestModule () @Inject private lateinit var webTestClient : WebTestClient @Test fun `tests a request being made` () { val hello = webTestClient . get ( \"/hello/sandy\" ) assertThat ( hello . response . code ). isEqualTo ( 200 ) assertThat ( hello . parseJson < HelloResponse > ()) . isEqualTo ( HelloResponse ( \"sandy\" )) } class TestModule : KAbstractModule () { override fun configure () { install ( WebServerTestingModule ()) install ( HelloModule ()) } } } Read more about this in Actions","title":"Test the endpoint"},{"location":"getting-started/#create-services","text":"The main function is just an entry point for wiring together components of Misk. Long-running threads that do the real work are written as Services using Guava\u2019s Service Framework . A Service is bound by installing a ServiceModule , for example: class MyServiceModule : KAbstractModule () { override fun configure () { install ( ServiceModule < MyService > ()) } } Notice that in this examplewe use KAbstractModule() , Misk\u2019s Kotlin wrapper for AbstractModule , as our base Module class. MiskApplication will start all services installed by a ServiceModule . If there is a Service that must be run after a other set of Services have started, the service dependency graph should be specified at the installation site. For example, if you are operating a movie service, which needs a database: class MovieServiceModule : KAbstractModule () { override fun configure () { // Note that DatabaseService does not have to be installed here. // It could be installed in another KAbstractModule if preferred. install ( ServiceModule < DatabaseService > ()) // Multiple dependencies can be added by chaining calls to `dependsOn`. install ( ServiceModule < MovieService > () . dependsOn < DatabaseService > ()) } } See ServiceModule for more details about the service graph. When writing Services , always prefer to inherit from one of the common base classes: AbstractIdleService , AbstractScheduledService , or AbstractExecutionThreadService . See Services Explained for details. If your service is can make use of exponential backoff and scheduling, take a look at using RepeatedTaskQueue .","title":"Create services"},{"location":"releasing-manual/","text":"Manual Releasing Steps \u00b6 These should generally not be needed but are kept here for posterity. The CI auto-releasing in Github Actions should be sufficient, and is documented in the Releasing doc. Prerequisite: Sonatype (Maven Central) Account \u00b6 Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for misk projects. Prerequisite: GPG Keys \u00b6 Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX Prerequisite: Gradle Properties \u00b6 Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg Cutting a Release \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"com.squareup.misk:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.misk:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` miskweb ci-build -e ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a misk-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Manual Releasing"},{"location":"releasing-manual/#manual-releasing-steps","text":"These should generally not be needed but are kept here for posterity. The CI auto-releasing in Github Actions should be sufficient, and is documented in the Releasing doc.","title":"Manual Releasing Steps"},{"location":"releasing-manual/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for misk projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing-manual/#prerequisite-gpg-keys","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX","title":"Prerequisite: GPG Keys"},{"location":"releasing-manual/#prerequisite-gradle-properties","text":"Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Prerequisite: Gradle Properties"},{"location":"releasing-manual/#cutting-a-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"com.squareup.misk:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.misk:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` miskweb ci-build -e ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a misk-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Cutting a Release"},{"location":"releasing/","text":"Releasing \u00b6 Checkout a new branch. Update CHANGELOG.md . Set versions: export RELEASE_VERSION=A.B.C export NEXT_VERSION=A.B.D-SNAPSHOT Update documentation and Gradle properties with RELEASE_VERSION sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"com.squareup.misk:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.misk:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -maxdepth 2 -name \"README.md\"` Tag the release and push to GitHub. Submit and merge PR. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a misk-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" git push && git push --tags Trigger the \u201cPublish a release\u201d action manually. Wait until it completes, then visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! In a new branch, prepare for the next release and push to GitHub. Submit and merge PR. sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push Draft a new release of A.B.C to trigger the \u201cPublish the mkdocs to gh-pages\u201d action. Troubleshooting \u00b6 If the github action fails, drop the artifacts from Sonatype and re run the job. You might need to delete the plugin off the JetBrains plugin portal first if the ubuntu job which publishes it already succeeded.","title":"Releasing"},{"location":"releasing/#releasing","text":"Checkout a new branch. Update CHANGELOG.md . Set versions: export RELEASE_VERSION=A.B.C export NEXT_VERSION=A.B.D-SNAPSHOT Update documentation and Gradle properties with RELEASE_VERSION sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"com.squareup.misk:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.misk:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -maxdepth 2 -name \"README.md\"` Tag the release and push to GitHub. Submit and merge PR. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a misk-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" git push && git push --tags Trigger the \u201cPublish a release\u201d action manually. Wait until it completes, then visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! In a new branch, prepare for the next release and push to GitHub. Submit and merge PR. sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push Draft a new release of A.B.C to trigger the \u201cPublish the mkdocs to gh-pages\u201d action.","title":"Releasing"},{"location":"releasing/#troubleshooting","text":"If the github action fails, drop the artifacts from Sonatype and re run the job. You might need to delete the plugin off the JetBrains plugin portal first if the ubuntu job which publishes it already succeeded.","title":"Troubleshooting"},{"location":"testing/","text":"Testing \u00b6 Misk provides a few ways to streamline testing with JUnit. Without Misk, you would instantiate units under test and their dependencies: class FeatureWithoutMiskTest { @Test fun `tests something` () { val repository = MyRepository () val handler = MyHandler ( repository ) // ... perform assertions } } Using @MiskTest \u00b6 @MiskTest will stand up a Misk app given a provided module and then inject members onto the test class. For instance, with a test that looks like this: @MiskTest ( startService = true ) class HelloWebIntegrationTest { @MiskTestModule val module = MyTestingModule () @Inject lateinit var myHandler : MyHandler @Test fun `makes a call to the service` () { // use myHandler... } } class MyTestingModule : KAbstractModule () { override fun configure () { // add modules, declare bindings... } } @MiskTest signals to JUnit to honour the other annotations. @MiskTestModule declares which module to use to perform the tests in this class. This module (or a sub-module under it) should have a binding for MyHandler , which gets injected in the test class. Next steps \u00b6 Some common domains to test: Testing actions","title":"Testing"},{"location":"testing/#testing","text":"Misk provides a few ways to streamline testing with JUnit. Without Misk, you would instantiate units under test and their dependencies: class FeatureWithoutMiskTest { @Test fun `tests something` () { val repository = MyRepository () val handler = MyHandler ( repository ) // ... perform assertions } }","title":"Testing"},{"location":"testing/#using-misktest","text":"@MiskTest will stand up a Misk app given a provided module and then inject members onto the test class. For instance, with a test that looks like this: @MiskTest ( startService = true ) class HelloWebIntegrationTest { @MiskTestModule val module = MyTestingModule () @Inject lateinit var myHandler : MyHandler @Test fun `makes a call to the service` () { // use myHandler... } } class MyTestingModule : KAbstractModule () { override fun configure () { // add modules, declare bindings... } } @MiskTest signals to JUnit to honour the other annotations. @MiskTestModule declares which module to use to perform the tests in this class. This module (or a sub-module under it) should have a binding for MyHandler , which gets injected in the test class.","title":"Using @MiskTest"},{"location":"testing/#next-steps","text":"Some common domains to test: Testing actions","title":"Next steps"},{"location":"0.x/","text":"// exemplarchat exemplarchat \u00b6 Packages \u00b6 Name com.squareup.chat com.squareup.chat.actions com.squareup.chat.healthchecks","title":"exemplarchat - Misk"},{"location":"0.x/#exemplarchat","text":"","title":"exemplarchat"},{"location":"0.x/#packages","text":"Name com.squareup.chat com.squareup.chat.actions com.squareup.chat.healthchecks","title":"Packages"},{"location":"0.x/exemplar/com.squareup.exemplar/","text":"// exemplar / com.squareup.exemplar Package com.squareup.exemplar \u00b6 Types \u00b6 Name Summary DashboardModule [jvm] class DashboardModule : KAbstractModule ExemplarAccessModule [jvm] class ExemplarAccessModule : KAbstractModule ExemplarConfig [jvm] data class ExemplarConfig (web: WebConfig, prometheus: PrometheusConfig) : Config ExemplarJavaApp [jvm] open class ExemplarJavaApp ExemplarJavaConfig [jvm] open class ExemplarJavaConfig : Config ExemplarJavaModule [jvm] open class ExemplarJavaModule : AbstractModule ExemplarWebActionsModule [jvm] class ExemplarWebActionsModule : KAbstractModule HelloJavaAction [jvm] @Singleton open class HelloJavaAction : WebAction Functions \u00b6 Name Summary main [jvm] fun main (args: Array < String >)","title":"Package com.squareup.exemplar - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/#package-comsquareupexemplar","text":"","title":"Package com.squareup.exemplar"},{"location":"0.x/exemplar/com.squareup.exemplar/#types","text":"Name Summary DashboardModule [jvm] class DashboardModule : KAbstractModule ExemplarAccessModule [jvm] class ExemplarAccessModule : KAbstractModule ExemplarConfig [jvm] data class ExemplarConfig (web: WebConfig, prometheus: PrometheusConfig) : Config ExemplarJavaApp [jvm] open class ExemplarJavaApp ExemplarJavaConfig [jvm] open class ExemplarJavaConfig : Config ExemplarJavaModule [jvm] open class ExemplarJavaModule : AbstractModule ExemplarWebActionsModule [jvm] class ExemplarWebActionsModule : KAbstractModule HelloJavaAction [jvm] @Singleton open class HelloJavaAction : WebAction","title":"Types"},{"location":"0.x/exemplar/com.squareup.exemplar/#functions","text":"Name Summary main [jvm] fun main (args: Array < String >)","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar/main/","text":"// exemplar / com.squareup.exemplar / main main \u00b6 [jvm]\\ fun main (args: Array < String >)","title":"main - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/main/#main","text":"[jvm]\\ fun main (args: Array < String >)","title":"main"},{"location":"0.x/exemplar/com.squareup.exemplar/-dashboard-module/","text":"// exemplar / com.squareup.exemplar / DashboardModule DashboardModule \u00b6 [jvm]\\ class DashboardModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"DashboardModule - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-dashboard-module/#dashboardmodule","text":"[jvm]\\ class DashboardModule : KAbstractModule","title":"DashboardModule"},{"location":"0.x/exemplar/com.squareup.exemplar/-dashboard-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar/-dashboard-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar/-dashboard-module/-dashboard-module/","text":"// exemplar / com.squareup.exemplar / DashboardModule / DashboardModule DashboardModule \u00b6 [jvm]\\ fun DashboardModule ()","title":"DashboardModule - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-dashboard-module/-dashboard-module/#dashboardmodule","text":"[jvm]\\ fun DashboardModule ()","title":"DashboardModule"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-access-module/","text":"// exemplar / com.squareup.exemplar / ExemplarAccessModule ExemplarAccessModule \u00b6 [jvm]\\ class ExemplarAccessModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ExemplarAccessModule - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-access-module/#exemplaraccessmodule","text":"[jvm]\\ class ExemplarAccessModule : KAbstractModule","title":"ExemplarAccessModule"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-access-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-access-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-access-module/-exemplar-access-module/","text":"// exemplar / com.squareup.exemplar / ExemplarAccessModule / ExemplarAccessModule ExemplarAccessModule \u00b6 [jvm]\\ fun ExemplarAccessModule ()","title":"ExemplarAccessModule - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-access-module/-exemplar-access-module/#exemplaraccessmodule","text":"[jvm]\\ fun ExemplarAccessModule ()","title":"ExemplarAccessModule"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/","text":"// exemplar / com.squareup.exemplar / ExemplarConfig ExemplarConfig \u00b6 [jvm]\\ data class ExemplarConfig (web: WebConfig, prometheus: PrometheusConfig) : Config Properties \u00b6 Name Summary prometheus [jvm] val prometheus : PrometheusConfig web [jvm] val web : WebConfig","title":"ExemplarConfig - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/#exemplarconfig","text":"[jvm]\\ data class ExemplarConfig (web: WebConfig, prometheus: PrometheusConfig) : Config","title":"ExemplarConfig"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/#properties","text":"Name Summary prometheus [jvm] val prometheus : PrometheusConfig web [jvm] val web : WebConfig","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/-exemplar-config/","text":"// exemplar / com.squareup.exemplar / ExemplarConfig / ExemplarConfig ExemplarConfig \u00b6 [jvm]\\ fun ExemplarConfig (web: WebConfig, prometheus: PrometheusConfig)","title":"ExemplarConfig - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/-exemplar-config/#exemplarconfig","text":"[jvm]\\ fun ExemplarConfig (web: WebConfig, prometheus: PrometheusConfig)","title":"ExemplarConfig"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/prometheus/","text":"// exemplar / com.squareup.exemplar / ExemplarConfig / prometheus prometheus \u00b6 [jvm]\\ val prometheus : PrometheusConfig","title":"prometheus - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/prometheus/#prometheus","text":"[jvm]\\ val prometheus : PrometheusConfig","title":"prometheus"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/web/","text":"// exemplar / com.squareup.exemplar / ExemplarConfig / web web \u00b6 [jvm]\\ val web : WebConfig","title":"web - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-config/web/#web","text":"[jvm]\\ val web : WebConfig","title":"web"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-app/","text":"// exemplar / com.squareup.exemplar / ExemplarJavaApp ExemplarJavaApp \u00b6 [jvm]\\ open class ExemplarJavaApp Functions \u00b6 Name Summary main [jvm] open fun main (args: Array < String >)","title":"ExemplarJavaApp - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-app/#exemplarjavaapp","text":"[jvm]\\ open class ExemplarJavaApp","title":"ExemplarJavaApp"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-app/#functions","text":"Name Summary main [jvm] open fun main (args: Array < String >)","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-app/main/","text":"// exemplar / com.squareup.exemplar / ExemplarJavaApp / main main \u00b6 [jvm]\\ open fun main (args: Array < String >)","title":"main - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-app/main/#main","text":"[jvm]\\ open fun main (args: Array < String >)","title":"main"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-config/","text":"// exemplar / com.squareup.exemplar / ExemplarJavaConfig ExemplarJavaConfig \u00b6 [jvm]\\ open class ExemplarJavaConfig : Config Properties \u00b6 Name Summary web [jvm] open val web : WebConfig","title":"ExemplarJavaConfig - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-config/#exemplarjavaconfig","text":"[jvm]\\ open class ExemplarJavaConfig : Config","title":"ExemplarJavaConfig"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-config/#properties","text":"Name Summary web [jvm] open val web : WebConfig","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-config/web/","text":"// exemplar / com.squareup.exemplar / ExemplarJavaConfig / web web \u00b6 [jvm]\\ open val web : WebConfig","title":"web - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-config/web/#web","text":"[jvm]\\ open val web : WebConfig","title":"web"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-module/","text":"// exemplar / com.squareup.exemplar / ExemplarJavaModule ExemplarJavaModule \u00b6 [jvm]\\ open class ExemplarJavaModule : AbstractModule Functions \u00b6 Name Summary configure [jvm] fun configure (builder: Binder)","title":"ExemplarJavaModule - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-module/#exemplarjavamodule","text":"[jvm]\\ open class ExemplarJavaModule : AbstractModule","title":"ExemplarJavaModule"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-java-module/#functions","text":"Name Summary configure [jvm] fun configure (builder: Binder)","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-web-actions-module/","text":"// exemplar / com.squareup.exemplar / ExemplarWebActionsModule ExemplarWebActionsModule \u00b6 [jvm]\\ class ExemplarWebActionsModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ExemplarWebActionsModule - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-web-actions-module/#exemplarwebactionsmodule","text":"[jvm]\\ class ExemplarWebActionsModule : KAbstractModule","title":"ExemplarWebActionsModule"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-web-actions-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-web-actions-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-web-actions-module/-exemplar-web-actions-module/","text":"// exemplar / com.squareup.exemplar / ExemplarWebActionsModule / ExemplarWebActionsModule ExemplarWebActionsModule \u00b6 [jvm]\\ fun ExemplarWebActionsModule ()","title":"ExemplarWebActionsModule - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-exemplar-web-actions-module/-exemplar-web-actions-module/#exemplarwebactionsmodule","text":"[jvm]\\ fun ExemplarWebActionsModule ()","title":"ExemplarWebActionsModule"},{"location":"0.x/exemplar/com.squareup.exemplar/-hello-java-action/","text":"// exemplar / com.squareup.exemplar / HelloJavaAction HelloJavaAction \u00b6 [jvm]\\ @Singleton open class HelloJavaAction : WebAction Functions \u00b6 Name Summary hello [jvm] open fun hello (name: String , headers: Headers): HelloJavaAction.HelloJavaResponse","title":"HelloJavaAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-hello-java-action/#hellojavaaction","text":"[jvm]\\ @Singleton open class HelloJavaAction : WebAction","title":"HelloJavaAction"},{"location":"0.x/exemplar/com.squareup.exemplar/-hello-java-action/#functions","text":"Name Summary hello [jvm] open fun hello (name: String , headers: Headers): HelloJavaAction.HelloJavaResponse","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar/-hello-java-action/hello/","text":"// exemplar / com.squareup.exemplar / HelloJavaAction / hello hello \u00b6 [jvm]\\ open fun hello (name: String , headers: Headers): HelloJavaAction.HelloJavaResponse","title":"hello - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar/-hello-java-action/hello/#hello","text":"[jvm]\\ open fun hello (name: String , headers: Headers): HelloJavaAction.HelloJavaResponse","title":"hello"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/","text":"// exemplar / com.squareup.exemplar.actions Package com.squareup.exemplar.actions \u00b6 Types \u00b6 Name Summary EchoFormAction [jvm] @Singleton class EchoFormAction @Injectconstructor : WebAction HelloPostResponse [jvm] data class HelloPostResponse (greeting: String , name: String ) HelloResponse [jvm] data class HelloResponse (greeting: String , name: String ) HelloWebAction [jvm] @Singleton class HelloWebAction @Injectconstructor : WebAction HelloWebPostAction [jvm] @Singleton class HelloWebPostAction @Injectconstructor : WebAction HelloWebProtoAction [jvm] class HelloWebProtoAction @Injectconstructor : WebAction PostBody [jvm] data class PostBody (greeting: String )","title":"Package com.squareup.exemplar.actions - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/#package-comsquareupexemplaractions","text":"","title":"Package com.squareup.exemplar.actions"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/#types","text":"Name Summary EchoFormAction [jvm] @Singleton class EchoFormAction @Injectconstructor : WebAction HelloPostResponse [jvm] data class HelloPostResponse (greeting: String , name: String ) HelloResponse [jvm] data class HelloResponse (greeting: String , name: String ) HelloWebAction [jvm] @Singleton class HelloWebAction @Injectconstructor : WebAction HelloWebPostAction [jvm] @Singleton class HelloWebPostAction @Injectconstructor : WebAction HelloWebProtoAction [jvm] class HelloWebProtoAction @Injectconstructor : WebAction PostBody [jvm] data class PostBody (greeting: String )","title":"Types"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction EchoFormAction \u00b6 [jvm]\\ @Singleton class EchoFormAction @Injectconstructor : WebAction Types \u00b6 Name Summary Form [jvm] data class Form (string: String , int: Int , nullable: String ?, optional: String , list: List < String >) Functions \u00b6 Name Summary echo [jvm] fun echo (form: EchoFormAction.Form ): EchoFormAction.Form","title":"EchoFormAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/#echoformaction","text":"[jvm]\\ @Singleton class EchoFormAction @Injectconstructor : WebAction","title":"EchoFormAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/#types","text":"Name Summary Form [jvm] data class Form (string: String , int: Int , nullable: String ?, optional: String , list: List < String >)","title":"Types"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/#functions","text":"Name Summary echo [jvm] fun echo (form: EchoFormAction.Form ): EchoFormAction.Form","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-echo-form-action/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / EchoFormAction EchoFormAction \u00b6 [jvm]\\ @Inject fun EchoFormAction ()","title":"EchoFormAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-echo-form-action/#echoformaction","text":"[jvm]\\ @Inject fun EchoFormAction ()","title":"EchoFormAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/echo/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / echo echo \u00b6 [jvm]\\ fun echo (form: EchoFormAction.Form ): EchoFormAction.Form","title":"echo - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/echo/#echo","text":"[jvm]\\ fun echo (form: EchoFormAction.Form ): EchoFormAction.Form","title":"echo"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / Form Form \u00b6 [jvm]\\ data class Form (string: String , int: Int , nullable: String ?, optional: String , list: List < String >) Properties \u00b6 Name Summary int [jvm] val int : Int list [jvm] val list : List < String > nullable [jvm] val nullable : String ? optional [jvm] val optional : String string [jvm] val string : String","title":"Form - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/#form","text":"[jvm]\\ data class Form (string: String , int: Int , nullable: String ?, optional: String , list: List < String >)","title":"Form"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/#properties","text":"Name Summary int [jvm] val int : Int list [jvm] val list : List < String > nullable [jvm] val nullable : String ? optional [jvm] val optional : String string [jvm] val string : String","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/-form/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / Form / Form Form \u00b6 [jvm]\\ fun Form (string: String , int: Int , nullable: String ?, optional: String = \u201coptional\u201d, list: List < String >)","title":"Form - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/-form/#form","text":"[jvm]\\ fun Form (string: String , int: Int , nullable: String ?, optional: String = \u201coptional\u201d, list: List < String >)","title":"Form"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/int/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / Form / int int \u00b6 [jvm]\\ val int : Int","title":"int - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/int/#int","text":"[jvm]\\ val int : Int","title":"int"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/list/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / Form / list list \u00b6 [jvm]\\ val list : List < String >","title":"list - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/list/#list","text":"[jvm]\\ val list : List < String >","title":"list"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/nullable/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / Form / nullable nullable \u00b6 [jvm]\\ val nullable : String ?","title":"nullable - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/nullable/#nullable","text":"[jvm]\\ val nullable : String ?","title":"nullable"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/optional/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / Form / optional optional \u00b6 [jvm]\\ val optional : String","title":"optional - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/optional/#optional","text":"[jvm]\\ val optional : String","title":"optional"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/string/","text":"// exemplar / com.squareup.exemplar.actions / EchoFormAction / Form / string string \u00b6 [jvm]\\ val string : String","title":"string - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-echo-form-action/-form/string/#string","text":"[jvm]\\ val string : String","title":"string"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/","text":"// exemplar / com.squareup.exemplar.actions / HelloPostResponse HelloPostResponse \u00b6 [jvm]\\ data class HelloPostResponse (greeting: String , name: String ) Properties \u00b6 Name Summary greeting [jvm] val greeting : String name [jvm] val name : String","title":"HelloPostResponse - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/#hellopostresponse","text":"[jvm]\\ data class HelloPostResponse (greeting: String , name: String )","title":"HelloPostResponse"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/#properties","text":"Name Summary greeting [jvm] val greeting : String name [jvm] val name : String","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/-hello-post-response/","text":"// exemplar / com.squareup.exemplar.actions / HelloPostResponse / HelloPostResponse HelloPostResponse \u00b6 [jvm]\\ fun HelloPostResponse (greeting: String , name: String )","title":"HelloPostResponse - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/-hello-post-response/#hellopostresponse","text":"[jvm]\\ fun HelloPostResponse (greeting: String , name: String )","title":"HelloPostResponse"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/greeting/","text":"// exemplar / com.squareup.exemplar.actions / HelloPostResponse / greeting greeting \u00b6 [jvm]\\ val greeting : String","title":"greeting - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/greeting/#greeting","text":"[jvm]\\ val greeting : String","title":"greeting"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/name/","text":"// exemplar / com.squareup.exemplar.actions / HelloPostResponse / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-post-response/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/","text":"// exemplar / com.squareup.exemplar.actions / HelloResponse HelloResponse \u00b6 [jvm]\\ data class HelloResponse (greeting: String , name: String ) Properties \u00b6 Name Summary greeting [jvm] val greeting : String name [jvm] val name : String","title":"HelloResponse - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/#helloresponse","text":"[jvm]\\ data class HelloResponse (greeting: String , name: String )","title":"HelloResponse"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/#properties","text":"Name Summary greeting [jvm] val greeting : String name [jvm] val name : String","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/-hello-response/","text":"// exemplar / com.squareup.exemplar.actions / HelloResponse / HelloResponse HelloResponse \u00b6 [jvm]\\ fun HelloResponse (greeting: String , name: String )","title":"HelloResponse - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/-hello-response/#helloresponse","text":"[jvm]\\ fun HelloResponse (greeting: String , name: String )","title":"HelloResponse"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/greeting/","text":"// exemplar / com.squareup.exemplar.actions / HelloResponse / greeting greeting \u00b6 [jvm]\\ val greeting : String","title":"greeting - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/greeting/#greeting","text":"[jvm]\\ val greeting : String","title":"greeting"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/name/","text":"// exemplar / com.squareup.exemplar.actions / HelloResponse / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-response/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-action/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebAction HelloWebAction \u00b6 [jvm]\\ @Singleton class HelloWebAction @Injectconstructor : WebAction Functions \u00b6 Name Summary hello [jvm] fun hello (name: String , headers: Headers, nickName: String ?, greetings: List < String >?): HelloResponse","title":"HelloWebAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-action/#hellowebaction","text":"[jvm]\\ @Singleton class HelloWebAction @Injectconstructor : WebAction","title":"HelloWebAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-action/#functions","text":"Name Summary hello [jvm] fun hello (name: String , headers: Headers, nickName: String ?, greetings: List < String >?): HelloResponse","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-action/-hello-web-action/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebAction / HelloWebAction HelloWebAction \u00b6 [jvm]\\ @Inject fun HelloWebAction ()","title":"HelloWebAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-action/-hello-web-action/#hellowebaction","text":"[jvm]\\ @Inject fun HelloWebAction ()","title":"HelloWebAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-action/hello/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebAction / hello hello \u00b6 [jvm]\\ fun hello (name: String , headers: Headers, nickName: String ?, greetings: List < String >?): HelloResponse","title":"hello - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-action/hello/#hello","text":"[jvm]\\ fun hello (name: String , headers: Headers, nickName: String ?, greetings: List < String >?): HelloResponse","title":"hello"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-post-action/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebPostAction HelloWebPostAction \u00b6 [jvm]\\ @Singleton class HelloWebPostAction @Injectconstructor : WebAction Functions \u00b6 Name Summary hello [jvm] fun hello (name: String , body: PostBody ): HelloPostResponse","title":"HelloWebPostAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-post-action/#hellowebpostaction","text":"[jvm]\\ @Singleton class HelloWebPostAction @Injectconstructor : WebAction","title":"HelloWebPostAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-post-action/#functions","text":"Name Summary hello [jvm] fun hello (name: String , body: PostBody ): HelloPostResponse","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-post-action/-hello-web-post-action/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebPostAction / HelloWebPostAction HelloWebPostAction \u00b6 [jvm]\\ @Inject fun HelloWebPostAction ()","title":"HelloWebPostAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-post-action/-hello-web-post-action/#hellowebpostaction","text":"[jvm]\\ @Inject fun HelloWebPostAction ()","title":"HelloWebPostAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-post-action/hello/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebPostAction / hello hello \u00b6 [jvm]\\ fun hello (name: String , body: PostBody ): HelloPostResponse","title":"hello - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-post-action/hello/#hello","text":"[jvm]\\ fun hello (name: String , body: PostBody ): HelloPostResponse","title":"hello"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-proto-action/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebProtoAction HelloWebProtoAction \u00b6 [jvm]\\ class HelloWebProtoAction @Injectconstructor : WebAction Functions \u00b6 Name Summary hello [jvm] fun hello (request: <ERROR CLASS>): Response<<ERROR CLASS>>","title":"HelloWebProtoAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-proto-action/#hellowebprotoaction","text":"[jvm]\\ class HelloWebProtoAction @Injectconstructor : WebAction","title":"HelloWebProtoAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-proto-action/#functions","text":"Name Summary hello [jvm] fun hello (request: <ERROR CLASS>): Response<<ERROR CLASS>>","title":"Functions"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-proto-action/-hello-web-proto-action/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebProtoAction / HelloWebProtoAction HelloWebProtoAction \u00b6 [jvm]\\ @Inject fun HelloWebProtoAction ()","title":"HelloWebProtoAction - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-proto-action/-hello-web-proto-action/#hellowebprotoaction","text":"[jvm]\\ @Inject fun HelloWebProtoAction ()","title":"HelloWebProtoAction"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-proto-action/hello/","text":"// exemplar / com.squareup.exemplar.actions / HelloWebProtoAction / hello hello \u00b6 [jvm]\\ fun hello (request: <ERROR CLASS>): Response<<ERROR CLASS>>","title":"hello - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-hello-web-proto-action/hello/#hello","text":"[jvm]\\ fun hello (request: <ERROR CLASS>): Response<<ERROR CLASS>>","title":"hello"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-post-body/","text":"// exemplar / com.squareup.exemplar.actions / PostBody PostBody \u00b6 [jvm]\\ data class PostBody (greeting: String ) Properties \u00b6 Name Summary greeting [jvm] val greeting : String","title":"PostBody - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-post-body/#postbody","text":"[jvm]\\ data class PostBody (greeting: String )","title":"PostBody"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-post-body/#properties","text":"Name Summary greeting [jvm] val greeting : String","title":"Properties"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-post-body/-post-body/","text":"// exemplar / com.squareup.exemplar.actions / PostBody / PostBody PostBody \u00b6 [jvm]\\ fun PostBody (greeting: String )","title":"PostBody - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-post-body/-post-body/#postbody","text":"[jvm]\\ fun PostBody (greeting: String )","title":"PostBody"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-post-body/greeting/","text":"// exemplar / com.squareup.exemplar.actions / PostBody / greeting greeting \u00b6 [jvm]\\ val greeting : String","title":"greeting - Misk"},{"location":"0.x/exemplar/com.squareup.exemplar.actions/-post-body/greeting/#greeting","text":"[jvm]\\ val greeting : String","title":"greeting"},{"location":"0.x/exemplarchat/com.squareup.chat/","text":"// exemplarchat / com.squareup.chat Package com.squareup.chat \u00b6 Types \u00b6 Name Summary ChatConfig [jvm] data class ChatConfig (web: WebConfig, prometheus: PrometheusConfig, kubernetes: KubernetesConfig) : Config ChatModule [jvm] class ChatModule : KAbstractModule Functions \u00b6 Name Summary main [jvm] fun main (args: Array < String >)","title":"Package com.squareup.chat - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/#package-comsquareupchat","text":"","title":"Package com.squareup.chat"},{"location":"0.x/exemplarchat/com.squareup.chat/#types","text":"Name Summary ChatConfig [jvm] data class ChatConfig (web: WebConfig, prometheus: PrometheusConfig, kubernetes: KubernetesConfig) : Config ChatModule [jvm] class ChatModule : KAbstractModule","title":"Types"},{"location":"0.x/exemplarchat/com.squareup.chat/#functions","text":"Name Summary main [jvm] fun main (args: Array < String >)","title":"Functions"},{"location":"0.x/exemplarchat/com.squareup.chat/main/","text":"// exemplarchat / com.squareup.chat / main main \u00b6 [jvm]\\ fun main (args: Array < String >)","title":"main - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/main/#main","text":"[jvm]\\ fun main (args: Array < String >)","title":"main"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/","text":"// exemplarchat / com.squareup.chat / ChatConfig ChatConfig \u00b6 [jvm]\\ data class ChatConfig (web: WebConfig, prometheus: PrometheusConfig, kubernetes: KubernetesConfig) : Config Properties \u00b6 Name Summary kubernetes [jvm] val kubernetes : KubernetesConfig prometheus [jvm] val prometheus : PrometheusConfig web [jvm] val web : WebConfig","title":"ChatConfig - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/#chatconfig","text":"[jvm]\\ data class ChatConfig (web: WebConfig, prometheus: PrometheusConfig, kubernetes: KubernetesConfig) : Config","title":"ChatConfig"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/#properties","text":"Name Summary kubernetes [jvm] val kubernetes : KubernetesConfig prometheus [jvm] val prometheus : PrometheusConfig web [jvm] val web : WebConfig","title":"Properties"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/-chat-config/","text":"// exemplarchat / com.squareup.chat / ChatConfig / ChatConfig ChatConfig \u00b6 [jvm]\\ fun ChatConfig (web: WebConfig, prometheus: PrometheusConfig, kubernetes: KubernetesConfig = KubernetesConfig())","title":"ChatConfig - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/-chat-config/#chatconfig","text":"[jvm]\\ fun ChatConfig (web: WebConfig, prometheus: PrometheusConfig, kubernetes: KubernetesConfig = KubernetesConfig())","title":"ChatConfig"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/kubernetes/","text":"// exemplarchat / com.squareup.chat / ChatConfig / kubernetes kubernetes \u00b6 [jvm]\\ val kubernetes : KubernetesConfig","title":"kubernetes - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/kubernetes/#kubernetes","text":"[jvm]\\ val kubernetes : KubernetesConfig","title":"kubernetes"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/prometheus/","text":"// exemplarchat / com.squareup.chat / ChatConfig / prometheus prometheus \u00b6 [jvm]\\ val prometheus : PrometheusConfig","title":"prometheus - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/prometheus/#prometheus","text":"[jvm]\\ val prometheus : PrometheusConfig","title":"prometheus"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/web/","text":"// exemplarchat / com.squareup.chat / ChatConfig / web web \u00b6 [jvm]\\ val web : WebConfig","title":"web - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-config/web/#web","text":"[jvm]\\ val web : WebConfig","title":"web"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-module/","text":"// exemplarchat / com.squareup.chat / ChatModule ChatModule \u00b6 [jvm]\\ class ChatModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ChatModule - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-module/#chatmodule","text":"[jvm]\\ class ChatModule : KAbstractModule","title":"ChatModule"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-module/-chat-module/","text":"// exemplarchat / com.squareup.chat / ChatModule / ChatModule ChatModule \u00b6 [jvm]\\ fun ChatModule ()","title":"ChatModule - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat/-chat-module/-chat-module/#chatmodule","text":"[jvm]\\ fun ChatModule ()","title":"ChatModule"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/","text":"// exemplarchat / com.squareup.chat.actions Package com.squareup.chat.actions \u00b6 Types \u00b6 Name Summary ChatWebSocketAction [jvm] class ChatWebSocketAction @Injectconstructor : WebAction ChatWebSocketAction is a basic chat program which supports multiple chat rooms and their histories through web socket connections. ToggleManualHealthCheckAction [jvm] @Singleton class ToggleManualHealthCheckAction @Injectconstructor : WebAction","title":"Package com.squareup.chat.actions - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/#package-comsquareupchatactions","text":"","title":"Package com.squareup.chat.actions"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/#types","text":"Name Summary ChatWebSocketAction [jvm] class ChatWebSocketAction @Injectconstructor : WebAction ChatWebSocketAction is a basic chat program which supports multiple chat rooms and their histories through web socket connections. ToggleManualHealthCheckAction [jvm] @Singleton class ToggleManualHealthCheckAction @Injectconstructor : WebAction","title":"Types"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/","text":"// exemplarchat / com.squareup.chat.actions / ChatWebSocketAction ChatWebSocketAction \u00b6 [jvm]\\ class ChatWebSocketAction @Injectconstructor : WebAction ChatWebSocketAction is a basic chat program which supports multiple chat rooms and their histories through web socket connections. Constructors \u00b6 ChatWebSocketAction [jvm] @Inject fun ChatWebSocketAction () Functions \u00b6 Name Summary chat [jvm] fun chat (name: String , webSocket: WebSocket): WebSocketListener Properties \u00b6 Name Summary eventRouter [jvm] @Inject lateinit var eventRouter : EventRouter","title":"ChatWebSocketAction - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/#chatwebsocketaction","text":"[jvm]\\ class ChatWebSocketAction @Injectconstructor : WebAction ChatWebSocketAction is a basic chat program which supports multiple chat rooms and their histories through web socket connections.","title":"ChatWebSocketAction"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/#constructors","text":"ChatWebSocketAction [jvm] @Inject fun ChatWebSocketAction ()","title":"Constructors"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/#functions","text":"Name Summary chat [jvm] fun chat (name: String , webSocket: WebSocket): WebSocketListener","title":"Functions"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/#properties","text":"Name Summary eventRouter [jvm] @Inject lateinit var eventRouter : EventRouter","title":"Properties"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/-chat-web-socket-action/","text":"// exemplarchat / com.squareup.chat.actions / ChatWebSocketAction / ChatWebSocketAction ChatWebSocketAction \u00b6 [jvm]\\ @Inject fun ChatWebSocketAction ()","title":"ChatWebSocketAction - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/-chat-web-socket-action/#chatwebsocketaction","text":"[jvm]\\ @Inject fun ChatWebSocketAction ()","title":"ChatWebSocketAction"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/chat/","text":"// exemplarchat / com.squareup.chat.actions / ChatWebSocketAction / chat chat \u00b6 [jvm]\\ fun chat (name: String , webSocket: WebSocket): WebSocketListener","title":"chat - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/chat/#chat","text":"[jvm]\\ fun chat (name: String , webSocket: WebSocket): WebSocketListener","title":"chat"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/event-router/","text":"// exemplarchat / com.squareup.chat.actions / ChatWebSocketAction / eventRouter eventRouter \u00b6 [jvm]\\ @Inject lateinit var eventRouter : EventRouter","title":"eventRouter - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-chat-web-socket-action/event-router/#eventrouter","text":"[jvm]\\ @Inject lateinit var eventRouter : EventRouter","title":"eventRouter"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/","text":"// exemplarchat / com.squareup.chat.actions / ToggleManualHealthCheckAction ToggleManualHealthCheckAction \u00b6 [jvm]\\ @Singleton class ToggleManualHealthCheckAction @Injectconstructor : WebAction Functions \u00b6 Name Summary setManualHealthCheck [jvm] fun setManualHealthCheck (status: String ?): Response< String > Properties \u00b6 Name Summary manualHealthCheck [jvm] @Inject lateinit var manualHealthCheck : ManualHealthCheck","title":"ToggleManualHealthCheckAction - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/#togglemanualhealthcheckaction","text":"[jvm]\\ @Singleton class ToggleManualHealthCheckAction @Injectconstructor : WebAction","title":"ToggleManualHealthCheckAction"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/#functions","text":"Name Summary setManualHealthCheck [jvm] fun setManualHealthCheck (status: String ?): Response< String >","title":"Functions"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/#properties","text":"Name Summary manualHealthCheck [jvm] @Inject lateinit var manualHealthCheck : ManualHealthCheck","title":"Properties"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/-toggle-manual-health-check-action/","text":"// exemplarchat / com.squareup.chat.actions / ToggleManualHealthCheckAction / ToggleManualHealthCheckAction ToggleManualHealthCheckAction \u00b6 [jvm]\\ @Inject fun ToggleManualHealthCheckAction ()","title":"ToggleManualHealthCheckAction - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/-toggle-manual-health-check-action/#togglemanualhealthcheckaction","text":"[jvm]\\ @Inject fun ToggleManualHealthCheckAction ()","title":"ToggleManualHealthCheckAction"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/manual-health-check/","text":"// exemplarchat / com.squareup.chat.actions / ToggleManualHealthCheckAction / manualHealthCheck manualHealthCheck \u00b6 [jvm]\\ @Inject lateinit var manualHealthCheck : ManualHealthCheck","title":"manualHealthCheck - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/manual-health-check/#manualhealthcheck","text":"[jvm]\\ @Inject lateinit var manualHealthCheck : ManualHealthCheck","title":"manualHealthCheck"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/set-manual-health-check/","text":"// exemplarchat / com.squareup.chat.actions / ToggleManualHealthCheckAction / setManualHealthCheck setManualHealthCheck \u00b6 [jvm]\\ fun setManualHealthCheck (status: String ?): Response< String >","title":"setManualHealthCheck - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.actions/-toggle-manual-health-check-action/set-manual-health-check/#setmanualhealthcheck","text":"[jvm]\\ fun setManualHealthCheck (status: String ?): Response< String >","title":"setManualHealthCheck"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/","text":"// exemplarchat / com.squareup.chat.healthchecks Package com.squareup.chat.healthchecks \u00b6 Types \u00b6 Name Summary ManualHealthCheck [jvm] @Singleton class ManualHealthCheck : HealthCheck","title":"Package com.squareup.chat.healthchecks - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/#package-comsquareupchathealthchecks","text":"","title":"Package com.squareup.chat.healthchecks"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/#types","text":"Name Summary ManualHealthCheck [jvm] @Singleton class ManualHealthCheck : HealthCheck","title":"Types"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/","text":"// exemplarchat / com.squareup.chat.healthchecks / ManualHealthCheck ManualHealthCheck \u00b6 [jvm]\\ @Singleton class ManualHealthCheck : HealthCheck Functions \u00b6 Name Summary setHealth [jvm] fun setHealth () setUnhealthy [jvm] fun setUnhealthy () status [jvm] open override fun status (): HealthStatus","title":"ManualHealthCheck - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/#manualhealthcheck","text":"[jvm]\\ @Singleton class ManualHealthCheck : HealthCheck","title":"ManualHealthCheck"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/#functions","text":"Name Summary setHealth [jvm] fun setHealth () setUnhealthy [jvm] fun setUnhealthy () status [jvm] open override fun status (): HealthStatus","title":"Functions"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/-manual-health-check/","text":"// exemplarchat / com.squareup.chat.healthchecks / ManualHealthCheck / ManualHealthCheck ManualHealthCheck \u00b6 [jvm]\\ fun ManualHealthCheck ()","title":"ManualHealthCheck - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/-manual-health-check/#manualhealthcheck","text":"[jvm]\\ fun ManualHealthCheck ()","title":"ManualHealthCheck"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/set-health/","text":"// exemplarchat / com.squareup.chat.healthchecks / ManualHealthCheck / setHealth setHealth \u00b6 [jvm]\\ fun setHealth ()","title":"setHealth - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/set-health/#sethealth","text":"[jvm]\\ fun setHealth ()","title":"setHealth"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/set-unhealthy/","text":"// exemplarchat / com.squareup.chat.healthchecks / ManualHealthCheck / setUnhealthy setUnhealthy \u00b6 [jvm]\\ fun setUnhealthy ()","title":"setUnhealthy - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/set-unhealthy/#setunhealthy","text":"[jvm]\\ fun setUnhealthy ()","title":"setUnhealthy"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/status/","text":"// exemplarchat / com.squareup.chat.healthchecks / ManualHealthCheck / status status \u00b6 [jvm]\\ open override fun status (): HealthStatus","title":"status - Misk"},{"location":"0.x/exemplarchat/com.squareup.chat.healthchecks/-manual-health-check/status/#status","text":"[jvm]\\ open override fun status (): HealthStatus","title":"status"},{"location":"0.x/misk/misk/","text":"// misk / misk Package misk \u00b6 Types \u00b6 Name Summary Action [jvm] data class Action (name: String , function: KFunction <*>, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameters: List < KParameter >, returnType: KType , dispatchMechanism: DispatchMechanism ) ApplicationInterceptor [jvm] interface ApplicationInterceptor Chain [jvm] interface Chain MiskApplication [jvm] class MiskApplication The entry point for misk applications MiskCommand [jvm] abstract class MiskCommand (name: String , modules: List <Module>) : Runnable A command to run from the command line. Each command has an associated name and the list of modules to use in initializing the command. Commands can specify optional and required arguments via JCommander annotations. The command line will pick the appropriate command based on the name, create an injector based on that command\u2019s modules, use the injector to initialize the command, and then run the command. MiskCommonServiceModule [jvm] class MiskCommonServiceModule : KAbstractModule This module has common bindings for all environments (both real and testing). MiskRealServiceModule [jvm] class MiskRealServiceModule : KAbstractModule Install this module in real environments. Functions \u00b6 Name Summary asAction [jvm] fun KFunction <*>. asAction (dispatchMechanism: DispatchMechanism ): Action","title":"Package misk - Misk"},{"location":"0.x/misk/misk/#package-misk","text":"","title":"Package misk"},{"location":"0.x/misk/misk/#types","text":"Name Summary Action [jvm] data class Action (name: String , function: KFunction <*>, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameters: List < KParameter >, returnType: KType , dispatchMechanism: DispatchMechanism ) ApplicationInterceptor [jvm] interface ApplicationInterceptor Chain [jvm] interface Chain MiskApplication [jvm] class MiskApplication The entry point for misk applications MiskCommand [jvm] abstract class MiskCommand (name: String , modules: List <Module>) : Runnable A command to run from the command line. Each command has an associated name and the list of modules to use in initializing the command. Commands can specify optional and required arguments via JCommander annotations. The command line will pick the appropriate command based on the name, create an injector based on that command\u2019s modules, use the injector to initialize the command, and then run the command. MiskCommonServiceModule [jvm] class MiskCommonServiceModule : KAbstractModule This module has common bindings for all environments (both real and testing). MiskRealServiceModule [jvm] class MiskRealServiceModule : KAbstractModule Install this module in real environments.","title":"Types"},{"location":"0.x/misk/misk/#functions","text":"Name Summary asAction [jvm] fun KFunction <*>. asAction (dispatchMechanism: DispatchMechanism ): Action","title":"Functions"},{"location":"0.x/misk/misk/as-action/","text":"// misk / misk / asAction asAction \u00b6 [jvm]\\ fun KFunction <*>. asAction (dispatchMechanism: DispatchMechanism ): Action","title":"asAction - Misk"},{"location":"0.x/misk/misk/as-action/#asaction","text":"[jvm]\\ fun KFunction <*>. asAction (dispatchMechanism: DispatchMechanism ): Action","title":"asAction"},{"location":"0.x/misk/misk/-action/","text":"// misk / misk / Action Action \u00b6 [jvm]\\ data class Action (name: String , function: KFunction <*>, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameters: List < KParameter >, returnType: KType , dispatchMechanism: DispatchMechanism ) Functions \u00b6 Name Summary hasReturnValue [jvm] fun hasReturnValue (): Boolean toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary acceptedMediaRanges [jvm] val acceptedMediaRanges : List <MediaRange> dispatchMechanism [jvm] val dispatchMechanism : DispatchMechanism function [jvm] val function : KFunction <*> name [jvm] val name : String parameters [jvm] val parameters : List < KParameter > parameterTypes [jvm] val parameterTypes : List < KType > ParameterTypes and RequestType can differ because RequestType pertains only to the type of the request body, whereas ParameterTypes includes other parts of the request such as path params and query params. requestType [jvm] val requestType : KType ? responseContentType [jvm] val responseContentType : MediaType? returnType [jvm] val returnType : KType","title":"Action - Misk"},{"location":"0.x/misk/misk/-action/#action","text":"[jvm]\\ data class Action (name: String , function: KFunction <*>, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameters: List < KParameter >, returnType: KType , dispatchMechanism: DispatchMechanism )","title":"Action"},{"location":"0.x/misk/misk/-action/#functions","text":"Name Summary hasReturnValue [jvm] fun hasReturnValue (): Boolean toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk/misk/-action/#properties","text":"Name Summary acceptedMediaRanges [jvm] val acceptedMediaRanges : List <MediaRange> dispatchMechanism [jvm] val dispatchMechanism : DispatchMechanism function [jvm] val function : KFunction <*> name [jvm] val name : String parameters [jvm] val parameters : List < KParameter > parameterTypes [jvm] val parameterTypes : List < KType > ParameterTypes and RequestType can differ because RequestType pertains only to the type of the request body, whereas ParameterTypes includes other parts of the request such as path params and query params. requestType [jvm] val requestType : KType ? responseContentType [jvm] val responseContentType : MediaType? returnType [jvm] val returnType : KType","title":"Properties"},{"location":"0.x/misk/misk/-action/-action/","text":"// misk / misk / Action / Action Action \u00b6 [jvm]\\ fun Action (name: String , function: KFunction <*>, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameters: List < KParameter >, returnType: KType , dispatchMechanism: DispatchMechanism )","title":"Action - Misk"},{"location":"0.x/misk/misk/-action/-action/#action","text":"[jvm]\\ fun Action (name: String , function: KFunction <*>, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameters: List < KParameter >, returnType: KType , dispatchMechanism: DispatchMechanism )","title":"Action"},{"location":"0.x/misk/misk/-action/accepted-media-ranges/","text":"// misk / misk / Action / acceptedMediaRanges acceptedMediaRanges \u00b6 [jvm]\\ val acceptedMediaRanges : List <MediaRange>","title":"acceptedMediaRanges - Misk"},{"location":"0.x/misk/misk/-action/accepted-media-ranges/#acceptedmediaranges","text":"[jvm]\\ val acceptedMediaRanges : List <MediaRange>","title":"acceptedMediaRanges"},{"location":"0.x/misk/misk/-action/dispatch-mechanism/","text":"// misk / misk / Action / dispatchMechanism dispatchMechanism \u00b6 [jvm]\\ val dispatchMechanism : DispatchMechanism","title":"dispatchMechanism - Misk"},{"location":"0.x/misk/misk/-action/dispatch-mechanism/#dispatchmechanism","text":"[jvm]\\ val dispatchMechanism : DispatchMechanism","title":"dispatchMechanism"},{"location":"0.x/misk/misk/-action/function/","text":"// misk / misk / Action / function function \u00b6 [jvm]\\ val function : KFunction <*>","title":"function - Misk"},{"location":"0.x/misk/misk/-action/function/#function","text":"[jvm]\\ val function : KFunction <*>","title":"function"},{"location":"0.x/misk/misk/-action/has-return-value/","text":"// misk / misk / Action / hasReturnValue hasReturnValue \u00b6 [jvm]\\ fun hasReturnValue (): Boolean","title":"hasReturnValue - Misk"},{"location":"0.x/misk/misk/-action/has-return-value/#hasreturnvalue","text":"[jvm]\\ fun hasReturnValue (): Boolean","title":"hasReturnValue"},{"location":"0.x/misk/misk/-action/name/","text":"// misk / misk / Action / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk/misk/-action/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk/misk/-action/parameter-types/","text":"// misk / misk / Action / parameterTypes parameterTypes \u00b6 [jvm]\\ val parameterTypes : List < KType > ParameterTypes and RequestType can differ because RequestType pertains only to the type of the request body, whereas ParameterTypes includes other parts of the request such as path params and query params.","title":"parameterTypes - Misk"},{"location":"0.x/misk/misk/-action/parameter-types/#parametertypes","text":"[jvm]\\ val parameterTypes : List < KType > ParameterTypes and RequestType can differ because RequestType pertains only to the type of the request body, whereas ParameterTypes includes other parts of the request such as path params and query params.","title":"parameterTypes"},{"location":"0.x/misk/misk/-action/parameters/","text":"// misk / misk / Action / parameters parameters \u00b6 [jvm]\\ val parameters : List < KParameter >","title":"parameters - Misk"},{"location":"0.x/misk/misk/-action/parameters/#parameters","text":"[jvm]\\ val parameters : List < KParameter >","title":"parameters"},{"location":"0.x/misk/misk/-action/request-type/","text":"// misk / misk / Action / requestType requestType \u00b6 [jvm]\\ val requestType : KType ?","title":"requestType - Misk"},{"location":"0.x/misk/misk/-action/request-type/#requesttype","text":"[jvm]\\ val requestType : KType ?","title":"requestType"},{"location":"0.x/misk/misk/-action/response-content-type/","text":"// misk / misk / Action / responseContentType responseContentType \u00b6 [jvm]\\ val responseContentType : MediaType?","title":"responseContentType - Misk"},{"location":"0.x/misk/misk/-action/response-content-type/#responsecontenttype","text":"[jvm]\\ val responseContentType : MediaType?","title":"responseContentType"},{"location":"0.x/misk/misk/-action/return-type/","text":"// misk / misk / Action / returnType returnType \u00b6 [jvm]\\ val returnType : KType","title":"returnType - Misk"},{"location":"0.x/misk/misk/-action/return-type/#returntype","text":"[jvm]\\ val returnType : KType","title":"returnType"},{"location":"0.x/misk/misk/-action/to-string/","text":"// misk / misk / Action / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk/misk/-action/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk/misk/-application-interceptor/","text":"// misk / misk / ApplicationInterceptor ApplicationInterceptor \u00b6 [jvm]\\ interface ApplicationInterceptor Types \u00b6 Name Summary Factory [jvm] interface Factory Functions \u00b6 Name Summary intercept [jvm] abstract fun intercept (chain: Chain ): Any Inheritors \u00b6 Name AccessInterceptor RequestBodyLoggingInterceptor","title":"ApplicationInterceptor - Misk"},{"location":"0.x/misk/misk/-application-interceptor/#applicationinterceptor","text":"[jvm]\\ interface ApplicationInterceptor","title":"ApplicationInterceptor"},{"location":"0.x/misk/misk/-application-interceptor/#types","text":"Name Summary Factory [jvm] interface Factory","title":"Types"},{"location":"0.x/misk/misk/-application-interceptor/#functions","text":"Name Summary intercept [jvm] abstract fun intercept (chain: Chain ): Any","title":"Functions"},{"location":"0.x/misk/misk/-application-interceptor/#inheritors","text":"Name AccessInterceptor RequestBodyLoggingInterceptor","title":"Inheritors"},{"location":"0.x/misk/misk/-application-interceptor/intercept/","text":"// misk / misk / ApplicationInterceptor / intercept intercept \u00b6 [jvm]\\ abstract fun intercept (chain: Chain ): Any","title":"intercept - Misk"},{"location":"0.x/misk/misk/-application-interceptor/intercept/#intercept","text":"[jvm]\\ abstract fun intercept (chain: Chain ): Any","title":"intercept"},{"location":"0.x/misk/misk/-application-interceptor/-factory/","text":"// misk / misk / ApplicationInterceptor / Factory Factory \u00b6 [jvm]\\ interface Factory Functions \u00b6 Name Summary create [jvm] abstract fun create (action: Action ): ApplicationInterceptor ? Inheritors \u00b6 Name Factory","title":"Factory - Misk"},{"location":"0.x/misk/misk/-application-interceptor/-factory/#factory","text":"[jvm]\\ interface Factory","title":"Factory"},{"location":"0.x/misk/misk/-application-interceptor/-factory/#functions","text":"Name Summary create [jvm] abstract fun create (action: Action ): ApplicationInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk/-application-interceptor/-factory/#inheritors","text":"Name Factory","title":"Inheritors"},{"location":"0.x/misk/misk/-application-interceptor/-factory/create/","text":"// misk / misk / ApplicationInterceptor / Factory / create create \u00b6 [jvm]\\ abstract fun create (action: Action ): ApplicationInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk/-application-interceptor/-factory/create/#create","text":"[jvm]\\ abstract fun create (action: Action ): ApplicationInterceptor ?","title":"create"},{"location":"0.x/misk/misk/-chain/","text":"// misk / misk / Chain Chain \u00b6 [jvm]\\ interface Chain Functions \u00b6 Name Summary proceed [jvm] abstract fun proceed (args: List < Any ?>): Any Properties \u00b6 Name Summary action [jvm] abstract val action : WebAction args [jvm] abstract val args : List < Any ?> function [jvm] abstract val function : KFunction <*> httpCall [jvm] abstract val httpCall : HttpCall","title":"Chain - Misk"},{"location":"0.x/misk/misk/-chain/#chain","text":"[jvm]\\ interface Chain","title":"Chain"},{"location":"0.x/misk/misk/-chain/#functions","text":"Name Summary proceed [jvm] abstract fun proceed (args: List < Any ?>): Any","title":"Functions"},{"location":"0.x/misk/misk/-chain/#properties","text":"Name Summary action [jvm] abstract val action : WebAction args [jvm] abstract val args : List < Any ?> function [jvm] abstract val function : KFunction <*> httpCall [jvm] abstract val httpCall : HttpCall","title":"Properties"},{"location":"0.x/misk/misk/-chain/action/","text":"// misk / misk / Chain / action action \u00b6 [jvm]\\ abstract val action : WebAction","title":"action - Misk"},{"location":"0.x/misk/misk/-chain/action/#action","text":"[jvm]\\ abstract val action : WebAction","title":"action"},{"location":"0.x/misk/misk/-chain/args/","text":"// misk / misk / Chain / args args \u00b6 [jvm]\\ abstract val args : List < Any ?>","title":"args - Misk"},{"location":"0.x/misk/misk/-chain/args/#args","text":"[jvm]\\ abstract val args : List < Any ?>","title":"args"},{"location":"0.x/misk/misk/-chain/function/","text":"// misk / misk / Chain / function function \u00b6 [jvm]\\ abstract val function : KFunction <*>","title":"function - Misk"},{"location":"0.x/misk/misk/-chain/function/#function","text":"[jvm]\\ abstract val function : KFunction <*>","title":"function"},{"location":"0.x/misk/misk/-chain/http-call/","text":"// misk / misk / Chain / httpCall httpCall \u00b6 [jvm]\\ abstract val httpCall : HttpCall","title":"httpCall - Misk"},{"location":"0.x/misk/misk/-chain/http-call/#httpcall","text":"[jvm]\\ abstract val httpCall : HttpCall","title":"httpCall"},{"location":"0.x/misk/misk/-chain/proceed/","text":"// misk / misk / Chain / proceed proceed \u00b6 [jvm]\\ abstract fun proceed (args: List < Any ?>): Any","title":"proceed - Misk"},{"location":"0.x/misk/misk/-chain/proceed/#proceed","text":"[jvm]\\ abstract fun proceed (args: List < Any ?>): Any","title":"proceed"},{"location":"0.x/misk/misk/-misk-application/","text":"// misk / misk / MiskApplication MiskApplication \u00b6 [jvm]\\ class MiskApplication The entry point for misk applications Constructors \u00b6 MiskApplication [jvm] fun MiskApplication (vararg modules: Module) MiskApplication [jvm] fun MiskApplication (vararg commands: MiskCommand ) MiskApplication [jvm] fun MiskApplication (modules: List <Module>, commands: List < MiskCommand > = listOf()) MiskApplication [jvm] fun MiskApplication (injector: Injector) Functions \u00b6 Name Summary run [jvm] fun run (args: Array < String >) Runs the application, finding and executing the appropriate command based on the provided command line arguments","title":"MiskApplication - Misk"},{"location":"0.x/misk/misk/-misk-application/#miskapplication","text":"[jvm]\\ class MiskApplication The entry point for misk applications","title":"MiskApplication"},{"location":"0.x/misk/misk/-misk-application/#constructors","text":"MiskApplication [jvm] fun MiskApplication (vararg modules: Module) MiskApplication [jvm] fun MiskApplication (vararg commands: MiskCommand ) MiskApplication [jvm] fun MiskApplication (modules: List <Module>, commands: List < MiskCommand > = listOf()) MiskApplication [jvm] fun MiskApplication (injector: Injector)","title":"Constructors"},{"location":"0.x/misk/misk/-misk-application/#functions","text":"Name Summary run [jvm] fun run (args: Array < String >) Runs the application, finding and executing the appropriate command based on the provided command line arguments","title":"Functions"},{"location":"0.x/misk/misk/-misk-application/-misk-application/","text":"// misk / misk / MiskApplication / MiskApplication MiskApplication \u00b6 [jvm]\\ fun MiskApplication (vararg modules: Module) fun MiskApplication (vararg commands: MiskCommand ) fun MiskApplication (modules: List <Module>, commands: List < MiskCommand > = listOf()) fun MiskApplication (injector: Injector)","title":"MiskApplication - Misk"},{"location":"0.x/misk/misk/-misk-application/-misk-application/#miskapplication","text":"[jvm]\\ fun MiskApplication (vararg modules: Module) fun MiskApplication (vararg commands: MiskCommand ) fun MiskApplication (modules: List <Module>, commands: List < MiskCommand > = listOf()) fun MiskApplication (injector: Injector)","title":"MiskApplication"},{"location":"0.x/misk/misk/-misk-application/run/","text":"// misk / misk / MiskApplication / run run \u00b6 [jvm]\\ fun run (args: Array < String >) Runs the application, finding and executing the appropriate command based on the provided command line arguments","title":"run - Misk"},{"location":"0.x/misk/misk/-misk-application/run/#run","text":"[jvm]\\ fun run (args: Array < String >) Runs the application, finding and executing the appropriate command based on the provided command line arguments","title":"run"},{"location":"0.x/misk/misk/-misk-command/","text":"// misk / misk / MiskCommand MiskCommand \u00b6 [jvm]\\ abstract class MiskCommand (name: String , modules: List <Module>) : Runnable A command to run from the command line. Each command has an associated name and the list of modules to use in initializing the command. Commands can specify optional and required arguments via JCommander annotations. The command line will pick the appropriate command based on the name, create an injector based on that command\u2019s modules, use the injector to initialize the command, and then run the command. Constructors \u00b6 MiskCommand [jvm] fun MiskCommand (name: String , vararg modules: Module) MiskCommand [jvm] fun MiskCommand (name: String , modules: List <Module>) Functions \u00b6 Name Summary requireCli [jvm] fun requireCli (value: Boolean , lazyMessage: () -> String ) Confirms that the given precondition is true, otherwise throws a ParameterException with the supplied message. run [jvm] abstract fun run ()","title":"MiskCommand - Misk"},{"location":"0.x/misk/misk/-misk-command/#miskcommand","text":"[jvm]\\ abstract class MiskCommand (name: String , modules: List <Module>) : Runnable A command to run from the command line. Each command has an associated name and the list of modules to use in initializing the command. Commands can specify optional and required arguments via JCommander annotations. The command line will pick the appropriate command based on the name, create an injector based on that command\u2019s modules, use the injector to initialize the command, and then run the command.","title":"MiskCommand"},{"location":"0.x/misk/misk/-misk-command/#constructors","text":"MiskCommand [jvm] fun MiskCommand (name: String , vararg modules: Module) MiskCommand [jvm] fun MiskCommand (name: String , modules: List <Module>)","title":"Constructors"},{"location":"0.x/misk/misk/-misk-command/#functions","text":"Name Summary requireCli [jvm] fun requireCli (value: Boolean , lazyMessage: () -> String ) Confirms that the given precondition is true, otherwise throws a ParameterException with the supplied message. run [jvm] abstract fun run ()","title":"Functions"},{"location":"0.x/misk/misk/-misk-command/-misk-command/","text":"// misk / misk / MiskCommand / MiskCommand MiskCommand \u00b6 [jvm]\\ fun MiskCommand (name: String , vararg modules: Module) fun MiskCommand (name: String , modules: List <Module>)","title":"MiskCommand - Misk"},{"location":"0.x/misk/misk/-misk-command/-misk-command/#miskcommand","text":"[jvm]\\ fun MiskCommand (name: String , vararg modules: Module) fun MiskCommand (name: String , modules: List <Module>)","title":"MiskCommand"},{"location":"0.x/misk/misk/-misk-command/require-cli/","text":"// misk / misk / MiskCommand / requireCli requireCli \u00b6 [jvm]\\ fun requireCli (value: Boolean , lazyMessage: () -> String ) Confirms that the given precondition is true, otherwise throws a ParameterException with the supplied message.","title":"requireCli - Misk"},{"location":"0.x/misk/misk/-misk-command/require-cli/#requirecli","text":"[jvm]\\ fun requireCli (value: Boolean , lazyMessage: () -> String ) Confirms that the given precondition is true, otherwise throws a ParameterException with the supplied message.","title":"requireCli"},{"location":"0.x/misk/misk/-misk-common-service-module/","text":"// misk / misk / MiskCommonServiceModule MiskCommonServiceModule \u00b6 [jvm]\\ class MiskCommonServiceModule : KAbstractModule This module has common bindings for all environments (both real and testing). Constructors \u00b6 MiskCommonServiceModule [jvm] fun MiskCommonServiceModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"MiskCommonServiceModule - Misk"},{"location":"0.x/misk/misk/-misk-common-service-module/#miskcommonservicemodule","text":"[jvm]\\ class MiskCommonServiceModule : KAbstractModule This module has common bindings for all environments (both real and testing).","title":"MiskCommonServiceModule"},{"location":"0.x/misk/misk/-misk-common-service-module/#constructors","text":"MiskCommonServiceModule [jvm] fun MiskCommonServiceModule ()","title":"Constructors"},{"location":"0.x/misk/misk/-misk-common-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk/-misk-common-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk/-misk-common-service-module/-misk-common-service-module/","text":"// misk / misk / MiskCommonServiceModule / MiskCommonServiceModule MiskCommonServiceModule \u00b6 [jvm]\\ fun MiskCommonServiceModule ()","title":"MiskCommonServiceModule - Misk"},{"location":"0.x/misk/misk/-misk-common-service-module/-misk-common-service-module/#miskcommonservicemodule","text":"[jvm]\\ fun MiskCommonServiceModule ()","title":"MiskCommonServiceModule"},{"location":"0.x/misk/misk/-misk-real-service-module/","text":"// misk / misk / MiskRealServiceModule MiskRealServiceModule \u00b6 [jvm]\\ class MiskRealServiceModule : KAbstractModule Install this module in real environments. The vast majority of Service bindings belong in MiskCommonServiceModule , in order to share with MiskTestingServiceModule. Only bindings that are not suitable for a unit testing environment belong here. Constructors \u00b6 MiskRealServiceModule [jvm] fun MiskRealServiceModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"MiskRealServiceModule - Misk"},{"location":"0.x/misk/misk/-misk-real-service-module/#miskrealservicemodule","text":"[jvm]\\ class MiskRealServiceModule : KAbstractModule Install this module in real environments. The vast majority of Service bindings belong in MiskCommonServiceModule , in order to share with MiskTestingServiceModule. Only bindings that are not suitable for a unit testing environment belong here.","title":"MiskRealServiceModule"},{"location":"0.x/misk/misk/-misk-real-service-module/#constructors","text":"MiskRealServiceModule [jvm] fun MiskRealServiceModule ()","title":"Constructors"},{"location":"0.x/misk/misk/-misk-real-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk/-misk-real-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk/-misk-real-service-module/-misk-real-service-module/","text":"// misk / misk / MiskRealServiceModule / MiskRealServiceModule MiskRealServiceModule \u00b6 [jvm]\\ fun MiskRealServiceModule ()","title":"MiskRealServiceModule - Misk"},{"location":"0.x/misk/misk/-misk-real-service-module/-misk-real-service-module/#miskrealservicemodule","text":"[jvm]\\ fun MiskRealServiceModule ()","title":"MiskRealServiceModule"},{"location":"0.x/misk/misk.client/","text":"// misk / misk.client Package misk.client \u00b6 Types \u00b6 Name Summary BackwardsCompatibleClientsConfig [jvm] data class BackwardsCompatibleClientsConfig (defaultConnectTimeout: Duration ?, defaultWriteTimeout: Duration ?, defaultReadTimeout: Duration ?, ssl: HttpClientSSLConfig ?, defaultPingInterval: Duration ?, defaultCallTimeout: Duration ?, endpoints: Map < String , BackwardsCompatibleEndpointConfig >, hostConfigs: LinkedHashMap < String , HttpClientConfig >) BackwardsCompatibleClientsConfigConverter [jvm] class BackwardsCompatibleClientsConfigConverter : Converter< BackwardsCompatibleClientsConfig , HttpClientsConfig > BackwardsCompatibleEndpointConfig [jvm] data class BackwardsCompatibleEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int , maxRequestsPerHost: Int , maxIdleConnections: Int , keepAliveDuration: Duration , ssl: HttpClientSSLConfig ?, clientConfig: HttpClientConfig ?) BeginClientCallChain [jvm] interface BeginClientCallChain ClientAction [jvm] data class ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType ) Metadata about a client action ClientApplicationInterceptorFactory [jvm] interface ClientApplicationInterceptorFactory ClientChain [jvm] interface ClientChain ClientMetricsInterceptor [jvm] class ClientMetricsInterceptor : Interceptor ClientNetworkChain [jvm] interface ClientNetworkChain ClientNetworkInterceptor [jvm] interface ClientNetworkInterceptor Intercepts client side calls at the application level, able to view and modify the outgoing HTTP request and observe the returned HTTP response ClientNetworkInterceptorsModule [jvm] class ClientNetworkInterceptorsModule : KAbstractModule The common set of ClientNetworkInterceptor s for all misk apps. GrpcClientModule [jvm] class GrpcClientModule < T : Service, G : T >(kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ?) : KAbstractModule Creates a gRPC client given a Wire-generated interface and HTTP configuration. HttpClientConfig [jvm] data class HttpClientConfig (connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int ?, maxRequestsPerHost: Int ?, maxIdleConnections: Int ?, keepAliveDuration: Duration ?, ssl: HttpClientSSLConfig ?, unixSocketFile: String ?, protocols: List < String >?) HttpClientConfigUrlProvider [jvm] class HttpClientConfigUrlProvider @Injectconstructor Calculates the url for an http client config, which can differ depending on if the client is envoy-based or connects directly. HttpClientEndpointConfig [jvm] data class HttpClientEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, clientConfig: HttpClientConfig ) HttpClientEnvoyConfig [jvm] data class HttpClientEnvoyConfig (app: String , env: String ?) HttpClientFactory [jvm] @Singleton class HttpClientFactory @Injectconstructor(sslLoader: SslLoader, sslContextFactory: SslContextFactory, okHttpClientCommonConfigurator: OkHttpClientCommonConfigurator ) HttpClientModule [jvm] class HttpClientModule (name: String , annotation: Annotation ?) : KAbstractModule Provides an OkHttpClient and ProtoMessageHttpClient for a peer service HttpClientsConfig [jvm] data class HttpClientsConfig (hostConfigs: LinkedHashMap < String , HttpClientConfig >, endpoints: Map < String , HttpClientEndpointConfig >) : Config HttpClientsConfigModule [jvm] class HttpClientsConfigModule (config: HttpClientsConfig ) : KAbstractModule HttpClientSSLConfig [jvm] data class HttpClientSSLConfig (cert_store: CertStoreConfig?, trust_store: TrustStoreConfig) JettyPortPeerClientModule [jvm] class JettyPortPeerClientModule : KAbstractModule For testing. OkHttpClientCommonConfigurator [jvm] class OkHttpClientCommonConfigurator @Injectconstructor PeerClientFactory [jvm] class PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int ) Factory that creates OkHttpClients for connecting to another instance of the same application running in the same cluster. PeerClientModule [jvm] class PeerClientModule : KAbstractModule Binds a PeerClientFactory that calls peers on the HTTPS port of this process\u2019s server, as determined by the SSL port in the WebConfig . ProtoMessageHttpClient [jvm] class ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient) This helper class is for making HTTP requests to an endpoint that handles protobuf Message classes. TypedClientFactory [jvm] class TypedClientFactory @Injectconstructor TypedHttpClientModule [jvm] class TypedHttpClientModule < T : Any >(kclass: KClass < T >, name: String , annotation: Annotation ?, retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client given an API interface and an HTTP configuration. TypedPeerClientFactory [jvm] interface TypedPeerClientFactory < T > Factory for creating typed clients that call other members of a cluster. TypedPeerHttpClientModule [jvm] class TypedPeerHttpClientModule < T : Any >(kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client factory given an API interface and an HTTP configuration. Functions \u00b6 Name Summary applyDefaults [jvm] fun HttpClientConfig . applyDefaults (other: HttpClientConfig ): HttpClientConfig","title":"Package misk.client - Misk"},{"location":"0.x/misk/misk.client/#package-miskclient","text":"","title":"Package misk.client"},{"location":"0.x/misk/misk.client/#types","text":"Name Summary BackwardsCompatibleClientsConfig [jvm] data class BackwardsCompatibleClientsConfig (defaultConnectTimeout: Duration ?, defaultWriteTimeout: Duration ?, defaultReadTimeout: Duration ?, ssl: HttpClientSSLConfig ?, defaultPingInterval: Duration ?, defaultCallTimeout: Duration ?, endpoints: Map < String , BackwardsCompatibleEndpointConfig >, hostConfigs: LinkedHashMap < String , HttpClientConfig >) BackwardsCompatibleClientsConfigConverter [jvm] class BackwardsCompatibleClientsConfigConverter : Converter< BackwardsCompatibleClientsConfig , HttpClientsConfig > BackwardsCompatibleEndpointConfig [jvm] data class BackwardsCompatibleEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int , maxRequestsPerHost: Int , maxIdleConnections: Int , keepAliveDuration: Duration , ssl: HttpClientSSLConfig ?, clientConfig: HttpClientConfig ?) BeginClientCallChain [jvm] interface BeginClientCallChain ClientAction [jvm] data class ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType ) Metadata about a client action ClientApplicationInterceptorFactory [jvm] interface ClientApplicationInterceptorFactory ClientChain [jvm] interface ClientChain ClientMetricsInterceptor [jvm] class ClientMetricsInterceptor : Interceptor ClientNetworkChain [jvm] interface ClientNetworkChain ClientNetworkInterceptor [jvm] interface ClientNetworkInterceptor Intercepts client side calls at the application level, able to view and modify the outgoing HTTP request and observe the returned HTTP response ClientNetworkInterceptorsModule [jvm] class ClientNetworkInterceptorsModule : KAbstractModule The common set of ClientNetworkInterceptor s for all misk apps. GrpcClientModule [jvm] class GrpcClientModule < T : Service, G : T >(kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ?) : KAbstractModule Creates a gRPC client given a Wire-generated interface and HTTP configuration. HttpClientConfig [jvm] data class HttpClientConfig (connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int ?, maxRequestsPerHost: Int ?, maxIdleConnections: Int ?, keepAliveDuration: Duration ?, ssl: HttpClientSSLConfig ?, unixSocketFile: String ?, protocols: List < String >?) HttpClientConfigUrlProvider [jvm] class HttpClientConfigUrlProvider @Injectconstructor Calculates the url for an http client config, which can differ depending on if the client is envoy-based or connects directly. HttpClientEndpointConfig [jvm] data class HttpClientEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, clientConfig: HttpClientConfig ) HttpClientEnvoyConfig [jvm] data class HttpClientEnvoyConfig (app: String , env: String ?) HttpClientFactory [jvm] @Singleton class HttpClientFactory @Injectconstructor(sslLoader: SslLoader, sslContextFactory: SslContextFactory, okHttpClientCommonConfigurator: OkHttpClientCommonConfigurator ) HttpClientModule [jvm] class HttpClientModule (name: String , annotation: Annotation ?) : KAbstractModule Provides an OkHttpClient and ProtoMessageHttpClient for a peer service HttpClientsConfig [jvm] data class HttpClientsConfig (hostConfigs: LinkedHashMap < String , HttpClientConfig >, endpoints: Map < String , HttpClientEndpointConfig >) : Config HttpClientsConfigModule [jvm] class HttpClientsConfigModule (config: HttpClientsConfig ) : KAbstractModule HttpClientSSLConfig [jvm] data class HttpClientSSLConfig (cert_store: CertStoreConfig?, trust_store: TrustStoreConfig) JettyPortPeerClientModule [jvm] class JettyPortPeerClientModule : KAbstractModule For testing. OkHttpClientCommonConfigurator [jvm] class OkHttpClientCommonConfigurator @Injectconstructor PeerClientFactory [jvm] class PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int ) Factory that creates OkHttpClients for connecting to another instance of the same application running in the same cluster. PeerClientModule [jvm] class PeerClientModule : KAbstractModule Binds a PeerClientFactory that calls peers on the HTTPS port of this process\u2019s server, as determined by the SSL port in the WebConfig . ProtoMessageHttpClient [jvm] class ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient) This helper class is for making HTTP requests to an endpoint that handles protobuf Message classes. TypedClientFactory [jvm] class TypedClientFactory @Injectconstructor TypedHttpClientModule [jvm] class TypedHttpClientModule < T : Any >(kclass: KClass < T >, name: String , annotation: Annotation ?, retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client given an API interface and an HTTP configuration. TypedPeerClientFactory [jvm] interface TypedPeerClientFactory < T > Factory for creating typed clients that call other members of a cluster. TypedPeerHttpClientModule [jvm] class TypedPeerHttpClientModule < T : Any >(kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client factory given an API interface and an HTTP configuration.","title":"Types"},{"location":"0.x/misk/misk.client/#functions","text":"Name Summary applyDefaults [jvm] fun HttpClientConfig . applyDefaults (other: HttpClientConfig ): HttpClientConfig","title":"Functions"},{"location":"0.x/misk/misk.client/apply-defaults/","text":"// misk / misk.client / applyDefaults applyDefaults \u00b6 [jvm]\\ fun HttpClientConfig . applyDefaults (other: HttpClientConfig ): HttpClientConfig","title":"applyDefaults - Misk"},{"location":"0.x/misk/misk.client/apply-defaults/#applydefaults","text":"[jvm]\\ fun HttpClientConfig . applyDefaults (other: HttpClientConfig ): HttpClientConfig","title":"applyDefaults"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig BackwardsCompatibleClientsConfig \u00b6 [jvm]\\ data class BackwardsCompatibleClientsConfig (defaultConnectTimeout: Duration ?, defaultWriteTimeout: Duration ?, defaultReadTimeout: Duration ?, ssl: HttpClientSSLConfig ?, defaultPingInterval: Duration ?, defaultCallTimeout: Duration ?, endpoints: Map < String , BackwardsCompatibleEndpointConfig >, hostConfigs: LinkedHashMap < String , HttpClientConfig >) Properties \u00b6 Name Summary defaultCallTimeout [jvm] val defaultCallTimeout : Duration ? = null defaultConnectTimeout [jvm] val defaultConnectTimeout : Duration ? = null defaultPingInterval [jvm] val defaultPingInterval : Duration ? = null defaultReadTimeout [jvm] val defaultReadTimeout : Duration ? = null defaultWriteTimeout [jvm] val defaultWriteTimeout : Duration ? = null endpoints [jvm] val endpoints : Map < String , BackwardsCompatibleEndpointConfig > hostConfigs [jvm] val hostConfigs : LinkedHashMap < String , HttpClientConfig > ssl [jvm] val ssl : HttpClientSSLConfig ? = null","title":"BackwardsCompatibleClientsConfig - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/#backwardscompatibleclientsconfig","text":"[jvm]\\ data class BackwardsCompatibleClientsConfig (defaultConnectTimeout: Duration ?, defaultWriteTimeout: Duration ?, defaultReadTimeout: Duration ?, ssl: HttpClientSSLConfig ?, defaultPingInterval: Duration ?, defaultCallTimeout: Duration ?, endpoints: Map < String , BackwardsCompatibleEndpointConfig >, hostConfigs: LinkedHashMap < String , HttpClientConfig >)","title":"BackwardsCompatibleClientsConfig"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/#properties","text":"Name Summary defaultCallTimeout [jvm] val defaultCallTimeout : Duration ? = null defaultConnectTimeout [jvm] val defaultConnectTimeout : Duration ? = null defaultPingInterval [jvm] val defaultPingInterval : Duration ? = null defaultReadTimeout [jvm] val defaultReadTimeout : Duration ? = null defaultWriteTimeout [jvm] val defaultWriteTimeout : Duration ? = null endpoints [jvm] val endpoints : Map < String , BackwardsCompatibleEndpointConfig > hostConfigs [jvm] val hostConfigs : LinkedHashMap < String , HttpClientConfig > ssl [jvm] val ssl : HttpClientSSLConfig ? = null","title":"Properties"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/-backwards-compatible-clients-config/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / BackwardsCompatibleClientsConfig BackwardsCompatibleClientsConfig \u00b6 [jvm]\\ fun BackwardsCompatibleClientsConfig (defaultConnectTimeout: Duration ? = null, defaultWriteTimeout: Duration ? = null, defaultReadTimeout: Duration ? = null, ssl: HttpClientSSLConfig ? = null, defaultPingInterval: Duration ? = null, defaultCallTimeout: Duration ? = null, endpoints: Map < String , BackwardsCompatibleEndpointConfig > = mapOf(), hostConfigs: LinkedHashMap < String , HttpClientConfig > = linkedMapOf())","title":"BackwardsCompatibleClientsConfig - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/-backwards-compatible-clients-config/#backwardscompatibleclientsconfig","text":"[jvm]\\ fun BackwardsCompatibleClientsConfig (defaultConnectTimeout: Duration ? = null, defaultWriteTimeout: Duration ? = null, defaultReadTimeout: Duration ? = null, ssl: HttpClientSSLConfig ? = null, defaultPingInterval: Duration ? = null, defaultCallTimeout: Duration ? = null, endpoints: Map < String , BackwardsCompatibleEndpointConfig > = mapOf(), hostConfigs: LinkedHashMap < String , HttpClientConfig > = linkedMapOf())","title":"BackwardsCompatibleClientsConfig"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-call-timeout/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / defaultCallTimeout defaultCallTimeout \u00b6 [jvm]\\ val defaultCallTimeout : Duration ? = null","title":"defaultCallTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-call-timeout/#defaultcalltimeout","text":"[jvm]\\ val defaultCallTimeout : Duration ? = null","title":"defaultCallTimeout"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-connect-timeout/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / defaultConnectTimeout defaultConnectTimeout \u00b6 [jvm]\\ val defaultConnectTimeout : Duration ? = null","title":"defaultConnectTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-connect-timeout/#defaultconnecttimeout","text":"[jvm]\\ val defaultConnectTimeout : Duration ? = null","title":"defaultConnectTimeout"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-ping-interval/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / defaultPingInterval defaultPingInterval \u00b6 [jvm]\\ val defaultPingInterval : Duration ? = null","title":"defaultPingInterval - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-ping-interval/#defaultpinginterval","text":"[jvm]\\ val defaultPingInterval : Duration ? = null","title":"defaultPingInterval"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-read-timeout/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / defaultReadTimeout defaultReadTimeout \u00b6 [jvm]\\ val defaultReadTimeout : Duration ? = null","title":"defaultReadTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-read-timeout/#defaultreadtimeout","text":"[jvm]\\ val defaultReadTimeout : Duration ? = null","title":"defaultReadTimeout"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-write-timeout/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / defaultWriteTimeout defaultWriteTimeout \u00b6 [jvm]\\ val defaultWriteTimeout : Duration ? = null","title":"defaultWriteTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/default-write-timeout/#defaultwritetimeout","text":"[jvm]\\ val defaultWriteTimeout : Duration ? = null","title":"defaultWriteTimeout"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/endpoints/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / endpoints endpoints \u00b6 [jvm]\\ val endpoints : Map < String , BackwardsCompatibleEndpointConfig >","title":"endpoints - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/endpoints/#endpoints","text":"[jvm]\\ val endpoints : Map < String , BackwardsCompatibleEndpointConfig >","title":"endpoints"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/host-configs/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / hostConfigs hostConfigs \u00b6 [jvm]\\ val hostConfigs : LinkedHashMap < String , HttpClientConfig >","title":"hostConfigs - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/host-configs/#hostconfigs","text":"[jvm]\\ val hostConfigs : LinkedHashMap < String , HttpClientConfig >","title":"hostConfigs"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/ssl/","text":"// misk / misk.client / BackwardsCompatibleClientsConfig / ssl ssl \u00b6 [jvm]\\ val ssl : HttpClientSSLConfig ? = null","title":"ssl - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config/ssl/#ssl","text":"[jvm]\\ val ssl : HttpClientSSLConfig ? = null","title":"ssl"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/","text":"// misk / misk.client / BackwardsCompatibleClientsConfigConverter BackwardsCompatibleClientsConfigConverter \u00b6 [jvm]\\ class BackwardsCompatibleClientsConfigConverter : Converter< BackwardsCompatibleClientsConfig , HttpClientsConfig > Functions \u00b6 Name Summary convert [jvm] open override fun convert (value: BackwardsCompatibleClientsConfig ): HttpClientsConfig getInputType [jvm] open override fun getInputType (typeFactory: TypeFactory): JavaType getOutputType [jvm] open override fun getOutputType (typeFactory: TypeFactory): JavaType","title":"BackwardsCompatibleClientsConfigConverter - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/#backwardscompatibleclientsconfigconverter","text":"[jvm]\\ class BackwardsCompatibleClientsConfigConverter : Converter< BackwardsCompatibleClientsConfig , HttpClientsConfig >","title":"BackwardsCompatibleClientsConfigConverter"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/#functions","text":"Name Summary convert [jvm] open override fun convert (value: BackwardsCompatibleClientsConfig ): HttpClientsConfig getInputType [jvm] open override fun getInputType (typeFactory: TypeFactory): JavaType getOutputType [jvm] open override fun getOutputType (typeFactory: TypeFactory): JavaType","title":"Functions"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/-backwards-compatible-clients-config-converter/","text":"// misk / misk.client / BackwardsCompatibleClientsConfigConverter / BackwardsCompatibleClientsConfigConverter BackwardsCompatibleClientsConfigConverter \u00b6 [jvm]\\ fun BackwardsCompatibleClientsConfigConverter ()","title":"BackwardsCompatibleClientsConfigConverter - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/-backwards-compatible-clients-config-converter/#backwardscompatibleclientsconfigconverter","text":"[jvm]\\ fun BackwardsCompatibleClientsConfigConverter ()","title":"BackwardsCompatibleClientsConfigConverter"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/convert/","text":"// misk / misk.client / BackwardsCompatibleClientsConfigConverter / convert convert \u00b6 [jvm]\\ open override fun convert (value: BackwardsCompatibleClientsConfig ): HttpClientsConfig","title":"convert - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/convert/#convert","text":"[jvm]\\ open override fun convert (value: BackwardsCompatibleClientsConfig ): HttpClientsConfig","title":"convert"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/get-input-type/","text":"// misk / misk.client / BackwardsCompatibleClientsConfigConverter / getInputType getInputType \u00b6 [jvm]\\ open override fun getInputType (typeFactory: TypeFactory): JavaType","title":"getInputType - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/get-input-type/#getinputtype","text":"[jvm]\\ open override fun getInputType (typeFactory: TypeFactory): JavaType","title":"getInputType"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/get-output-type/","text":"// misk / misk.client / BackwardsCompatibleClientsConfigConverter / getOutputType getOutputType \u00b6 [jvm]\\ open override fun getOutputType (typeFactory: TypeFactory): JavaType","title":"getOutputType - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-clients-config-converter/get-output-type/#getoutputtype","text":"[jvm]\\ open override fun getOutputType (typeFactory: TypeFactory): JavaType","title":"getOutputType"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig BackwardsCompatibleEndpointConfig \u00b6 [jvm]\\ data class BackwardsCompatibleEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int , maxRequestsPerHost: Int , maxIdleConnections: Int , keepAliveDuration: Duration , ssl: HttpClientSSLConfig ?, clientConfig: HttpClientConfig ?) Properties \u00b6 Name Summary callTimeout [jvm] val callTimeout : Duration ? = null clientConfig [jvm] val clientConfig : HttpClientConfig ? = null connectTimeout [jvm] val connectTimeout : Duration ? = null envoy [jvm] val envoy : HttpClientEnvoyConfig ? = null keepAliveDuration [jvm] val keepAliveDuration : Duration maxIdleConnections [jvm] val maxIdleConnections : Int = 100 maxRequests [jvm] val maxRequests : Int = 128 maxRequestsPerHost [jvm] val maxRequestsPerHost : Int = 32 pingInterval [jvm] val pingInterval : Duration ? = null readTimeout [jvm] val readTimeout : Duration ? = null ssl [jvm] val ssl : HttpClientSSLConfig ? = null url [jvm] val url : String ? = null writeTimeout [jvm] val writeTimeout : Duration ? = null","title":"BackwardsCompatibleEndpointConfig - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/#backwardscompatibleendpointconfig","text":"[jvm]\\ data class BackwardsCompatibleEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int , maxRequestsPerHost: Int , maxIdleConnections: Int , keepAliveDuration: Duration , ssl: HttpClientSSLConfig ?, clientConfig: HttpClientConfig ?)","title":"BackwardsCompatibleEndpointConfig"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/#properties","text":"Name Summary callTimeout [jvm] val callTimeout : Duration ? = null clientConfig [jvm] val clientConfig : HttpClientConfig ? = null connectTimeout [jvm] val connectTimeout : Duration ? = null envoy [jvm] val envoy : HttpClientEnvoyConfig ? = null keepAliveDuration [jvm] val keepAliveDuration : Duration maxIdleConnections [jvm] val maxIdleConnections : Int = 100 maxRequests [jvm] val maxRequests : Int = 128 maxRequestsPerHost [jvm] val maxRequestsPerHost : Int = 32 pingInterval [jvm] val pingInterval : Duration ? = null readTimeout [jvm] val readTimeout : Duration ? = null ssl [jvm] val ssl : HttpClientSSLConfig ? = null url [jvm] val url : String ? = null writeTimeout [jvm] val writeTimeout : Duration ? = null","title":"Properties"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/-backwards-compatible-endpoint-config/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / BackwardsCompatibleEndpointConfig BackwardsCompatibleEndpointConfig \u00b6 [jvm]\\ fun BackwardsCompatibleEndpointConfig (url: String ? = null, envoy: HttpClientEnvoyConfig ? = null, connectTimeout: Duration ? = null, writeTimeout: Duration ? = null, readTimeout: Duration ? = null, pingInterval: Duration ? = null, callTimeout: Duration ? = null, maxRequests: Int = 128, maxRequestsPerHost: Int = 32, maxIdleConnections: Int = 100, keepAliveDuration: Duration = Duration.ofMinutes(5), ssl: HttpClientSSLConfig ? = null, clientConfig: HttpClientConfig ? = null)","title":"BackwardsCompatibleEndpointConfig - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/-backwards-compatible-endpoint-config/#backwardscompatibleendpointconfig","text":"[jvm]\\ fun BackwardsCompatibleEndpointConfig (url: String ? = null, envoy: HttpClientEnvoyConfig ? = null, connectTimeout: Duration ? = null, writeTimeout: Duration ? = null, readTimeout: Duration ? = null, pingInterval: Duration ? = null, callTimeout: Duration ? = null, maxRequests: Int = 128, maxRequestsPerHost: Int = 32, maxIdleConnections: Int = 100, keepAliveDuration: Duration = Duration.ofMinutes(5), ssl: HttpClientSSLConfig ? = null, clientConfig: HttpClientConfig ? = null)","title":"BackwardsCompatibleEndpointConfig"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/call-timeout/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / callTimeout callTimeout \u00b6 [jvm]\\ val callTimeout : Duration ? = null","title":"callTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/call-timeout/#calltimeout","text":"[jvm]\\ val callTimeout : Duration ? = null","title":"callTimeout"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/client-config/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / clientConfig clientConfig \u00b6 [jvm]\\ val clientConfig : HttpClientConfig ? = null","title":"clientConfig - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/client-config/#clientconfig","text":"[jvm]\\ val clientConfig : HttpClientConfig ? = null","title":"clientConfig"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/connect-timeout/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / connectTimeout connectTimeout \u00b6 [jvm]\\ val connectTimeout : Duration ? = null","title":"connectTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/connect-timeout/#connecttimeout","text":"[jvm]\\ val connectTimeout : Duration ? = null","title":"connectTimeout"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/envoy/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / envoy envoy \u00b6 [jvm]\\ val envoy : HttpClientEnvoyConfig ? = null","title":"envoy - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/envoy/#envoy","text":"[jvm]\\ val envoy : HttpClientEnvoyConfig ? = null","title":"envoy"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/keep-alive-duration/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / keepAliveDuration keepAliveDuration \u00b6 [jvm]\\ val keepAliveDuration : Duration","title":"keepAliveDuration - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/keep-alive-duration/#keepaliveduration","text":"[jvm]\\ val keepAliveDuration : Duration","title":"keepAliveDuration"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/max-idle-connections/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / maxIdleConnections maxIdleConnections \u00b6 [jvm]\\ val maxIdleConnections : Int = 100","title":"maxIdleConnections - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/max-idle-connections/#maxidleconnections","text":"[jvm]\\ val maxIdleConnections : Int = 100","title":"maxIdleConnections"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/max-requests-per-host/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / maxRequestsPerHost maxRequestsPerHost \u00b6 [jvm]\\ val maxRequestsPerHost : Int = 32","title":"maxRequestsPerHost - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/max-requests-per-host/#maxrequestsperhost","text":"[jvm]\\ val maxRequestsPerHost : Int = 32","title":"maxRequestsPerHost"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/max-requests/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / maxRequests maxRequests \u00b6 [jvm]\\ val maxRequests : Int = 128","title":"maxRequests - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/max-requests/#maxrequests","text":"[jvm]\\ val maxRequests : Int = 128","title":"maxRequests"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/ping-interval/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / pingInterval pingInterval \u00b6 [jvm]\\ val pingInterval : Duration ? = null","title":"pingInterval - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/ping-interval/#pinginterval","text":"[jvm]\\ val pingInterval : Duration ? = null","title":"pingInterval"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/read-timeout/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / readTimeout readTimeout \u00b6 [jvm]\\ val readTimeout : Duration ? = null","title":"readTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/read-timeout/#readtimeout","text":"[jvm]\\ val readTimeout : Duration ? = null","title":"readTimeout"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/ssl/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / ssl ssl \u00b6 [jvm]\\ val ssl : HttpClientSSLConfig ? = null","title":"ssl - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/ssl/#ssl","text":"[jvm]\\ val ssl : HttpClientSSLConfig ? = null","title":"ssl"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/url/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / url url \u00b6 [jvm]\\ val url : String ? = null","title":"url - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/url/#url","text":"[jvm]\\ val url : String ? = null","title":"url"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/write-timeout/","text":"// misk / misk.client / BackwardsCompatibleEndpointConfig / writeTimeout writeTimeout \u00b6 [jvm]\\ val writeTimeout : Duration ? = null","title":"writeTimeout - Misk"},{"location":"0.x/misk/misk.client/-backwards-compatible-endpoint-config/write-timeout/#writetimeout","text":"[jvm]\\ val writeTimeout : Duration ? = null","title":"writeTimeout"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/","text":"// misk / misk.client / BeginClientCallChain BeginClientCallChain \u00b6 [jvm]\\ interface BeginClientCallChain Functions \u00b6 Name Summary proceed [jvm] abstract fun proceed (args: List <*>): Call< Any > Properties \u00b6 Name Summary action [jvm] abstract val action : ClientAction args [jvm] abstract val args : List <*>","title":"BeginClientCallChain - Misk"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/#beginclientcallchain","text":"[jvm]\\ interface BeginClientCallChain","title":"BeginClientCallChain"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/#functions","text":"Name Summary proceed [jvm] abstract fun proceed (args: List <*>): Call< Any >","title":"Functions"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/#properties","text":"Name Summary action [jvm] abstract val action : ClientAction args [jvm] abstract val args : List <*>","title":"Properties"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/action/","text":"// misk / misk.client / BeginClientCallChain / action action \u00b6 [jvm]\\ abstract val action : ClientAction","title":"action - Misk"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/action/#action","text":"[jvm]\\ abstract val action : ClientAction","title":"action"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/args/","text":"// misk / misk.client / BeginClientCallChain / args args \u00b6 [jvm]\\ abstract val args : List <*>","title":"args - Misk"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/args/#args","text":"[jvm]\\ abstract val args : List <*>","title":"args"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/proceed/","text":"// misk / misk.client / BeginClientCallChain / proceed proceed \u00b6 [jvm]\\ abstract fun proceed (args: List <*>): Call< Any >","title":"proceed - Misk"},{"location":"0.x/misk/misk.client/-begin-client-call-chain/proceed/#proceed","text":"[jvm]\\ abstract fun proceed (args: List <*>): Call< Any >","title":"proceed"},{"location":"0.x/misk/misk.client/-client-action/","text":"// misk / misk.client / ClientAction ClientAction \u00b6 [jvm]\\ data class ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType ) Metadata about a client action Constructors \u00b6 ClientAction [jvm] fun ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType ) Properties \u00b6 Name Summary function [jvm] val function : KFunction <*> The function that was used to invoke the action name [jvm] val name : String The name of the action, composed of the name of the client + the name of the method parameterTypes [jvm] val parameterTypes : List < KType > The parameter types to the action returnType [jvm] val returnType : KType The return type fo the action","title":"ClientAction - Misk"},{"location":"0.x/misk/misk.client/-client-action/#clientaction","text":"[jvm]\\ data class ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType ) Metadata about a client action","title":"ClientAction"},{"location":"0.x/misk/misk.client/-client-action/#constructors","text":"ClientAction [jvm] fun ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType )","title":"Constructors"},{"location":"0.x/misk/misk.client/-client-action/#properties","text":"Name Summary function [jvm] val function : KFunction <*> The function that was used to invoke the action name [jvm] val name : String The name of the action, composed of the name of the client + the name of the method parameterTypes [jvm] val parameterTypes : List < KType > The parameter types to the action returnType [jvm] val returnType : KType The return type fo the action","title":"Properties"},{"location":"0.x/misk/misk.client/-client-action/-client-action/","text":"// misk / misk.client / ClientAction / ClientAction ClientAction \u00b6 [jvm]\\ fun ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType )","title":"ClientAction - Misk"},{"location":"0.x/misk/misk.client/-client-action/-client-action/#clientaction","text":"[jvm]\\ fun ClientAction (name: String , function: KFunction <*>, parameterTypes: List < KType >, returnType: KType )","title":"ClientAction"},{"location":"0.x/misk/misk.client/-client-action/function/","text":"// misk / misk.client / ClientAction / function function \u00b6 [jvm]\\ val function : KFunction <*> The function that was used to invoke the action","title":"function - Misk"},{"location":"0.x/misk/misk.client/-client-action/function/#function","text":"[jvm]\\ val function : KFunction <*> The function that was used to invoke the action","title":"function"},{"location":"0.x/misk/misk.client/-client-action/name/","text":"// misk / misk.client / ClientAction / name name \u00b6 [jvm]\\ val name : String The name of the action, composed of the name of the client + the name of the method","title":"name - Misk"},{"location":"0.x/misk/misk.client/-client-action/name/#name","text":"[jvm]\\ val name : String The name of the action, composed of the name of the client + the name of the method","title":"name"},{"location":"0.x/misk/misk.client/-client-action/parameter-types/","text":"// misk / misk.client / ClientAction / parameterTypes parameterTypes \u00b6 [jvm]\\ val parameterTypes : List < KType > The parameter types to the action","title":"parameterTypes - Misk"},{"location":"0.x/misk/misk.client/-client-action/parameter-types/#parametertypes","text":"[jvm]\\ val parameterTypes : List < KType > The parameter types to the action","title":"parameterTypes"},{"location":"0.x/misk/misk.client/-client-action/return-type/","text":"// misk / misk.client / ClientAction / returnType returnType \u00b6 [jvm]\\ val returnType : KType The return type fo the action","title":"returnType - Misk"},{"location":"0.x/misk/misk.client/-client-action/return-type/#returntype","text":"[jvm]\\ val returnType : KType The return type fo the action","title":"returnType"},{"location":"0.x/misk/misk.client/-client-application-interceptor-factory/","text":"// misk / misk.client / ClientApplicationInterceptorFactory ClientApplicationInterceptorFactory \u00b6 [jvm]\\ interface ClientApplicationInterceptorFactory Functions \u00b6 Name Summary create [jvm] abstract fun create (action: ClientAction ): Interceptor?","title":"ClientApplicationInterceptorFactory - Misk"},{"location":"0.x/misk/misk.client/-client-application-interceptor-factory/#clientapplicationinterceptorfactory","text":"[jvm]\\ interface ClientApplicationInterceptorFactory","title":"ClientApplicationInterceptorFactory"},{"location":"0.x/misk/misk.client/-client-application-interceptor-factory/#functions","text":"Name Summary create [jvm] abstract fun create (action: ClientAction ): Interceptor?","title":"Functions"},{"location":"0.x/misk/misk.client/-client-application-interceptor-factory/create/","text":"// misk / misk.client / ClientApplicationInterceptorFactory / create create \u00b6 [jvm]\\ abstract fun create (action: ClientAction ): Interceptor?","title":"create - Misk"},{"location":"0.x/misk/misk.client/-client-application-interceptor-factory/create/#create","text":"[jvm]\\ abstract fun create (action: ClientAction ): Interceptor?","title":"create"},{"location":"0.x/misk/misk.client/-client-chain/","text":"// misk / misk.client / ClientChain ClientChain \u00b6 [jvm]\\ interface ClientChain Functions \u00b6 Name Summary proceed [jvm] abstract fun proceed (args: List <*>, callback: Callback< Any >) Properties \u00b6 Name Summary action [jvm] abstract val action : ClientAction args [jvm] abstract val args : List <*> call [jvm] abstract val call : Call< Any > callback [jvm] abstract val callback : Callback< Any >","title":"ClientChain - Misk"},{"location":"0.x/misk/misk.client/-client-chain/#clientchain","text":"[jvm]\\ interface ClientChain","title":"ClientChain"},{"location":"0.x/misk/misk.client/-client-chain/#functions","text":"Name Summary proceed [jvm] abstract fun proceed (args: List <*>, callback: Callback< Any >)","title":"Functions"},{"location":"0.x/misk/misk.client/-client-chain/#properties","text":"Name Summary action [jvm] abstract val action : ClientAction args [jvm] abstract val args : List <*> call [jvm] abstract val call : Call< Any > callback [jvm] abstract val callback : Callback< Any >","title":"Properties"},{"location":"0.x/misk/misk.client/-client-chain/action/","text":"// misk / misk.client / ClientChain / action action \u00b6 [jvm]\\ abstract val action : ClientAction","title":"action - Misk"},{"location":"0.x/misk/misk.client/-client-chain/action/#action","text":"[jvm]\\ abstract val action : ClientAction","title":"action"},{"location":"0.x/misk/misk.client/-client-chain/args/","text":"// misk / misk.client / ClientChain / args args \u00b6 [jvm]\\ abstract val args : List <*>","title":"args - Misk"},{"location":"0.x/misk/misk.client/-client-chain/args/#args","text":"[jvm]\\ abstract val args : List <*>","title":"args"},{"location":"0.x/misk/misk.client/-client-chain/call/","text":"// misk / misk.client / ClientChain / call call \u00b6 [jvm]\\ abstract val call : Call< Any >","title":"call - Misk"},{"location":"0.x/misk/misk.client/-client-chain/call/#call","text":"[jvm]\\ abstract val call : Call< Any >","title":"call"},{"location":"0.x/misk/misk.client/-client-chain/callback/","text":"// misk / misk.client / ClientChain / callback callback \u00b6 [jvm]\\ abstract val callback : Callback< Any >","title":"callback - Misk"},{"location":"0.x/misk/misk.client/-client-chain/callback/#callback","text":"[jvm]\\ abstract val callback : Callback< Any >","title":"callback"},{"location":"0.x/misk/misk.client/-client-chain/proceed/","text":"// misk / misk.client / ClientChain / proceed proceed \u00b6 [jvm]\\ abstract fun proceed (args: List <*>, callback: Callback< Any >)","title":"proceed - Misk"},{"location":"0.x/misk/misk.client/-client-chain/proceed/#proceed","text":"[jvm]\\ abstract fun proceed (args: List <*>, callback: Callback< Any >)","title":"proceed"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/","text":"// misk / misk.client / ClientMetricsInterceptor ClientMetricsInterceptor \u00b6 [jvm]\\ class ClientMetricsInterceptor : Interceptor Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory Functions \u00b6 Name Summary intercept [jvm] open override fun intercept (chain: Interceptor.Chain): Response Properties \u00b6 Name Summary clientName [jvm] val clientName : String","title":"ClientMetricsInterceptor - Misk"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/#clientmetricsinterceptor","text":"[jvm]\\ class ClientMetricsInterceptor : Interceptor","title":"ClientMetricsInterceptor"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/#types","text":"Name Summary Factory [jvm] @Singleton class Factory","title":"Types"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/#functions","text":"Name Summary intercept [jvm] open override fun intercept (chain: Interceptor.Chain): Response","title":"Functions"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/#properties","text":"Name Summary clientName [jvm] val clientName : String","title":"Properties"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/client-name/","text":"// misk / misk.client / ClientMetricsInterceptor / clientName clientName \u00b6 [jvm]\\ val clientName : String","title":"clientName - Misk"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/client-name/#clientname","text":"[jvm]\\ val clientName : String","title":"clientName"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/intercept/","text":"// misk / misk.client / ClientMetricsInterceptor / intercept intercept \u00b6 [jvm]\\ open override fun intercept (chain: Interceptor.Chain): Response","title":"intercept - Misk"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/intercept/#intercept","text":"[jvm]\\ open override fun intercept (chain: Interceptor.Chain): Response","title":"intercept"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/-factory/","text":"// misk / misk.client / ClientMetricsInterceptor / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory Functions \u00b6 Name Summary create [jvm] fun create (clientName: String ): ClientMetricsInterceptor","title":"Factory - Misk"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/-factory/#factory","text":"[jvm]\\ @Singleton class Factory","title":"Factory"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/-factory/#functions","text":"Name Summary create [jvm] fun create (clientName: String ): ClientMetricsInterceptor","title":"Functions"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/-factory/create/","text":"// misk / misk.client / ClientMetricsInterceptor / Factory / create create \u00b6 [jvm]\\ fun create (clientName: String ): ClientMetricsInterceptor","title":"create - Misk"},{"location":"0.x/misk/misk.client/-client-metrics-interceptor/-factory/create/#create","text":"[jvm]\\ fun create (clientName: String ): ClientMetricsInterceptor","title":"create"},{"location":"0.x/misk/misk.client/-client-network-chain/","text":"// misk / misk.client / ClientNetworkChain ClientNetworkChain \u00b6 [jvm]\\ interface ClientNetworkChain Functions \u00b6 Name Summary proceed [jvm] abstract fun proceed (request: Request): Response Properties \u00b6 Name Summary action [jvm] abstract val action : ClientAction request [jvm] abstract val request : Request","title":"ClientNetworkChain - Misk"},{"location":"0.x/misk/misk.client/-client-network-chain/#clientnetworkchain","text":"[jvm]\\ interface ClientNetworkChain","title":"ClientNetworkChain"},{"location":"0.x/misk/misk.client/-client-network-chain/#functions","text":"Name Summary proceed [jvm] abstract fun proceed (request: Request): Response","title":"Functions"},{"location":"0.x/misk/misk.client/-client-network-chain/#properties","text":"Name Summary action [jvm] abstract val action : ClientAction request [jvm] abstract val request : Request","title":"Properties"},{"location":"0.x/misk/misk.client/-client-network-chain/action/","text":"// misk / misk.client / ClientNetworkChain / action action \u00b6 [jvm]\\ abstract val action : ClientAction","title":"action - Misk"},{"location":"0.x/misk/misk.client/-client-network-chain/action/#action","text":"[jvm]\\ abstract val action : ClientAction","title":"action"},{"location":"0.x/misk/misk.client/-client-network-chain/proceed/","text":"// misk / misk.client / ClientNetworkChain / proceed proceed \u00b6 [jvm]\\ abstract fun proceed (request: Request): Response","title":"proceed - Misk"},{"location":"0.x/misk/misk.client/-client-network-chain/proceed/#proceed","text":"[jvm]\\ abstract fun proceed (request: Request): Response","title":"proceed"},{"location":"0.x/misk/misk.client/-client-network-chain/request/","text":"// misk / misk.client / ClientNetworkChain / request request \u00b6 [jvm]\\ abstract val request : Request","title":"request - Misk"},{"location":"0.x/misk/misk.client/-client-network-chain/request/#request","text":"[jvm]\\ abstract val request : Request","title":"request"},{"location":"0.x/misk/misk.client/-client-network-interceptor/","text":"// misk / misk.client / ClientNetworkInterceptor ClientNetworkInterceptor \u00b6 [jvm]\\ interface ClientNetworkInterceptor Intercepts client side calls at the application level, able to view and modify the outgoing HTTP request and observe the returned HTTP response Types \u00b6 Name Summary Factory [jvm] interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: Functions \u00b6 Name Summary intercept [jvm] abstract fun intercept (chain: ClientNetworkChain ): Response","title":"ClientNetworkInterceptor - Misk"},{"location":"0.x/misk/misk.client/-client-network-interceptor/#clientnetworkinterceptor","text":"[jvm]\\ interface ClientNetworkInterceptor Intercepts client side calls at the application level, able to view and modify the outgoing HTTP request and observe the returned HTTP response","title":"ClientNetworkInterceptor"},{"location":"0.x/misk/misk.client/-client-network-interceptor/#types","text":"Name Summary Factory [jvm] interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule:","title":"Types"},{"location":"0.x/misk/misk.client/-client-network-interceptor/#functions","text":"Name Summary intercept [jvm] abstract fun intercept (chain: ClientNetworkChain ): Response","title":"Functions"},{"location":"0.x/misk/misk.client/-client-network-interceptor/intercept/","text":"// misk / misk.client / ClientNetworkInterceptor / intercept intercept \u00b6 [jvm]\\ abstract fun intercept (chain: ClientNetworkChain ): Response","title":"intercept - Misk"},{"location":"0.x/misk/misk.client/-client-network-interceptor/intercept/#intercept","text":"[jvm]\\ abstract fun intercept (chain: ClientNetworkChain ): Response","title":"intercept"},{"location":"0.x/misk/misk.client/-client-network-interceptor/-factory/","text":"// misk / misk.client / ClientNetworkInterceptor / Factory Factory \u00b6 [jvm]\\ interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<ClientNetworkInterceptor.Factory>().to<MyFactory>() Functions \u00b6 Name Summary create [jvm] abstract fun create (action: ClientAction ): ClientNetworkInterceptor ?","title":"Factory - Misk"},{"location":"0.x/misk/misk.client/-client-network-interceptor/-factory/#factory","text":"[jvm]\\ interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<ClientNetworkInterceptor.Factory>().to<MyFactory>()","title":"Factory"},{"location":"0.x/misk/misk.client/-client-network-interceptor/-factory/#functions","text":"Name Summary create [jvm] abstract fun create (action: ClientAction ): ClientNetworkInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk.client/-client-network-interceptor/-factory/create/","text":"// misk / misk.client / ClientNetworkInterceptor / Factory / create create \u00b6 [jvm]\\ abstract fun create (action: ClientAction ): ClientNetworkInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk.client/-client-network-interceptor/-factory/create/#create","text":"[jvm]\\ abstract fun create (action: ClientAction ): ClientNetworkInterceptor ?","title":"create"},{"location":"0.x/misk/misk.client/-client-network-interceptors-module/","text":"// misk / misk.client / ClientNetworkInterceptorsModule ClientNetworkInterceptorsModule \u00b6 [jvm]\\ class ClientNetworkInterceptorsModule : KAbstractModule The common set of ClientNetworkInterceptor s for all misk apps. Constructors \u00b6 ClientNetworkInterceptorsModule [jvm] fun ClientNetworkInterceptorsModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ClientNetworkInterceptorsModule - Misk"},{"location":"0.x/misk/misk.client/-client-network-interceptors-module/#clientnetworkinterceptorsmodule","text":"[jvm]\\ class ClientNetworkInterceptorsModule : KAbstractModule The common set of ClientNetworkInterceptor s for all misk apps.","title":"ClientNetworkInterceptorsModule"},{"location":"0.x/misk/misk.client/-client-network-interceptors-module/#constructors","text":"ClientNetworkInterceptorsModule [jvm] fun ClientNetworkInterceptorsModule ()","title":"Constructors"},{"location":"0.x/misk/misk.client/-client-network-interceptors-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-client-network-interceptors-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-client-network-interceptors-module/-client-network-interceptors-module/","text":"// misk / misk.client / ClientNetworkInterceptorsModule / ClientNetworkInterceptorsModule ClientNetworkInterceptorsModule \u00b6 [jvm]\\ fun ClientNetworkInterceptorsModule ()","title":"ClientNetworkInterceptorsModule - Misk"},{"location":"0.x/misk/misk.client/-client-network-interceptors-module/-client-network-interceptors-module/#clientnetworkinterceptorsmodule","text":"[jvm]\\ fun ClientNetworkInterceptorsModule ()","title":"ClientNetworkInterceptorsModule"},{"location":"0.x/misk/misk.client/-grpc-client-module/","text":"// misk / misk.client / GrpcClientModule GrpcClientModule \u00b6 [jvm]\\ class GrpcClientModule < T : Service, G : T >(kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ?) : KAbstractModule Creates a gRPC client given a Wire-generated interface and HTTP configuration. Constructors \u00b6 GrpcClientModule [jvm] fun < T : Service, G : T > GrpcClientModule (kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ? = null) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"GrpcClientModule - Misk"},{"location":"0.x/misk/misk.client/-grpc-client-module/#grpcclientmodule","text":"[jvm]\\ class GrpcClientModule < T : Service, G : T >(kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ?) : KAbstractModule Creates a gRPC client given a Wire-generated interface and HTTP configuration.","title":"GrpcClientModule"},{"location":"0.x/misk/misk.client/-grpc-client-module/#constructors","text":"GrpcClientModule [jvm] fun < T : Service, G : T > GrpcClientModule (kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ? = null)","title":"Constructors"},{"location":"0.x/misk/misk.client/-grpc-client-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.client/-grpc-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-grpc-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-grpc-client-module/-grpc-client-module/","text":"// misk / misk.client / GrpcClientModule / GrpcClientModule GrpcClientModule \u00b6 [jvm]\\ fun < T : Service, G : T > GrpcClientModule (kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ? = null)","title":"GrpcClientModule - Misk"},{"location":"0.x/misk/misk.client/-grpc-client-module/-grpc-client-module/#grpcclientmodule","text":"[jvm]\\ fun < T : Service, G : T > GrpcClientModule (kclass: KClass < T >, grpcClientClass: KClass < G >, name: String , annotation: Annotation ? = null)","title":"GrpcClientModule"},{"location":"0.x/misk/misk.client/-grpc-client-module/-companion/","text":"// misk / misk.client / GrpcClientModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < T : Service, G : T > create (name: String , annotation: Annotation ? = null): GrpcClientModule < T , G >","title":"Companion - Misk"},{"location":"0.x/misk/misk.client/-grpc-client-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.client/-grpc-client-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < T : Service, G : T > create (name: String , annotation: Annotation ? = null): GrpcClientModule < T , G >","title":"Functions"},{"location":"0.x/misk/misk.client/-grpc-client-module/-companion/create/","text":"// misk / misk.client / GrpcClientModule / Companion / create create \u00b6 [jvm]\\ inline fun < T : Service, G : T > create (name: String , annotation: Annotation ? = null): GrpcClientModule < T , G >","title":"create - Misk"},{"location":"0.x/misk/misk.client/-grpc-client-module/-companion/create/#create","text":"[jvm]\\ inline fun < T : Service, G : T > create (name: String , annotation: Annotation ? = null): GrpcClientModule < T , G >","title":"create"},{"location":"0.x/misk/misk.client/-http-client-config/","text":"// misk / misk.client / HttpClientConfig HttpClientConfig \u00b6 [jvm]\\ data class HttpClientConfig (connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int ?, maxRequestsPerHost: Int ?, maxIdleConnections: Int ?, keepAliveDuration: Duration ?, ssl: HttpClientSSLConfig ?, unixSocketFile: String ?, protocols: List < String >?) Functions \u00b6 Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientConfig Properties \u00b6 Name Summary callTimeout [jvm] val callTimeout : Duration ? = null connectTimeout [jvm] val connectTimeout : Duration ? = null keepAliveDuration [jvm] val keepAliveDuration : Duration ? = null maxIdleConnections [jvm] val maxIdleConnections : Int ? = null maxRequests [jvm] val maxRequests : Int ? = null maxRequestsPerHost [jvm] val maxRequestsPerHost : Int ? = null pingInterval [jvm] val pingInterval : Duration ? = null protocols [jvm] val protocols : List < String >? = null readTimeout [jvm] val readTimeout : Duration ? = null ssl [jvm] val ssl : HttpClientSSLConfig ? = null unixSocketFile [jvm] val unixSocketFile : String ? = null writeTimeout [jvm] val writeTimeout : Duration ? = null Extensions \u00b6 Name Summary applyDefaults [jvm] fun HttpClientConfig . applyDefaults (other: HttpClientConfig ): HttpClientConfig","title":"HttpClientConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/#httpclientconfig","text":"[jvm]\\ data class HttpClientConfig (connectTimeout: Duration ?, writeTimeout: Duration ?, readTimeout: Duration ?, pingInterval: Duration ?, callTimeout: Duration ?, maxRequests: Int ?, maxRequestsPerHost: Int ?, maxIdleConnections: Int ?, keepAliveDuration: Duration ?, ssl: HttpClientSSLConfig ?, unixSocketFile: String ?, protocols: List < String >?)","title":"HttpClientConfig"},{"location":"0.x/misk/misk.client/-http-client-config/#functions","text":"Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientConfig","title":"Functions"},{"location":"0.x/misk/misk.client/-http-client-config/#properties","text":"Name Summary callTimeout [jvm] val callTimeout : Duration ? = null connectTimeout [jvm] val connectTimeout : Duration ? = null keepAliveDuration [jvm] val keepAliveDuration : Duration ? = null maxIdleConnections [jvm] val maxIdleConnections : Int ? = null maxRequests [jvm] val maxRequests : Int ? = null maxRequestsPerHost [jvm] val maxRequestsPerHost : Int ? = null pingInterval [jvm] val pingInterval : Duration ? = null protocols [jvm] val protocols : List < String >? = null readTimeout [jvm] val readTimeout : Duration ? = null ssl [jvm] val ssl : HttpClientSSLConfig ? = null unixSocketFile [jvm] val unixSocketFile : String ? = null writeTimeout [jvm] val writeTimeout : Duration ? = null","title":"Properties"},{"location":"0.x/misk/misk.client/-http-client-config/#extensions","text":"Name Summary applyDefaults [jvm] fun HttpClientConfig . applyDefaults (other: HttpClientConfig ): HttpClientConfig","title":"Extensions"},{"location":"0.x/misk/misk.client/-http-client-config/-http-client-config/","text":"// misk / misk.client / HttpClientConfig / HttpClientConfig HttpClientConfig \u00b6 [jvm]\\ fun HttpClientConfig (connectTimeout: Duration ? = null, writeTimeout: Duration ? = null, readTimeout: Duration ? = null, pingInterval: Duration ? = null, callTimeout: Duration ? = null, maxRequests: Int ? = null, maxRequestsPerHost: Int ? = null, maxIdleConnections: Int ? = null, keepAliveDuration: Duration ? = null, ssl: HttpClientSSLConfig ? = null, unixSocketFile: String ? = null, protocols: List < String >? = null)","title":"HttpClientConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/-http-client-config/#httpclientconfig","text":"[jvm]\\ fun HttpClientConfig (connectTimeout: Duration ? = null, writeTimeout: Duration ? = null, readTimeout: Duration ? = null, pingInterval: Duration ? = null, callTimeout: Duration ? = null, maxRequests: Int ? = null, maxRequestsPerHost: Int ? = null, maxIdleConnections: Int ? = null, keepAliveDuration: Duration ? = null, ssl: HttpClientSSLConfig ? = null, unixSocketFile: String ? = null, protocols: List < String >? = null)","title":"HttpClientConfig"},{"location":"0.x/misk/misk.client/-http-client-config/call-timeout/","text":"// misk / misk.client / HttpClientConfig / callTimeout callTimeout \u00b6 [jvm]\\ val callTimeout : Duration ? = null","title":"callTimeout - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/call-timeout/#calltimeout","text":"[jvm]\\ val callTimeout : Duration ? = null","title":"callTimeout"},{"location":"0.x/misk/misk.client/-http-client-config/connect-timeout/","text":"// misk / misk.client / HttpClientConfig / connectTimeout connectTimeout \u00b6 [jvm]\\ val connectTimeout : Duration ? = null","title":"connectTimeout - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/connect-timeout/#connecttimeout","text":"[jvm]\\ val connectTimeout : Duration ? = null","title":"connectTimeout"},{"location":"0.x/misk/misk.client/-http-client-config/keep-alive-duration/","text":"// misk / misk.client / HttpClientConfig / keepAliveDuration keepAliveDuration \u00b6 [jvm]\\ val keepAliveDuration : Duration ? = null","title":"keepAliveDuration - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/keep-alive-duration/#keepaliveduration","text":"[jvm]\\ val keepAliveDuration : Duration ? = null","title":"keepAliveDuration"},{"location":"0.x/misk/misk.client/-http-client-config/max-idle-connections/","text":"// misk / misk.client / HttpClientConfig / maxIdleConnections maxIdleConnections \u00b6 [jvm]\\ val maxIdleConnections : Int ? = null","title":"maxIdleConnections - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/max-idle-connections/#maxidleconnections","text":"[jvm]\\ val maxIdleConnections : Int ? = null","title":"maxIdleConnections"},{"location":"0.x/misk/misk.client/-http-client-config/max-requests-per-host/","text":"// misk / misk.client / HttpClientConfig / maxRequestsPerHost maxRequestsPerHost \u00b6 [jvm]\\ val maxRequestsPerHost : Int ? = null","title":"maxRequestsPerHost - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/max-requests-per-host/#maxrequestsperhost","text":"[jvm]\\ val maxRequestsPerHost : Int ? = null","title":"maxRequestsPerHost"},{"location":"0.x/misk/misk.client/-http-client-config/max-requests/","text":"// misk / misk.client / HttpClientConfig / maxRequests maxRequests \u00b6 [jvm]\\ val maxRequests : Int ? = null","title":"maxRequests - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/max-requests/#maxrequests","text":"[jvm]\\ val maxRequests : Int ? = null","title":"maxRequests"},{"location":"0.x/misk/misk.client/-http-client-config/ping-interval/","text":"// misk / misk.client / HttpClientConfig / pingInterval pingInterval \u00b6 [jvm]\\ val pingInterval : Duration ? = null","title":"pingInterval - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/ping-interval/#pinginterval","text":"[jvm]\\ val pingInterval : Duration ? = null","title":"pingInterval"},{"location":"0.x/misk/misk.client/-http-client-config/protocols/","text":"// misk / misk.client / HttpClientConfig / protocols protocols \u00b6 [jvm]\\ val protocols : List < String >? = null","title":"protocols - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/protocols/#protocols","text":"[jvm]\\ val protocols : List < String >? = null","title":"protocols"},{"location":"0.x/misk/misk.client/-http-client-config/read-timeout/","text":"// misk / misk.client / HttpClientConfig / readTimeout readTimeout \u00b6 [jvm]\\ val readTimeout : Duration ? = null","title":"readTimeout - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/read-timeout/#readtimeout","text":"[jvm]\\ val readTimeout : Duration ? = null","title":"readTimeout"},{"location":"0.x/misk/misk.client/-http-client-config/ssl/","text":"// misk / misk.client / HttpClientConfig / ssl ssl \u00b6 [jvm]\\ val ssl : HttpClientSSLConfig ? = null","title":"ssl - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/ssl/#ssl","text":"[jvm]\\ val ssl : HttpClientSSLConfig ? = null","title":"ssl"},{"location":"0.x/misk/misk.client/-http-client-config/to-wisp-config/","text":"// misk / misk.client / HttpClientConfig / toWispConfig toWispConfig \u00b6 [jvm]\\ fun toWispConfig (): HttpClientConfig","title":"toWispConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/to-wisp-config/#towispconfig","text":"[jvm]\\ fun toWispConfig (): HttpClientConfig","title":"toWispConfig"},{"location":"0.x/misk/misk.client/-http-client-config/unix-socket-file/","text":"// misk / misk.client / HttpClientConfig / unixSocketFile unixSocketFile \u00b6 [jvm]\\ val unixSocketFile : String ? = null","title":"unixSocketFile - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/unix-socket-file/#unixsocketfile","text":"[jvm]\\ val unixSocketFile : String ? = null","title":"unixSocketFile"},{"location":"0.x/misk/misk.client/-http-client-config/write-timeout/","text":"// misk / misk.client / HttpClientConfig / writeTimeout writeTimeout \u00b6 [jvm]\\ val writeTimeout : Duration ? = null","title":"writeTimeout - Misk"},{"location":"0.x/misk/misk.client/-http-client-config/write-timeout/#writetimeout","text":"[jvm]\\ val writeTimeout : Duration ? = null","title":"writeTimeout"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/","text":"// misk / misk.client / HttpClientConfigUrlProvider HttpClientConfigUrlProvider \u00b6 [jvm]\\ class HttpClientConfigUrlProvider @Injectconstructor Calculates the url for an http client config, which can differ depending on if the client is envoy-based or connects directly. Constructors \u00b6 HttpClientConfigUrlProvider [jvm] @Inject fun HttpClientConfigUrlProvider () Functions \u00b6 Name Summary getUrl [jvm] fun getUrl (endpointConfig: HttpClientEndpointConfig ): String Properties \u00b6 Name Summary envoyClientEndpointProvider [jvm] @Inject(optional = true) lateinit var envoyClientEndpointProvider : EnvoyClientEndpointProvider","title":"HttpClientConfigUrlProvider - Misk"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/#httpclientconfigurlprovider","text":"[jvm]\\ class HttpClientConfigUrlProvider @Injectconstructor Calculates the url for an http client config, which can differ depending on if the client is envoy-based or connects directly.","title":"HttpClientConfigUrlProvider"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/#constructors","text":"HttpClientConfigUrlProvider [jvm] @Inject fun HttpClientConfigUrlProvider ()","title":"Constructors"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/#functions","text":"Name Summary getUrl [jvm] fun getUrl (endpointConfig: HttpClientEndpointConfig ): String","title":"Functions"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/#properties","text":"Name Summary envoyClientEndpointProvider [jvm] @Inject(optional = true) lateinit var envoyClientEndpointProvider : EnvoyClientEndpointProvider","title":"Properties"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/-http-client-config-url-provider/","text":"// misk / misk.client / HttpClientConfigUrlProvider / HttpClientConfigUrlProvider HttpClientConfigUrlProvider \u00b6 [jvm]\\ @Inject fun HttpClientConfigUrlProvider ()","title":"HttpClientConfigUrlProvider - Misk"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/-http-client-config-url-provider/#httpclientconfigurlprovider","text":"[jvm]\\ @Inject fun HttpClientConfigUrlProvider ()","title":"HttpClientConfigUrlProvider"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/envoy-client-endpoint-provider/","text":"// misk / misk.client / HttpClientConfigUrlProvider / envoyClientEndpointProvider envoyClientEndpointProvider \u00b6 [jvm]\\ @Inject(optional = true) lateinit var envoyClientEndpointProvider : EnvoyClientEndpointProvider","title":"envoyClientEndpointProvider - Misk"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/envoy-client-endpoint-provider/#envoyclientendpointprovider","text":"[jvm]\\ @Inject(optional = true) lateinit var envoyClientEndpointProvider : EnvoyClientEndpointProvider","title":"envoyClientEndpointProvider"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/get-url/","text":"// misk / misk.client / HttpClientConfigUrlProvider / getUrl getUrl \u00b6 [jvm]\\ fun getUrl (endpointConfig: HttpClientEndpointConfig ): String","title":"getUrl - Misk"},{"location":"0.x/misk/misk.client/-http-client-config-url-provider/get-url/#geturl","text":"[jvm]\\ fun getUrl (endpointConfig: HttpClientEndpointConfig ): String","title":"getUrl"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/","text":"// misk / misk.client / HttpClientEndpointConfig HttpClientEndpointConfig \u00b6 [jvm]\\ data class HttpClientEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, clientConfig: HttpClientConfig ) Functions \u00b6 Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientEndpointConfig Properties \u00b6 Name Summary clientConfig [jvm] val clientConfig : HttpClientConfig envoy [jvm] val envoy : HttpClientEnvoyConfig ? = null url [jvm] val url : String ? = null","title":"HttpClientEndpointConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/#httpclientendpointconfig","text":"[jvm]\\ data class HttpClientEndpointConfig (url: String ?, envoy: HttpClientEnvoyConfig ?, clientConfig: HttpClientConfig )","title":"HttpClientEndpointConfig"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/#functions","text":"Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientEndpointConfig","title":"Functions"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/#properties","text":"Name Summary clientConfig [jvm] val clientConfig : HttpClientConfig envoy [jvm] val envoy : HttpClientEnvoyConfig ? = null url [jvm] val url : String ? = null","title":"Properties"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/-http-client-endpoint-config/","text":"// misk / misk.client / HttpClientEndpointConfig / HttpClientEndpointConfig HttpClientEndpointConfig \u00b6 [jvm]\\ fun HttpClientEndpointConfig (url: String ? = null, envoy: HttpClientEnvoyConfig ? = null, clientConfig: HttpClientConfig = HttpClientConfig())","title":"HttpClientEndpointConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/-http-client-endpoint-config/#httpclientendpointconfig","text":"[jvm]\\ fun HttpClientEndpointConfig (url: String ? = null, envoy: HttpClientEnvoyConfig ? = null, clientConfig: HttpClientConfig = HttpClientConfig())","title":"HttpClientEndpointConfig"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/client-config/","text":"// misk / misk.client / HttpClientEndpointConfig / clientConfig clientConfig \u00b6 [jvm]\\ val clientConfig : HttpClientConfig","title":"clientConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/client-config/#clientconfig","text":"[jvm]\\ val clientConfig : HttpClientConfig","title":"clientConfig"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/envoy/","text":"// misk / misk.client / HttpClientEndpointConfig / envoy envoy \u00b6 [jvm]\\ val envoy : HttpClientEnvoyConfig ? = null","title":"envoy - Misk"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/envoy/#envoy","text":"[jvm]\\ val envoy : HttpClientEnvoyConfig ? = null","title":"envoy"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/to-wisp-config/","text":"// misk / misk.client / HttpClientEndpointConfig / toWispConfig toWispConfig \u00b6 [jvm]\\ fun toWispConfig (): HttpClientEndpointConfig","title":"toWispConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/to-wisp-config/#towispconfig","text":"[jvm]\\ fun toWispConfig (): HttpClientEndpointConfig","title":"toWispConfig"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/url/","text":"// misk / misk.client / HttpClientEndpointConfig / url url \u00b6 [jvm]\\ val url : String ? = null","title":"url - Misk"},{"location":"0.x/misk/misk.client/-http-client-endpoint-config/url/#url","text":"[jvm]\\ val url : String ? = null","title":"url"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/","text":"// misk / misk.client / HttpClientEnvoyConfig HttpClientEnvoyConfig \u00b6 [jvm]\\ data class HttpClientEnvoyConfig (app: String , env: String ?) Functions \u00b6 Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientEnvoyConfig Properties \u00b6 Name Summary app [jvm] val app : String env [jvm] val env : String ? = null Environment to target. If null, the same environment as the app is running in is assumed.","title":"HttpClientEnvoyConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/#httpclientenvoyconfig","text":"[jvm]\\ data class HttpClientEnvoyConfig (app: String , env: String ?)","title":"HttpClientEnvoyConfig"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/#functions","text":"Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientEnvoyConfig","title":"Functions"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/#properties","text":"Name Summary app [jvm] val app : String env [jvm] val env : String ? = null Environment to target. If null, the same environment as the app is running in is assumed.","title":"Properties"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/-http-client-envoy-config/","text":"// misk / misk.client / HttpClientEnvoyConfig / HttpClientEnvoyConfig HttpClientEnvoyConfig \u00b6 [jvm]\\ fun HttpClientEnvoyConfig (app: String , env: String ? = null)","title":"HttpClientEnvoyConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/-http-client-envoy-config/#httpclientenvoyconfig","text":"[jvm]\\ fun HttpClientEnvoyConfig (app: String , env: String ? = null)","title":"HttpClientEnvoyConfig"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/app/","text":"// misk / misk.client / HttpClientEnvoyConfig / app app \u00b6 [jvm]\\ val app : String","title":"app - Misk"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/app/#app","text":"[jvm]\\ val app : String","title":"app"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/env/","text":"// misk / misk.client / HttpClientEnvoyConfig / env env \u00b6 [jvm]\\ val env : String ? = null Environment to target. If null, the same environment as the app is running in is assumed.","title":"env - Misk"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/env/#env","text":"[jvm]\\ val env : String ? = null Environment to target. If null, the same environment as the app is running in is assumed.","title":"env"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/to-wisp-config/","text":"// misk / misk.client / HttpClientEnvoyConfig / toWispConfig toWispConfig \u00b6 [jvm]\\ fun toWispConfig (): HttpClientEnvoyConfig","title":"toWispConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-envoy-config/to-wisp-config/#towispconfig","text":"[jvm]\\ fun toWispConfig (): HttpClientEnvoyConfig","title":"toWispConfig"},{"location":"0.x/misk/misk.client/-http-client-factory/","text":"// misk / misk.client / HttpClientFactory HttpClientFactory \u00b6 [jvm]\\ @Singleton class HttpClientFactory @Injectconstructor(sslLoader: SslLoader, sslContextFactory: SslContextFactory, okHttpClientCommonConfigurator: OkHttpClientCommonConfigurator ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary create [jvm] fun create (config: HttpClientEndpointConfig ): OkHttpClient Returns a client initialized based on config. Properties \u00b6 Name Summary envoyClientEndpointProvider [jvm] @Inject(optional = true) var envoyClientEndpointProvider : EnvoyClientEndpointProvider? = null okhttpInterceptors [jvm] @Inject(optional = true) var okhttpInterceptors : Provider< List <Interceptor>>? = null","title":"HttpClientFactory - Misk"},{"location":"0.x/misk/misk.client/-http-client-factory/#httpclientfactory","text":"[jvm]\\ @Singleton class HttpClientFactory @Injectconstructor(sslLoader: SslLoader, sslContextFactory: SslContextFactory, okHttpClientCommonConfigurator: OkHttpClientCommonConfigurator )","title":"HttpClientFactory"},{"location":"0.x/misk/misk.client/-http-client-factory/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.client/-http-client-factory/#functions","text":"Name Summary create [jvm] fun create (config: HttpClientEndpointConfig ): OkHttpClient Returns a client initialized based on config.","title":"Functions"},{"location":"0.x/misk/misk.client/-http-client-factory/#properties","text":"Name Summary envoyClientEndpointProvider [jvm] @Inject(optional = true) var envoyClientEndpointProvider : EnvoyClientEndpointProvider? = null okhttpInterceptors [jvm] @Inject(optional = true) var okhttpInterceptors : Provider< List <Interceptor>>? = null","title":"Properties"},{"location":"0.x/misk/misk.client/-http-client-factory/-http-client-factory/","text":"// misk / misk.client / HttpClientFactory / HttpClientFactory HttpClientFactory \u00b6 [jvm]\\ @Inject fun HttpClientFactory (sslLoader: SslLoader, sslContextFactory: SslContextFactory, okHttpClientCommonConfigurator: OkHttpClientCommonConfigurator )","title":"HttpClientFactory - Misk"},{"location":"0.x/misk/misk.client/-http-client-factory/-http-client-factory/#httpclientfactory","text":"[jvm]\\ @Inject fun HttpClientFactory (sslLoader: SslLoader, sslContextFactory: SslContextFactory, okHttpClientCommonConfigurator: OkHttpClientCommonConfigurator )","title":"HttpClientFactory"},{"location":"0.x/misk/misk.client/-http-client-factory/create/","text":"// misk / misk.client / HttpClientFactory / create create \u00b6 [jvm]\\ fun create (config: HttpClientEndpointConfig ): OkHttpClient Returns a client initialized based on config.","title":"create - Misk"},{"location":"0.x/misk/misk.client/-http-client-factory/create/#create","text":"[jvm]\\ fun create (config: HttpClientEndpointConfig ): OkHttpClient Returns a client initialized based on config.","title":"create"},{"location":"0.x/misk/misk.client/-http-client-factory/envoy-client-endpoint-provider/","text":"// misk / misk.client / HttpClientFactory / envoyClientEndpointProvider envoyClientEndpointProvider \u00b6 [jvm]\\ @Inject(optional = true) var envoyClientEndpointProvider : EnvoyClientEndpointProvider? = null","title":"envoyClientEndpointProvider - Misk"},{"location":"0.x/misk/misk.client/-http-client-factory/envoy-client-endpoint-provider/#envoyclientendpointprovider","text":"[jvm]\\ @Inject(optional = true) var envoyClientEndpointProvider : EnvoyClientEndpointProvider? = null","title":"envoyClientEndpointProvider"},{"location":"0.x/misk/misk.client/-http-client-factory/okhttp-interceptors/","text":"// misk / misk.client / HttpClientFactory / okhttpInterceptors okhttpInterceptors \u00b6 [jvm]\\ @Inject(optional = true) var okhttpInterceptors : Provider< List <Interceptor>>? = null","title":"okhttpInterceptors - Misk"},{"location":"0.x/misk/misk.client/-http-client-factory/okhttp-interceptors/#okhttpinterceptors","text":"[jvm]\\ @Inject(optional = true) var okhttpInterceptors : Provider< List <Interceptor>>? = null","title":"okhttpInterceptors"},{"location":"0.x/misk/misk.client/-http-client-factory/-companion/","text":"// misk / misk.client / HttpClientFactory / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk/misk.client/-http-client-factory/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.client/-http-client-module/","text":"// misk / misk.client / HttpClientModule HttpClientModule \u00b6 [jvm]\\ class HttpClientModule (name: String , annotation: Annotation ?) : KAbstractModule Provides an OkHttpClient and ProtoMessageHttpClient for a peer service Constructors \u00b6 HttpClientModule [jvm] fun HttpClientModule (name: String , annotation: Annotation ? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"HttpClientModule - Misk"},{"location":"0.x/misk/misk.client/-http-client-module/#httpclientmodule","text":"[jvm]\\ class HttpClientModule (name: String , annotation: Annotation ?) : KAbstractModule Provides an OkHttpClient and ProtoMessageHttpClient for a peer service","title":"HttpClientModule"},{"location":"0.x/misk/misk.client/-http-client-module/#constructors","text":"HttpClientModule [jvm] fun HttpClientModule (name: String , annotation: Annotation ? = null)","title":"Constructors"},{"location":"0.x/misk/misk.client/-http-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-http-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-http-client-module/-http-client-module/","text":"// misk / misk.client / HttpClientModule / HttpClientModule HttpClientModule \u00b6 [jvm]\\ fun HttpClientModule (name: String , annotation: Annotation ? = null)","title":"HttpClientModule - Misk"},{"location":"0.x/misk/misk.client/-http-client-module/-http-client-module/#httpclientmodule","text":"[jvm]\\ fun HttpClientModule (name: String , annotation: Annotation ? = null)","title":"HttpClientModule"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/","text":"// misk / misk.client / HttpClientSSLConfig HttpClientSSLConfig \u00b6 [jvm]\\ data class HttpClientSSLConfig (cert_store: CertStoreConfig?, trust_store: TrustStoreConfig) Functions \u00b6 Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientSSLConfig Properties \u00b6 Name Summary cert_store [jvm] val cert_store : CertStoreConfig? trust_store [jvm] val trust_store : TrustStoreConfig","title":"HttpClientSSLConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/#httpclientsslconfig","text":"[jvm]\\ data class HttpClientSSLConfig (cert_store: CertStoreConfig?, trust_store: TrustStoreConfig)","title":"HttpClientSSLConfig"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/#functions","text":"Name Summary toWispConfig [jvm] fun toWispConfig (): HttpClientSSLConfig","title":"Functions"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/#properties","text":"Name Summary cert_store [jvm] val cert_store : CertStoreConfig? trust_store [jvm] val trust_store : TrustStoreConfig","title":"Properties"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/-http-client-s-s-l-config/","text":"// misk / misk.client / HttpClientSSLConfig / HttpClientSSLConfig HttpClientSSLConfig \u00b6 [jvm]\\ fun HttpClientSSLConfig (cert_store: CertStoreConfig?, trust_store: TrustStoreConfig)","title":"HttpClientSSLConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/-http-client-s-s-l-config/#httpclientsslconfig","text":"[jvm]\\ fun HttpClientSSLConfig (cert_store: CertStoreConfig?, trust_store: TrustStoreConfig)","title":"HttpClientSSLConfig"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/cert_store/","text":"// misk / misk.client / HttpClientSSLConfig / cert_store cert_store \u00b6 [jvm]\\ val cert_store : CertStoreConfig?","title":"cert_store - Misk"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/cert_store/#cert_store","text":"[jvm]\\ val cert_store : CertStoreConfig?","title":"cert_store"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/to-wisp-config/","text":"// misk / misk.client / HttpClientSSLConfig / toWispConfig toWispConfig \u00b6 [jvm]\\ fun toWispConfig (): HttpClientSSLConfig","title":"toWispConfig - Misk"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/to-wisp-config/#towispconfig","text":"[jvm]\\ fun toWispConfig (): HttpClientSSLConfig","title":"toWispConfig"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/trust_store/","text":"// misk / misk.client / HttpClientSSLConfig / trust_store trust_store \u00b6 [jvm]\\ val trust_store : TrustStoreConfig","title":"trust_store - Misk"},{"location":"0.x/misk/misk.client/-http-client-s-s-l-config/trust_store/#trust_store","text":"[jvm]\\ val trust_store : TrustStoreConfig","title":"trust_store"},{"location":"0.x/misk/misk.client/-http-clients-config/","text":"// misk / misk.client / HttpClientsConfig HttpClientsConfig \u00b6 [jvm]\\ data class HttpClientsConfig (hostConfigs: LinkedHashMap < String , HttpClientConfig >, endpoints: Map < String , HttpClientEndpointConfig >) : Config Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary endpointNames [jvm] fun endpointNames (): Set < String > Names of configured endpoints, all of which can be fetched using get get [jvm] operator fun get (url: URL ): HttpClientEndpointConfig operator fun get (clientName: String ): HttpClientEndpointConfig Properties \u00b6 Name Summary endpoints [jvm] val endpoints : Map < String , HttpClientEndpointConfig > hostConfigs [jvm] val hostConfigs : LinkedHashMap < String , HttpClientConfig >","title":"HttpClientsConfig - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/#httpclientsconfig","text":"[jvm]\\ data class HttpClientsConfig (hostConfigs: LinkedHashMap < String , HttpClientConfig >, endpoints: Map < String , HttpClientEndpointConfig >) : Config","title":"HttpClientsConfig"},{"location":"0.x/misk/misk.client/-http-clients-config/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.client/-http-clients-config/#functions","text":"Name Summary endpointNames [jvm] fun endpointNames (): Set < String > Names of configured endpoints, all of which can be fetched using get get [jvm] operator fun get (url: URL ): HttpClientEndpointConfig operator fun get (clientName: String ): HttpClientEndpointConfig","title":"Functions"},{"location":"0.x/misk/misk.client/-http-clients-config/#properties","text":"Name Summary endpoints [jvm] val endpoints : Map < String , HttpClientEndpointConfig > hostConfigs [jvm] val hostConfigs : LinkedHashMap < String , HttpClientConfig >","title":"Properties"},{"location":"0.x/misk/misk.client/-http-clients-config/-http-clients-config/","text":"// misk / misk.client / HttpClientsConfig / HttpClientsConfig HttpClientsConfig \u00b6 [jvm]\\ fun HttpClientsConfig (hostConfigs: LinkedHashMap < String , HttpClientConfig > = linkedMapOf(), endpoints: Map < String , HttpClientEndpointConfig > = mapOf())","title":"HttpClientsConfig - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/-http-clients-config/#httpclientsconfig","text":"[jvm]\\ fun HttpClientsConfig (hostConfigs: LinkedHashMap < String , HttpClientConfig > = linkedMapOf(), endpoints: Map < String , HttpClientEndpointConfig > = mapOf())","title":"HttpClientsConfig"},{"location":"0.x/misk/misk.client/-http-clients-config/endpoint-names/","text":"// misk / misk.client / HttpClientsConfig / endpointNames endpointNames \u00b6 [jvm]\\ fun endpointNames (): Set < String > Names of configured endpoints, all of which can be fetched using get","title":"endpointNames - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/endpoint-names/#endpointnames","text":"[jvm]\\ fun endpointNames (): Set < String > Names of configured endpoints, all of which can be fetched using get","title":"endpointNames"},{"location":"0.x/misk/misk.client/-http-clients-config/endpoints/","text":"// misk / misk.client / HttpClientsConfig / endpoints endpoints \u00b6 [jvm]\\ val endpoints : Map < String , HttpClientEndpointConfig >","title":"endpoints - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/endpoints/#endpoints","text":"[jvm]\\ val endpoints : Map < String , HttpClientEndpointConfig >","title":"endpoints"},{"location":"0.x/misk/misk.client/-http-clients-config/get/","text":"// misk / misk.client / HttpClientsConfig / get get \u00b6 [jvm]\\ operator fun get (clientName: String ): HttpClientEndpointConfig Return \u00b6 The HttpClientEndpointConfig for the given client, populated with defaults as needed [jvm]\\ operator fun get (url: URL ): HttpClientEndpointConfig Return \u00b6 The HttpClientEndpointConfig for the given URL, populated with defaults as needed","title":"get - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/get/#get","text":"[jvm]\\ operator fun get (clientName: String ): HttpClientEndpointConfig","title":"get"},{"location":"0.x/misk/misk.client/-http-clients-config/get/#return","text":"The HttpClientEndpointConfig for the given client, populated with defaults as needed [jvm]\\ operator fun get (url: URL ): HttpClientEndpointConfig","title":"Return"},{"location":"0.x/misk/misk.client/-http-clients-config/get/#return_1","text":"The HttpClientEndpointConfig for the given URL, populated with defaults as needed","title":"Return"},{"location":"0.x/misk/misk.client/-http-clients-config/host-configs/","text":"// misk / misk.client / HttpClientsConfig / hostConfigs hostConfigs \u00b6 [jvm]\\ val hostConfigs : LinkedHashMap < String , HttpClientConfig >","title":"hostConfigs - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/host-configs/#hostconfigs","text":"[jvm]\\ val hostConfigs : LinkedHashMap < String , HttpClientConfig >","title":"hostConfigs"},{"location":"0.x/misk/misk.client/-http-clients-config/-companion/","text":"// misk / misk.client / HttpClientsConfig / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary httpClientConfigDefaults [jvm] val httpClientConfigDefaults : HttpClientConfig logger [jvm] val logger : KLogger","title":"Companion - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.client/-http-clients-config/-companion/#properties","text":"Name Summary httpClientConfigDefaults [jvm] val httpClientConfigDefaults : HttpClientConfig logger [jvm] val logger : KLogger","title":"Properties"},{"location":"0.x/misk/misk.client/-http-clients-config/-companion/http-client-config-defaults/","text":"// misk / misk.client / HttpClientsConfig / Companion / httpClientConfigDefaults httpClientConfigDefaults \u00b6 [jvm]\\ val httpClientConfigDefaults : HttpClientConfig","title":"httpClientConfigDefaults - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/-companion/http-client-config-defaults/#httpclientconfigdefaults","text":"[jvm]\\ val httpClientConfigDefaults : HttpClientConfig","title":"httpClientConfigDefaults"},{"location":"0.x/misk/misk.client/-http-clients-config/-companion/logger/","text":"// misk / misk.client / HttpClientsConfig / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk/misk.client/-http-clients-config-module/","text":"// misk / misk.client / HttpClientsConfigModule HttpClientsConfigModule \u00b6 [jvm]\\ class HttpClientsConfigModule (config: HttpClientsConfig ) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"HttpClientsConfigModule - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config-module/#httpclientsconfigmodule","text":"[jvm]\\ class HttpClientsConfigModule (config: HttpClientsConfig ) : KAbstractModule","title":"HttpClientsConfigModule"},{"location":"0.x/misk/misk.client/-http-clients-config-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-http-clients-config-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-http-clients-config-module/-http-clients-config-module/","text":"// misk / misk.client / HttpClientsConfigModule / HttpClientsConfigModule HttpClientsConfigModule \u00b6 [jvm]\\ fun HttpClientsConfigModule (config: HttpClientsConfig )","title":"HttpClientsConfigModule - Misk"},{"location":"0.x/misk/misk.client/-http-clients-config-module/-http-clients-config-module/#httpclientsconfigmodule","text":"[jvm]\\ fun HttpClientsConfigModule (config: HttpClientsConfig )","title":"HttpClientsConfigModule"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/","text":"// misk / misk.client / JettyPortPeerClientModule JettyPortPeerClientModule \u00b6 [jvm]\\ class JettyPortPeerClientModule : KAbstractModule For testing. Binds a PeerClientFactory that calls peers on the HTTPS port of this process\u2019s server, as determined by the Jetty server\u2019s port. Constructors \u00b6 JettyPortPeerClientModule [jvm] fun JettyPortPeerClientModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) peerClientFactory [jvm] @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , jetty: JettyService ): PeerClientFactory requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"JettyPortPeerClientModule - Misk"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/#jettyportpeerclientmodule","text":"[jvm]\\ class JettyPortPeerClientModule : KAbstractModule For testing. Binds a PeerClientFactory that calls peers on the HTTPS port of this process\u2019s server, as determined by the Jetty server\u2019s port.","title":"JettyPortPeerClientModule"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/#constructors","text":"JettyPortPeerClientModule [jvm] fun JettyPortPeerClientModule ()","title":"Constructors"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) peerClientFactory [jvm] @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , jetty: JettyService ): PeerClientFactory requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/-jetty-port-peer-client-module/","text":"// misk / misk.client / JettyPortPeerClientModule / JettyPortPeerClientModule JettyPortPeerClientModule \u00b6 [jvm]\\ fun JettyPortPeerClientModule ()","title":"JettyPortPeerClientModule - Misk"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/-jetty-port-peer-client-module/#jettyportpeerclientmodule","text":"[jvm]\\ fun JettyPortPeerClientModule ()","title":"JettyPortPeerClientModule"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/peer-client-factory/","text":"// misk / misk.client / JettyPortPeerClientModule / peerClientFactory peerClientFactory \u00b6 [jvm]\\ @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , jetty: JettyService ): PeerClientFactory","title":"peerClientFactory - Misk"},{"location":"0.x/misk/misk.client/-jetty-port-peer-client-module/peer-client-factory/#peerclientfactory","text":"[jvm]\\ @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , jetty: JettyService ): PeerClientFactory","title":"peerClientFactory"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/","text":"// misk / misk.client / OkHttpClientCommonConfigurator OkHttpClientCommonConfigurator \u00b6 [jvm]\\ class OkHttpClientCommonConfigurator @Injectconstructor Functions \u00b6 Name Summary configure [jvm] fun configure (builder: OkHttpClient.Builder, config: HttpClientEndpointConfig): OkHttpClient.Builder Properties \u00b6 Name Summary delegate [jvm] val delegate : OkHttpClientCommonConfigurator","title":"OkHttpClientCommonConfigurator - Misk"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/#okhttpclientcommonconfigurator","text":"[jvm]\\ class OkHttpClientCommonConfigurator @Injectconstructor","title":"OkHttpClientCommonConfigurator"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/#functions","text":"Name Summary configure [jvm] fun configure (builder: OkHttpClient.Builder, config: HttpClientEndpointConfig): OkHttpClient.Builder","title":"Functions"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/#properties","text":"Name Summary delegate [jvm] val delegate : OkHttpClientCommonConfigurator","title":"Properties"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/-ok-http-client-common-configurator/","text":"// misk / misk.client / OkHttpClientCommonConfigurator / OkHttpClientCommonConfigurator OkHttpClientCommonConfigurator \u00b6 [jvm]\\ @Inject fun OkHttpClientCommonConfigurator ()","title":"OkHttpClientCommonConfigurator - Misk"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/-ok-http-client-common-configurator/#okhttpclientcommonconfigurator","text":"[jvm]\\ @Inject fun OkHttpClientCommonConfigurator ()","title":"OkHttpClientCommonConfigurator"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/configure/","text":"// misk / misk.client / OkHttpClientCommonConfigurator / configure configure \u00b6 [jvm]\\ fun configure (builder: OkHttpClient.Builder, config: HttpClientEndpointConfig): OkHttpClient.Builder","title":"configure - Misk"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/configure/#configure","text":"[jvm]\\ fun configure (builder: OkHttpClient.Builder, config: HttpClientEndpointConfig): OkHttpClient.Builder","title":"configure"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/delegate/","text":"// misk / misk.client / OkHttpClientCommonConfigurator / delegate delegate \u00b6 [jvm]\\ val delegate : OkHttpClientCommonConfigurator","title":"delegate - Misk"},{"location":"0.x/misk/misk.client/-ok-http-client-common-configurator/delegate/#delegate","text":"[jvm]\\ val delegate : OkHttpClientCommonConfigurator","title":"delegate"},{"location":"0.x/misk/misk.client/-peer-client-factory/","text":"// misk / misk.client / PeerClientFactory PeerClientFactory \u00b6 [jvm]\\ class PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int ) Factory that creates OkHttpClients for connecting to another instance of the same application running in the same cluster. An OkHttpClient is cached for each peer. Constructors \u00b6 PeerClientFactory [jvm] fun PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int ) Functions \u00b6 Name Summary baseUrl [jvm] fun baseUrl (peer: Cluster.Member): String Get the base URL for calling the given peer cluster member. client [jvm] fun client (peer: Cluster.Member): OkHttpClient Get a client to call the given peer cluster member. This client will fail when calling different services, as determined by the OU in the certificate returned by the called service.","title":"PeerClientFactory - Misk"},{"location":"0.x/misk/misk.client/-peer-client-factory/#peerclientfactory","text":"[jvm]\\ class PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int ) Factory that creates OkHttpClients for connecting to another instance of the same application running in the same cluster. An OkHttpClient is cached for each peer.","title":"PeerClientFactory"},{"location":"0.x/misk/misk.client/-peer-client-factory/#constructors","text":"PeerClientFactory [jvm] fun PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int )","title":"Constructors"},{"location":"0.x/misk/misk.client/-peer-client-factory/#functions","text":"Name Summary baseUrl [jvm] fun baseUrl (peer: Cluster.Member): String Get the base URL for calling the given peer cluster member. client [jvm] fun client (peer: Cluster.Member): OkHttpClient Get a client to call the given peer cluster member. This client will fail when calling different services, as determined by the OU in the certificate returned by the called service.","title":"Functions"},{"location":"0.x/misk/misk.client/-peer-client-factory/-peer-client-factory/","text":"// misk / misk.client / PeerClientFactory / PeerClientFactory PeerClientFactory \u00b6 [jvm]\\ fun PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int )","title":"PeerClientFactory - Misk"},{"location":"0.x/misk/misk.client/-peer-client-factory/-peer-client-factory/#peerclientfactory","text":"[jvm]\\ fun PeerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , httpsPort: Int )","title":"PeerClientFactory"},{"location":"0.x/misk/misk.client/-peer-client-factory/base-url/","text":"// misk / misk.client / PeerClientFactory / baseUrl baseUrl \u00b6 [jvm]\\ fun baseUrl (peer: Cluster.Member): String Get the base URL for calling the given peer cluster member.","title":"baseUrl - Misk"},{"location":"0.x/misk/misk.client/-peer-client-factory/base-url/#baseurl","text":"[jvm]\\ fun baseUrl (peer: Cluster.Member): String Get the base URL for calling the given peer cluster member.","title":"baseUrl"},{"location":"0.x/misk/misk.client/-peer-client-factory/client/","text":"// misk / misk.client / PeerClientFactory / client client \u00b6 [jvm]\\ fun client (peer: Cluster.Member): OkHttpClient Get a client to call the given peer cluster member. This client will fail when calling different services, as determined by the OU in the certificate returned by the called service.","title":"client - Misk"},{"location":"0.x/misk/misk.client/-peer-client-factory/client/#client","text":"[jvm]\\ fun client (peer: Cluster.Member): OkHttpClient Get a client to call the given peer cluster member. This client will fail when calling different services, as determined by the OU in the certificate returned by the called service.","title":"client"},{"location":"0.x/misk/misk.client/-peer-client-module/","text":"// misk / misk.client / PeerClientModule PeerClientModule \u00b6 [jvm]\\ class PeerClientModule : KAbstractModule Binds a PeerClientFactory that calls peers on the HTTPS port of this process\u2019s server, as determined by the SSL port in the WebConfig . Constructors \u00b6 PeerClientModule [jvm] fun PeerClientModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) peerClientFactory [jvm] @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , webConfig: WebConfig ): PeerClientFactory requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"PeerClientModule - Misk"},{"location":"0.x/misk/misk.client/-peer-client-module/#peerclientmodule","text":"[jvm]\\ class PeerClientModule : KAbstractModule Binds a PeerClientFactory that calls peers on the HTTPS port of this process\u2019s server, as determined by the SSL port in the WebConfig .","title":"PeerClientModule"},{"location":"0.x/misk/misk.client/-peer-client-module/#constructors","text":"PeerClientModule [jvm] fun PeerClientModule ()","title":"Constructors"},{"location":"0.x/misk/misk.client/-peer-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) peerClientFactory [jvm] @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , webConfig: WebConfig ): PeerClientFactory requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-peer-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-peer-client-module/-peer-client-module/","text":"// misk / misk.client / PeerClientModule / PeerClientModule PeerClientModule \u00b6 [jvm]\\ fun PeerClientModule ()","title":"PeerClientModule - Misk"},{"location":"0.x/misk/misk.client/-peer-client-module/-peer-client-module/#peerclientmodule","text":"[jvm]\\ fun PeerClientModule ()","title":"PeerClientModule"},{"location":"0.x/misk/misk.client/-peer-client-module/peer-client-factory/","text":"// misk / misk.client / PeerClientModule / peerClientFactory peerClientFactory \u00b6 [jvm]\\ @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , webConfig: WebConfig ): PeerClientFactory","title":"peerClientFactory - Misk"},{"location":"0.x/misk/misk.client/-peer-client-module/peer-client-factory/#peerclientfactory","text":"[jvm]\\ @Provides @Singleton fun peerClientFactory (appName: String , httpClientsConfig: HttpClientsConfig , httpClientFactory: HttpClientFactory , webConfig: WebConfig ): PeerClientFactory","title":"peerClientFactory"},{"location":"0.x/misk/misk.client/-proto-message-http-client/","text":"// misk / misk.client / ProtoMessageHttpClient ProtoMessageHttpClient \u00b6 [jvm]\\ class ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient) This helper class is for making HTTP requests to an endpoint that handles protobuf Message classes. Constructors \u00b6 ProtoMessageHttpClient [jvm] fun ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient) Functions \u00b6 Name Summary post [jvm] inline fun < O : Any > post (path: String , requestBody: Message< , *>): O fun < O : Any > post (path: String , requestBody: Message< , *>, responseType: Class < O >): O","title":"ProtoMessageHttpClient - Misk"},{"location":"0.x/misk/misk.client/-proto-message-http-client/#protomessagehttpclient","text":"[jvm]\\ class ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient) This helper class is for making HTTP requests to an endpoint that handles protobuf Message classes.","title":"ProtoMessageHttpClient"},{"location":"0.x/misk/misk.client/-proto-message-http-client/#constructors","text":"ProtoMessageHttpClient [jvm] fun ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient)","title":"Constructors"},{"location":"0.x/misk/misk.client/-proto-message-http-client/#functions","text":"Name Summary post [jvm] inline fun < O : Any > post (path: String , requestBody: Message< , *>): O fun < O : Any > post (path: String , requestBody: Message< , *>, responseType: Class < O >): O","title":"Functions"},{"location":"0.x/misk/misk.client/-proto-message-http-client/-proto-message-http-client/","text":"// misk / misk.client / ProtoMessageHttpClient / ProtoMessageHttpClient ProtoMessageHttpClient \u00b6 [jvm]\\ fun ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient)","title":"ProtoMessageHttpClient - Misk"},{"location":"0.x/misk/misk.client/-proto-message-http-client/-proto-message-http-client/#protomessagehttpclient","text":"[jvm]\\ fun ProtoMessageHttpClient (baseUrl: String , moshi: Moshi, okHttp: OkHttpClient)","title":"ProtoMessageHttpClient"},{"location":"0.x/misk/misk.client/-proto-message-http-client/post/","text":"// misk / misk.client / ProtoMessageHttpClient / post post \u00b6 [jvm]\\ fun < O : Any > post (path: String , requestBody: Message<*, *>, responseType: Class < O >): O inline fun < O : Any > post (path: String , requestBody: Message<*, *>): O","title":"post - Misk"},{"location":"0.x/misk/misk.client/-proto-message-http-client/post/#post","text":"[jvm]\\ fun < O : Any > post (path: String , requestBody: Message<*, *>, responseType: Class < O >): O inline fun < O : Any > post (path: String , requestBody: Message<*, *>): O","title":"post"},{"location":"0.x/misk/misk.client/-typed-client-factory/","text":"// misk / misk.client / TypedClientFactory TypedClientFactory \u00b6 [jvm]\\ class TypedClientFactory @Injectconstructor Functions \u00b6 Name Summary build [jvm] inline fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null): T Reified flavor of build [jvm] fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?): T Build up a typed client dynamically in runtime. This is useful for platform-type services that cannot statically define all of the services they talk to.","title":"TypedClientFactory - Misk"},{"location":"0.x/misk/misk.client/-typed-client-factory/#typedclientfactory","text":"[jvm]\\ class TypedClientFactory @Injectconstructor","title":"TypedClientFactory"},{"location":"0.x/misk/misk.client/-typed-client-factory/#functions","text":"Name Summary build [jvm] inline fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null): T Reified flavor of build [jvm] fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?): T Build up a typed client dynamically in runtime. This is useful for platform-type services that cannot statically define all of the services they talk to.","title":"Functions"},{"location":"0.x/misk/misk.client/-typed-client-factory/-typed-client-factory/","text":"// misk / misk.client / TypedClientFactory / TypedClientFactory TypedClientFactory \u00b6 [jvm]\\ @Inject fun TypedClientFactory ()","title":"TypedClientFactory - Misk"},{"location":"0.x/misk/misk.client/-typed-client-factory/-typed-client-factory/#typedclientfactory","text":"[jvm]\\ @Inject fun TypedClientFactory ()","title":"TypedClientFactory"},{"location":"0.x/misk/misk.client/-typed-client-factory/build/","text":"// misk / misk.client / TypedClientFactory / build build \u00b6 [jvm]\\ fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?): T Build up a typed client dynamically in runtime. This is useful for platform-type services that cannot statically define all of the services they talk to. Services should cache the resulting clients to avoid incurring the construction on every call. Parameters \u00b6 jvm endpointConfig HTTP configuration to use to connect to the service kclass The class of the typed client that will be built name A name to reference the client by for observability purposes retrofitBuilderProvider Optional retrofit builder override. If not provided, an empty builder is used [jvm]\\ inline fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null): T Reified flavor of build","title":"build - Misk"},{"location":"0.x/misk/misk.client/-typed-client-factory/build/#build","text":"[jvm]\\ fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?): T Build up a typed client dynamically in runtime. This is useful for platform-type services that cannot statically define all of the services they talk to. Services should cache the resulting clients to avoid incurring the construction on every call.","title":"build"},{"location":"0.x/misk/misk.client/-typed-client-factory/build/#parameters","text":"jvm endpointConfig HTTP configuration to use to connect to the service kclass The class of the typed client that will be built name A name to reference the client by for observability purposes retrofitBuilderProvider Optional retrofit builder override. If not provided, an empty builder is used [jvm]\\ inline fun < T : Any > build (endpointConfig: HttpClientEndpointConfig , name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null): T Reified flavor of build","title":"Parameters"},{"location":"0.x/misk/misk.client/-typed-http-client-module/","text":"// misk / misk.client / TypedHttpClientModule TypedHttpClientModule \u00b6 [jvm]\\ class TypedHttpClientModule < T : Any >(kclass: KClass < T >, name: String , annotation: Annotation ?, retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client given an API interface and an HTTP configuration. Parameters \u00b6 jvm retrofitBuilderProvider Optional provider of a Retrofit.Builder. This provider should not return a singleton since the builder it returns will be mutated. Constructors \u00b6 TypedHttpClientModule [jvm] fun < T : Any > TypedHttpClientModule (kclass: KClass < T >, name: String , annotation: Annotation ? = null, retrofitBuilderProvider: Provider<Retrofit.Builder>? = null) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"TypedHttpClientModule - Misk"},{"location":"0.x/misk/misk.client/-typed-http-client-module/#typedhttpclientmodule","text":"[jvm]\\ class TypedHttpClientModule < T : Any >(kclass: KClass < T >, name: String , annotation: Annotation ?, retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client given an API interface and an HTTP configuration.","title":"TypedHttpClientModule"},{"location":"0.x/misk/misk.client/-typed-http-client-module/#parameters","text":"jvm retrofitBuilderProvider Optional provider of a Retrofit.Builder. This provider should not return a singleton since the builder it returns will be mutated.","title":"Parameters"},{"location":"0.x/misk/misk.client/-typed-http-client-module/#constructors","text":"TypedHttpClientModule [jvm] fun < T : Any > TypedHttpClientModule (kclass: KClass < T >, name: String , annotation: Annotation ? = null, retrofitBuilderProvider: Provider<Retrofit.Builder>? = null)","title":"Constructors"},{"location":"0.x/misk/misk.client/-typed-http-client-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.client/-typed-http-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-typed-http-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-typed-http-client-module/","text":"// misk / misk.client / TypedHttpClientModule / TypedHttpClientModule TypedHttpClientModule \u00b6 [jvm]\\ fun < T : Any > TypedHttpClientModule (kclass: KClass < T >, name: String , annotation: Annotation ? = null, retrofitBuilderProvider: Provider<Retrofit.Builder>? = null) Parameters \u00b6 jvm retrofitBuilderProvider Optional provider of a Retrofit.Builder. This provider should not return a singleton since the builder it returns will be mutated.","title":"TypedHttpClientModule - Misk"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-typed-http-client-module/#typedhttpclientmodule","text":"[jvm]\\ fun < T : Any > TypedHttpClientModule (kclass: KClass < T >, name: String , annotation: Annotation ? = null, retrofitBuilderProvider: Provider<Retrofit.Builder>? = null)","title":"TypedHttpClientModule"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-typed-http-client-module/#parameters","text":"jvm retrofitBuilderProvider Optional provider of a Retrofit.Builder. This provider should not return a singleton since the builder it returns will be mutated.","title":"Parameters"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-companion/","text":"// misk / misk.client / TypedHttpClientModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < T : Any > create (name: String , annotation: Annotation ? = null): TypedHttpClientModule < T >","title":"Companion - Misk"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < T : Any > create (name: String , annotation: Annotation ? = null): TypedHttpClientModule < T >","title":"Functions"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-companion/create/","text":"// misk / misk.client / TypedHttpClientModule / Companion / create create \u00b6 [jvm]\\ inline fun < T : Any > create (name: String , annotation: Annotation ? = null): TypedHttpClientModule < T >","title":"create - Misk"},{"location":"0.x/misk/misk.client/-typed-http-client-module/-companion/create/#create","text":"[jvm]\\ inline fun < T : Any > create (name: String , annotation: Annotation ? = null): TypedHttpClientModule < T >","title":"create"},{"location":"0.x/misk/misk.client/-typed-peer-client-factory/","text":"// misk / misk.client / TypedPeerClientFactory TypedPeerClientFactory \u00b6 [jvm]\\ interface TypedPeerClientFactory < T > Factory for creating typed clients that call other members of a cluster. Functions \u00b6 Name Summary client [jvm] abstract fun client (peer: Cluster.Member): T","title":"TypedPeerClientFactory - Misk"},{"location":"0.x/misk/misk.client/-typed-peer-client-factory/#typedpeerclientfactory","text":"[jvm]\\ interface TypedPeerClientFactory < T > Factory for creating typed clients that call other members of a cluster.","title":"TypedPeerClientFactory"},{"location":"0.x/misk/misk.client/-typed-peer-client-factory/#functions","text":"Name Summary client [jvm] abstract fun client (peer: Cluster.Member): T","title":"Functions"},{"location":"0.x/misk/misk.client/-typed-peer-client-factory/client/","text":"// misk / misk.client / TypedPeerClientFactory / client client \u00b6 [jvm]\\ abstract fun client (peer: Cluster.Member): T","title":"client - Misk"},{"location":"0.x/misk/misk.client/-typed-peer-client-factory/client/#client","text":"[jvm]\\ abstract fun client (peer: Cluster.Member): T","title":"client"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/","text":"// misk / misk.client / TypedPeerHttpClientModule TypedPeerHttpClientModule \u00b6 [jvm]\\ class TypedPeerHttpClientModule < T : Any >(kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client factory given an API interface and an HTTP configuration. The factory returned typed clients that can be used to call other members of the cluster. Constructors \u00b6 TypedPeerHttpClientModule [jvm] fun < T : Any > TypedPeerHttpClientModule (kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"TypedPeerHttpClientModule - Misk"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/#typedpeerhttpclientmodule","text":"[jvm]\\ class TypedPeerHttpClientModule < T : Any >(kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>?) : KAbstractModule Creates a retrofit-backed typed client factory given an API interface and an HTTP configuration. The factory returned typed clients that can be used to call other members of the cluster.","title":"TypedPeerHttpClientModule"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/#constructors","text":"TypedPeerHttpClientModule [jvm] fun < T : Any > TypedPeerHttpClientModule (kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null)","title":"Constructors"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/-typed-peer-http-client-module/","text":"// misk / misk.client / TypedPeerHttpClientModule / TypedPeerHttpClientModule TypedPeerHttpClientModule \u00b6 [jvm]\\ fun < T : Any > TypedPeerHttpClientModule (kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null)","title":"TypedPeerHttpClientModule - Misk"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/-typed-peer-http-client-module/#typedpeerhttpclientmodule","text":"[jvm]\\ fun < T : Any > TypedPeerHttpClientModule (kclass: KClass < T >, name: String , retrofitBuilderProvider: Provider<Retrofit.Builder>? = null)","title":"TypedPeerHttpClientModule"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/-companion/","text":"// misk / misk.client / TypedPeerHttpClientModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < T : Any > create (name: String ): TypedPeerHttpClientModule < T >","title":"Companion - Misk"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < T : Any > create (name: String ): TypedPeerHttpClientModule < T >","title":"Functions"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/-companion/create/","text":"// misk / misk.client / TypedPeerHttpClientModule / Companion / create create \u00b6 [jvm]\\ inline fun < T : Any > create (name: String ): TypedPeerHttpClientModule < T >","title":"create - Misk"},{"location":"0.x/misk/misk.client/-typed-peer-http-client-module/-companion/create/#create","text":"[jvm]\\ inline fun < T : Any > create (name: String ): TypedPeerHttpClientModule < T >","title":"create"},{"location":"0.x/misk/misk.concurrent/","text":"// misk / misk.concurrent Package misk.concurrent \u00b6 Types \u00b6 Name Summary ExecutorServiceModule [jvm] class ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService ) : KAbstractModule Install this to bind an executor service with annotation. The executor service will be automatically shut down when the service shuts down. ExplicitReleaseBlockingQueue [jvm] class ExplicitReleaseBlockingQueue < T > : BlockingQueue < T > An ExplicitReleaseBlockingQueue is a BlockingQueue that only returns elements from BlockingQueue.take , BlockingQueue.poll , and BlockingQueue.peek after a call to ExplicitReleaseBlockingQueue.release . Used by tests that want to explicitly control when pollers receive queued items. ExplicitReleaseDelayQueue [jvm] class ExplicitReleaseDelayQueue < T : Delayed > : BlockingQueue < T > An ExplicitReleaseDelayQueue is an ExplicitReleaseBlockingQueue that release elements in the order in which they expire WrappingListeningExecutorService [jvm] abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls","title":"Package misk.concurrent - Misk"},{"location":"0.x/misk/misk.concurrent/#package-miskconcurrent","text":"","title":"Package misk.concurrent"},{"location":"0.x/misk/misk.concurrent/#types","text":"Name Summary ExecutorServiceModule [jvm] class ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService ) : KAbstractModule Install this to bind an executor service with annotation. The executor service will be automatically shut down when the service shuts down. ExplicitReleaseBlockingQueue [jvm] class ExplicitReleaseBlockingQueue < T > : BlockingQueue < T > An ExplicitReleaseBlockingQueue is a BlockingQueue that only returns elements from BlockingQueue.take , BlockingQueue.poll , and BlockingQueue.peek after a call to ExplicitReleaseBlockingQueue.release . Used by tests that want to explicitly control when pollers receive queued items. ExplicitReleaseDelayQueue [jvm] class ExplicitReleaseDelayQueue < T : Delayed > : BlockingQueue < T > An ExplicitReleaseDelayQueue is an ExplicitReleaseBlockingQueue that release elements in the order in which they expire WrappingListeningExecutorService [jvm] abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls","title":"Types"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/","text":"// misk / misk.concurrent / ExecutorServiceModule ExecutorServiceModule \u00b6 [jvm]\\ class ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService ) : KAbstractModule Install this to bind an executor service with annotation. The executor service will be automatically shut down when the service shuts down. Constructors \u00b6 ExecutorServiceModule [jvm] fun ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ExecutorServiceModule - Misk"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/#executorservicemodule","text":"[jvm]\\ class ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService ) : KAbstractModule Install this to bind an executor service with annotation. The executor service will be automatically shut down when the service shuts down.","title":"ExecutorServiceModule"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/#constructors","text":"ExecutorServiceModule [jvm] fun ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService )","title":"Constructors"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-executor-service-module/","text":"// misk / misk.concurrent / ExecutorServiceModule / ExecutorServiceModule ExecutorServiceModule \u00b6 [jvm]\\ fun ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService )","title":"ExecutorServiceModule - Misk"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-executor-service-module/#executorservicemodule","text":"[jvm]\\ fun ExecutorServiceModule (annotation: KClass <out Annotation >, createFunction: (ExecutorServiceFactory) -> ExecutorService )","title":"ExecutorServiceModule"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-companion/","text":"// misk / misk.concurrent / ExecutorServiceModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary withFixedThreadPool [jvm] fun withFixedThreadPool (annotation: KClass <out Annotation >, nameFormat: String , nThreads: Int ): ExecutorServiceModule withUnboundThreadPool [jvm] fun withUnboundThreadPool (annotation: KClass <out Annotation >, nameFormat: String ): ExecutorServiceModule","title":"Companion - Misk"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-companion/#functions","text":"Name Summary withFixedThreadPool [jvm] fun withFixedThreadPool (annotation: KClass <out Annotation >, nameFormat: String , nThreads: Int ): ExecutorServiceModule withUnboundThreadPool [jvm] fun withUnboundThreadPool (annotation: KClass <out Annotation >, nameFormat: String ): ExecutorServiceModule","title":"Functions"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-companion/with-fixed-thread-pool/","text":"// misk / misk.concurrent / ExecutorServiceModule / Companion / withFixedThreadPool withFixedThreadPool \u00b6 [jvm]\\ fun withFixedThreadPool (annotation: KClass <out Annotation >, nameFormat: String , nThreads: Int ): ExecutorServiceModule","title":"withFixedThreadPool - Misk"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-companion/with-fixed-thread-pool/#withfixedthreadpool","text":"[jvm]\\ fun withFixedThreadPool (annotation: KClass <out Annotation >, nameFormat: String , nThreads: Int ): ExecutorServiceModule","title":"withFixedThreadPool"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-companion/with-unbound-thread-pool/","text":"// misk / misk.concurrent / ExecutorServiceModule / Companion / withUnboundThreadPool withUnboundThreadPool \u00b6 [jvm]\\ fun withUnboundThreadPool (annotation: KClass <out Annotation >, nameFormat: String ): ExecutorServiceModule","title":"withUnboundThreadPool - Misk"},{"location":"0.x/misk/misk.concurrent/-executor-service-module/-companion/with-unbound-thread-pool/#withunboundthreadpool","text":"[jvm]\\ fun withUnboundThreadPool (annotation: KClass <out Annotation >, nameFormat: String ): ExecutorServiceModule","title":"withUnboundThreadPool"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue ExplicitReleaseBlockingQueue \u00b6 [jvm]\\ class ExplicitReleaseBlockingQueue < T > : BlockingQueue < T > An ExplicitReleaseBlockingQueue is a BlockingQueue that only returns elements from BlockingQueue.take , BlockingQueue.poll , and BlockingQueue.peek after a call to ExplicitReleaseBlockingQueue.release . Used by tests that want to explicitly control when pollers receive queued items. Constructors \u00b6 ExplicitReleaseBlockingQueue [jvm] fun ExplicitReleaseBlockingQueue () Functions \u00b6 Name Summary add [jvm] open override fun add (element: T ): Boolean addAll [jvm] open override fun addAll (elements: Collection < T >): Boolean clear [jvm] open override fun clear () contains [jvm] open operator override fun contains (element: T ): Boolean containsAll [jvm] open override fun containsAll (elements: Collection < T >): Boolean drainTo [jvm] open override fun drainTo (c: MutableCollection <in T >): Int open override fun drainTo (c: MutableCollection <in T >?, maxElements: Int ): Int element [jvm] open override fun element (): T forEach [jvm] open fun forEach (p0: Consumer <in T >) isEmpty [jvm] open override fun isEmpty (): Boolean iterator [jvm] open operator override fun iterator (): MutableIterator < T > offer [jvm] open override fun offer (e: T ): Boolean open override fun offer (e: T , timeout: Long , unit: TimeUnit ): Boolean parallelStream [jvm] open fun parallelStream (): Stream < T > peek [jvm] open override fun peek (): T ? peekPending [jvm] fun peekPending (): T ? poll [jvm] open override fun poll (): T ? open override fun poll (timeout: Long , unit: TimeUnit ): T ? put [jvm] open override fun put (e: T ) release [jvm] fun release (n: Int ): Int releases up to n items from the pending queue, making them visible to take , poll , peek , etc. This method does not \u201cextend credit\u201d; if n number of pending items on the queue, every currently pending item is made visible, but any items added in the future continue to go onto the pending queue releaseAll [jvm] fun releaseAll (): Int releases all items from the pending queue, returning the number of items released remainingCapacity [jvm] open override fun remainingCapacity (): Int remove [jvm] open override fun remove (): T ? open override fun remove (element: T ): Boolean removeAll [jvm] open override fun removeAll (elements: Collection < T >): Boolean removeIf [jvm] open fun removeIf (p0: Predicate <in T >): Boolean retainAll [jvm] open override fun retainAll (elements: Collection < T >): Boolean spliterator [jvm] open override fun spliterator (): Spliterator < T > stream [jvm] open fun stream (): Stream < T > take [jvm] open override fun take (): T Properties \u00b6 Name Summary size [jvm] open override val size : Int","title":"ExplicitReleaseBlockingQueue - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/#explicitreleaseblockingqueue","text":"[jvm]\\ class ExplicitReleaseBlockingQueue < T > : BlockingQueue < T > An ExplicitReleaseBlockingQueue is a BlockingQueue that only returns elements from BlockingQueue.take , BlockingQueue.poll , and BlockingQueue.peek after a call to ExplicitReleaseBlockingQueue.release . Used by tests that want to explicitly control when pollers receive queued items.","title":"ExplicitReleaseBlockingQueue"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/#constructors","text":"ExplicitReleaseBlockingQueue [jvm] fun ExplicitReleaseBlockingQueue ()","title":"Constructors"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/#functions","text":"Name Summary add [jvm] open override fun add (element: T ): Boolean addAll [jvm] open override fun addAll (elements: Collection < T >): Boolean clear [jvm] open override fun clear () contains [jvm] open operator override fun contains (element: T ): Boolean containsAll [jvm] open override fun containsAll (elements: Collection < T >): Boolean drainTo [jvm] open override fun drainTo (c: MutableCollection <in T >): Int open override fun drainTo (c: MutableCollection <in T >?, maxElements: Int ): Int element [jvm] open override fun element (): T forEach [jvm] open fun forEach (p0: Consumer <in T >) isEmpty [jvm] open override fun isEmpty (): Boolean iterator [jvm] open operator override fun iterator (): MutableIterator < T > offer [jvm] open override fun offer (e: T ): Boolean open override fun offer (e: T , timeout: Long , unit: TimeUnit ): Boolean parallelStream [jvm] open fun parallelStream (): Stream < T > peek [jvm] open override fun peek (): T ? peekPending [jvm] fun peekPending (): T ? poll [jvm] open override fun poll (): T ? open override fun poll (timeout: Long , unit: TimeUnit ): T ? put [jvm] open override fun put (e: T ) release [jvm] fun release (n: Int ): Int releases up to n items from the pending queue, making them visible to take , poll , peek , etc. This method does not \u201cextend credit\u201d; if n number of pending items on the queue, every currently pending item is made visible, but any items added in the future continue to go onto the pending queue releaseAll [jvm] fun releaseAll (): Int releases all items from the pending queue, returning the number of items released remainingCapacity [jvm] open override fun remainingCapacity (): Int remove [jvm] open override fun remove (): T ? open override fun remove (element: T ): Boolean removeAll [jvm] open override fun removeAll (elements: Collection < T >): Boolean removeIf [jvm] open fun removeIf (p0: Predicate <in T >): Boolean retainAll [jvm] open override fun retainAll (elements: Collection < T >): Boolean spliterator [jvm] open override fun spliterator (): Spliterator < T > stream [jvm] open fun stream (): Stream < T > take [jvm] open override fun take (): T","title":"Functions"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/#properties","text":"Name Summary size [jvm] open override val size : Int","title":"Properties"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/-explicit-release-blocking-queue/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / ExplicitReleaseBlockingQueue ExplicitReleaseBlockingQueue \u00b6 [jvm]\\ fun ExplicitReleaseBlockingQueue ()","title":"ExplicitReleaseBlockingQueue - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/-explicit-release-blocking-queue/#explicitreleaseblockingqueue","text":"[jvm]\\ fun ExplicitReleaseBlockingQueue ()","title":"ExplicitReleaseBlockingQueue"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/add-all/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / addAll addAll \u00b6 [jvm]\\ open override fun addAll (elements: Collection < T >): Boolean","title":"addAll - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/add-all/#addall","text":"[jvm]\\ open override fun addAll (elements: Collection < T >): Boolean","title":"addAll"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/add/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / add add \u00b6 [jvm]\\ open override fun add (element: T ): Boolean","title":"add - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/add/#add","text":"[jvm]\\ open override fun add (element: T ): Boolean","title":"add"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/clear/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / clear clear \u00b6 [jvm]\\ open override fun clear ()","title":"clear - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/clear/#clear","text":"[jvm]\\ open override fun clear ()","title":"clear"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/contains-all/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / containsAll containsAll \u00b6 [jvm]\\ open override fun containsAll (elements: Collection < T >): Boolean","title":"containsAll - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/contains-all/#containsall","text":"[jvm]\\ open override fun containsAll (elements: Collection < T >): Boolean","title":"containsAll"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/contains/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / contains contains \u00b6 [jvm]\\ open operator override fun contains (element: T ): Boolean","title":"contains - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/contains/#contains","text":"[jvm]\\ open operator override fun contains (element: T ): Boolean","title":"contains"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/drain-to/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / drainTo drainTo \u00b6 [jvm]\\ open override fun drainTo (c: MutableCollection <in T >): Int open override fun drainTo (c: MutableCollection <in T >?, maxElements: Int ): Int","title":"drainTo - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/drain-to/#drainto","text":"[jvm]\\ open override fun drainTo (c: MutableCollection <in T >): Int open override fun drainTo (c: MutableCollection <in T >?, maxElements: Int ): Int","title":"drainTo"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/element/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / element element \u00b6 [jvm]\\ open override fun element (): T","title":"element - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/element/#element","text":"[jvm]\\ open override fun element (): T","title":"element"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/is-empty/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / isEmpty isEmpty \u00b6 [jvm]\\ open override fun isEmpty (): Boolean","title":"isEmpty - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/is-empty/#isempty","text":"[jvm]\\ open override fun isEmpty (): Boolean","title":"isEmpty"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/iterator/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / iterator iterator \u00b6 [jvm]\\ open operator override fun iterator (): MutableIterator < T >","title":"iterator - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/iterator/#iterator","text":"[jvm]\\ open operator override fun iterator (): MutableIterator < T >","title":"iterator"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/offer/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / offer offer \u00b6 [jvm]\\ open override fun offer (e: T ): Boolean open override fun offer (e: T , timeout: Long , unit: TimeUnit ): Boolean","title":"offer - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/offer/#offer","text":"[jvm]\\ open override fun offer (e: T ): Boolean open override fun offer (e: T , timeout: Long , unit: TimeUnit ): Boolean","title":"offer"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/peek-pending/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / peekPending peekPending \u00b6 [jvm]\\ fun peekPending (): T ?","title":"peekPending - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/peek-pending/#peekpending","text":"[jvm]\\ fun peekPending (): T ?","title":"peekPending"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/peek/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / peek peek \u00b6 [jvm]\\ open override fun peek (): T ?","title":"peek - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/peek/#peek","text":"[jvm]\\ open override fun peek (): T ?","title":"peek"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/poll/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / poll poll \u00b6 [jvm]\\ open override fun poll (timeout: Long , unit: TimeUnit ): T ? open override fun poll (): T ?","title":"poll - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/poll/#poll","text":"[jvm]\\ open override fun poll (timeout: Long , unit: TimeUnit ): T ? open override fun poll (): T ?","title":"poll"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/put/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / put put \u00b6 [jvm]\\ open override fun put (e: T )","title":"put - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/put/#put","text":"[jvm]\\ open override fun put (e: T )","title":"put"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/release-all/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / releaseAll releaseAll \u00b6 [jvm]\\ fun releaseAll (): Int releases all items from the pending queue, returning the number of items released","title":"releaseAll - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/release-all/#releaseall","text":"[jvm]\\ fun releaseAll (): Int releases all items from the pending queue, returning the number of items released","title":"releaseAll"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/release/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / release release \u00b6 [jvm]\\ fun release (n: Int ): Int releases up to n items from the pending queue, making them visible to take , poll , peek , etc. This method does not \u201cextend credit\u201d; if n number of pending items on the queue, every currently pending item is made visible, but any items added in the future continue to go onto the pending queue Return \u00b6 the number of items actually releases","title":"release - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/release/#release","text":"[jvm]\\ fun release (n: Int ): Int releases up to n items from the pending queue, making them visible to take , poll , peek , etc. This method does not \u201cextend credit\u201d; if n number of pending items on the queue, every currently pending item is made visible, but any items added in the future continue to go onto the pending queue","title":"release"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/release/#return","text":"the number of items actually releases","title":"Return"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/remaining-capacity/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / remainingCapacity remainingCapacity \u00b6 [jvm]\\ open override fun remainingCapacity (): Int","title":"remainingCapacity - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/remaining-capacity/#remainingcapacity","text":"[jvm]\\ open override fun remainingCapacity (): Int","title":"remainingCapacity"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/remove-all/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / removeAll removeAll \u00b6 [jvm]\\ open override fun removeAll (elements: Collection < T >): Boolean","title":"removeAll - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/remove-all/#removeall","text":"[jvm]\\ open override fun removeAll (elements: Collection < T >): Boolean","title":"removeAll"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/remove/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / remove remove \u00b6 [jvm]\\ open override fun remove (element: T ): Boolean open override fun remove (): T ?","title":"remove - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/remove/#remove","text":"[jvm]\\ open override fun remove (element: T ): Boolean open override fun remove (): T ?","title":"remove"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/retain-all/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / retainAll retainAll \u00b6 [jvm]\\ open override fun retainAll (elements: Collection < T >): Boolean","title":"retainAll - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/retain-all/#retainall","text":"[jvm]\\ open override fun retainAll (elements: Collection < T >): Boolean","title":"retainAll"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/size/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / size size \u00b6 [jvm]\\ open override val size : Int","title":"size - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/take/","text":"// misk / misk.concurrent / ExplicitReleaseBlockingQueue / take take \u00b6 [jvm]\\ open override fun take (): T","title":"take - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-blocking-queue/take/#take","text":"[jvm]\\ open override fun take (): T","title":"take"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/","text":"// misk / misk.concurrent / ExplicitReleaseDelayQueue ExplicitReleaseDelayQueue \u00b6 [jvm]\\ class ExplicitReleaseDelayQueue < T : Delayed > : BlockingQueue < T > An ExplicitReleaseDelayQueue is an ExplicitReleaseBlockingQueue that release elements in the order in which they expire Constructors \u00b6 ExplicitReleaseDelayQueue [jvm] fun ExplicitReleaseDelayQueue () Functions \u00b6 Name Summary add [jvm] open override fun add (element: T ): Boolean addAll [jvm] open override fun addAll (elements: Collection < T >): Boolean clear [jvm] open override fun clear () contains [jvm] open operator override fun contains (element: T ): Boolean containsAll [jvm] open override fun containsAll (elements: Collection < T >): Boolean drainTo [jvm] open override fun drainTo (p0: MutableCollection <in T >): Int open override fun drainTo (p0: MutableCollection <in T >, p1: Int ): Int element [jvm] open override fun element (): T forEach [jvm] open fun forEach (p0: Consumer <in T >) isEmpty [jvm] open override fun isEmpty (): Boolean iterator [jvm] open operator override fun iterator (): MutableIterator < T > offer [jvm] open override fun offer (p0: T ): Boolean open override fun offer (p0: T , p1: Long , p2: TimeUnit ): Boolean parallelStream [jvm] open fun parallelStream (): Stream < T > peek [jvm] open override fun peek (): T peekPending [jvm] fun peekPending (): T ? poll [jvm] open override fun poll (): T open override fun poll (p0: Long , p1: TimeUnit ): T put [jvm] open override fun put (p0: T ) release [jvm] fun release (n: Int ): Int releaseAll [jvm] fun releaseAll (): Int remainingCapacity [jvm] open override fun remainingCapacity (): Int remove [jvm] open override fun remove (): T open override fun remove (element: T ): Boolean removeAll [jvm] open override fun removeAll (elements: Collection < T >): Boolean removeIf [jvm] open fun removeIf (p0: Predicate <in T >): Boolean retainAll [jvm] open override fun retainAll (elements: Collection < T >): Boolean spliterator [jvm] open override fun spliterator (): Spliterator < T > stream [jvm] open fun stream (): Stream < T > take [jvm] open override fun take (): T Properties \u00b6 Name Summary size [jvm] open override val size : Int","title":"ExplicitReleaseDelayQueue - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/#explicitreleasedelayqueue","text":"[jvm]\\ class ExplicitReleaseDelayQueue < T : Delayed > : BlockingQueue < T > An ExplicitReleaseDelayQueue is an ExplicitReleaseBlockingQueue that release elements in the order in which they expire","title":"ExplicitReleaseDelayQueue"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/#constructors","text":"ExplicitReleaseDelayQueue [jvm] fun ExplicitReleaseDelayQueue ()","title":"Constructors"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/#functions","text":"Name Summary add [jvm] open override fun add (element: T ): Boolean addAll [jvm] open override fun addAll (elements: Collection < T >): Boolean clear [jvm] open override fun clear () contains [jvm] open operator override fun contains (element: T ): Boolean containsAll [jvm] open override fun containsAll (elements: Collection < T >): Boolean drainTo [jvm] open override fun drainTo (p0: MutableCollection <in T >): Int open override fun drainTo (p0: MutableCollection <in T >, p1: Int ): Int element [jvm] open override fun element (): T forEach [jvm] open fun forEach (p0: Consumer <in T >) isEmpty [jvm] open override fun isEmpty (): Boolean iterator [jvm] open operator override fun iterator (): MutableIterator < T > offer [jvm] open override fun offer (p0: T ): Boolean open override fun offer (p0: T , p1: Long , p2: TimeUnit ): Boolean parallelStream [jvm] open fun parallelStream (): Stream < T > peek [jvm] open override fun peek (): T peekPending [jvm] fun peekPending (): T ? poll [jvm] open override fun poll (): T open override fun poll (p0: Long , p1: TimeUnit ): T put [jvm] open override fun put (p0: T ) release [jvm] fun release (n: Int ): Int releaseAll [jvm] fun releaseAll (): Int remainingCapacity [jvm] open override fun remainingCapacity (): Int remove [jvm] open override fun remove (): T open override fun remove (element: T ): Boolean removeAll [jvm] open override fun removeAll (elements: Collection < T >): Boolean removeIf [jvm] open fun removeIf (p0: Predicate <in T >): Boolean retainAll [jvm] open override fun retainAll (elements: Collection < T >): Boolean spliterator [jvm] open override fun spliterator (): Spliterator < T > stream [jvm] open fun stream (): Stream < T > take [jvm] open override fun take (): T","title":"Functions"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/#properties","text":"Name Summary size [jvm] open override val size : Int","title":"Properties"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/-explicit-release-delay-queue/","text":"// misk / misk.concurrent / ExplicitReleaseDelayQueue / ExplicitReleaseDelayQueue ExplicitReleaseDelayQueue \u00b6 [jvm]\\ fun ExplicitReleaseDelayQueue ()","title":"ExplicitReleaseDelayQueue - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/-explicit-release-delay-queue/#explicitreleasedelayqueue","text":"[jvm]\\ fun ExplicitReleaseDelayQueue ()","title":"ExplicitReleaseDelayQueue"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/peek-pending/","text":"// misk / misk.concurrent / ExplicitReleaseDelayQueue / peekPending peekPending \u00b6 [jvm]\\ fun peekPending (): T ?","title":"peekPending - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/peek-pending/#peekpending","text":"[jvm]\\ fun peekPending (): T ?","title":"peekPending"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/release-all/","text":"// misk / misk.concurrent / ExplicitReleaseDelayQueue / releaseAll releaseAll \u00b6 [jvm]\\ fun releaseAll (): Int","title":"releaseAll - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/release-all/#releaseall","text":"[jvm]\\ fun releaseAll (): Int","title":"releaseAll"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/release/","text":"// misk / misk.concurrent / ExplicitReleaseDelayQueue / release release \u00b6 [jvm]\\ fun release (n: Int ): Int","title":"release - Misk"},{"location":"0.x/misk/misk.concurrent/-explicit-release-delay-queue/release/#release","text":"[jvm]\\ fun release (n: Int ): Int","title":"release"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/","text":"// misk / misk.concurrent / WrappingListeningExecutorService WrappingListeningExecutorService \u00b6 [jvm]\\ abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls Constructors \u00b6 WrappingListeningExecutorService [jvm] fun WrappingListeningExecutorService () Functions \u00b6 Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean delegate [jvm] abstract override fun delegate (): ListeningExecutorService execute [jvm] open override fun execute (runnable: Runnable ) invokeAll [jvm] open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >> invokeAny [jvm] open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (runnable: Runnable ): ListenableFuture<*> open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > toString [jvm] open override fun toString (): String","title":"WrappingListeningExecutorService - Misk"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/#wrappinglisteningexecutorservice","text":"[jvm]\\ abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls","title":"WrappingListeningExecutorService"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/#constructors","text":"WrappingListeningExecutorService [jvm] fun WrappingListeningExecutorService ()","title":"Constructors"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/#functions","text":"Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean delegate [jvm] abstract override fun delegate (): ListeningExecutorService execute [jvm] open override fun execute (runnable: Runnable ) invokeAll [jvm] open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >> invokeAny [jvm] open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (runnable: Runnable ): ListenableFuture<*> open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/-wrapping-listening-executor-service/","text":"// misk / misk.concurrent / WrappingListeningExecutorService / WrappingListeningExecutorService WrappingListeningExecutorService \u00b6 [jvm]\\ fun WrappingListeningExecutorService ()","title":"WrappingListeningExecutorService - Misk"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/-wrapping-listening-executor-service/#wrappinglisteningexecutorservice","text":"[jvm]\\ fun WrappingListeningExecutorService ()","title":"WrappingListeningExecutorService"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/execute/","text":"// misk / misk.concurrent / WrappingListeningExecutorService / execute execute \u00b6 [jvm]\\ open override fun execute (runnable: Runnable )","title":"execute - Misk"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/execute/#execute","text":"[jvm]\\ open override fun execute (runnable: Runnable )","title":"execute"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/invoke-all/","text":"// misk / misk.concurrent / WrappingListeningExecutorService / invokeAll invokeAll \u00b6 [jvm]\\ open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >>","title":"invokeAll - Misk"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/invoke-all/#invokeall","text":"[jvm]\\ open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >>","title":"invokeAll"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/invoke-any/","text":"// misk / misk.concurrent / WrappingListeningExecutorService / invokeAny invokeAny \u00b6 [jvm]\\ open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T","title":"invokeAny - Misk"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/invoke-any/#invokeany","text":"[jvm]\\ open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T","title":"invokeAny"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/submit/","text":"// misk / misk.concurrent / WrappingListeningExecutorService / submit submit \u00b6 [jvm]\\ open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > open override fun submit (runnable: Runnable ): ListenableFuture<*>","title":"submit - Misk"},{"location":"0.x/misk/misk.concurrent/-wrapping-listening-executor-service/submit/#submit","text":"[jvm]\\ open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > open override fun submit (runnable: Runnable ): ListenableFuture<*>","title":"submit"},{"location":"0.x/misk/misk.config/","text":"// misk / misk.config Package misk.config \u00b6 Types \u00b6 Name Summary AppName [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class AppName AppNameModule [jvm] class AppNameModule (appName: String ) : KAbstractModule Binds a @AppName String to the provided application name ConfigModule [jvm] class ConfigModule < T : Config>(configClass: Class < T >, appName: String , config: T ) : KAbstractModule MiskConfig [jvm] object MiskConfig Secret [jvm] interface Secret < T > Type for any secrets that need to be loaded as reference in their config file. Secret addresses should use format specified in misk.resources.ResourceLoader.","title":"Package misk.config - Misk"},{"location":"0.x/misk/misk.config/#package-miskconfig","text":"","title":"Package misk.config"},{"location":"0.x/misk/misk.config/#types","text":"Name Summary AppName [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class AppName AppNameModule [jvm] class AppNameModule (appName: String ) : KAbstractModule Binds a @AppName String to the provided application name ConfigModule [jvm] class ConfigModule < T : Config>(configClass: Class < T >, appName: String , config: T ) : KAbstractModule MiskConfig [jvm] object MiskConfig Secret [jvm] interface Secret < T > Type for any secrets that need to be loaded as reference in their config file. Secret addresses should use format specified in misk.resources.ResourceLoader.","title":"Types"},{"location":"0.x/misk/misk.config/-app-name/","text":"// misk / misk.config / AppName AppName \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class AppName","title":"AppName - Misk"},{"location":"0.x/misk/misk.config/-app-name/#appname","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class AppName","title":"AppName"},{"location":"0.x/misk/misk.config/-app-name/-app-name/","text":"// misk / misk.config / AppName / AppName AppName \u00b6 [jvm]\\ fun AppName ()","title":"AppName - Misk"},{"location":"0.x/misk/misk.config/-app-name/-app-name/#appname","text":"[jvm]\\ fun AppName ()","title":"AppName"},{"location":"0.x/misk/misk.config/-app-name-module/","text":"// misk / misk.config / AppNameModule AppNameModule \u00b6 [jvm]\\ class AppNameModule (appName: String ) : KAbstractModule Binds a @AppName String to the provided application name Constructors \u00b6 AppNameModule [jvm] fun AppNameModule (appName: String ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AppNameModule - Misk"},{"location":"0.x/misk/misk.config/-app-name-module/#appnamemodule","text":"[jvm]\\ class AppNameModule (appName: String ) : KAbstractModule Binds a @AppName String to the provided application name","title":"AppNameModule"},{"location":"0.x/misk/misk.config/-app-name-module/#constructors","text":"AppNameModule [jvm] fun AppNameModule (appName: String )","title":"Constructors"},{"location":"0.x/misk/misk.config/-app-name-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.config/-app-name-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.config/-app-name-module/-app-name-module/","text":"// misk / misk.config / AppNameModule / AppNameModule AppNameModule \u00b6 [jvm]\\ fun AppNameModule (appName: String )","title":"AppNameModule - Misk"},{"location":"0.x/misk/misk.config/-app-name-module/-app-name-module/#appnamemodule","text":"[jvm]\\ fun AppNameModule (appName: String )","title":"AppNameModule"},{"location":"0.x/misk/misk.config/-config-module/","text":"// misk / misk.config / ConfigModule ConfigModule \u00b6 [jvm]\\ class ConfigModule < T : Config>(configClass: Class < T >, appName: String , config: T ) : KAbstractModule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ConfigModule - Misk"},{"location":"0.x/misk/misk.config/-config-module/#configmodule","text":"[jvm]\\ class ConfigModule < T : Config>(configClass: Class < T >, appName: String , config: T ) : KAbstractModule","title":"ConfigModule"},{"location":"0.x/misk/misk.config/-config-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.config/-config-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.config/-config-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.config/-config-module/-config-module/","text":"// misk / misk.config / ConfigModule / ConfigModule ConfigModule \u00b6 [jvm]\\ fun < T : Config> ConfigModule (configClass: Class < T >, appName: String , config: T )","title":"ConfigModule - Misk"},{"location":"0.x/misk/misk.config/-config-module/-config-module/#configmodule","text":"[jvm]\\ fun < T : Config> ConfigModule (configClass: Class < T >, appName: String , config: T )","title":"ConfigModule"},{"location":"0.x/misk/misk.config/-config-module/-companion/","text":"// misk / misk.config / ConfigModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < T : Config> create (appName: String , config: T ): ConfigModule < T >","title":"Companion - Misk"},{"location":"0.x/misk/misk.config/-config-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.config/-config-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < T : Config> create (appName: String , config: T ): ConfigModule < T >","title":"Functions"},{"location":"0.x/misk/misk.config/-config-module/-companion/create/","text":"// misk / misk.config / ConfigModule / Companion / create create \u00b6 [jvm]\\ inline fun < T : Config> create (appName: String , config: T ): ConfigModule < T >","title":"create - Misk"},{"location":"0.x/misk/misk.config/-config-module/-companion/create/#create","text":"[jvm]\\ inline fun < T : Config> create (appName: String , config: T ): ConfigModule < T >","title":"create"},{"location":"0.x/misk/misk.config/-misk-config/","text":"// misk / misk.config / MiskConfig MiskConfig \u00b6 [jvm]\\ object MiskConfig Types \u00b6 Name Summary RealSecret [jvm] class RealSecret < T >(value: T ) : Secret < T > SecretJacksonModule [jvm] class SecretJacksonModule (resourceLoader: ResourceLoader, mapper: ObjectMapper) : SimpleModule Functions \u00b6 Name Summary filesInDir [jvm] @ JvmStatic fun filesInDir (dir: String , filter: FilenameFilter = FilenameFilter { _, filename -> filename.endsWith(\u201c.yaml\u201d) }): List < File > flattenYamlMap [jvm] fun flattenYamlMap (configYamls: Map < String , String ?>): JsonNode Returns a JsonNode that combines the YAMLs in configYamls. If two nodes define the same value the last one wins. load [jvm] @ JvmStatic inline fun < T : Config> load (appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T @ JvmStatic fun < T : Config> load (configClass: Class <out Config>, appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T loadConfigYamlMap [jvm] fun loadConfigYamlMap (appName: String , deployment: Deployment, overrideFiles: List < File >, resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): Map < String , String ?> Returns a map whose keys are the names of the source Yaml files to load, and whose values are the contents of those files. If a file is absent the map\u2019s value will be null. toYaml [jvm] fun < T : Config> toYaml (config: T , resourceLoader: ResourceLoader): String","title":"MiskConfig - Misk"},{"location":"0.x/misk/misk.config/-misk-config/#miskconfig","text":"[jvm]\\ object MiskConfig","title":"MiskConfig"},{"location":"0.x/misk/misk.config/-misk-config/#types","text":"Name Summary RealSecret [jvm] class RealSecret < T >(value: T ) : Secret < T > SecretJacksonModule [jvm] class SecretJacksonModule (resourceLoader: ResourceLoader, mapper: ObjectMapper) : SimpleModule","title":"Types"},{"location":"0.x/misk/misk.config/-misk-config/#functions","text":"Name Summary filesInDir [jvm] @ JvmStatic fun filesInDir (dir: String , filter: FilenameFilter = FilenameFilter { _, filename -> filename.endsWith(\u201c.yaml\u201d) }): List < File > flattenYamlMap [jvm] fun flattenYamlMap (configYamls: Map < String , String ?>): JsonNode Returns a JsonNode that combines the YAMLs in configYamls. If two nodes define the same value the last one wins. load [jvm] @ JvmStatic inline fun < T : Config> load (appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T @ JvmStatic fun < T : Config> load (configClass: Class <out Config>, appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T loadConfigYamlMap [jvm] fun loadConfigYamlMap (appName: String , deployment: Deployment, overrideFiles: List < File >, resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): Map < String , String ?> Returns a map whose keys are the names of the source Yaml files to load, and whose values are the contents of those files. If a file is absent the map\u2019s value will be null. toYaml [jvm] fun < T : Config> toYaml (config: T , resourceLoader: ResourceLoader): String","title":"Functions"},{"location":"0.x/misk/misk.config/-misk-config/files-in-dir/","text":"// misk / misk.config / MiskConfig / filesInDir filesInDir \u00b6 [jvm]\\ @ JvmStatic fun filesInDir (dir: String , filter: FilenameFilter = FilenameFilter { _, filename -> filename.endsWith(\u201c.yaml\u201d) }): List < File >","title":"filesInDir - Misk"},{"location":"0.x/misk/misk.config/-misk-config/files-in-dir/#filesindir","text":"[jvm]\\ @ JvmStatic fun filesInDir (dir: String , filter: FilenameFilter = FilenameFilter { _, filename -> filename.endsWith(\u201c.yaml\u201d) }): List < File >","title":"filesInDir"},{"location":"0.x/misk/misk.config/-misk-config/flatten-yaml-map/","text":"// misk / misk.config / MiskConfig / flattenYamlMap flattenYamlMap \u00b6 [jvm]\\ fun flattenYamlMap (configYamls: Map < String , String ?>): JsonNode Returns a JsonNode that combines the YAMLs in configYamls. If two nodes define the same value the last one wins.","title":"flattenYamlMap - Misk"},{"location":"0.x/misk/misk.config/-misk-config/flatten-yaml-map/#flattenyamlmap","text":"[jvm]\\ fun flattenYamlMap (configYamls: Map < String , String ?>): JsonNode Returns a JsonNode that combines the YAMLs in configYamls. If two nodes define the same value the last one wins.","title":"flattenYamlMap"},{"location":"0.x/misk/misk.config/-misk-config/load-config-yaml-map/","text":"// misk / misk.config / MiskConfig / loadConfigYamlMap loadConfigYamlMap \u00b6 [jvm]\\ fun loadConfigYamlMap (appName: String , deployment: Deployment, overrideFiles: List < File >, resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): Map < String , String ?> Returns a map whose keys are the names of the source Yaml files to load, and whose values are the contents of those files. If a file is absent the map\u2019s value will be null.","title":"loadConfigYamlMap - Misk"},{"location":"0.x/misk/misk.config/-misk-config/load-config-yaml-map/#loadconfigyamlmap","text":"[jvm]\\ fun loadConfigYamlMap (appName: String , deployment: Deployment, overrideFiles: List < File >, resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): Map < String , String ?> Returns a map whose keys are the names of the source Yaml files to load, and whose values are the contents of those files. If a file is absent the map\u2019s value will be null.","title":"loadConfigYamlMap"},{"location":"0.x/misk/misk.config/-misk-config/load/","text":"// misk / misk.config / MiskConfig / load load \u00b6 [jvm]\\ @ JvmStatic inline fun < T : Config> load (appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T @ JvmStatic fun < T : Config> load (configClass: Class <out Config>, appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T","title":"load - Misk"},{"location":"0.x/misk/misk.config/-misk-config/load/#load","text":"[jvm]\\ @ JvmStatic inline fun < T : Config> load (appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T @ JvmStatic fun < T : Config> load (configClass: Class <out Config>, appName: String , deployment: Deployment, overrideFiles: List < File > = listOf(), resourceLoader: ResourceLoader = ResourceLoader.SYSTEM): T","title":"load"},{"location":"0.x/misk/misk.config/-misk-config/to-yaml/","text":"// misk / misk.config / MiskConfig / toYaml toYaml \u00b6 [jvm]\\ fun < T : Config> toYaml (config: T , resourceLoader: ResourceLoader): String","title":"toYaml - Misk"},{"location":"0.x/misk/misk.config/-misk-config/to-yaml/#toyaml","text":"[jvm]\\ fun < T : Config> toYaml (config: T , resourceLoader: ResourceLoader): String","title":"toYaml"},{"location":"0.x/misk/misk.config/-misk-config/-real-secret/","text":"// misk / misk.config / MiskConfig / RealSecret RealSecret \u00b6 [jvm]\\ class RealSecret < T >(value: T ) : Secret < T > Properties \u00b6 Name Summary value [jvm] open override val value : T","title":"RealSecret - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-real-secret/#realsecret","text":"[jvm]\\ class RealSecret < T >(value: T ) : Secret < T >","title":"RealSecret"},{"location":"0.x/misk/misk.config/-misk-config/-real-secret/#properties","text":"Name Summary value [jvm] open override val value : T","title":"Properties"},{"location":"0.x/misk/misk.config/-misk-config/-real-secret/-real-secret/","text":"// misk / misk.config / MiskConfig / RealSecret / RealSecret RealSecret \u00b6 [jvm]\\ fun < T > RealSecret (value: T )","title":"RealSecret - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-real-secret/-real-secret/#realsecret","text":"[jvm]\\ fun < T > RealSecret (value: T )","title":"RealSecret"},{"location":"0.x/misk/misk.config/-misk-config/-real-secret/value/","text":"// misk / misk.config / MiskConfig / RealSecret / value value \u00b6 [jvm]\\ open override val value : T","title":"value - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-real-secret/value/#value","text":"[jvm]\\ open override val value : T","title":"value"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/","text":"// misk / misk.config / MiskConfig / SecretJacksonModule SecretJacksonModule \u00b6 [jvm]\\ class SecretJacksonModule (resourceLoader: ResourceLoader, mapper: ObjectMapper) : SimpleModule Functions \u00b6 Name Summary _checkNotNull [jvm] open fun _checkNotNull (p0: Any , p1: String ) addAbstractTypeMapping [jvm] open fun < T : Any > addAbstractTypeMapping (p0: Class < T >, p1: Class <out T >): SimpleModule addDeserializer [jvm] open fun < T : Any > addDeserializer (p0: Class < T >, p1: JsonDeserializer<out T >): SimpleModule addKeyDeserializer [jvm] open fun addKeyDeserializer (p0: Class <*>, p1: KeyDeserializer): SimpleModule addKeySerializer [jvm] open fun < T : Any > addKeySerializer (p0: Class <out T >, p1: JsonSerializer< T >): SimpleModule addSerializer [jvm] open fun addSerializer (p0: JsonSerializer<*>): SimpleModule open fun < T : Any > addSerializer (p0: Class <out T >, p1: JsonSerializer< T >): SimpleModule addValueInstantiator [jvm] open fun addValueInstantiator (p0: Class <*>, p1: ValueInstantiator): SimpleModule getDependencies [jvm] open fun getDependencies (): MutableIterable <Module> getModuleName [jvm] open override fun getModuleName (): String getTypeId [jvm] open override fun getTypeId (): Any registerSubtypes [jvm] open fun registerSubtypes (vararg p0: NamedType): SimpleModule open fun registerSubtypes (vararg p0: Class < >): SimpleModule open fun registerSubtypes (p0: MutableCollection < Class < >>): SimpleModule setAbstractTypes [jvm] open fun setAbstractTypes (p0: SimpleAbstractTypeResolver) setDeserializerModifier [jvm] open fun setDeserializerModifier (p0: BeanDeserializerModifier): SimpleModule setDeserializers [jvm] open fun setDeserializers (p0: SimpleDeserializers) setKeyDeserializers [jvm] open fun setKeyDeserializers (p0: SimpleKeyDeserializers) setKeySerializers [jvm] open fun setKeySerializers (p0: SimpleSerializers) setMixInAnnotation [jvm] open fun setMixInAnnotation (p0: Class < >, p1: Class < >): SimpleModule setNamingStrategy [jvm] open fun setNamingStrategy (p0: PropertyNamingStrategy): SimpleModule setSerializerModifier [jvm] open fun setSerializerModifier (p0: BeanSerializerModifier): SimpleModule setSerializers [jvm] open fun setSerializers (p0: SimpleSerializers) setupModule [jvm] open override fun setupModule (context: Module.SetupContext?) setValueInstantiators [jvm] open fun setValueInstantiators (p0: SimpleValueInstantiators) version [jvm] open override fun version (): Version Properties \u00b6 Name Summary _abstractTypes [jvm] val _abstractTypes : SimpleAbstractTypeResolver _deserializerModifier [jvm] val _deserializerModifier : BeanDeserializerModifier _deserializers [jvm] val _deserializers : SimpleDeserializers _hasExplicitName [jvm] val _hasExplicitName : Boolean _keyDeserializers [jvm] val _keyDeserializers : SimpleKeyDeserializers _keySerializers [jvm] val _keySerializers : SimpleSerializers _mixins [jvm] val _mixins : HashMap < Class < >, Class < >> _name [jvm] val _name : String _namingStrategy [jvm] val _namingStrategy : PropertyNamingStrategy _serializerModifier [jvm] val _serializerModifier : BeanSerializerModifier _serializers [jvm] val _serializers : SimpleSerializers _subtypes [jvm] val _subtypes : LinkedHashSet <NamedType> _valueInstantiators [jvm] val _valueInstantiators : SimpleValueInstantiators _version [jvm] val _version : Version mapper [jvm] val mapper : ObjectMapper resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"SecretJacksonModule - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/#secretjacksonmodule","text":"[jvm]\\ class SecretJacksonModule (resourceLoader: ResourceLoader, mapper: ObjectMapper) : SimpleModule","title":"SecretJacksonModule"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/#functions","text":"Name Summary _checkNotNull [jvm] open fun _checkNotNull (p0: Any , p1: String ) addAbstractTypeMapping [jvm] open fun < T : Any > addAbstractTypeMapping (p0: Class < T >, p1: Class <out T >): SimpleModule addDeserializer [jvm] open fun < T : Any > addDeserializer (p0: Class < T >, p1: JsonDeserializer<out T >): SimpleModule addKeyDeserializer [jvm] open fun addKeyDeserializer (p0: Class <*>, p1: KeyDeserializer): SimpleModule addKeySerializer [jvm] open fun < T : Any > addKeySerializer (p0: Class <out T >, p1: JsonSerializer< T >): SimpleModule addSerializer [jvm] open fun addSerializer (p0: JsonSerializer<*>): SimpleModule open fun < T : Any > addSerializer (p0: Class <out T >, p1: JsonSerializer< T >): SimpleModule addValueInstantiator [jvm] open fun addValueInstantiator (p0: Class <*>, p1: ValueInstantiator): SimpleModule getDependencies [jvm] open fun getDependencies (): MutableIterable <Module> getModuleName [jvm] open override fun getModuleName (): String getTypeId [jvm] open override fun getTypeId (): Any registerSubtypes [jvm] open fun registerSubtypes (vararg p0: NamedType): SimpleModule open fun registerSubtypes (vararg p0: Class < >): SimpleModule open fun registerSubtypes (p0: MutableCollection < Class < >>): SimpleModule setAbstractTypes [jvm] open fun setAbstractTypes (p0: SimpleAbstractTypeResolver) setDeserializerModifier [jvm] open fun setDeserializerModifier (p0: BeanDeserializerModifier): SimpleModule setDeserializers [jvm] open fun setDeserializers (p0: SimpleDeserializers) setKeyDeserializers [jvm] open fun setKeyDeserializers (p0: SimpleKeyDeserializers) setKeySerializers [jvm] open fun setKeySerializers (p0: SimpleSerializers) setMixInAnnotation [jvm] open fun setMixInAnnotation (p0: Class < >, p1: Class < >): SimpleModule setNamingStrategy [jvm] open fun setNamingStrategy (p0: PropertyNamingStrategy): SimpleModule setSerializerModifier [jvm] open fun setSerializerModifier (p0: BeanSerializerModifier): SimpleModule setSerializers [jvm] open fun setSerializers (p0: SimpleSerializers) setupModule [jvm] open override fun setupModule (context: Module.SetupContext?) setValueInstantiators [jvm] open fun setValueInstantiators (p0: SimpleValueInstantiators) version [jvm] open override fun version (): Version","title":"Functions"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/#properties","text":"Name Summary _abstractTypes [jvm] val _abstractTypes : SimpleAbstractTypeResolver _deserializerModifier [jvm] val _deserializerModifier : BeanDeserializerModifier _deserializers [jvm] val _deserializers : SimpleDeserializers _hasExplicitName [jvm] val _hasExplicitName : Boolean _keyDeserializers [jvm] val _keyDeserializers : SimpleKeyDeserializers _keySerializers [jvm] val _keySerializers : SimpleSerializers _mixins [jvm] val _mixins : HashMap < Class < >, Class < >> _name [jvm] val _name : String _namingStrategy [jvm] val _namingStrategy : PropertyNamingStrategy _serializerModifier [jvm] val _serializerModifier : BeanSerializerModifier _serializers [jvm] val _serializers : SimpleSerializers _subtypes [jvm] val _subtypes : LinkedHashSet <NamedType> _valueInstantiators [jvm] val _valueInstantiators : SimpleValueInstantiators _version [jvm] val _version : Version mapper [jvm] val mapper : ObjectMapper resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"Properties"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/-secret-jackson-module/","text":"// misk / misk.config / MiskConfig / SecretJacksonModule / SecretJacksonModule SecretJacksonModule \u00b6 [jvm]\\ fun SecretJacksonModule (resourceLoader: ResourceLoader, mapper: ObjectMapper)","title":"SecretJacksonModule - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/-secret-jackson-module/#secretjacksonmodule","text":"[jvm]\\ fun SecretJacksonModule (resourceLoader: ResourceLoader, mapper: ObjectMapper)","title":"SecretJacksonModule"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/mapper/","text":"// misk / misk.config / MiskConfig / SecretJacksonModule / mapper mapper \u00b6 [jvm]\\ val mapper : ObjectMapper","title":"mapper - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/mapper/#mapper","text":"[jvm]\\ val mapper : ObjectMapper","title":"mapper"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/resource-loader/","text":"// misk / misk.config / MiskConfig / SecretJacksonModule / resourceLoader resourceLoader \u00b6 [jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/resource-loader/#resourceloader","text":"[jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/setup-module/","text":"// misk / misk.config / MiskConfig / SecretJacksonModule / setupModule setupModule \u00b6 [jvm]\\ open override fun setupModule (context: Module.SetupContext?)","title":"setupModule - Misk"},{"location":"0.x/misk/misk.config/-misk-config/-secret-jackson-module/setup-module/#setupmodule","text":"[jvm]\\ open override fun setupModule (context: Module.SetupContext?)","title":"setupModule"},{"location":"0.x/misk/misk.config/-secret/","text":"// misk / misk.config / Secret Secret \u00b6 [jvm]\\ interface Secret < T > Type for any secrets that need to be loaded as reference in their config file. Secret addresses should use format specified in misk.resources.ResourceLoader. Usage example: data class SuperSecretConfig(\\ val string_value: String,\\ val secret_information: Secret<SecretInformationConfig>,\\ ) : Config With data class SecretInformationConfig(\\ val answer_to_universe: String,\\ val limit: Int\\ ) : Config We would have the SuperSecretConfig yaml be: string_value: \u201cthis is not a secret\u201d\\ secret_information: \u201cclasspath:/misk/resources/secret_information_values.yaml\u201d And the secret_information stored as: answer_to_universe: 42\\ limit: 5 Lastly, this secret information would be accessed using: superSecretConfig.secret_information.value.answer_to_universe Properties \u00b6 Name Summary value [jvm] abstract val value : T Inheritors \u00b6 Name RealSecret","title":"Secret - Misk"},{"location":"0.x/misk/misk.config/-secret/#secret","text":"[jvm]\\ interface Secret < T > Type for any secrets that need to be loaded as reference in their config file. Secret addresses should use format specified in misk.resources.ResourceLoader. Usage example: data class SuperSecretConfig(\\ val string_value: String,\\ val secret_information: Secret<SecretInformationConfig>,\\ ) : Config With data class SecretInformationConfig(\\ val answer_to_universe: String,\\ val limit: Int\\ ) : Config We would have the SuperSecretConfig yaml be: string_value: \u201cthis is not a secret\u201d\\ secret_information: \u201cclasspath:/misk/resources/secret_information_values.yaml\u201d And the secret_information stored as: answer_to_universe: 42\\ limit: 5 Lastly, this secret information would be accessed using: superSecretConfig.secret_information.value.answer_to_universe","title":"Secret"},{"location":"0.x/misk/misk.config/-secret/#properties","text":"Name Summary value [jvm] abstract val value : T","title":"Properties"},{"location":"0.x/misk/misk.config/-secret/#inheritors","text":"Name RealSecret","title":"Inheritors"},{"location":"0.x/misk/misk.config/-secret/value/","text":"// misk / misk.config / Secret / value value \u00b6 [jvm]\\ abstract val value : T","title":"value - Misk"},{"location":"0.x/misk/misk.config/-secret/value/#value","text":"[jvm]\\ abstract val value : T","title":"value"},{"location":"0.x/misk/misk.environment/","text":"// misk / misk.environment Package misk.environment \u00b6 Types \u00b6 Name Summary DeploymentModule [jvm] class DeploymentModule (deployment: Deployment) : KAbstractModule Binds Deployment to make it available to services and actions EnvVarLoader [jvm] interface EnvVarLoader : EnvironmentVariableLoader Loads an environment variable value. FakeEnvVarModule [jvm] class FakeEnvVarModule : KAbstractModule Binds a EnvVarLoader for tests. Tests can contribute values through the @ForEnvVars Map&lt;String, String&gt; binding. ForEnvVars [jvm] @Qualifier annotation class ForEnvVars RealEnvVarModule [jvm] class RealEnvVarModule : KAbstractModule Binds a EnvVarLoader for production","title":"Package misk.environment - Misk"},{"location":"0.x/misk/misk.environment/#package-miskenvironment","text":"","title":"Package misk.environment"},{"location":"0.x/misk/misk.environment/#types","text":"Name Summary DeploymentModule [jvm] class DeploymentModule (deployment: Deployment) : KAbstractModule Binds Deployment to make it available to services and actions EnvVarLoader [jvm] interface EnvVarLoader : EnvironmentVariableLoader Loads an environment variable value. FakeEnvVarModule [jvm] class FakeEnvVarModule : KAbstractModule Binds a EnvVarLoader for tests. Tests can contribute values through the @ForEnvVars Map&lt;String, String&gt; binding. ForEnvVars [jvm] @Qualifier annotation class ForEnvVars RealEnvVarModule [jvm] class RealEnvVarModule : KAbstractModule Binds a EnvVarLoader for production","title":"Types"},{"location":"0.x/misk/misk.environment/-deployment-module/","text":"// misk / misk.environment / DeploymentModule DeploymentModule \u00b6 [jvm]\\ class DeploymentModule (deployment: Deployment) : KAbstractModule Binds Deployment to make it available to services and actions Constructors \u00b6 DeploymentModule [jvm] fun DeploymentModule (deployment: Deployment = getDeploymentFromEnvironmentVariable()) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"DeploymentModule - Misk"},{"location":"0.x/misk/misk.environment/-deployment-module/#deploymentmodule","text":"[jvm]\\ class DeploymentModule (deployment: Deployment) : KAbstractModule Binds Deployment to make it available to services and actions","title":"DeploymentModule"},{"location":"0.x/misk/misk.environment/-deployment-module/#constructors","text":"DeploymentModule [jvm] fun DeploymentModule (deployment: Deployment = getDeploymentFromEnvironmentVariable())","title":"Constructors"},{"location":"0.x/misk/misk.environment/-deployment-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.environment/-deployment-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.environment/-deployment-module/-deployment-module/","text":"// misk / misk.environment / DeploymentModule / DeploymentModule DeploymentModule \u00b6 [jvm]\\ fun DeploymentModule (deployment: Deployment = getDeploymentFromEnvironmentVariable())","title":"DeploymentModule - Misk"},{"location":"0.x/misk/misk.environment/-deployment-module/-deployment-module/#deploymentmodule","text":"[jvm]\\ fun DeploymentModule (deployment: Deployment = getDeploymentFromEnvironmentVariable())","title":"DeploymentModule"},{"location":"0.x/misk/misk.environment/-env-var-loader/","text":"// misk / misk.environment / EnvVarLoader EnvVarLoader \u00b6 [jvm]\\ interface EnvVarLoader : EnvironmentVariableLoader Loads an environment variable value. Functions \u00b6 Name Summary getEnvironmentVariable [jvm] open fun getEnvironmentVariable (name: String ): String getEnvironmentVariableOrDefault [jvm] open fun getEnvironmentVariableOrDefault (name: String , defaultValue: String ): String getEnvVar [jvm] open fun getEnvVar (name: String ): String Get the environment variable value","title":"EnvVarLoader - Misk"},{"location":"0.x/misk/misk.environment/-env-var-loader/#envvarloader","text":"[jvm]\\ interface EnvVarLoader : EnvironmentVariableLoader Loads an environment variable value.","title":"EnvVarLoader"},{"location":"0.x/misk/misk.environment/-env-var-loader/#functions","text":"Name Summary getEnvironmentVariable [jvm] open fun getEnvironmentVariable (name: String ): String getEnvironmentVariableOrDefault [jvm] open fun getEnvironmentVariableOrDefault (name: String , defaultValue: String ): String getEnvVar [jvm] open fun getEnvVar (name: String ): String Get the environment variable value","title":"Functions"},{"location":"0.x/misk/misk.environment/-env-var-loader/get-env-var/","text":"// misk / misk.environment / EnvVarLoader / getEnvVar getEnvVar \u00b6 [jvm]\\ open fun getEnvVar (name: String ): String Get the environment variable value Throws \u00b6 kotlin.IllegalStateException if the environment variable is not found","title":"getEnvVar - Misk"},{"location":"0.x/misk/misk.environment/-env-var-loader/get-env-var/#getenvvar","text":"[jvm]\\ open fun getEnvVar (name: String ): String Get the environment variable value","title":"getEnvVar"},{"location":"0.x/misk/misk.environment/-env-var-loader/get-env-var/#throws","text":"kotlin.IllegalStateException if the environment variable is not found","title":"Throws"},{"location":"0.x/misk/misk.environment/-fake-env-var-module/","text":"// misk / misk.environment / FakeEnvVarModule FakeEnvVarModule \u00b6 [jvm]\\ class FakeEnvVarModule : KAbstractModule Binds a EnvVarLoader for tests. Tests can contribute values through the @ForEnvVars Map&lt;String, String&gt; binding. Constructors \u00b6 FakeEnvVarModule [jvm] fun FakeEnvVarModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeEnvVarModule - Misk"},{"location":"0.x/misk/misk.environment/-fake-env-var-module/#fakeenvvarmodule","text":"[jvm]\\ class FakeEnvVarModule : KAbstractModule Binds a EnvVarLoader for tests. Tests can contribute values through the @ForEnvVars Map&lt;String, String&gt; binding.","title":"FakeEnvVarModule"},{"location":"0.x/misk/misk.environment/-fake-env-var-module/#constructors","text":"FakeEnvVarModule [jvm] fun FakeEnvVarModule ()","title":"Constructors"},{"location":"0.x/misk/misk.environment/-fake-env-var-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.environment/-fake-env-var-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.environment/-fake-env-var-module/-fake-env-var-module/","text":"// misk / misk.environment / FakeEnvVarModule / FakeEnvVarModule FakeEnvVarModule \u00b6 [jvm]\\ fun FakeEnvVarModule ()","title":"FakeEnvVarModule - Misk"},{"location":"0.x/misk/misk.environment/-fake-env-var-module/-fake-env-var-module/#fakeenvvarmodule","text":"[jvm]\\ fun FakeEnvVarModule ()","title":"FakeEnvVarModule"},{"location":"0.x/misk/misk.environment/-for-env-vars/","text":"// misk / misk.environment / ForEnvVars ForEnvVars \u00b6 [jvm]\\ @Qualifier annotation class ForEnvVars","title":"ForEnvVars - Misk"},{"location":"0.x/misk/misk.environment/-for-env-vars/#forenvvars","text":"[jvm]\\ @Qualifier annotation class ForEnvVars","title":"ForEnvVars"},{"location":"0.x/misk/misk.environment/-for-env-vars/-for-env-vars/","text":"// misk / misk.environment / ForEnvVars / ForEnvVars ForEnvVars \u00b6 [jvm]\\ fun ForEnvVars ()","title":"ForEnvVars - Misk"},{"location":"0.x/misk/misk.environment/-for-env-vars/-for-env-vars/#forenvvars","text":"[jvm]\\ fun ForEnvVars ()","title":"ForEnvVars"},{"location":"0.x/misk/misk.environment/-real-env-var-module/","text":"// misk / misk.environment / RealEnvVarModule RealEnvVarModule \u00b6 [jvm]\\ class RealEnvVarModule : KAbstractModule Binds a EnvVarLoader for production Constructors \u00b6 RealEnvVarModule [jvm] fun RealEnvVarModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RealEnvVarModule - Misk"},{"location":"0.x/misk/misk.environment/-real-env-var-module/#realenvvarmodule","text":"[jvm]\\ class RealEnvVarModule : KAbstractModule Binds a EnvVarLoader for production","title":"RealEnvVarModule"},{"location":"0.x/misk/misk.environment/-real-env-var-module/#constructors","text":"RealEnvVarModule [jvm] fun RealEnvVarModule ()","title":"Constructors"},{"location":"0.x/misk/misk.environment/-real-env-var-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.environment/-real-env-var-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.environment/-real-env-var-module/-real-env-var-module/","text":"// misk / misk.environment / RealEnvVarModule / RealEnvVarModule RealEnvVarModule \u00b6 [jvm]\\ fun RealEnvVarModule ()","title":"RealEnvVarModule - Misk"},{"location":"0.x/misk/misk.environment/-real-env-var-module/-real-env-var-module/#realenvvarmodule","text":"[jvm]\\ fun RealEnvVarModule ()","title":"RealEnvVarModule"},{"location":"0.x/misk/misk.grpc/","text":"// misk / misk.grpc Package misk.grpc \u00b6 Functions \u00b6 Name Summary consumeEachAndClose [jvm] fun < T : Any > MessageSource< T >. consumeEachAndClose (block: ( T ) -> Unit )","title":"Package misk.grpc - Misk"},{"location":"0.x/misk/misk.grpc/#package-miskgrpc","text":"","title":"Package misk.grpc"},{"location":"0.x/misk/misk.grpc/#functions","text":"Name Summary consumeEachAndClose [jvm] fun < T : Any > MessageSource< T >. consumeEachAndClose (block: ( T ) -> Unit )","title":"Functions"},{"location":"0.x/misk/misk.grpc/consume-each-and-close/","text":"// misk / misk.grpc / consumeEachAndClose consumeEachAndClose \u00b6 [jvm]\\ fun < T : Any > MessageSource< T >. consumeEachAndClose (block: ( T ) -> Unit )","title":"consumeEachAndClose - Misk"},{"location":"0.x/misk/misk.grpc/consume-each-and-close/#consumeeachandclose","text":"[jvm]\\ fun < T : Any > MessageSource< T >. consumeEachAndClose (block: ( T ) -> Unit )","title":"consumeEachAndClose"},{"location":"0.x/misk/misk.io/","text":"// misk / misk.io Package misk.io \u00b6 Functions \u00b6 Name Summary listRecursively [jvm] fun Path . listRecursively (includeDirs: Boolean = false): List < Path >","title":"Package misk.io - Misk"},{"location":"0.x/misk/misk.io/#package-miskio","text":"","title":"Package misk.io"},{"location":"0.x/misk/misk.io/#functions","text":"Name Summary listRecursively [jvm] fun Path . listRecursively (includeDirs: Boolean = false): List < Path >","title":"Functions"},{"location":"0.x/misk/misk.io/list-recursively/","text":"// misk / misk.io / listRecursively listRecursively \u00b6 [jvm]\\ fun Path . listRecursively (includeDirs: Boolean = false): List < Path > Return \u00b6 all of the paths beneath this one, including nested paths","title":"listRecursively - Misk"},{"location":"0.x/misk/misk.io/list-recursively/#listrecursively","text":"[jvm]\\ fun Path . listRecursively (includeDirs: Boolean = false): List < Path >","title":"listRecursively"},{"location":"0.x/misk/misk.io/list-recursively/#return","text":"all of the paths beneath this one, including nested paths","title":"Return"},{"location":"0.x/misk/misk.moshi/","text":"// misk / misk.moshi Package misk.moshi \u00b6 Types \u00b6 Name Summary MoshiAdapterModule [jvm] class MoshiAdapterModule (jsonAdapter: Any ) : KAbstractModule MoshiModule [jvm] class MoshiModule (useWireToRead: Boolean , useWireToWrite: Boolean ) : KAbstractModule For service setup, prefer to install misk.MiskCommonServiceModule over installing MoshiModule directly. Functions \u00b6 Name Summary adapter [jvm] inline fun < T > Moshi. adapter (): JsonAdapter< T >","title":"Package misk.moshi - Misk"},{"location":"0.x/misk/misk.moshi/#package-miskmoshi","text":"","title":"Package misk.moshi"},{"location":"0.x/misk/misk.moshi/#types","text":"Name Summary MoshiAdapterModule [jvm] class MoshiAdapterModule (jsonAdapter: Any ) : KAbstractModule MoshiModule [jvm] class MoshiModule (useWireToRead: Boolean , useWireToWrite: Boolean ) : KAbstractModule For service setup, prefer to install misk.MiskCommonServiceModule over installing MoshiModule directly.","title":"Types"},{"location":"0.x/misk/misk.moshi/#functions","text":"Name Summary adapter [jvm] inline fun < T > Moshi. adapter (): JsonAdapter< T >","title":"Functions"},{"location":"0.x/misk/misk.moshi/adapter/","text":"// misk / misk.moshi / adapter adapter \u00b6 [jvm]\\ inline fun < T > Moshi. adapter (): JsonAdapter< T >","title":"adapter - Misk"},{"location":"0.x/misk/misk.moshi/adapter/#adapter","text":"[jvm]\\ inline fun < T > Moshi. adapter (): JsonAdapter< T >","title":"adapter"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/","text":"// misk / misk.moshi / MoshiAdapterModule MoshiAdapterModule \u00b6 [jvm]\\ class MoshiAdapterModule (jsonAdapter: Any ) : KAbstractModule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"MoshiAdapterModule - Misk"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/#moshiadaptermodule","text":"[jvm]\\ class MoshiAdapterModule (jsonAdapter: Any ) : KAbstractModule","title":"MoshiAdapterModule"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/-moshi-adapter-module/","text":"// misk / misk.moshi / MoshiAdapterModule / MoshiAdapterModule MoshiAdapterModule \u00b6 [jvm]\\ fun MoshiAdapterModule (jsonAdapter: Any )","title":"MoshiAdapterModule - Misk"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/-moshi-adapter-module/#moshiadaptermodule","text":"[jvm]\\ fun MoshiAdapterModule (jsonAdapter: Any )","title":"MoshiAdapterModule"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/-companion/","text":"// misk / misk.moshi / MoshiAdapterModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun < T > invoke (adapter: JsonAdapter< T >): MoshiAdapterModule","title":"Companion - Misk"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun < T > invoke (adapter: JsonAdapter< T >): MoshiAdapterModule","title":"Functions"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/-companion/invoke/","text":"// misk / misk.moshi / MoshiAdapterModule / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun < T > invoke (adapter: JsonAdapter< T >): MoshiAdapterModule","title":"invoke - Misk"},{"location":"0.x/misk/misk.moshi/-moshi-adapter-module/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun < T > invoke (adapter: JsonAdapter< T >): MoshiAdapterModule","title":"invoke"},{"location":"0.x/misk/misk.moshi/-moshi-module/","text":"// misk / misk.moshi / MoshiModule MoshiModule \u00b6 [jvm]\\ class MoshiModule (useWireToRead: Boolean , useWireToWrite: Boolean ) : KAbstractModule For service setup, prefer to install misk.MiskCommonServiceModule over installing MoshiModule directly. Constructors \u00b6 MoshiModule [jvm] fun MoshiModule (useWireToRead: Boolean = false, useWireToWrite: Boolean = false) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideMoshi [jvm] @Provides @Singleton fun provideMoshi (jsonAdapters: List < Any >): Moshi requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"MoshiModule - Misk"},{"location":"0.x/misk/misk.moshi/-moshi-module/#moshimodule","text":"[jvm]\\ class MoshiModule (useWireToRead: Boolean , useWireToWrite: Boolean ) : KAbstractModule For service setup, prefer to install misk.MiskCommonServiceModule over installing MoshiModule directly.","title":"MoshiModule"},{"location":"0.x/misk/misk.moshi/-moshi-module/#constructors","text":"MoshiModule [jvm] fun MoshiModule (useWireToRead: Boolean = false, useWireToWrite: Boolean = false)","title":"Constructors"},{"location":"0.x/misk/misk.moshi/-moshi-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideMoshi [jvm] @Provides @Singleton fun provideMoshi (jsonAdapters: List < Any >): Moshi requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.moshi/-moshi-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.moshi/-moshi-module/-moshi-module/","text":"// misk / misk.moshi / MoshiModule / MoshiModule MoshiModule \u00b6 [jvm]\\ fun MoshiModule (useWireToRead: Boolean = false, useWireToWrite: Boolean = false)","title":"MoshiModule - Misk"},{"location":"0.x/misk/misk.moshi/-moshi-module/-moshi-module/#moshimodule","text":"[jvm]\\ fun MoshiModule (useWireToRead: Boolean = false, useWireToWrite: Boolean = false)","title":"MoshiModule"},{"location":"0.x/misk/misk.moshi/-moshi-module/provide-moshi/","text":"// misk / misk.moshi / MoshiModule / provideMoshi provideMoshi \u00b6 [jvm]\\ @Provides @Singleton fun provideMoshi (jsonAdapters: List < Any >): Moshi","title":"provideMoshi - Misk"},{"location":"0.x/misk/misk.moshi/-moshi-module/provide-moshi/#providemoshi","text":"[jvm]\\ @Provides @Singleton fun provideMoshi (jsonAdapters: List < Any >): Moshi","title":"provideMoshi"},{"location":"0.x/misk/misk.moshi.adapters/","text":"// misk / misk.moshi.adapters Package misk.moshi.adapters \u00b6 Types \u00b6 Name Summary BigDecimalAdapter [jvm] object BigDecimalAdapter","title":"Package misk.moshi.adapters - Misk"},{"location":"0.x/misk/misk.moshi.adapters/#package-miskmoshiadapters","text":"","title":"Package misk.moshi.adapters"},{"location":"0.x/misk/misk.moshi.adapters/#types","text":"Name Summary BigDecimalAdapter [jvm] object BigDecimalAdapter","title":"Types"},{"location":"0.x/misk/misk.moshi.adapters/-big-decimal-adapter/","text":"// misk / misk.moshi.adapters / BigDecimalAdapter BigDecimalAdapter \u00b6 [jvm]\\ object BigDecimalAdapter Functions \u00b6 Name Summary decode [jvm] fun decode (decimal: String ): BigDecimal encode [jvm] fun encode (decimal: BigDecimal ): String","title":"BigDecimalAdapter - Misk"},{"location":"0.x/misk/misk.moshi.adapters/-big-decimal-adapter/#bigdecimaladapter","text":"[jvm]\\ object BigDecimalAdapter","title":"BigDecimalAdapter"},{"location":"0.x/misk/misk.moshi.adapters/-big-decimal-adapter/#functions","text":"Name Summary decode [jvm] fun decode (decimal: String ): BigDecimal encode [jvm] fun encode (decimal: BigDecimal ): String","title":"Functions"},{"location":"0.x/misk/misk.moshi.adapters/-big-decimal-adapter/decode/","text":"// misk / misk.moshi.adapters / BigDecimalAdapter / decode decode \u00b6 [jvm]\\ fun decode (decimal: String ): BigDecimal","title":"decode - Misk"},{"location":"0.x/misk/misk.moshi.adapters/-big-decimal-adapter/decode/#decode","text":"[jvm]\\ fun decode (decimal: String ): BigDecimal","title":"decode"},{"location":"0.x/misk/misk.moshi.adapters/-big-decimal-adapter/encode/","text":"// misk / misk.moshi.adapters / BigDecimalAdapter / encode encode \u00b6 [jvm]\\ fun encode (decimal: BigDecimal ): String","title":"encode - Misk"},{"location":"0.x/misk/misk.moshi.adapters/-big-decimal-adapter/encode/#encode","text":"[jvm]\\ fun encode (decimal: BigDecimal ): String","title":"encode"},{"location":"0.x/misk/misk.moshi.okio/","text":"// misk / misk.moshi.okio Package misk.moshi.okio \u00b6 Types \u00b6 Name Summary ByteStringAdapter [jvm] object ByteStringAdapter JSON adapter converting ByteStrings as base64 encoded strings","title":"Package misk.moshi.okio - Misk"},{"location":"0.x/misk/misk.moshi.okio/#package-miskmoshiokio","text":"","title":"Package misk.moshi.okio"},{"location":"0.x/misk/misk.moshi.okio/#types","text":"Name Summary ByteStringAdapter [jvm] object ByteStringAdapter JSON adapter converting ByteStrings as base64 encoded strings","title":"Types"},{"location":"0.x/misk/misk.moshi.okio/-byte-string-adapter/","text":"// misk / misk.moshi.okio / ByteStringAdapter ByteStringAdapter \u00b6 [jvm]\\ object ByteStringAdapter JSON adapter converting ByteStrings as base64 encoded strings Functions \u00b6 Name Summary fromJson [jvm] fun fromJson (value: String ): ByteString toJson [jvm] fun toJson (value: ByteString): String","title":"ByteStringAdapter - Misk"},{"location":"0.x/misk/misk.moshi.okio/-byte-string-adapter/#bytestringadapter","text":"[jvm]\\ object ByteStringAdapter JSON adapter converting ByteStrings as base64 encoded strings","title":"ByteStringAdapter"},{"location":"0.x/misk/misk.moshi.okio/-byte-string-adapter/#functions","text":"Name Summary fromJson [jvm] fun fromJson (value: String ): ByteString toJson [jvm] fun toJson (value: ByteString): String","title":"Functions"},{"location":"0.x/misk/misk.moshi.okio/-byte-string-adapter/from-json/","text":"// misk / misk.moshi.okio / ByteStringAdapter / fromJson fromJson \u00b6 [jvm]\\ fun fromJson (value: String ): ByteString","title":"fromJson - Misk"},{"location":"0.x/misk/misk.moshi.okio/-byte-string-adapter/from-json/#fromjson","text":"[jvm]\\ fun fromJson (value: String ): ByteString","title":"fromJson"},{"location":"0.x/misk/misk.moshi.okio/-byte-string-adapter/to-json/","text":"// misk / misk.moshi.okio / ByteStringAdapter / toJson toJson \u00b6 [jvm]\\ fun toJson (value: ByteString): String","title":"toJson - Misk"},{"location":"0.x/misk/misk.moshi.okio/-byte-string-adapter/to-json/#tojson","text":"[jvm]\\ fun toJson (value: ByteString): String","title":"toJson"},{"location":"0.x/misk/misk.moshi.time/","text":"// misk / misk.moshi.time Package misk.moshi.time \u00b6 Types \u00b6 Name Summary InstantAdapter [jvm] object InstantAdapter LocalDateAdapter [jvm] object LocalDateAdapter","title":"Package misk.moshi.time - Misk"},{"location":"0.x/misk/misk.moshi.time/#package-miskmoshitime","text":"","title":"Package misk.moshi.time"},{"location":"0.x/misk/misk.moshi.time/#types","text":"Name Summary InstantAdapter [jvm] object InstantAdapter LocalDateAdapter [jvm] object LocalDateAdapter","title":"Types"},{"location":"0.x/misk/misk.moshi.time/-instant-adapter/","text":"// misk / misk.moshi.time / InstantAdapter InstantAdapter \u00b6 [jvm]\\ object InstantAdapter Functions \u00b6 Name Summary fromJson [jvm] fun fromJson (date: Date ?): Instant ? toJson [jvm] fun toJson (value: Instant ?): Date ?","title":"InstantAdapter - Misk"},{"location":"0.x/misk/misk.moshi.time/-instant-adapter/#instantadapter","text":"[jvm]\\ object InstantAdapter","title":"InstantAdapter"},{"location":"0.x/misk/misk.moshi.time/-instant-adapter/#functions","text":"Name Summary fromJson [jvm] fun fromJson (date: Date ?): Instant ? toJson [jvm] fun toJson (value: Instant ?): Date ?","title":"Functions"},{"location":"0.x/misk/misk.moshi.time/-instant-adapter/from-json/","text":"// misk / misk.moshi.time / InstantAdapter / fromJson fromJson \u00b6 [jvm]\\ fun fromJson (date: Date ?): Instant ?","title":"fromJson - Misk"},{"location":"0.x/misk/misk.moshi.time/-instant-adapter/from-json/#fromjson","text":"[jvm]\\ fun fromJson (date: Date ?): Instant ?","title":"fromJson"},{"location":"0.x/misk/misk.moshi.time/-instant-adapter/to-json/","text":"// misk / misk.moshi.time / InstantAdapter / toJson toJson \u00b6 [jvm]\\ fun toJson (value: Instant ?): Date ?","title":"toJson - Misk"},{"location":"0.x/misk/misk.moshi.time/-instant-adapter/to-json/#tojson","text":"[jvm]\\ fun toJson (value: Instant ?): Date ?","title":"toJson"},{"location":"0.x/misk/misk.moshi.time/-local-date-adapter/","text":"// misk / misk.moshi.time / LocalDateAdapter LocalDateAdapter \u00b6 [jvm]\\ object LocalDateAdapter Functions \u00b6 Name Summary fromJson [jvm] fun fromJson (date: Date ?): LocalDate ? toJson [jvm] fun toJson (value: LocalDate ?): Date ?","title":"LocalDateAdapter - Misk"},{"location":"0.x/misk/misk.moshi.time/-local-date-adapter/#localdateadapter","text":"[jvm]\\ object LocalDateAdapter","title":"LocalDateAdapter"},{"location":"0.x/misk/misk.moshi.time/-local-date-adapter/#functions","text":"Name Summary fromJson [jvm] fun fromJson (date: Date ?): LocalDate ? toJson [jvm] fun toJson (value: LocalDate ?): Date ?","title":"Functions"},{"location":"0.x/misk/misk.moshi.time/-local-date-adapter/from-json/","text":"// misk / misk.moshi.time / LocalDateAdapter / fromJson fromJson \u00b6 [jvm]\\ fun fromJson (date: Date ?): LocalDate ?","title":"fromJson - Misk"},{"location":"0.x/misk/misk.moshi.time/-local-date-adapter/from-json/#fromjson","text":"[jvm]\\ fun fromJson (date: Date ?): LocalDate ?","title":"fromJson"},{"location":"0.x/misk/misk.moshi.time/-local-date-adapter/to-json/","text":"// misk / misk.moshi.time / LocalDateAdapter / toJson toJson \u00b6 [jvm]\\ fun toJson (value: LocalDate ?): Date ?","title":"toJson - Misk"},{"location":"0.x/misk/misk.moshi.time/-local-date-adapter/to-json/#tojson","text":"[jvm]\\ fun toJson (value: LocalDate ?): Date ?","title":"toJson"},{"location":"0.x/misk/misk.okio/","text":"// misk / misk.okio Package misk.okio \u00b6 Functions \u00b6 Name Summary forEachBlock [jvm] fun BufferedSource. forEachBlock (buffer: ByteArray , f: (buffer: ByteArray , bytesRead: Int ) -> Unit ) fun BufferedSource. forEachBlock (blockSize: Int , f: (buffer: ByteArray , bytesRead: Int ) -> Unit ) split [jvm] fun BufferedSource. split (separator: ByteString): Sequence <Buffer>","title":"Package misk.okio - Misk"},{"location":"0.x/misk/misk.okio/#package-miskokio","text":"","title":"Package misk.okio"},{"location":"0.x/misk/misk.okio/#functions","text":"Name Summary forEachBlock [jvm] fun BufferedSource. forEachBlock (buffer: ByteArray , f: (buffer: ByteArray , bytesRead: Int ) -> Unit ) fun BufferedSource. forEachBlock (blockSize: Int , f: (buffer: ByteArray , bytesRead: Int ) -> Unit ) split [jvm] fun BufferedSource. split (separator: ByteString): Sequence <Buffer>","title":"Functions"},{"location":"0.x/misk/misk.okio/for-each-block/","text":"// misk / misk.okio / forEachBlock forEachBlock \u00b6 [jvm]\\ fun BufferedSource. forEachBlock (buffer: ByteArray , f: (buffer: ByteArray , bytesRead: Int ) -> Unit ) fun BufferedSource. forEachBlock (blockSize: Int , f: (buffer: ByteArray , bytesRead: Int ) -> Unit )","title":"forEachBlock - Misk"},{"location":"0.x/misk/misk.okio/for-each-block/#foreachblock","text":"[jvm]\\ fun BufferedSource. forEachBlock (buffer: ByteArray , f: (buffer: ByteArray , bytesRead: Int ) -> Unit ) fun BufferedSource. forEachBlock (blockSize: Int , f: (buffer: ByteArray , bytesRead: Int ) -> Unit )","title":"forEachBlock"},{"location":"0.x/misk/misk.okio/split/","text":"// misk / misk.okio / split split \u00b6 [jvm]\\ fun BufferedSource. split (separator: ByteString): Sequence <Buffer>","title":"split - Misk"},{"location":"0.x/misk/misk.okio/split/#split","text":"[jvm]\\ fun BufferedSource. split (separator: ByteString): Sequence <Buffer>","title":"split"},{"location":"0.x/misk/misk.security.authz/","text":"// misk / misk.security.authz Package misk.security.authz \u00b6 Types \u00b6 Name Summary AccessAnnotationEntry [jvm] data class AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String >, capabilities: List < String >) Use this to alias an annotation to a set of services and capabilities. This can be used to decouple code that needs access control from the policy that defines it. AccessControlModule [jvm] class AccessControlModule : ActionScopedProviderModule Install support for performing access control checks for actions based on the incoming caller. AccessInterceptor [jvm] class AccessInterceptor : ApplicationInterceptor DevelopmentOnly [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class DevelopmentOnly FakeCallerAuthenticator [jvm] @Singleton class FakeCallerAuthenticator @Injectconstructor(currentHttpCall: ActionScoped< HttpCall >) : MiskCallerAuthenticator A caller authenticator that blindly trusts HTTP headers. Unsafe for production use. MiskCallerAuthenticator [jvm] interface MiskCallerAuthenticator Interface for determining the current MiskCaller. Typically use an Request, ClientCertSubject, etc to determine the caller based on request headers or client certificate information. Functions \u00b6 Name Summary AccessAnnotationEntry [jvm] inline fun < T : Annotation > AccessAnnotationEntry (services: List < String > = listOf(), capabilities: List < String > = listOf()): AccessAnnotationEntry","title":"Package misk.security.authz - Misk"},{"location":"0.x/misk/misk.security.authz/#package-misksecurityauthz","text":"","title":"Package misk.security.authz"},{"location":"0.x/misk/misk.security.authz/#types","text":"Name Summary AccessAnnotationEntry [jvm] data class AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String >, capabilities: List < String >) Use this to alias an annotation to a set of services and capabilities. This can be used to decouple code that needs access control from the policy that defines it. AccessControlModule [jvm] class AccessControlModule : ActionScopedProviderModule Install support for performing access control checks for actions based on the incoming caller. AccessInterceptor [jvm] class AccessInterceptor : ApplicationInterceptor DevelopmentOnly [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class DevelopmentOnly FakeCallerAuthenticator [jvm] @Singleton class FakeCallerAuthenticator @Injectconstructor(currentHttpCall: ActionScoped< HttpCall >) : MiskCallerAuthenticator A caller authenticator that blindly trusts HTTP headers. Unsafe for production use. MiskCallerAuthenticator [jvm] interface MiskCallerAuthenticator Interface for determining the current MiskCaller. Typically use an Request, ClientCertSubject, etc to determine the caller based on request headers or client certificate information.","title":"Types"},{"location":"0.x/misk/misk.security.authz/#functions","text":"Name Summary AccessAnnotationEntry [jvm] inline fun < T : Annotation > AccessAnnotationEntry (services: List < String > = listOf(), capabilities: List < String > = listOf()): AccessAnnotationEntry","title":"Functions"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/","text":"// misk / misk.security.authz / AccessAnnotationEntry AccessAnnotationEntry \u00b6 [jvm]\\ inline fun < T : Annotation > AccessAnnotationEntry (services: List < String > = listOf(), capabilities: List < String > = listOf()): AccessAnnotationEntry","title":"AccessAnnotationEntry - Misk"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/#accessannotationentry","text":"[jvm]\\ inline fun < T : Annotation > AccessAnnotationEntry (services: List < String > = listOf(), capabilities: List < String > = listOf()): AccessAnnotationEntry","title":"AccessAnnotationEntry"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/","text":"// misk / misk.security.authz / AccessAnnotationEntry AccessAnnotationEntry \u00b6 [jvm]\\ data class AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String >, capabilities: List < String >) Use this to alias an annotation to a set of services and capabilities. This can be used to decouple code that needs access control from the policy that defines it. To demonstrate, let\u2019s define an access annotation. By convention these annotations are suffixed Access: @Retention(AnnotationRetention.RUNTIME)\\ @Target(AnnotationTarget.FUNCTION)\\ annotation class PaleontologistAccess Next we define actions that apply our annotation: class DiscoverDinosaurAction @Inject constructor() : WebAction {\\ @Get(\u201c/discover\u201d)\\ @PaleontologistAccess\\ fun discover()\\ }\\ \\ class DigUpDinosaurAction @Inject constructor() : WebAction {\\ @Get(\u201c/dig\u201d)\\ @PaleontologistAccess\\ fun dig()\\ } Finally we use multibindings to specify which services and capabilities are permitted: multibind<AccessAnnotationEntry>().toInstance(\\ AccessAnnotationEntry<PaleontologistAccess>(capabilities = listOf(\u201cpaleontologist\u201d, \u201cintern\u201d))) Constructors \u00b6 AccessAnnotationEntry [jvm] fun AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String > = listOf(), capabilities: List < String > = listOf()) Properties \u00b6 Name Summary annotation [jvm] val annotation : KClass <out Annotation > capabilities [jvm] val capabilities : List < String > services [jvm] val services : List < String >","title":"AccessAnnotationEntry - Misk"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/#accessannotationentry","text":"[jvm]\\ data class AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String >, capabilities: List < String >) Use this to alias an annotation to a set of services and capabilities. This can be used to decouple code that needs access control from the policy that defines it. To demonstrate, let\u2019s define an access annotation. By convention these annotations are suffixed Access: @Retention(AnnotationRetention.RUNTIME)\\ @Target(AnnotationTarget.FUNCTION)\\ annotation class PaleontologistAccess Next we define actions that apply our annotation: class DiscoverDinosaurAction @Inject constructor() : WebAction {\\ @Get(\u201c/discover\u201d)\\ @PaleontologistAccess\\ fun discover()\\ }\\ \\ class DigUpDinosaurAction @Inject constructor() : WebAction {\\ @Get(\u201c/dig\u201d)\\ @PaleontologistAccess\\ fun dig()\\ } Finally we use multibindings to specify which services and capabilities are permitted: multibind<AccessAnnotationEntry>().toInstance(\\ AccessAnnotationEntry<PaleontologistAccess>(capabilities = listOf(\u201cpaleontologist\u201d, \u201cintern\u201d)))","title":"AccessAnnotationEntry"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/#constructors","text":"AccessAnnotationEntry [jvm] fun AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String > = listOf(), capabilities: List < String > = listOf())","title":"Constructors"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/#properties","text":"Name Summary annotation [jvm] val annotation : KClass <out Annotation > capabilities [jvm] val capabilities : List < String > services [jvm] val services : List < String >","title":"Properties"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/-access-annotation-entry/","text":"// misk / misk.security.authz / AccessAnnotationEntry / AccessAnnotationEntry AccessAnnotationEntry \u00b6 [jvm]\\ fun AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String > = listOf(), capabilities: List < String > = listOf())","title":"AccessAnnotationEntry - Misk"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/-access-annotation-entry/#accessannotationentry","text":"[jvm]\\ fun AccessAnnotationEntry (annotation: KClass <out Annotation >, services: List < String > = listOf(), capabilities: List < String > = listOf())","title":"AccessAnnotationEntry"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/annotation/","text":"// misk / misk.security.authz / AccessAnnotationEntry / annotation annotation \u00b6 [jvm]\\ val annotation : KClass <out Annotation >","title":"annotation - Misk"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/annotation/#annotation","text":"[jvm]\\ val annotation : KClass <out Annotation >","title":"annotation"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/capabilities/","text":"// misk / misk.security.authz / AccessAnnotationEntry / capabilities capabilities \u00b6 [jvm]\\ val capabilities : List < String >","title":"capabilities - Misk"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/capabilities/#capabilities","text":"[jvm]\\ val capabilities : List < String >","title":"capabilities"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/services/","text":"// misk / misk.security.authz / AccessAnnotationEntry / services services \u00b6 [jvm]\\ val services : List < String >","title":"services - Misk"},{"location":"0.x/misk/misk.security.authz/-access-annotation-entry/services/#services","text":"[jvm]\\ val services : List < String >","title":"services"},{"location":"0.x/misk/misk.security.authz/-access-control-module/","text":"// misk / misk.security.authz / AccessControlModule AccessControlModule \u00b6 [jvm]\\ class AccessControlModule : ActionScopedProviderModule Install support for performing access control checks for actions based on the incoming caller. Constructors \u00b6 AccessControlModule [jvm] fun AccessControlModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindProvider [jvm] fun < T , A : Annotation > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Class < A >) fun < T > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Annotation ?) fun < T : Any , A : Annotation > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Class < A >) fun < T : Any > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Annotation ?) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) bindSeedData [jvm] fun < T : Any > bindSeedData (type: TypeLiteral< T >) fun < T : Any > bindSeedData (kclass: KClass < T >) fun < T : Any > bindSeedData (type: TypeLiteral< T >, a: Annotation ) fun < T : Any > bindSeedData (kclass: KClass < T >, a: Annotation ) fun < T : Any , A : Annotation > bindSeedData (kclass: KClass < T >, a: KClass < A >) configure [jvm] override fun configure (p0: Binder) configureProviders [jvm] open override fun configureProviders () convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AccessControlModule - Misk"},{"location":"0.x/misk/misk.security.authz/-access-control-module/#accesscontrolmodule","text":"[jvm]\\ class AccessControlModule : ActionScopedProviderModule Install support for performing access control checks for actions based on the incoming caller.","title":"AccessControlModule"},{"location":"0.x/misk/misk.security.authz/-access-control-module/#constructors","text":"AccessControlModule [jvm] fun AccessControlModule ()","title":"Constructors"},{"location":"0.x/misk/misk.security.authz/-access-control-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindProvider [jvm] fun < T , A : Annotation > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Class < A >) fun < T > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Annotation ?) fun < T : Any , A : Annotation > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Class < A >) fun < T : Any > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider< T >>, annotatedBy: Annotation ?) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) bindSeedData [jvm] fun < T : Any > bindSeedData (type: TypeLiteral< T >) fun < T : Any > bindSeedData (kclass: KClass < T >) fun < T : Any > bindSeedData (type: TypeLiteral< T >, a: Annotation ) fun < T : Any > bindSeedData (kclass: KClass < T >, a: Annotation ) fun < T : Any , A : Annotation > bindSeedData (kclass: KClass < T >, a: KClass < A >) configure [jvm] override fun configure (p0: Binder) configureProviders [jvm] open override fun configureProviders () convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.security.authz/-access-control-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.security.authz/-access-control-module/-access-control-module/","text":"// misk / misk.security.authz / AccessControlModule / AccessControlModule AccessControlModule \u00b6 [jvm]\\ fun AccessControlModule ()","title":"AccessControlModule - Misk"},{"location":"0.x/misk/misk.security.authz/-access-control-module/-access-control-module/#accesscontrolmodule","text":"[jvm]\\ fun AccessControlModule ()","title":"AccessControlModule"},{"location":"0.x/misk/misk.security.authz/-access-control-module/configure-providers/","text":"// misk / misk.security.authz / AccessControlModule / configureProviders configureProviders \u00b6 [jvm]\\ open override fun configureProviders ()","title":"configureProviders - Misk"},{"location":"0.x/misk/misk.security.authz/-access-control-module/configure-providers/#configureproviders","text":"[jvm]\\ open override fun configureProviders ()","title":"configureProviders"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/","text":"// misk / misk.security.authz / AccessInterceptor AccessInterceptor \u00b6 [jvm]\\ class AccessInterceptor : ApplicationInterceptor Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary intercept [jvm] open override fun intercept (chain: Chain ): Any Properties \u00b6 Name Summary allowedCapabilities [jvm] val allowedCapabilities : Set < String > allowedServices [jvm] val allowedServices : Set < String >","title":"AccessInterceptor - Misk"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/#accessinterceptor","text":"[jvm]\\ class AccessInterceptor : ApplicationInterceptor","title":"AccessInterceptor"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/#functions","text":"Name Summary intercept [jvm] open override fun intercept (chain: Chain ): Any","title":"Functions"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/#properties","text":"Name Summary allowedCapabilities [jvm] val allowedCapabilities : Set < String > allowedServices [jvm] val allowedServices : Set < String >","title":"Properties"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/allowed-capabilities/","text":"// misk / misk.security.authz / AccessInterceptor / allowedCapabilities allowedCapabilities \u00b6 [jvm]\\ val allowedCapabilities : Set < String >","title":"allowedCapabilities - Misk"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/allowed-capabilities/#allowedcapabilities","text":"[jvm]\\ val allowedCapabilities : Set < String >","title":"allowedCapabilities"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/allowed-services/","text":"// misk / misk.security.authz / AccessInterceptor / allowedServices allowedServices \u00b6 [jvm]\\ val allowedServices : Set < String >","title":"allowedServices - Misk"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/allowed-services/#allowedservices","text":"[jvm]\\ val allowedServices : Set < String >","title":"allowedServices"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/intercept/","text":"// misk / misk.security.authz / AccessInterceptor / intercept intercept \u00b6 [jvm]\\ open override fun intercept (chain: Chain ): Any","title":"intercept - Misk"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/intercept/#intercept","text":"[jvm]\\ open override fun intercept (chain: Chain ): Any","title":"intercept"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/-companion/","text":"// misk / misk.security.authz / AccessInterceptor / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary logger [jvm] val logger : KLogger","title":"Companion - Misk"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/-companion/#properties","text":"Name Summary logger [jvm] val logger : KLogger","title":"Properties"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/-companion/logger/","text":"// misk / misk.security.authz / AccessInterceptor / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk/misk.security.authz/-access-interceptor/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk/misk.security.authz/-development-only/","text":"// misk / misk.security.authz / DevelopmentOnly DevelopmentOnly \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class DevelopmentOnly","title":"DevelopmentOnly - Misk"},{"location":"0.x/misk/misk.security.authz/-development-only/#developmentonly","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class DevelopmentOnly","title":"DevelopmentOnly"},{"location":"0.x/misk/misk.security.authz/-development-only/-development-only/","text":"// misk / misk.security.authz / DevelopmentOnly / DevelopmentOnly DevelopmentOnly \u00b6 [jvm]\\ fun DevelopmentOnly ()","title":"DevelopmentOnly - Misk"},{"location":"0.x/misk/misk.security.authz/-development-only/-development-only/#developmentonly","text":"[jvm]\\ fun DevelopmentOnly ()","title":"DevelopmentOnly"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/","text":"// misk / misk.security.authz / FakeCallerAuthenticator FakeCallerAuthenticator \u00b6 [jvm]\\ @Singleton class FakeCallerAuthenticator @Injectconstructor(currentHttpCall: ActionScoped< HttpCall >) : MiskCallerAuthenticator A caller authenticator that blindly trusts HTTP headers. Unsafe for production use. Constructors \u00b6 FakeCallerAuthenticator [jvm] @Inject fun FakeCallerAuthenticator (currentHttpCall: ActionScoped< HttpCall >) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary getAuthenticatedCaller [jvm] open override fun getAuthenticatedCaller (): MiskCaller? Properties \u00b6 Name Summary developmentCaller [jvm] @Inject(optional = true) var developmentCaller : MiskCaller? = null","title":"FakeCallerAuthenticator - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/#fakecallerauthenticator","text":"[jvm]\\ @Singleton class FakeCallerAuthenticator @Injectconstructor(currentHttpCall: ActionScoped< HttpCall >) : MiskCallerAuthenticator A caller authenticator that blindly trusts HTTP headers. Unsafe for production use.","title":"FakeCallerAuthenticator"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/#constructors","text":"FakeCallerAuthenticator [jvm] @Inject fun FakeCallerAuthenticator (currentHttpCall: ActionScoped< HttpCall >)","title":"Constructors"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/#functions","text":"Name Summary getAuthenticatedCaller [jvm] open override fun getAuthenticatedCaller (): MiskCaller?","title":"Functions"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/#properties","text":"Name Summary developmentCaller [jvm] @Inject(optional = true) var developmentCaller : MiskCaller? = null","title":"Properties"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-fake-caller-authenticator/","text":"// misk / misk.security.authz / FakeCallerAuthenticator / FakeCallerAuthenticator FakeCallerAuthenticator \u00b6 [jvm]\\ @Inject fun FakeCallerAuthenticator (currentHttpCall: ActionScoped< HttpCall >)","title":"FakeCallerAuthenticator - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-fake-caller-authenticator/#fakecallerauthenticator","text":"[jvm]\\ @Inject fun FakeCallerAuthenticator (currentHttpCall: ActionScoped< HttpCall >)","title":"FakeCallerAuthenticator"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/development-caller/","text":"// misk / misk.security.authz / FakeCallerAuthenticator / developmentCaller developmentCaller \u00b6 [jvm]\\ @Inject(optional = true) var developmentCaller : MiskCaller? = null","title":"developmentCaller - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/development-caller/#developmentcaller","text":"[jvm]\\ @Inject(optional = true) var developmentCaller : MiskCaller? = null","title":"developmentCaller"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/get-authenticated-caller/","text":"// misk / misk.security.authz / FakeCallerAuthenticator / getAuthenticatedCaller getAuthenticatedCaller \u00b6 [jvm]\\ open override fun getAuthenticatedCaller (): MiskCaller?","title":"getAuthenticatedCaller - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/get-authenticated-caller/#getauthenticatedcaller","text":"[jvm]\\ open override fun getAuthenticatedCaller (): MiskCaller?","title":"getAuthenticatedCaller"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/","text":"// misk / misk.security.authz / FakeCallerAuthenticator / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary CAPABILITIES_HEADER [jvm] const val CAPABILITIES_HEADER : String SERVICE_HEADER [jvm] const val SERVICE_HEADER : String USER_HEADER [jvm] const val USER_HEADER : String","title":"Companion - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/#properties","text":"Name Summary CAPABILITIES_HEADER [jvm] const val CAPABILITIES_HEADER : String SERVICE_HEADER [jvm] const val SERVICE_HEADER : String USER_HEADER [jvm] const val USER_HEADER : String","title":"Properties"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/-c-a-p-a-b-i-l-i-t-i-e-s_-h-e-a-d-e-r/","text":"// misk / misk.security.authz / FakeCallerAuthenticator / Companion / CAPABILITIES_HEADER CAPABILITIES_HEADER \u00b6 [jvm]\\ const val CAPABILITIES_HEADER : String","title":"CAPABILITIES_HEADER - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/-c-a-p-a-b-i-l-i-t-i-e-s_-h-e-a-d-e-r/#capabilities_header","text":"[jvm]\\ const val CAPABILITIES_HEADER : String","title":"CAPABILITIES_HEADER"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/-s-e-r-v-i-c-e_-h-e-a-d-e-r/","text":"// misk / misk.security.authz / FakeCallerAuthenticator / Companion / SERVICE_HEADER SERVICE_HEADER \u00b6 [jvm]\\ const val SERVICE_HEADER : String","title":"SERVICE_HEADER - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/-s-e-r-v-i-c-e_-h-e-a-d-e-r/#service_header","text":"[jvm]\\ const val SERVICE_HEADER : String","title":"SERVICE_HEADER"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/-u-s-e-r_-h-e-a-d-e-r/","text":"// misk / misk.security.authz / FakeCallerAuthenticator / Companion / USER_HEADER USER_HEADER \u00b6 [jvm]\\ const val USER_HEADER : String","title":"USER_HEADER - Misk"},{"location":"0.x/misk/misk.security.authz/-fake-caller-authenticator/-companion/-u-s-e-r_-h-e-a-d-e-r/#user_header","text":"[jvm]\\ const val USER_HEADER : String","title":"USER_HEADER"},{"location":"0.x/misk/misk.security.authz/-misk-caller-authenticator/","text":"// misk / misk.security.authz / MiskCallerAuthenticator MiskCallerAuthenticator \u00b6 [jvm]\\ interface MiskCallerAuthenticator Interface for determining the current MiskCaller. Typically use an Request, ClientCertSubject, etc to determine the caller based on request headers or client certificate information. This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<MiskCallerAuthenticator>().to<MyAuthenticator>() We allow binding up many authenticators in case applications would like to support alternative ways in which to authenticate requests. For example, one mechanism might leverage HTTP headers while another mechanism might leverage third party authentication services. Functions \u00b6 Name Summary getAuthenticatedCaller [jvm] abstract fun getAuthenticatedCaller (): MiskCaller? Inheritors \u00b6 Name FakeCallerAuthenticator","title":"MiskCallerAuthenticator - Misk"},{"location":"0.x/misk/misk.security.authz/-misk-caller-authenticator/#miskcallerauthenticator","text":"[jvm]\\ interface MiskCallerAuthenticator Interface for determining the current MiskCaller. Typically use an Request, ClientCertSubject, etc to determine the caller based on request headers or client certificate information. This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<MiskCallerAuthenticator>().to<MyAuthenticator>() We allow binding up many authenticators in case applications would like to support alternative ways in which to authenticate requests. For example, one mechanism might leverage HTTP headers while another mechanism might leverage third party authentication services.","title":"MiskCallerAuthenticator"},{"location":"0.x/misk/misk.security.authz/-misk-caller-authenticator/#functions","text":"Name Summary getAuthenticatedCaller [jvm] abstract fun getAuthenticatedCaller (): MiskCaller?","title":"Functions"},{"location":"0.x/misk/misk.security.authz/-misk-caller-authenticator/#inheritors","text":"Name FakeCallerAuthenticator","title":"Inheritors"},{"location":"0.x/misk/misk.security.authz/-misk-caller-authenticator/get-authenticated-caller/","text":"// misk / misk.security.authz / MiskCallerAuthenticator / getAuthenticatedCaller getAuthenticatedCaller \u00b6 [jvm]\\ abstract fun getAuthenticatedCaller (): MiskCaller?","title":"getAuthenticatedCaller - Misk"},{"location":"0.x/misk/misk.security.authz/-misk-caller-authenticator/get-authenticated-caller/#getauthenticatedcaller","text":"[jvm]\\ abstract fun getAuthenticatedCaller (): MiskCaller?","title":"getAuthenticatedCaller"},{"location":"0.x/misk/misk.security.cert/","text":"// misk / misk.security.cert Package misk.security.cert \u00b6 Types \u00b6 Name Summary X500Name [jvm] data class X500Name (commonName: String ?, organizationalUnit: String ?, organization: String ?, locality: String ?, state: String ?, country: String ?) Functions \u00b6 Name Summary isSignedBy [jvm] fun X509Certificate . isSignedBy (key: PublicKey ): Boolean fun X509Certificate . isSignedBy (cert: Certificate ): Boolean Properties \u00b6 Name Summary isSelfSigned [jvm] val X509Certificate . isSelfSigned : Boolean","title":"Package misk.security.cert - Misk"},{"location":"0.x/misk/misk.security.cert/#package-misksecuritycert","text":"","title":"Package misk.security.cert"},{"location":"0.x/misk/misk.security.cert/#types","text":"Name Summary X500Name [jvm] data class X500Name (commonName: String ?, organizationalUnit: String ?, organization: String ?, locality: String ?, state: String ?, country: String ?)","title":"Types"},{"location":"0.x/misk/misk.security.cert/#functions","text":"Name Summary isSignedBy [jvm] fun X509Certificate . isSignedBy (key: PublicKey ): Boolean fun X509Certificate . isSignedBy (cert: Certificate ): Boolean","title":"Functions"},{"location":"0.x/misk/misk.security.cert/#properties","text":"Name Summary isSelfSigned [jvm] val X509Certificate . isSelfSigned : Boolean","title":"Properties"},{"location":"0.x/misk/misk.security.cert/is-self-signed/","text":"// misk / misk.security.cert / isSelfSigned isSelfSigned \u00b6 [jvm]\\ val X509Certificate . isSelfSigned : Boolean","title":"isSelfSigned - Misk"},{"location":"0.x/misk/misk.security.cert/is-self-signed/#isselfsigned","text":"[jvm]\\ val X509Certificate . isSelfSigned : Boolean","title":"isSelfSigned"},{"location":"0.x/misk/misk.security.cert/is-signed-by/","text":"// misk / misk.security.cert / isSignedBy isSignedBy \u00b6 [jvm]\\ fun X509Certificate . isSignedBy (cert: Certificate ): Boolean fun X509Certificate . isSignedBy (key: PublicKey ): Boolean","title":"isSignedBy - Misk"},{"location":"0.x/misk/misk.security.cert/is-signed-by/#issignedby","text":"[jvm]\\ fun X509Certificate . isSignedBy (cert: Certificate ): Boolean fun X509Certificate . isSignedBy (key: PublicKey ): Boolean","title":"isSignedBy"},{"location":"0.x/misk/misk.security.cert/-x500-name/","text":"// misk / misk.security.cert / X500Name X500Name \u00b6 [jvm]\\ data class X500Name (commonName: String ?, organizationalUnit: String ?, organization: String ?, locality: String ?, state: String ?, country: String ?) Constructors \u00b6 X500Name [jvm] fun X500Name (components: Map < String , String >) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary commonName [jvm] val commonName : String ? country [jvm] val country : String ? locality [jvm] val locality : String ? organization [jvm] val organization : String ? organizationalUnit [jvm] val organizationalUnit : String ? state [jvm] val state : String ?","title":"X500Name - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/#x500name","text":"[jvm]\\ data class X500Name (commonName: String ?, organizationalUnit: String ?, organization: String ?, locality: String ?, state: String ?, country: String ?)","title":"X500Name"},{"location":"0.x/misk/misk.security.cert/-x500-name/#constructors","text":"X500Name [jvm] fun X500Name (components: Map < String , String >)","title":"Constructors"},{"location":"0.x/misk/misk.security.cert/-x500-name/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.security.cert/-x500-name/#properties","text":"Name Summary commonName [jvm] val commonName : String ? country [jvm] val country : String ? locality [jvm] val locality : String ? organization [jvm] val organization : String ? organizationalUnit [jvm] val organizationalUnit : String ? state [jvm] val state : String ?","title":"Properties"},{"location":"0.x/misk/misk.security.cert/-x500-name/-x500-name/","text":"// misk / misk.security.cert / X500Name / X500Name X500Name \u00b6 [jvm]\\ fun X500Name (components: Map < String , String >) fun X500Name (commonName: String ?, organizationalUnit: String ?, organization: String ?, locality: String ?, state: String ?, country: String ?)","title":"X500Name - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/-x500-name/#x500name","text":"[jvm]\\ fun X500Name (components: Map < String , String >) fun X500Name (commonName: String ?, organizationalUnit: String ?, organization: String ?, locality: String ?, state: String ?, country: String ?)","title":"X500Name"},{"location":"0.x/misk/misk.security.cert/-x500-name/common-name/","text":"// misk / misk.security.cert / X500Name / commonName commonName \u00b6 [jvm]\\ val commonName : String ?","title":"commonName - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/common-name/#commonname","text":"[jvm]\\ val commonName : String ?","title":"commonName"},{"location":"0.x/misk/misk.security.cert/-x500-name/country/","text":"// misk / misk.security.cert / X500Name / country country \u00b6 [jvm]\\ val country : String ?","title":"country - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/country/#country","text":"[jvm]\\ val country : String ?","title":"country"},{"location":"0.x/misk/misk.security.cert/-x500-name/locality/","text":"// misk / misk.security.cert / X500Name / locality locality \u00b6 [jvm]\\ val locality : String ?","title":"locality - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/locality/#locality","text":"[jvm]\\ val locality : String ?","title":"locality"},{"location":"0.x/misk/misk.security.cert/-x500-name/organization/","text":"// misk / misk.security.cert / X500Name / organization organization \u00b6 [jvm]\\ val organization : String ?","title":"organization - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/organization/#organization","text":"[jvm]\\ val organization : String ?","title":"organization"},{"location":"0.x/misk/misk.security.cert/-x500-name/organizational-unit/","text":"// misk / misk.security.cert / X500Name / organizationalUnit organizationalUnit \u00b6 [jvm]\\ val organizationalUnit : String ?","title":"organizationalUnit - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/organizational-unit/#organizationalunit","text":"[jvm]\\ val organizationalUnit : String ?","title":"organizationalUnit"},{"location":"0.x/misk/misk.security.cert/-x500-name/state/","text":"// misk / misk.security.cert / X500Name / state state \u00b6 [jvm]\\ val state : String ?","title":"state - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/state/#state","text":"[jvm]\\ val state : String ?","title":"state"},{"location":"0.x/misk/misk.security.cert/-x500-name/-companion/","text":"// misk / misk.security.cert / X500Name / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary parse [jvm] fun parse (dnString: String ): X500Name","title":"Companion - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.security.cert/-x500-name/-companion/#functions","text":"Name Summary parse [jvm] fun parse (dnString: String ): X500Name","title":"Functions"},{"location":"0.x/misk/misk.security.cert/-x500-name/-companion/parse/","text":"// misk / misk.security.cert / X500Name / Companion / parse parse \u00b6 [jvm]\\ fun parse (dnString: String ): X500Name","title":"parse - Misk"},{"location":"0.x/misk/misk.security.cert/-x500-name/-companion/parse/#parse","text":"[jvm]\\ fun parse (dnString: String ): X500Name","title":"parse"},{"location":"0.x/misk/misk.security.keys/","text":"// misk / misk.security.keys Package misk.security.keys \u00b6 Types \u00b6 Name Summary KeyService [jvm] interface KeyService Handles encryption and decryption using keys stored in a key management service","title":"Package misk.security.keys - Misk"},{"location":"0.x/misk/misk.security.keys/#package-misksecuritykeys","text":"","title":"Package misk.security.keys"},{"location":"0.x/misk/misk.security.keys/#types","text":"Name Summary KeyService [jvm] interface KeyService Handles encryption and decryption using keys stored in a key management service","title":"Types"},{"location":"0.x/misk/misk.security.keys/-key-service/","text":"// misk / misk.security.keys / KeyService KeyService \u00b6 [jvm]\\ interface KeyService Handles encryption and decryption using keys stored in a key management service Functions \u00b6 Name Summary decrypt [jvm] abstract fun decrypt (keyAlias: String , cipherText: ByteString): ByteString decrypts the provided cipher text using the given stored key encrypt [jvm] abstract fun encrypt (keyAlias: String , plainText: ByteString): ByteString encrypts the provided plain text using the given stored key","title":"KeyService - Misk"},{"location":"0.x/misk/misk.security.keys/-key-service/#keyservice","text":"[jvm]\\ interface KeyService Handles encryption and decryption using keys stored in a key management service","title":"KeyService"},{"location":"0.x/misk/misk.security.keys/-key-service/#functions","text":"Name Summary decrypt [jvm] abstract fun decrypt (keyAlias: String , cipherText: ByteString): ByteString decrypts the provided cipher text using the given stored key encrypt [jvm] abstract fun encrypt (keyAlias: String , plainText: ByteString): ByteString encrypts the provided plain text using the given stored key","title":"Functions"},{"location":"0.x/misk/misk.security.keys/-key-service/decrypt/","text":"// misk / misk.security.keys / KeyService / decrypt decrypt \u00b6 [jvm]\\ abstract fun decrypt (keyAlias: String , cipherText: ByteString): ByteString decrypts the provided cipher text using the given stored key","title":"decrypt - Misk"},{"location":"0.x/misk/misk.security.keys/-key-service/decrypt/#decrypt","text":"[jvm]\\ abstract fun decrypt (keyAlias: String , cipherText: ByteString): ByteString decrypts the provided cipher text using the given stored key","title":"decrypt"},{"location":"0.x/misk/misk.security.keys/-key-service/encrypt/","text":"// misk / misk.security.keys / KeyService / encrypt encrypt \u00b6 [jvm]\\ abstract fun encrypt (keyAlias: String , plainText: ByteString): ByteString encrypts the provided plain text using the given stored key","title":"encrypt - Misk"},{"location":"0.x/misk/misk.security.keys/-key-service/encrypt/#encrypt","text":"[jvm]\\ abstract fun encrypt (keyAlias: String , plainText: ByteString): ByteString encrypts the provided plain text using the given stored key","title":"encrypt"},{"location":"0.x/misk/misk.security.ssl/","text":"// misk / misk.security.ssl Package misk.security.ssl \u00b6 Types \u00b6 Name Summary CipherSuites [jvm] object CipherSuites ClientCertChain [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertChain Qualifier annotation for an ActionScoped array of X509Certificate s containing the certificate chain provided by the client (if any) ClientCertIssuer [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertIssuer Qualifier annotation for an ActionScoped containing the issuer of the client cert ClientCertSubject [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertSubject Qualifier annotation for an ActionScoped containing the subject of the client cert TlsProtocols [jvm] object TlsProtocols","title":"Package misk.security.ssl - Misk"},{"location":"0.x/misk/misk.security.ssl/#package-misksecurityssl","text":"","title":"Package misk.security.ssl"},{"location":"0.x/misk/misk.security.ssl/#types","text":"Name Summary CipherSuites [jvm] object CipherSuites ClientCertChain [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertChain Qualifier annotation for an ActionScoped array of X509Certificate s containing the certificate chain provided by the client (if any) ClientCertIssuer [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertIssuer Qualifier annotation for an ActionScoped containing the issuer of the client cert ClientCertSubject [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertSubject Qualifier annotation for an ActionScoped containing the subject of the client cert TlsProtocols [jvm] object TlsProtocols","title":"Types"},{"location":"0.x/misk/misk.security.ssl/-cipher-suites/","text":"// misk / misk.security.ssl / CipherSuites CipherSuites \u00b6 [jvm]\\ object CipherSuites Properties \u00b6 Name Summary compatible [jvm] val compatible : Array < String >","title":"CipherSuites - Misk"},{"location":"0.x/misk/misk.security.ssl/-cipher-suites/#ciphersuites","text":"[jvm]\\ object CipherSuites","title":"CipherSuites"},{"location":"0.x/misk/misk.security.ssl/-cipher-suites/#properties","text":"Name Summary compatible [jvm] val compatible : Array < String >","title":"Properties"},{"location":"0.x/misk/misk.security.ssl/-cipher-suites/compatible/","text":"// misk / misk.security.ssl / CipherSuites / compatible compatible \u00b6 [jvm]\\ val compatible : Array < String >","title":"compatible - Misk"},{"location":"0.x/misk/misk.security.ssl/-cipher-suites/compatible/#compatible","text":"[jvm]\\ val compatible : Array < String >","title":"compatible"},{"location":"0.x/misk/misk.security.ssl/-client-cert-chain/","text":"// misk / misk.security.ssl / ClientCertChain ClientCertChain \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertChain Qualifier annotation for an ActionScoped array of X509Certificate s containing the certificate chain provided by the client (if any) Constructors \u00b6 ClientCertChain [jvm] fun ClientCertChain ()","title":"ClientCertChain - Misk"},{"location":"0.x/misk/misk.security.ssl/-client-cert-chain/#clientcertchain","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertChain Qualifier annotation for an ActionScoped array of X509Certificate s containing the certificate chain provided by the client (if any)","title":"ClientCertChain"},{"location":"0.x/misk/misk.security.ssl/-client-cert-chain/#constructors","text":"ClientCertChain [jvm] fun ClientCertChain ()","title":"Constructors"},{"location":"0.x/misk/misk.security.ssl/-client-cert-chain/-client-cert-chain/","text":"// misk / misk.security.ssl / ClientCertChain / ClientCertChain ClientCertChain \u00b6 [jvm]\\ fun ClientCertChain ()","title":"ClientCertChain - Misk"},{"location":"0.x/misk/misk.security.ssl/-client-cert-chain/-client-cert-chain/#clientcertchain","text":"[jvm]\\ fun ClientCertChain ()","title":"ClientCertChain"},{"location":"0.x/misk/misk.security.ssl/-client-cert-issuer/","text":"// misk / misk.security.ssl / ClientCertIssuer ClientCertIssuer \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertIssuer Qualifier annotation for an ActionScoped containing the issuer of the client cert Constructors \u00b6 ClientCertIssuer [jvm] fun ClientCertIssuer ()","title":"ClientCertIssuer - Misk"},{"location":"0.x/misk/misk.security.ssl/-client-cert-issuer/#clientcertissuer","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertIssuer Qualifier annotation for an ActionScoped containing the issuer of the client cert","title":"ClientCertIssuer"},{"location":"0.x/misk/misk.security.ssl/-client-cert-issuer/#constructors","text":"ClientCertIssuer [jvm] fun ClientCertIssuer ()","title":"Constructors"},{"location":"0.x/misk/misk.security.ssl/-client-cert-issuer/-client-cert-issuer/","text":"// misk / misk.security.ssl / ClientCertIssuer / ClientCertIssuer ClientCertIssuer \u00b6 [jvm]\\ fun ClientCertIssuer ()","title":"ClientCertIssuer - Misk"},{"location":"0.x/misk/misk.security.ssl/-client-cert-issuer/-client-cert-issuer/#clientcertissuer","text":"[jvm]\\ fun ClientCertIssuer ()","title":"ClientCertIssuer"},{"location":"0.x/misk/misk.security.ssl/-client-cert-subject/","text":"// misk / misk.security.ssl / ClientCertSubject ClientCertSubject \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertSubject Qualifier annotation for an ActionScoped containing the subject of the client cert Constructors \u00b6 ClientCertSubject [jvm] fun ClientCertSubject ()","title":"ClientCertSubject - Misk"},{"location":"0.x/misk/misk.security.ssl/-client-cert-subject/#clientcertsubject","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class ClientCertSubject Qualifier annotation for an ActionScoped containing the subject of the client cert","title":"ClientCertSubject"},{"location":"0.x/misk/misk.security.ssl/-client-cert-subject/#constructors","text":"ClientCertSubject [jvm] fun ClientCertSubject ()","title":"Constructors"},{"location":"0.x/misk/misk.security.ssl/-client-cert-subject/-client-cert-subject/","text":"// misk / misk.security.ssl / ClientCertSubject / ClientCertSubject ClientCertSubject \u00b6 [jvm]\\ fun ClientCertSubject ()","title":"ClientCertSubject - Misk"},{"location":"0.x/misk/misk.security.ssl/-client-cert-subject/-client-cert-subject/#clientcertsubject","text":"[jvm]\\ fun ClientCertSubject ()","title":"ClientCertSubject"},{"location":"0.x/misk/misk.security.ssl/-tls-protocols/","text":"// misk / misk.security.ssl / TlsProtocols TlsProtocols \u00b6 [jvm]\\ object TlsProtocols Properties \u00b6 Name Summary compatible [jvm] val compatible : Array < String > List of safe to use TLS protocols, in preferred order restricted [jvm] val restricted : Array < String > List of modern TLS protocols for extra security, in preferred order","title":"TlsProtocols - Misk"},{"location":"0.x/misk/misk.security.ssl/-tls-protocols/#tlsprotocols","text":"[jvm]\\ object TlsProtocols","title":"TlsProtocols"},{"location":"0.x/misk/misk.security.ssl/-tls-protocols/#properties","text":"Name Summary compatible [jvm] val compatible : Array < String > List of safe to use TLS protocols, in preferred order restricted [jvm] val restricted : Array < String > List of modern TLS protocols for extra security, in preferred order","title":"Properties"},{"location":"0.x/misk/misk.security.ssl/-tls-protocols/compatible/","text":"// misk / misk.security.ssl / TlsProtocols / compatible compatible \u00b6 [jvm]\\ val compatible : Array < String > List of safe to use TLS protocols, in preferred order","title":"compatible - Misk"},{"location":"0.x/misk/misk.security.ssl/-tls-protocols/compatible/#compatible","text":"[jvm]\\ val compatible : Array < String > List of safe to use TLS protocols, in preferred order","title":"compatible"},{"location":"0.x/misk/misk.security.ssl/-tls-protocols/restricted/","text":"// misk / misk.security.ssl / TlsProtocols / restricted restricted \u00b6 [jvm]\\ val restricted : Array < String > List of modern TLS protocols for extra security, in preferred order","title":"restricted - Misk"},{"location":"0.x/misk/misk.security.ssl/-tls-protocols/restricted/#restricted","text":"[jvm]\\ val restricted : Array < String > List of modern TLS protocols for extra security, in preferred order","title":"restricted"},{"location":"0.x/misk/misk.tasks/","text":"// misk / misk.tasks Package misk.tasks \u00b6 Types \u00b6 Name Summary DelayedTask [jvm] class DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result ) : Delayed A DelayedTask is a task that runs in the future RepeatedTaskQueue [jvm] class RepeatedTaskQueue : AbstractExecutionThreadService A RepeatedTaskQueue runs repeated tasks at a user controlled rate. Internally it uses a DelayQueue to hold the pending tasks; a background thread pulls the next task from the DelayQueue and hands it off to an executor service for execution. RepeatedTaskQueueConfig [jvm] data class RepeatedTaskQueueConfig (default_jitter_ms: Long , default_max_delay_sec: Long , num_parallel_tasks: Int ) RepeatedTaskQueueFactory [jvm] @Singleton class RepeatedTaskQueueFactory @Injectconstructor(clock: Clock , metrics: RepeatedTaskQueueMetrics , executorServiceFactory: ExecutorServiceFactory) RepeatedTaskQueueMetrics [jvm] @Singleton class RepeatedTaskQueueMetrics @Injectconstructor(metrics: Metrics) Result [jvm] data class Result (status: Status , nextDelay: Duration ) Status [jvm] enum Status : Enum < Status >","title":"Package misk.tasks - Misk"},{"location":"0.x/misk/misk.tasks/#package-misktasks","text":"","title":"Package misk.tasks"},{"location":"0.x/misk/misk.tasks/#types","text":"Name Summary DelayedTask [jvm] class DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result ) : Delayed A DelayedTask is a task that runs in the future RepeatedTaskQueue [jvm] class RepeatedTaskQueue : AbstractExecutionThreadService A RepeatedTaskQueue runs repeated tasks at a user controlled rate. Internally it uses a DelayQueue to hold the pending tasks; a background thread pulls the next task from the DelayQueue and hands it off to an executor service for execution. RepeatedTaskQueueConfig [jvm] data class RepeatedTaskQueueConfig (default_jitter_ms: Long , default_max_delay_sec: Long , num_parallel_tasks: Int ) RepeatedTaskQueueFactory [jvm] @Singleton class RepeatedTaskQueueFactory @Injectconstructor(clock: Clock , metrics: RepeatedTaskQueueMetrics , executorServiceFactory: ExecutorServiceFactory) RepeatedTaskQueueMetrics [jvm] @Singleton class RepeatedTaskQueueMetrics @Injectconstructor(metrics: Metrics) Result [jvm] data class Result (status: Status , nextDelay: Duration ) Status [jvm] enum Status : Enum < Status >","title":"Types"},{"location":"0.x/misk/misk.tasks/-delayed-task/","text":"// misk / misk.tasks / DelayedTask DelayedTask \u00b6 [jvm]\\ class DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result ) : Delayed A DelayedTask is a task that runs in the future Constructors \u00b6 DelayedTask [jvm] fun DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result ) Functions \u00b6 Name Summary compareTo [jvm] open operator override fun compareTo (other: Delayed ): Int getDelay [jvm] open override fun getDelay (unit: TimeUnit ): Long Properties \u00b6 Name Summary task [jvm] val task : () -> Result","title":"DelayedTask - Misk"},{"location":"0.x/misk/misk.tasks/-delayed-task/#delayedtask","text":"[jvm]\\ class DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result ) : Delayed A DelayedTask is a task that runs in the future","title":"DelayedTask"},{"location":"0.x/misk/misk.tasks/-delayed-task/#constructors","text":"DelayedTask [jvm] fun DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result )","title":"Constructors"},{"location":"0.x/misk/misk.tasks/-delayed-task/#functions","text":"Name Summary compareTo [jvm] open operator override fun compareTo (other: Delayed ): Int getDelay [jvm] open override fun getDelay (unit: TimeUnit ): Long","title":"Functions"},{"location":"0.x/misk/misk.tasks/-delayed-task/#properties","text":"Name Summary task [jvm] val task : () -> Result","title":"Properties"},{"location":"0.x/misk/misk.tasks/-delayed-task/-delayed-task/","text":"// misk / misk.tasks / DelayedTask / DelayedTask DelayedTask \u00b6 [jvm]\\ fun DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result )","title":"DelayedTask - Misk"},{"location":"0.x/misk/misk.tasks/-delayed-task/-delayed-task/#delayedtask","text":"[jvm]\\ fun DelayedTask (clock: Clock , executionTime: Instant , task: () -> Result )","title":"DelayedTask"},{"location":"0.x/misk/misk.tasks/-delayed-task/compare-to/","text":"// misk / misk.tasks / DelayedTask / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: Delayed ): Int","title":"compareTo - Misk"},{"location":"0.x/misk/misk.tasks/-delayed-task/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: Delayed ): Int","title":"compareTo"},{"location":"0.x/misk/misk.tasks/-delayed-task/get-delay/","text":"// misk / misk.tasks / DelayedTask / getDelay getDelay \u00b6 [jvm]\\ open override fun getDelay (unit: TimeUnit ): Long","title":"getDelay - Misk"},{"location":"0.x/misk/misk.tasks/-delayed-task/get-delay/#getdelay","text":"[jvm]\\ open override fun getDelay (unit: TimeUnit ): Long","title":"getDelay"},{"location":"0.x/misk/misk.tasks/-delayed-task/task/","text":"// misk / misk.tasks / DelayedTask / task task \u00b6 [jvm]\\ val task : () -> Result","title":"task - Misk"},{"location":"0.x/misk/misk.tasks/-delayed-task/task/#task","text":"[jvm]\\ val task : () -> Result","title":"task"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/","text":"// misk / misk.tasks / RepeatedTaskQueue RepeatedTaskQueue \u00b6 [jvm]\\ class RepeatedTaskQueue : AbstractExecutionThreadService A RepeatedTaskQueue runs repeated tasks at a user controlled rate. Internally it uses a DelayQueue to hold the pending tasks; a background thread pulls the next task from the DelayQueue and hands it off to an executor service for execution. RepeatedTaskQueue implements the Service interface, which requires proper startup and shutdown. Alternatively, you can add new instances to the Service multibind. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean schedule [jvm] fun schedule (delay: Duration , retryDelayOnFailure: Duration ? = null, task: () -> Result ) Schedules a task to run repeatedly after an initial delay. The task itself determines the next execution time. Provide an optional retryDelayOnFailure parameter to determine when the job should be retried in the case of an unhandled exception by the client scheduleWithBackoff [jvm] fun scheduleWithBackoff (timeBetweenRuns: Duration , initialDelay: Duration = timeBetweenRuns, noWorkBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), failureBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), task: () -> Status ) Schedules a task to run repeatedly at a fixed delay, with back-off for errors and lack of available work shutDown [jvm] open fun shutDown () startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String","title":"RepeatedTaskQueue - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/#repeatedtaskqueue","text":"[jvm]\\ class RepeatedTaskQueue : AbstractExecutionThreadService A RepeatedTaskQueue runs repeated tasks at a user controlled rate. Internally it uses a DelayQueue to hold the pending tasks; a background thread pulls the next task from the DelayQueue and hands it off to an executor service for execution. RepeatedTaskQueue implements the Service interface, which requires proper startup and shutdown. Alternatively, you can add new instances to the Service multibind.","title":"RepeatedTaskQueue"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean schedule [jvm] fun schedule (delay: Duration , retryDelayOnFailure: Duration ? = null, task: () -> Result ) Schedules a task to run repeatedly after an initial delay. The task itself determines the next execution time. Provide an optional retryDelayOnFailure parameter to determine when the job should be retried in the case of an unhandled exception by the client scheduleWithBackoff [jvm] fun scheduleWithBackoff (timeBetweenRuns: Duration , initialDelay: Duration = timeBetweenRuns, noWorkBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), failureBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), task: () -> Status ) Schedules a task to run repeatedly at a fixed delay, with back-off for errors and lack of available work shutDown [jvm] open fun shutDown () startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/#properties","text":"Name Summary name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/name/","text":"// misk / misk.tasks / RepeatedTaskQueue / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/schedule-with-backoff/","text":"// misk / misk.tasks / RepeatedTaskQueue / scheduleWithBackoff scheduleWithBackoff \u00b6 [jvm]\\ fun scheduleWithBackoff (timeBetweenRuns: Duration , initialDelay: Duration = timeBetweenRuns, noWorkBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), failureBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), task: () -> Status ) Schedules a task to run repeatedly at a fixed delay, with back-off for errors and lack of available work","title":"scheduleWithBackoff - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/schedule-with-backoff/#schedulewithbackoff","text":"[jvm]\\ fun scheduleWithBackoff (timeBetweenRuns: Duration , initialDelay: Duration = timeBetweenRuns, noWorkBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), failureBackoff: Backoff = config.defaultBackoff(timeBetweenRuns), task: () -> Status ) Schedules a task to run repeatedly at a fixed delay, with back-off for errors and lack of available work","title":"scheduleWithBackoff"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/schedule/","text":"// misk / misk.tasks / RepeatedTaskQueue / schedule schedule \u00b6 [jvm]\\ fun schedule (delay: Duration , retryDelayOnFailure: Duration ? = null, task: () -> Result ) Schedules a task to run repeatedly after an initial delay. The task itself determines the next execution time. Provide an optional retryDelayOnFailure parameter to determine when the job should be retried in the case of an unhandled exception by the client","title":"schedule - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/schedule/#schedule","text":"[jvm]\\ fun schedule (delay: Duration , retryDelayOnFailure: Duration ? = null, task: () -> Result ) Schedules a task to run repeatedly after an initial delay. The task itself determines the next execution time. Provide an optional retryDelayOnFailure parameter to determine when the job should be retried in the case of an unhandled exception by the client","title":"schedule"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/-companion/","text":"// misk / misk.tasks / RepeatedTaskQueue / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/","text":"// misk / misk.tasks / RepeatedTaskQueueConfig RepeatedTaskQueueConfig \u00b6 [jvm]\\ data class RepeatedTaskQueueConfig (default_jitter_ms: Long , default_max_delay_sec: Long , num_parallel_tasks: Int ) Functions \u00b6 Name Summary defaultBackoff [jvm] fun defaultBackoff (initialDelay: Duration ): Backoff Construct an ExponentialBackoff from the initial delay using the default configs. Properties \u00b6 Name Summary default_jitter_ms [jvm] val default_jitter_ms : Long = 50 The default amount of jitter to use when scheduling backoffs. default_max_delay_sec [jvm] val default_max_delay_sec : Long = 60 The default maximum backoff time. num_parallel_tasks [jvm] val num_parallel_tasks : Int = 1 The fixed number of parallel tasks to run.","title":"RepeatedTaskQueueConfig - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/#repeatedtaskqueueconfig","text":"[jvm]\\ data class RepeatedTaskQueueConfig (default_jitter_ms: Long , default_max_delay_sec: Long , num_parallel_tasks: Int )","title":"RepeatedTaskQueueConfig"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/#functions","text":"Name Summary defaultBackoff [jvm] fun defaultBackoff (initialDelay: Duration ): Backoff Construct an ExponentialBackoff from the initial delay using the default configs.","title":"Functions"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/#properties","text":"Name Summary default_jitter_ms [jvm] val default_jitter_ms : Long = 50 The default amount of jitter to use when scheduling backoffs. default_max_delay_sec [jvm] val default_max_delay_sec : Long = 60 The default maximum backoff time. num_parallel_tasks [jvm] val num_parallel_tasks : Int = 1 The fixed number of parallel tasks to run.","title":"Properties"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/-repeated-task-queue-config/","text":"// misk / misk.tasks / RepeatedTaskQueueConfig / RepeatedTaskQueueConfig RepeatedTaskQueueConfig \u00b6 [jvm]\\ fun RepeatedTaskQueueConfig (default_jitter_ms: Long = 50, default_max_delay_sec: Long = 60, num_parallel_tasks: Int = 1)","title":"RepeatedTaskQueueConfig - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/-repeated-task-queue-config/#repeatedtaskqueueconfig","text":"[jvm]\\ fun RepeatedTaskQueueConfig (default_jitter_ms: Long = 50, default_max_delay_sec: Long = 60, num_parallel_tasks: Int = 1)","title":"RepeatedTaskQueueConfig"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/default-backoff/","text":"// misk / misk.tasks / RepeatedTaskQueueConfig / defaultBackoff defaultBackoff \u00b6 [jvm]\\ fun defaultBackoff (initialDelay: Duration ): Backoff Construct an ExponentialBackoff from the initial delay using the default configs.","title":"defaultBackoff - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/default-backoff/#defaultbackoff","text":"[jvm]\\ fun defaultBackoff (initialDelay: Duration ): Backoff Construct an ExponentialBackoff from the initial delay using the default configs.","title":"defaultBackoff"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/default_jitter_ms/","text":"// misk / misk.tasks / RepeatedTaskQueueConfig / default_jitter_ms default_jitter_ms \u00b6 [jvm]\\ val default_jitter_ms : Long = 50 The default amount of jitter to use when scheduling backoffs. Can be overridden when scheduling a tasks.","title":"default_jitter_ms - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/default_jitter_ms/#default_jitter_ms","text":"[jvm]\\ val default_jitter_ms : Long = 50 The default amount of jitter to use when scheduling backoffs. Can be overridden when scheduling a tasks.","title":"default_jitter_ms"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/default_max_delay_sec/","text":"// misk / misk.tasks / RepeatedTaskQueueConfig / default_max_delay_sec default_max_delay_sec \u00b6 [jvm]\\ val default_max_delay_sec : Long = 60 The default maximum backoff time. Can be overridden when scheduling a task.","title":"default_max_delay_sec - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/default_max_delay_sec/#default_max_delay_sec","text":"[jvm]\\ val default_max_delay_sec : Long = 60 The default maximum backoff time. Can be overridden when scheduling a task.","title":"default_max_delay_sec"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/num_parallel_tasks/","text":"// misk / misk.tasks / RepeatedTaskQueueConfig / num_parallel_tasks num_parallel_tasks \u00b6 [jvm]\\ val num_parallel_tasks : Int = 1 The fixed number of parallel tasks to run. If -1 then an unbounded number of parallel tasks are allowed. An unbounded number of tasks can be useful for an App that needs to dynamically compute the number of tasks at runtime. However, the App is then responsible for ensuring an upper bound for the number of tasks submitted.","title":"num_parallel_tasks - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-config/num_parallel_tasks/#num_parallel_tasks","text":"[jvm]\\ val num_parallel_tasks : Int = 1 The fixed number of parallel tasks to run. If -1 then an unbounded number of parallel tasks are allowed. An unbounded number of tasks can be useful for an App that needs to dynamically compute the number of tasks at runtime. However, the App is then responsible for ensuring an upper bound for the number of tasks submitted.","title":"num_parallel_tasks"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/","text":"// misk / misk.tasks / RepeatedTaskQueueFactory RepeatedTaskQueueFactory \u00b6 [jvm]\\ @Singleton class RepeatedTaskQueueFactory @Injectconstructor(clock: Clock , metrics: RepeatedTaskQueueMetrics , executorServiceFactory: ExecutorServiceFactory) Functions \u00b6 Name Summary forTesting [jvm] fun forTesting (name: String , backingStorage: ExplicitReleaseDelayQueue < DelayedTask >, pollingTimeout: Duration = Duration.ofMillis(50)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue for testing new [jvm] fun new (name: String , config: RepeatedTaskQueueConfig = RepeatedTaskQueueConfig(), pollingTimeout: Duration = Duration.ofMillis(250)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue","title":"RepeatedTaskQueueFactory - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/#repeatedtaskqueuefactory","text":"[jvm]\\ @Singleton class RepeatedTaskQueueFactory @Injectconstructor(clock: Clock , metrics: RepeatedTaskQueueMetrics , executorServiceFactory: ExecutorServiceFactory)","title":"RepeatedTaskQueueFactory"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/#functions","text":"Name Summary forTesting [jvm] fun forTesting (name: String , backingStorage: ExplicitReleaseDelayQueue < DelayedTask >, pollingTimeout: Duration = Duration.ofMillis(50)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue for testing new [jvm] fun new (name: String , config: RepeatedTaskQueueConfig = RepeatedTaskQueueConfig(), pollingTimeout: Duration = Duration.ofMillis(250)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue","title":"Functions"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/-repeated-task-queue-factory/","text":"// misk / misk.tasks / RepeatedTaskQueueFactory / RepeatedTaskQueueFactory RepeatedTaskQueueFactory \u00b6 [jvm]\\ @Inject fun RepeatedTaskQueueFactory (clock: Clock , metrics: RepeatedTaskQueueMetrics , executorServiceFactory: ExecutorServiceFactory)","title":"RepeatedTaskQueueFactory - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/-repeated-task-queue-factory/#repeatedtaskqueuefactory","text":"[jvm]\\ @Inject fun RepeatedTaskQueueFactory (clock: Clock , metrics: RepeatedTaskQueueMetrics , executorServiceFactory: ExecutorServiceFactory)","title":"RepeatedTaskQueueFactory"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/for-testing/","text":"// misk / misk.tasks / RepeatedTaskQueueFactory / forTesting forTesting \u00b6 [jvm]\\ fun forTesting (name: String , backingStorage: ExplicitReleaseDelayQueue < DelayedTask >, pollingTimeout: Duration = Duration.ofMillis(50)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue for testing","title":"forTesting - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/for-testing/#fortesting","text":"[jvm]\\ fun forTesting (name: String , backingStorage: ExplicitReleaseDelayQueue < DelayedTask >, pollingTimeout: Duration = Duration.ofMillis(50)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue for testing","title":"forTesting"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/new/","text":"// misk / misk.tasks / RepeatedTaskQueueFactory / new new \u00b6 [jvm]\\ fun new (name: String , config: RepeatedTaskQueueConfig = RepeatedTaskQueueConfig(), pollingTimeout: Duration = Duration.ofMillis(250)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue","title":"new - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-factory/new/#new","text":"[jvm]\\ fun new (name: String , config: RepeatedTaskQueueConfig = RepeatedTaskQueueConfig(), pollingTimeout: Duration = Duration.ofMillis(250)): RepeatedTaskQueue Builds a new instance of a RepeatedTaskQueue","title":"new"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-metrics/","text":"// misk / misk.tasks / RepeatedTaskQueueMetrics RepeatedTaskQueueMetrics \u00b6 [jvm]\\ @Singleton class RepeatedTaskQueueMetrics @Injectconstructor(metrics: Metrics)","title":"RepeatedTaskQueueMetrics - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-metrics/#repeatedtaskqueuemetrics","text":"[jvm]\\ @Singleton class RepeatedTaskQueueMetrics @Injectconstructor(metrics: Metrics)","title":"RepeatedTaskQueueMetrics"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-metrics/-repeated-task-queue-metrics/","text":"// misk / misk.tasks / RepeatedTaskQueueMetrics / RepeatedTaskQueueMetrics RepeatedTaskQueueMetrics \u00b6 [jvm]\\ @Inject fun RepeatedTaskQueueMetrics (metrics: Metrics)","title":"RepeatedTaskQueueMetrics - Misk"},{"location":"0.x/misk/misk.tasks/-repeated-task-queue-metrics/-repeated-task-queue-metrics/#repeatedtaskqueuemetrics","text":"[jvm]\\ @Inject fun RepeatedTaskQueueMetrics (metrics: Metrics)","title":"RepeatedTaskQueueMetrics"},{"location":"0.x/misk/misk.tasks/-result/","text":"// misk / misk.tasks / Result Result \u00b6 [jvm]\\ data class Result (status: Status , nextDelay: Duration ) Properties \u00b6 Name Summary nextDelay [jvm] val nextDelay : Duration status [jvm] val status : Status","title":"Result - Misk"},{"location":"0.x/misk/misk.tasks/-result/#result","text":"[jvm]\\ data class Result (status: Status , nextDelay: Duration )","title":"Result"},{"location":"0.x/misk/misk.tasks/-result/#properties","text":"Name Summary nextDelay [jvm] val nextDelay : Duration status [jvm] val status : Status","title":"Properties"},{"location":"0.x/misk/misk.tasks/-result/-result/","text":"// misk / misk.tasks / Result / Result Result \u00b6 [jvm]\\ fun Result (status: Status , nextDelay: Duration )","title":"Result - Misk"},{"location":"0.x/misk/misk.tasks/-result/-result/#result","text":"[jvm]\\ fun Result (status: Status , nextDelay: Duration )","title":"Result"},{"location":"0.x/misk/misk.tasks/-result/next-delay/","text":"// misk / misk.tasks / Result / nextDelay nextDelay \u00b6 [jvm]\\ val nextDelay : Duration","title":"nextDelay - Misk"},{"location":"0.x/misk/misk.tasks/-result/next-delay/#nextdelay","text":"[jvm]\\ val nextDelay : Duration","title":"nextDelay"},{"location":"0.x/misk/misk.tasks/-result/status/","text":"// misk / misk.tasks / Result / status status \u00b6 [jvm]\\ val status : Status","title":"status - Misk"},{"location":"0.x/misk/misk.tasks/-result/status/#status","text":"[jvm]\\ val status : Status","title":"status"},{"location":"0.x/misk/misk.tasks/-status/","text":"// misk / misk.tasks / Status Status \u00b6 [jvm]\\ enum Status : Enum < Status > Entries \u00b6 NO_RESCHEDULE [jvm] NO_RESCHEDULE (\u201cno_reschedule\u201d) The task should not be rescheduled FAILED [jvm] FAILED (\u201cfailed\u201d) The task resulted in an error NO_WORK [jvm] NO_WORK (\u201cno_work\u201d) The task had no work to complete OK [jvm] OK (\u201cok\u201d) The task completed successfully and processed work Functions \u00b6 Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Status - Misk"},{"location":"0.x/misk/misk.tasks/-status/#status","text":"[jvm]\\ enum Status : Enum < Status >","title":"Status"},{"location":"0.x/misk/misk.tasks/-status/#entries","text":"NO_RESCHEDULE [jvm] NO_RESCHEDULE (\u201cno_reschedule\u201d) The task should not be rescheduled FAILED [jvm] FAILED (\u201cfailed\u201d) The task resulted in an error NO_WORK [jvm] NO_WORK (\u201cno_work\u201d) The task had no work to complete OK [jvm] OK (\u201cok\u201d) The task completed successfully and processed work","title":"Entries"},{"location":"0.x/misk/misk.tasks/-status/#functions","text":"Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored.","title":"Functions"},{"location":"0.x/misk/misk.tasks/-status/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.tasks/-status/metric-label/","text":"// misk / misk.tasks / Status / metricLabel metricLabel \u00b6 [jvm]\\ fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored.","title":"metricLabel - Misk"},{"location":"0.x/misk/misk.tasks/-status/metric-label/#metriclabel","text":"[jvm]\\ fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored.","title":"metricLabel"},{"location":"0.x/misk/misk.tasks/-status/-f-a-i-l-e-d/","text":"// misk / misk.tasks / Status / FAILED FAILED \u00b6 [jvm]\\ FAILED (\u201cfailed\u201d) The task resulted in an error Functions \u00b6 Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"FAILED - Misk"},{"location":"0.x/misk/misk.tasks/-status/-f-a-i-l-e-d/#failed","text":"[jvm]\\ FAILED (\u201cfailed\u201d) The task resulted in an error","title":"FAILED"},{"location":"0.x/misk/misk.tasks/-status/-f-a-i-l-e-d/#functions","text":"Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored.","title":"Functions"},{"location":"0.x/misk/misk.tasks/-status/-f-a-i-l-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-r-e-s-c-h-e-d-u-l-e/","text":"// misk / misk.tasks / Status / NO_RESCHEDULE NO_RESCHEDULE \u00b6 [jvm]\\ NO_RESCHEDULE (\u201cno_reschedule\u201d) The task should not be rescheduled Functions \u00b6 Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"NO_RESCHEDULE - Misk"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-r-e-s-c-h-e-d-u-l-e/#no_reschedule","text":"[jvm]\\ NO_RESCHEDULE (\u201cno_reschedule\u201d) The task should not be rescheduled","title":"NO_RESCHEDULE"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-r-e-s-c-h-e-d-u-l-e/#functions","text":"Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored.","title":"Functions"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-r-e-s-c-h-e-d-u-l-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-w-o-r-k/","text":"// misk / misk.tasks / Status / NO_WORK NO_WORK \u00b6 [jvm]\\ NO_WORK (\u201cno_work\u201d) The task had no work to complete Functions \u00b6 Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"NO_WORK - Misk"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-w-o-r-k/#no_work","text":"[jvm]\\ NO_WORK (\u201cno_work\u201d) The task had no work to complete","title":"NO_WORK"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-w-o-r-k/#functions","text":"Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored.","title":"Functions"},{"location":"0.x/misk/misk.tasks/-status/-n-o_-w-o-r-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.tasks/-status/-o-k/","text":"// misk / misk.tasks / Status / OK OK \u00b6 [jvm]\\ OK (\u201cok\u201d) The task completed successfully and processed work Functions \u00b6 Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"OK - Misk"},{"location":"0.x/misk/misk.tasks/-status/-o-k/#ok","text":"[jvm]\\ OK (\u201cok\u201d) The task completed successfully and processed work","title":"OK"},{"location":"0.x/misk/misk.tasks/-status/-o-k/#functions","text":"Name Summary metricLabel [jvm] fun metricLabel (): String The metric label for the status. This is used instead of name() in case the code is refactored.","title":"Functions"},{"location":"0.x/misk/misk.tasks/-status/-o-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.time/","text":"// misk / misk.time Package misk.time \u00b6 Types \u00b6 Name Summary ForceUtcTimeZoneService [jvm] @Singleton class ForceUtcTimeZoneService @Injectconstructor : AbstractIdleService Forces the default JVM timezone to UTC. Functions \u00b6 Name Summary timed [jvm] fun < T > timed (f: () -> T ): Pair < Duration , T > fun < T > timed (ticker: Ticker, f: () -> T ): Pair < Duration , T >","title":"Package misk.time - Misk"},{"location":"0.x/misk/misk.time/#package-misktime","text":"","title":"Package misk.time"},{"location":"0.x/misk/misk.time/#types","text":"Name Summary ForceUtcTimeZoneService [jvm] @Singleton class ForceUtcTimeZoneService @Injectconstructor : AbstractIdleService Forces the default JVM timezone to UTC.","title":"Types"},{"location":"0.x/misk/misk.time/#functions","text":"Name Summary timed [jvm] fun < T > timed (f: () -> T ): Pair < Duration , T > fun < T > timed (ticker: Ticker, f: () -> T ): Pair < Duration , T >","title":"Functions"},{"location":"0.x/misk/misk.time/timed/","text":"// misk / misk.time / timed timed \u00b6 [jvm]\\ fun < T > timed (f: () -> T ): Pair < Duration , T > fun < T > timed (ticker: Ticker, f: () -> T ): Pair < Duration , T >","title":"timed - Misk"},{"location":"0.x/misk/misk.time/timed/#timed","text":"[jvm]\\ fun < T > timed (f: () -> T ): Pair < Duration , T > fun < T > timed (ticker: Ticker, f: () -> T ): Pair < Duration , T >","title":"timed"},{"location":"0.x/misk/misk.time/-force-utc-time-zone-service/","text":"// misk / misk.time / ForceUtcTimeZoneService ForceUtcTimeZoneService \u00b6 [jvm]\\ @Singleton class ForceUtcTimeZoneService @Injectconstructor : AbstractIdleService Forces the default JVM timezone to UTC. This is useful when running Misk applications on machines that don\u2019t have UTC set as the system timezone (eg. development machines). Constructors \u00b6 ForceUtcTimeZoneService [jvm] @Inject fun ForceUtcTimeZoneService () Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"ForceUtcTimeZoneService - Misk"},{"location":"0.x/misk/misk.time/-force-utc-time-zone-service/#forceutctimezoneservice","text":"[jvm]\\ @Singleton class ForceUtcTimeZoneService @Injectconstructor : AbstractIdleService Forces the default JVM timezone to UTC. This is useful when running Misk applications on machines that don\u2019t have UTC set as the system timezone (eg. development machines).","title":"ForceUtcTimeZoneService"},{"location":"0.x/misk/misk.time/-force-utc-time-zone-service/#constructors","text":"ForceUtcTimeZoneService [jvm] @Inject fun ForceUtcTimeZoneService ()","title":"Constructors"},{"location":"0.x/misk/misk.time/-force-utc-time-zone-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk/misk.time/-force-utc-time-zone-service/-force-utc-time-zone-service/","text":"// misk / misk.time / ForceUtcTimeZoneService / ForceUtcTimeZoneService ForceUtcTimeZoneService \u00b6 [jvm]\\ @Inject fun ForceUtcTimeZoneService ()","title":"ForceUtcTimeZoneService - Misk"},{"location":"0.x/misk/misk.time/-force-utc-time-zone-service/-force-utc-time-zone-service/#forceutctimezoneservice","text":"[jvm]\\ @Inject fun ForceUtcTimeZoneService ()","title":"ForceUtcTimeZoneService"},{"location":"0.x/misk/misk.tracing/","text":"// misk / misk.tracing Package misk.tracing \u00b6 Functions \u00b6 Name Summary trace [jvm] fun < T > Tracer. trace (spanName: String , tags: Map < String , String > = mapOf(), f: () -> T ): T trace traces the given function with the specific span name and optional tags traceWithNewRootSpan [jvm] fun < T > Tracer. traceWithNewRootSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithNewRootSpan traces the given function, always starting a new root span traceWithSpan [jvm] fun < T > Tracer. traceWithSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithSpan traces the given function, passing the span into the function. If a span is already active, the new span is made a child of the existing.","title":"Package misk.tracing - Misk"},{"location":"0.x/misk/misk.tracing/#package-misktracing","text":"","title":"Package misk.tracing"},{"location":"0.x/misk/misk.tracing/#functions","text":"Name Summary trace [jvm] fun < T > Tracer. trace (spanName: String , tags: Map < String , String > = mapOf(), f: () -> T ): T trace traces the given function with the specific span name and optional tags traceWithNewRootSpan [jvm] fun < T > Tracer. traceWithNewRootSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithNewRootSpan traces the given function, always starting a new root span traceWithSpan [jvm] fun < T > Tracer. traceWithSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithSpan traces the given function, passing the span into the function. If a span is already active, the new span is made a child of the existing.","title":"Functions"},{"location":"0.x/misk/misk.tracing/trace-with-new-root-span/","text":"// misk / misk.tracing / traceWithNewRootSpan traceWithNewRootSpan \u00b6 [jvm]\\ fun < T > Tracer. traceWithNewRootSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithNewRootSpan traces the given function, always starting a new root span","title":"traceWithNewRootSpan - Misk"},{"location":"0.x/misk/misk.tracing/trace-with-new-root-span/#tracewithnewrootspan","text":"[jvm]\\ fun < T > Tracer. traceWithNewRootSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithNewRootSpan traces the given function, always starting a new root span","title":"traceWithNewRootSpan"},{"location":"0.x/misk/misk.tracing/trace-with-span/","text":"// misk / misk.tracing / traceWithSpan traceWithSpan \u00b6 [jvm]\\ fun < T > Tracer. traceWithSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithSpan traces the given function, passing the span into the function. If a span is already active, the new span is made a child of the existing.","title":"traceWithSpan - Misk"},{"location":"0.x/misk/misk.tracing/trace-with-span/#tracewithspan","text":"[jvm]\\ fun < T > Tracer. traceWithSpan (spanName: String , tags: Map < String , String > = mapOf(), f: (Span) -> T ): T traceWithSpan traces the given function, passing the span into the function. If a span is already active, the new span is made a child of the existing.","title":"traceWithSpan"},{"location":"0.x/misk/misk.tracing/trace/","text":"// misk / misk.tracing / trace trace \u00b6 [jvm]\\ fun < T > Tracer. trace (spanName: String , tags: Map < String , String > = mapOf(), f: () -> T ): T trace traces the given function with the specific span name and optional tags","title":"trace - Misk"},{"location":"0.x/misk/misk.tracing/trace/#trace","text":"[jvm]\\ fun < T > Tracer. trace (spanName: String , tags: Map < String , String > = mapOf(), f: () -> T ): T trace traces the given function with the specific span name and optional tags","title":"trace"},{"location":"0.x/misk/misk.web/","text":"// misk / misk.web Package misk.web \u00b6 Types \u00b6 Name Summary CorsConfig [jvm] data class CorsConfig (allowedOrigins: Array < String >, allowedMethods: Array < String >, allowedHeaders: Array < String >, allowCredentials: Boolean , preflightMaxAge: String , chainPreflight: Boolean , exposedHeaders: Array < String >) DispatchMechanism [jvm] enum DispatchMechanism : Enum < DispatchMechanism > Describes how an action is processed. This is like the HTTP method but has special cases for web sockets and gRPC. These protocols layer on top of HTTP methods and have different semantics. FeatureBinding [jvm] interface FeatureBinding Binds an HTTP call to a WebAction function. HttpCall [jvm] interface HttpCall A live HTTP call from a client for use by a chain of network interceptors. MiskWebFormBuilder [jvm] class MiskWebFormBuilder Provides a mapping from field name to Type definition given a KType. Useful for processes that want to have a schema definition of a type. For example: used by the WebActions admin dashboard tab to show a statically typed form containing request fields for developers to fill out. Currently only supports Wire request type messages; non-Wire messages return an empty mapping. MiskWebModule [jvm] class MiskWebModule (config: WebConfig , jettyDependsOn: List <Key<out Service>>) : KAbstractModule NetworkChain [jvm] interface NetworkChain NetworkInterceptor [jvm] interface NetworkInterceptor PathPattern [jvm] class PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean ) : Comparable < PathPattern > A path with placeholders for variables. Paths may be constant like /app/home/ or dynamic like /user/{username}. Variables are delimited by curly braces and may specify an optional regex like this: {username:[a-z]+}. If no regex is specified the variable is a sequence of non-\u2018/\u2019 characters. SocketAddress [jvm] sealed class SocketAddress Information about the socket on which a HTTP call arrived. WebActionSeedDataTransformerFactory [jvm] interface WebActionSeedDataTransformerFactory Creates a SeedDataTransformer for a specific web Action . WebConfig [jvm] data class WebConfig (port: Int , idle_timeout: Long , health_port: Int , host: String ?, ssl: WebSslConfig ?, unix_domain_socket: WebUnixDomainSocketConfig ?, http2: Boolean , selectors: Int ?, acceptors: Int ?, queue_size: Int ?, jetty_max_thread_pool_size: Int , jetty_min_thread_pool_size: Int , jetty_max_thread_pool_queue_size: Int , enable_thread_pool_queue_metrics: Boolean , action_exception_log_level: ActionExceptionLogLevelConfig , jetty_max_concurrent_streams: Int ?, close_connection_percent: Double , gzip: Boolean , minGzipSize: Int , cors: Map < String , CorsConfig >, concurrency_limiter_disabled: Boolean , concurrency_limiter_log_level: Level, shutdown_sleep_ms: Int ) : Config WebSslConfig [jvm] data class WebSslConfig (port: Int , cert_store: CertStoreConfig, trust_store: TrustStoreConfig?, mutual_auth: WebSslConfig.MutualAuth , cipher_compatibility: WebSslConfig.CipherCompatibility ) WebUnixDomainSocketConfig [jvm] data class WebUnixDomainSocketConfig (path: String , h2c: Boolean ?) Functions \u00b6 Name Summary readUtf8 [jvm] fun Response<*>. readUtf8 (): String toMisk [jvm] fun Response. toMisk (): Response<ResponseBody> toResponseBody [jvm] fun String . toResponseBody (): ResponseBody Returns a ResponseBody that writes this out as UTF-8.","title":"Package misk.web - Misk"},{"location":"0.x/misk/misk.web/#package-miskweb","text":"","title":"Package misk.web"},{"location":"0.x/misk/misk.web/#types","text":"Name Summary CorsConfig [jvm] data class CorsConfig (allowedOrigins: Array < String >, allowedMethods: Array < String >, allowedHeaders: Array < String >, allowCredentials: Boolean , preflightMaxAge: String , chainPreflight: Boolean , exposedHeaders: Array < String >) DispatchMechanism [jvm] enum DispatchMechanism : Enum < DispatchMechanism > Describes how an action is processed. This is like the HTTP method but has special cases for web sockets and gRPC. These protocols layer on top of HTTP methods and have different semantics. FeatureBinding [jvm] interface FeatureBinding Binds an HTTP call to a WebAction function. HttpCall [jvm] interface HttpCall A live HTTP call from a client for use by a chain of network interceptors. MiskWebFormBuilder [jvm] class MiskWebFormBuilder Provides a mapping from field name to Type definition given a KType. Useful for processes that want to have a schema definition of a type. For example: used by the WebActions admin dashboard tab to show a statically typed form containing request fields for developers to fill out. Currently only supports Wire request type messages; non-Wire messages return an empty mapping. MiskWebModule [jvm] class MiskWebModule (config: WebConfig , jettyDependsOn: List <Key<out Service>>) : KAbstractModule NetworkChain [jvm] interface NetworkChain NetworkInterceptor [jvm] interface NetworkInterceptor PathPattern [jvm] class PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean ) : Comparable < PathPattern > A path with placeholders for variables. Paths may be constant like /app/home/ or dynamic like /user/{username}. Variables are delimited by curly braces and may specify an optional regex like this: {username:[a-z]+}. If no regex is specified the variable is a sequence of non-\u2018/\u2019 characters. SocketAddress [jvm] sealed class SocketAddress Information about the socket on which a HTTP call arrived. WebActionSeedDataTransformerFactory [jvm] interface WebActionSeedDataTransformerFactory Creates a SeedDataTransformer for a specific web Action . WebConfig [jvm] data class WebConfig (port: Int , idle_timeout: Long , health_port: Int , host: String ?, ssl: WebSslConfig ?, unix_domain_socket: WebUnixDomainSocketConfig ?, http2: Boolean , selectors: Int ?, acceptors: Int ?, queue_size: Int ?, jetty_max_thread_pool_size: Int , jetty_min_thread_pool_size: Int , jetty_max_thread_pool_queue_size: Int , enable_thread_pool_queue_metrics: Boolean , action_exception_log_level: ActionExceptionLogLevelConfig , jetty_max_concurrent_streams: Int ?, close_connection_percent: Double , gzip: Boolean , minGzipSize: Int , cors: Map < String , CorsConfig >, concurrency_limiter_disabled: Boolean , concurrency_limiter_log_level: Level, shutdown_sleep_ms: Int ) : Config WebSslConfig [jvm] data class WebSslConfig (port: Int , cert_store: CertStoreConfig, trust_store: TrustStoreConfig?, mutual_auth: WebSslConfig.MutualAuth , cipher_compatibility: WebSslConfig.CipherCompatibility ) WebUnixDomainSocketConfig [jvm] data class WebUnixDomainSocketConfig (path: String , h2c: Boolean ?)","title":"Types"},{"location":"0.x/misk/misk.web/#functions","text":"Name Summary readUtf8 [jvm] fun Response<*>. readUtf8 (): String toMisk [jvm] fun Response. toMisk (): Response<ResponseBody> toResponseBody [jvm] fun String . toResponseBody (): ResponseBody Returns a ResponseBody that writes this out as UTF-8.","title":"Functions"},{"location":"0.x/misk/misk.web/read-utf8/","text":"// misk / misk.web / readUtf8 readUtf8 \u00b6 [jvm]\\ fun Response<*>. readUtf8 (): String","title":"readUtf8 - Misk"},{"location":"0.x/misk/misk.web/read-utf8/#readutf8","text":"[jvm]\\ fun Response<*>. readUtf8 (): String","title":"readUtf8"},{"location":"0.x/misk/misk.web/to-misk/","text":"// misk / misk.web / toMisk toMisk \u00b6 [jvm]\\ fun Response. toMisk (): Response<ResponseBody>","title":"toMisk - Misk"},{"location":"0.x/misk/misk.web/to-misk/#tomisk","text":"[jvm]\\ fun Response. toMisk (): Response<ResponseBody>","title":"toMisk"},{"location":"0.x/misk/misk.web/to-response-body/","text":"// misk / misk.web / toResponseBody toResponseBody \u00b6 [jvm]\\ fun String . toResponseBody (): ResponseBody Returns a ResponseBody that writes this out as UTF-8.","title":"toResponseBody - Misk"},{"location":"0.x/misk/misk.web/to-response-body/#toresponsebody","text":"[jvm]\\ fun String . toResponseBody (): ResponseBody Returns a ResponseBody that writes this out as UTF-8.","title":"toResponseBody"},{"location":"0.x/misk/misk.web/-cors-config/","text":"// misk / misk.web / CorsConfig CorsConfig \u00b6 [jvm]\\ data class CorsConfig (allowedOrigins: Array < String >, allowedMethods: Array < String >, allowedHeaders: Array < String >, allowCredentials: Boolean , preflightMaxAge: String , chainPreflight: Boolean , exposedHeaders: Array < String >) Properties \u00b6 Name Summary allowCredentials [jvm] val allowCredentials : Boolean = true A boolean indicating if the resource allows requests with credentials. allowedHeaders [jvm] val allowedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be specified when accessing the resources. allowedMethods [jvm] val allowedMethods : Array < String > A comma separated list of HTTP methods that are allowed to be used when accessing the resources. allowedOrigins [jvm] val allowedOrigins : Array < String > A comma separated list of origins that are allowed to access the resources. chainPreflight [jvm] val chainPreflight : Boolean = true True if preflight requests are chained to their target resource for normal handling (as an OPTION request). exposedHeaders [jvm] val exposedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be exposed on the client. preflightMaxAge [jvm] val preflightMaxAge : String The number of seconds that preflight requests can be cached by the client.","title":"CorsConfig - Misk"},{"location":"0.x/misk/misk.web/-cors-config/#corsconfig","text":"[jvm]\\ data class CorsConfig (allowedOrigins: Array < String >, allowedMethods: Array < String >, allowedHeaders: Array < String >, allowCredentials: Boolean , preflightMaxAge: String , chainPreflight: Boolean , exposedHeaders: Array < String >)","title":"CorsConfig"},{"location":"0.x/misk/misk.web/-cors-config/#properties","text":"Name Summary allowCredentials [jvm] val allowCredentials : Boolean = true A boolean indicating if the resource allows requests with credentials. allowedHeaders [jvm] val allowedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be specified when accessing the resources. allowedMethods [jvm] val allowedMethods : Array < String > A comma separated list of HTTP methods that are allowed to be used when accessing the resources. allowedOrigins [jvm] val allowedOrigins : Array < String > A comma separated list of origins that are allowed to access the resources. chainPreflight [jvm] val chainPreflight : Boolean = true True if preflight requests are chained to their target resource for normal handling (as an OPTION request). exposedHeaders [jvm] val exposedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be exposed on the client. preflightMaxAge [jvm] val preflightMaxAge : String The number of seconds that preflight requests can be cached by the client.","title":"Properties"},{"location":"0.x/misk/misk.web/-cors-config/-cors-config/","text":"// misk / misk.web / CorsConfig / CorsConfig CorsConfig \u00b6 [jvm]\\ fun CorsConfig (allowedOrigins: Array < String > = arrayOf(\u201c*\u201d), allowedMethods: Array < String > = arrayOf(\u201cGET\u201d, \u201cPOST\u201d, \u201cHEAD\u201d), allowedHeaders: Array < String > = arrayOf( \u201cX-Requested-With\u201d, \u201cContent-Type\u201d, \u201cAccept\u201d, \u201cOrigin\u201d ), allowCredentials: Boolean = true, preflightMaxAge: String = \u201c1800\u201d, chainPreflight: Boolean = true, exposedHeaders: Array < String > = arrayOf())","title":"CorsConfig - Misk"},{"location":"0.x/misk/misk.web/-cors-config/-cors-config/#corsconfig","text":"[jvm]\\ fun CorsConfig (allowedOrigins: Array < String > = arrayOf(\u201c*\u201d), allowedMethods: Array < String > = arrayOf(\u201cGET\u201d, \u201cPOST\u201d, \u201cHEAD\u201d), allowedHeaders: Array < String > = arrayOf( \u201cX-Requested-With\u201d, \u201cContent-Type\u201d, \u201cAccept\u201d, \u201cOrigin\u201d ), allowCredentials: Boolean = true, preflightMaxAge: String = \u201c1800\u201d, chainPreflight: Boolean = true, exposedHeaders: Array < String > = arrayOf())","title":"CorsConfig"},{"location":"0.x/misk/misk.web/-cors-config/allow-credentials/","text":"// misk / misk.web / CorsConfig / allowCredentials allowCredentials \u00b6 [jvm]\\ val allowCredentials : Boolean = true A boolean indicating if the resource allows requests with credentials.","title":"allowCredentials - Misk"},{"location":"0.x/misk/misk.web/-cors-config/allow-credentials/#allowcredentials","text":"[jvm]\\ val allowCredentials : Boolean = true A boolean indicating if the resource allows requests with credentials.","title":"allowCredentials"},{"location":"0.x/misk/misk.web/-cors-config/allowed-headers/","text":"// misk / misk.web / CorsConfig / allowedHeaders allowedHeaders \u00b6 [jvm]\\ val allowedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be specified when accessing the resources.","title":"allowedHeaders - Misk"},{"location":"0.x/misk/misk.web/-cors-config/allowed-headers/#allowedheaders","text":"[jvm]\\ val allowedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be specified when accessing the resources.","title":"allowedHeaders"},{"location":"0.x/misk/misk.web/-cors-config/allowed-methods/","text":"// misk / misk.web / CorsConfig / allowedMethods allowedMethods \u00b6 [jvm]\\ val allowedMethods : Array < String > A comma separated list of HTTP methods that are allowed to be used when accessing the resources.","title":"allowedMethods - Misk"},{"location":"0.x/misk/misk.web/-cors-config/allowed-methods/#allowedmethods","text":"[jvm]\\ val allowedMethods : Array < String > A comma separated list of HTTP methods that are allowed to be used when accessing the resources.","title":"allowedMethods"},{"location":"0.x/misk/misk.web/-cors-config/allowed-origins/","text":"// misk / misk.web / CorsConfig / allowedOrigins allowedOrigins \u00b6 [jvm]\\ val allowedOrigins : Array < String > A comma separated list of origins that are allowed to access the resources.","title":"allowedOrigins - Misk"},{"location":"0.x/misk/misk.web/-cors-config/allowed-origins/#allowedorigins","text":"[jvm]\\ val allowedOrigins : Array < String > A comma separated list of origins that are allowed to access the resources.","title":"allowedOrigins"},{"location":"0.x/misk/misk.web/-cors-config/chain-preflight/","text":"// misk / misk.web / CorsConfig / chainPreflight chainPreflight \u00b6 [jvm]\\ val chainPreflight : Boolean = true True if preflight requests are chained to their target resource for normal handling (as an OPTION request).","title":"chainPreflight - Misk"},{"location":"0.x/misk/misk.web/-cors-config/chain-preflight/#chainpreflight","text":"[jvm]\\ val chainPreflight : Boolean = true True if preflight requests are chained to their target resource for normal handling (as an OPTION request).","title":"chainPreflight"},{"location":"0.x/misk/misk.web/-cors-config/exposed-headers/","text":"// misk / misk.web / CorsConfig / exposedHeaders exposedHeaders \u00b6 [jvm]\\ val exposedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be exposed on the client.","title":"exposedHeaders - Misk"},{"location":"0.x/misk/misk.web/-cors-config/exposed-headers/#exposedheaders","text":"[jvm]\\ val exposedHeaders : Array < String > A comma separated list of HTTP headers that are allowed to be exposed on the client.","title":"exposedHeaders"},{"location":"0.x/misk/misk.web/-cors-config/preflight-max-age/","text":"// misk / misk.web / CorsConfig / preflightMaxAge preflightMaxAge \u00b6 [jvm]\\ val preflightMaxAge : String The number of seconds that preflight requests can be cached by the client.","title":"preflightMaxAge - Misk"},{"location":"0.x/misk/misk.web/-cors-config/preflight-max-age/#preflightmaxage","text":"[jvm]\\ val preflightMaxAge : String The number of seconds that preflight requests can be cached by the client.","title":"preflightMaxAge"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/","text":"// misk / misk.web / DispatchMechanism DispatchMechanism \u00b6 [jvm]\\ enum DispatchMechanism : Enum < DispatchMechanism > Describes how an action is processed. This is like the HTTP method but has special cases for web sockets and gRPC. These protocols layer on top of HTTP methods and have different semantics. Entries \u00b6 WEBSOCKET [jvm] WEBSOCKET () GRPC [jvm] GRPC () DELETE [jvm] DELETE () PUT [jvm] PUT () PATCH [jvm] PATCH () POST [jvm] POST () GET [jvm] GET () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"DispatchMechanism - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/#dispatchmechanism","text":"[jvm]\\ enum DispatchMechanism : Enum < DispatchMechanism > Describes how an action is processed. This is like the HTTP method but has special cases for web sockets and gRPC. These protocols layer on top of HTTP methods and have different semantics.","title":"DispatchMechanism"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/#entries","text":"WEBSOCKET [jvm] WEBSOCKET () GRPC [jvm] GRPC () DELETE [jvm] DELETE () PUT [jvm] PUT () PATCH [jvm] PATCH () POST [jvm] POST () GET [jvm] GET ()","title":"Entries"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/method/","text":"// misk / misk.web / DispatchMechanism / method method \u00b6 [jvm]\\ val method : String Returns the method used when a call entered the service. This can be misleading: web sockets don\u2019t behave like normal GETs (they are upgraded), and GRPC calls don\u2019t behave like normal POSTS (they are duplex).","title":"method - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/method/#method","text":"[jvm]\\ val method : String Returns the method used when a call entered the service. This can be misleading: web sockets don\u2019t behave like normal GETs (they are upgraded), and GRPC calls don\u2019t behave like normal POSTS (they are duplex).","title":"method"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-d-e-l-e-t-e/","text":"// misk / misk.web / DispatchMechanism / DELETE DELETE \u00b6 [jvm]\\ DELETE () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"DELETE - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-d-e-l-e-t-e/#delete","text":"[jvm]\\ DELETE ()","title":"DELETE"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-d-e-l-e-t-e/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-g-e-t/","text":"// misk / misk.web / DispatchMechanism / GET GET \u00b6 [jvm]\\ GET () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"GET - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-g-e-t/#get","text":"[jvm]\\ GET ()","title":"GET"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-g-e-t/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-g-r-p-c/","text":"// misk / misk.web / DispatchMechanism / GRPC GRPC \u00b6 [jvm]\\ GRPC () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"GRPC - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-g-r-p-c/#grpc","text":"[jvm]\\ GRPC ()","title":"GRPC"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-g-r-p-c/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-a-t-c-h/","text":"// misk / misk.web / DispatchMechanism / PATCH PATCH \u00b6 [jvm]\\ PATCH () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PATCH - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-a-t-c-h/#patch","text":"[jvm]\\ PATCH ()","title":"PATCH"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-a-t-c-h/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-o-s-t/","text":"// misk / misk.web / DispatchMechanism / POST POST \u00b6 [jvm]\\ POST () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"POST - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-o-s-t/#post","text":"[jvm]\\ POST ()","title":"POST"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-o-s-t/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-u-t/","text":"// misk / misk.web / DispatchMechanism / PUT PUT \u00b6 [jvm]\\ PUT () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PUT - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-u-t/#put","text":"[jvm]\\ PUT ()","title":"PUT"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-p-u-t/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-w-e-b-s-o-c-k-e-t/","text":"// misk / misk.web / DispatchMechanism / WEBSOCKET WEBSOCKET \u00b6 [jvm]\\ WEBSOCKET () Properties \u00b6 Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"WEBSOCKET - Misk"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-w-e-b-s-o-c-k-e-t/#websocket","text":"[jvm]\\ WEBSOCKET ()","title":"WEBSOCKET"},{"location":"0.x/misk/misk.web/-dispatch-mechanism/-w-e-b-s-o-c-k-e-t/#properties","text":"Name Summary method [jvm] val method : String Returns the method used when a call entered the service. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-feature-binding/","text":"// misk / misk.web / FeatureBinding FeatureBinding \u00b6 [jvm]\\ interface FeatureBinding Binds an HTTP call to a WebAction function. Each web action has several features: An optional HTTP request body. Some HTTP methods (GET, HEAD) don\u2019t have a request body. An HTTP response body. Always present but possibly empty. Zero or more function parameters. An optional function return value. Functions that return Unit do not have a return value. Each bindings claims one or more features that it is responsible for. Some examples: A path parameter binding sets parameters 1 and 2 by parsing the request path. The request marshaller decodes the request body and sets it as @RequestBody parameter 3. The response marshaller takes the return value and encodes it as the response stream. A binding can claim multiple features. beforeCall is invoked if any features are claimed, and afterCall is only invoked if the return value is claimed. Creating Bindings \u00b6 Each factory is executed once for each endpoint at service startup time. Factories should interrogate the function and claim whichever features that intend to bind. This happens early so Misk can validate that every feature is bound exactly once. Factories that return null must make no claims. If no claims are made then no binding is executed. Misk will validate that every feature is claimed exactly once. If a feature is unclaimed that is a fatal error and the service will not be started. Binding Execution \u00b6 Once a functions bindings have been created and validated, each binding will be executed once before and once after every each HTTP call. In this method it must bind the features it claimed by providing parameters, reading the request body, writing the response body, or taking the return value. Types \u00b6 Name Summary Claimer [jvm] interface Claimer Factory [jvm] interface Factory Subject [jvm] interface Subject Functions \u00b6 Name Summary afterCall [jvm] open fun afterCall (subject: FeatureBinding.Subject ) beforeCall [jvm] open fun beforeCall (subject: FeatureBinding.Subject )","title":"FeatureBinding - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/#featurebinding","text":"[jvm]\\ interface FeatureBinding Binds an HTTP call to a WebAction function. Each web action has several features: An optional HTTP request body. Some HTTP methods (GET, HEAD) don\u2019t have a request body. An HTTP response body. Always present but possibly empty. Zero or more function parameters. An optional function return value. Functions that return Unit do not have a return value. Each bindings claims one or more features that it is responsible for. Some examples: A path parameter binding sets parameters 1 and 2 by parsing the request path. The request marshaller decodes the request body and sets it as @RequestBody parameter 3. The response marshaller takes the return value and encodes it as the response stream. A binding can claim multiple features. beforeCall is invoked if any features are claimed, and afterCall is only invoked if the return value is claimed.","title":"FeatureBinding"},{"location":"0.x/misk/misk.web/-feature-binding/#creating-bindings","text":"Each factory is executed once for each endpoint at service startup time. Factories should interrogate the function and claim whichever features that intend to bind. This happens early so Misk can validate that every feature is bound exactly once. Factories that return null must make no claims. If no claims are made then no binding is executed. Misk will validate that every feature is claimed exactly once. If a feature is unclaimed that is a fatal error and the service will not be started.","title":"Creating Bindings"},{"location":"0.x/misk/misk.web/-feature-binding/#binding-execution","text":"Once a functions bindings have been created and validated, each binding will be executed once before and once after every each HTTP call. In this method it must bind the features it claimed by providing parameters, reading the request body, writing the response body, or taking the return value.","title":"Binding Execution"},{"location":"0.x/misk/misk.web/-feature-binding/#types","text":"Name Summary Claimer [jvm] interface Claimer Factory [jvm] interface Factory Subject [jvm] interface Subject","title":"Types"},{"location":"0.x/misk/misk.web/-feature-binding/#functions","text":"Name Summary afterCall [jvm] open fun afterCall (subject: FeatureBinding.Subject ) beforeCall [jvm] open fun beforeCall (subject: FeatureBinding.Subject )","title":"Functions"},{"location":"0.x/misk/misk.web/-feature-binding/after-call/","text":"// misk / misk.web / FeatureBinding / afterCall afterCall \u00b6 [jvm]\\ open fun afterCall (subject: FeatureBinding.Subject )","title":"afterCall - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/after-call/#aftercall","text":"[jvm]\\ open fun afterCall (subject: FeatureBinding.Subject )","title":"afterCall"},{"location":"0.x/misk/misk.web/-feature-binding/before-call/","text":"// misk / misk.web / FeatureBinding / beforeCall beforeCall \u00b6 [jvm]\\ open fun beforeCall (subject: FeatureBinding.Subject )","title":"beforeCall - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/before-call/#beforecall","text":"[jvm]\\ open fun beforeCall (subject: FeatureBinding.Subject )","title":"beforeCall"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/","text":"// misk / misk.web / FeatureBinding / Claimer Claimer \u00b6 [jvm]\\ interface Claimer Functions \u00b6 Name Summary claimParameter [jvm] abstract fun claimParameter (index: Int ) abstract fun claimParameter (parameter: KParameter ) claimRequestBody [jvm] abstract fun claimRequestBody () claimResponseBody [jvm] abstract fun claimResponseBody () claimReturnValue [jvm] abstract fun claimReturnValue ()","title":"Claimer - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/#claimer","text":"[jvm]\\ interface Claimer","title":"Claimer"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/#functions","text":"Name Summary claimParameter [jvm] abstract fun claimParameter (index: Int ) abstract fun claimParameter (parameter: KParameter ) claimRequestBody [jvm] abstract fun claimRequestBody () claimResponseBody [jvm] abstract fun claimResponseBody () claimReturnValue [jvm] abstract fun claimReturnValue ()","title":"Functions"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-parameter/","text":"// misk / misk.web / FeatureBinding / Claimer / claimParameter claimParameter \u00b6 [jvm]\\ abstract fun claimParameter (index: Int ) abstract fun claimParameter (parameter: KParameter )","title":"claimParameter - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-parameter/#claimparameter","text":"[jvm]\\ abstract fun claimParameter (index: Int ) abstract fun claimParameter (parameter: KParameter )","title":"claimParameter"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-request-body/","text":"// misk / misk.web / FeatureBinding / Claimer / claimRequestBody claimRequestBody \u00b6 [jvm]\\ abstract fun claimRequestBody ()","title":"claimRequestBody - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-request-body/#claimrequestbody","text":"[jvm]\\ abstract fun claimRequestBody ()","title":"claimRequestBody"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-response-body/","text":"// misk / misk.web / FeatureBinding / Claimer / claimResponseBody claimResponseBody \u00b6 [jvm]\\ abstract fun claimResponseBody ()","title":"claimResponseBody - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-response-body/#claimresponsebody","text":"[jvm]\\ abstract fun claimResponseBody ()","title":"claimResponseBody"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-return-value/","text":"// misk / misk.web / FeatureBinding / Claimer / claimReturnValue claimReturnValue \u00b6 [jvm]\\ abstract fun claimReturnValue ()","title":"claimReturnValue - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-claimer/claim-return-value/#claimreturnvalue","text":"[jvm]\\ abstract fun claimReturnValue ()","title":"claimReturnValue"},{"location":"0.x/misk/misk.web/-feature-binding/-factory/","text":"// misk / misk.web / FeatureBinding / Factory Factory \u00b6 [jvm]\\ interface Factory Functions \u00b6 Name Summary create [jvm] abstract fun create (action: Action , pathPattern: PathPattern , claimer: FeatureBinding.Claimer ): FeatureBinding ?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-factory/#factory","text":"[jvm]\\ interface Factory","title":"Factory"},{"location":"0.x/misk/misk.web/-feature-binding/-factory/#functions","text":"Name Summary create [jvm] abstract fun create (action: Action , pathPattern: PathPattern , claimer: FeatureBinding.Claimer ): FeatureBinding ?","title":"Functions"},{"location":"0.x/misk/misk.web/-feature-binding/-factory/create/","text":"// misk / misk.web / FeatureBinding / Factory / create create \u00b6 [jvm]\\ abstract fun create (action: Action , pathPattern: PathPattern , claimer: FeatureBinding.Claimer ): FeatureBinding ?","title":"create - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-factory/create/#create","text":"[jvm]\\ abstract fun create (action: Action , pathPattern: PathPattern , claimer: FeatureBinding.Claimer ): FeatureBinding ?","title":"create"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/","text":"// misk / misk.web / FeatureBinding / Subject Subject \u00b6 [jvm]\\ interface Subject Functions \u00b6 Name Summary setParameter [jvm] abstract fun setParameter (index: Int , value: Any ?) abstract fun setParameter (parameter: KParameter , value: Any ?) takeRequestBody [jvm] abstract fun takeRequestBody (): BufferedSource takeResponseBody [jvm] abstract fun takeResponseBody (): BufferedSink takeReturnValue [jvm] abstract fun takeReturnValue (): Any ? Properties \u00b6 Name Summary httpCall [jvm] abstract val httpCall : HttpCall pathMatcher [jvm] abstract val pathMatcher : Matcher webAction [jvm] abstract val webAction : WebAction","title":"Subject - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/#subject","text":"[jvm]\\ interface Subject","title":"Subject"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/#functions","text":"Name Summary setParameter [jvm] abstract fun setParameter (index: Int , value: Any ?) abstract fun setParameter (parameter: KParameter , value: Any ?) takeRequestBody [jvm] abstract fun takeRequestBody (): BufferedSource takeResponseBody [jvm] abstract fun takeResponseBody (): BufferedSink takeReturnValue [jvm] abstract fun takeReturnValue (): Any ?","title":"Functions"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/#properties","text":"Name Summary httpCall [jvm] abstract val httpCall : HttpCall pathMatcher [jvm] abstract val pathMatcher : Matcher webAction [jvm] abstract val webAction : WebAction","title":"Properties"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/http-call/","text":"// misk / misk.web / FeatureBinding / Subject / httpCall httpCall \u00b6 [jvm]\\ abstract val httpCall : HttpCall","title":"httpCall - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/http-call/#httpcall","text":"[jvm]\\ abstract val httpCall : HttpCall","title":"httpCall"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/path-matcher/","text":"// misk / misk.web / FeatureBinding / Subject / pathMatcher pathMatcher \u00b6 [jvm]\\ abstract val pathMatcher : Matcher","title":"pathMatcher - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/path-matcher/#pathmatcher","text":"[jvm]\\ abstract val pathMatcher : Matcher","title":"pathMatcher"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/set-parameter/","text":"// misk / misk.web / FeatureBinding / Subject / setParameter setParameter \u00b6 [jvm]\\ abstract fun setParameter (parameter: KParameter , value: Any ?) abstract fun setParameter (index: Int , value: Any ?)","title":"setParameter - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/set-parameter/#setparameter","text":"[jvm]\\ abstract fun setParameter (parameter: KParameter , value: Any ?) abstract fun setParameter (index: Int , value: Any ?)","title":"setParameter"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/take-request-body/","text":"// misk / misk.web / FeatureBinding / Subject / takeRequestBody takeRequestBody \u00b6 [jvm]\\ abstract fun takeRequestBody (): BufferedSource","title":"takeRequestBody - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/take-request-body/#takerequestbody","text":"[jvm]\\ abstract fun takeRequestBody (): BufferedSource","title":"takeRequestBody"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/take-response-body/","text":"// misk / misk.web / FeatureBinding / Subject / takeResponseBody takeResponseBody \u00b6 [jvm]\\ abstract fun takeResponseBody (): BufferedSink","title":"takeResponseBody - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/take-response-body/#takeresponsebody","text":"[jvm]\\ abstract fun takeResponseBody (): BufferedSink","title":"takeResponseBody"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/take-return-value/","text":"// misk / misk.web / FeatureBinding / Subject / takeReturnValue takeReturnValue \u00b6 [jvm]\\ abstract fun takeReturnValue (): Any ?","title":"takeReturnValue - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/take-return-value/#takereturnvalue","text":"[jvm]\\ abstract fun takeReturnValue (): Any ?","title":"takeReturnValue"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/web-action/","text":"// misk / misk.web / FeatureBinding / Subject / webAction webAction \u00b6 [jvm]\\ abstract val webAction : WebAction","title":"webAction - Misk"},{"location":"0.x/misk/misk.web/-feature-binding/-subject/web-action/#webaction","text":"[jvm]\\ abstract val webAction : WebAction","title":"webAction"},{"location":"0.x/misk/misk.web/-http-call/","text":"// misk / misk.web / HttpCall HttpCall \u00b6 [jvm]\\ interface HttpCall A live HTTP call from a client for use by a chain of network interceptors. Functions \u00b6 Name Summary accepts [jvm] open fun accepts (): List <MediaRange> addResponseHeaders [jvm] abstract fun addResponseHeaders (headers: Headers) asOkHttpRequest [jvm] open fun asOkHttpRequest (): Request computeRequestHeader [jvm] open fun computeRequestHeader (name: String , computeFn: ( String ?) -> Pair < String , String >?) Set or replaces an existing HTTP request header. contentType [jvm] open fun contentType (): MediaType? initWebSocketListener [jvm] abstract fun initWebSocketListener (webSocketListener: WebSocketListener) Set the call\u2019s web socket listener. This should only be called once, and only for web socket calls. putRequestBody [jvm] abstract fun putRequestBody (requestBody: BufferedSource) Changes this call so that the next call to takeRequestBody returns requestBody . Use this to apply filters such as decompression or metrics. putResponseBody [jvm] abstract fun putResponseBody (responseBody: BufferedSink) Changes this call so that the next call to takeResponseBody returns responseBody . Use this to apply filters such as decompression or metrics. putWebSocket [jvm] abstract fun putWebSocket (webSocket: WebSocket) Changes this call so that the next call to takeWebSocket returns webSocket . Use this to apply filters such as decompression or metrics. requireTrailers [jvm] abstract fun requireTrailers () Call this before the response body is written to make sure it is encoded in a way that\u2019ll permit trailers to be sent. This will do chunked encoding for HTTP/1. For HTTP/2 trailers are always permitted. It is an error to call this for web socket calls. setResponseHeader [jvm] abstract fun setResponseHeader (name: String , value: String ) setResponseTrailer [jvm] abstract fun setResponseTrailer (name: String , value: String ) Add a trailer. This requires that requireTrailers was called before the response body is written. setStatusCodes [jvm] abstract fun setStatusCodes (statusCode: Int , networkStatusCode: Int ) Set both the raw network status code and the meaningful status code that\u2019s recorded in metrics takeRequestBody [jvm] abstract fun takeRequestBody (): BufferedSource? Claim ownership of the request body stream. Returns null if the stream has already been claimed. Callers should read the HTTP request body or call putRequestBody to create a new chain with a request body that is unclaimed. takeResponseBody [jvm] abstract fun takeResponseBody (): BufferedSink? Claim ownership of the response body stream. Returns null if the stream has already been claimed. Callers should write the HTTP response body or call putRequestBody to create a new chain with a response body that is unclaimed. takeWebSocket [jvm] abstract fun takeWebSocket (): WebSocket? Claim ownership of the call\u2019s web socket. Properties \u00b6 Name Summary dispatchMechanism [jvm] abstract val dispatchMechanism : DispatchMechanism linkLayerLocalAddress [jvm] abstract val linkLayerLocalAddress : SocketAddress ? networkStatusCode [jvm] abstract val networkStatusCode : Int The HTTP status code actually sent over the network. For gRPC, this is always 200, even for errors, per the spec. requestHeaders [jvm] abstract var requestHeaders : Headers HTTP request headers that may be modified via interception. responseHeaders [jvm] abstract val responseHeaders : Headers statusCode [jvm] abstract var statusCode : Int Meaningful HTTP status about what actually happened. Not sent over the wire in the case of gRPC, which always returns HTTP 200 even for errors. url [jvm] abstract val url : HttpUrl Immutable information about the incoming HTTP request.","title":"HttpCall - Misk"},{"location":"0.x/misk/misk.web/-http-call/#httpcall","text":"[jvm]\\ interface HttpCall A live HTTP call from a client for use by a chain of network interceptors.","title":"HttpCall"},{"location":"0.x/misk/misk.web/-http-call/#functions","text":"Name Summary accepts [jvm] open fun accepts (): List <MediaRange> addResponseHeaders [jvm] abstract fun addResponseHeaders (headers: Headers) asOkHttpRequest [jvm] open fun asOkHttpRequest (): Request computeRequestHeader [jvm] open fun computeRequestHeader (name: String , computeFn: ( String ?) -> Pair < String , String >?) Set or replaces an existing HTTP request header. contentType [jvm] open fun contentType (): MediaType? initWebSocketListener [jvm] abstract fun initWebSocketListener (webSocketListener: WebSocketListener) Set the call\u2019s web socket listener. This should only be called once, and only for web socket calls. putRequestBody [jvm] abstract fun putRequestBody (requestBody: BufferedSource) Changes this call so that the next call to takeRequestBody returns requestBody . Use this to apply filters such as decompression or metrics. putResponseBody [jvm] abstract fun putResponseBody (responseBody: BufferedSink) Changes this call so that the next call to takeResponseBody returns responseBody . Use this to apply filters such as decompression or metrics. putWebSocket [jvm] abstract fun putWebSocket (webSocket: WebSocket) Changes this call so that the next call to takeWebSocket returns webSocket . Use this to apply filters such as decompression or metrics. requireTrailers [jvm] abstract fun requireTrailers () Call this before the response body is written to make sure it is encoded in a way that\u2019ll permit trailers to be sent. This will do chunked encoding for HTTP/1. For HTTP/2 trailers are always permitted. It is an error to call this for web socket calls. setResponseHeader [jvm] abstract fun setResponseHeader (name: String , value: String ) setResponseTrailer [jvm] abstract fun setResponseTrailer (name: String , value: String ) Add a trailer. This requires that requireTrailers was called before the response body is written. setStatusCodes [jvm] abstract fun setStatusCodes (statusCode: Int , networkStatusCode: Int ) Set both the raw network status code and the meaningful status code that\u2019s recorded in metrics takeRequestBody [jvm] abstract fun takeRequestBody (): BufferedSource? Claim ownership of the request body stream. Returns null if the stream has already been claimed. Callers should read the HTTP request body or call putRequestBody to create a new chain with a request body that is unclaimed. takeResponseBody [jvm] abstract fun takeResponseBody (): BufferedSink? Claim ownership of the response body stream. Returns null if the stream has already been claimed. Callers should write the HTTP response body or call putRequestBody to create a new chain with a response body that is unclaimed. takeWebSocket [jvm] abstract fun takeWebSocket (): WebSocket? Claim ownership of the call\u2019s web socket.","title":"Functions"},{"location":"0.x/misk/misk.web/-http-call/#properties","text":"Name Summary dispatchMechanism [jvm] abstract val dispatchMechanism : DispatchMechanism linkLayerLocalAddress [jvm] abstract val linkLayerLocalAddress : SocketAddress ? networkStatusCode [jvm] abstract val networkStatusCode : Int The HTTP status code actually sent over the network. For gRPC, this is always 200, even for errors, per the spec. requestHeaders [jvm] abstract var requestHeaders : Headers HTTP request headers that may be modified via interception. responseHeaders [jvm] abstract val responseHeaders : Headers statusCode [jvm] abstract var statusCode : Int Meaningful HTTP status about what actually happened. Not sent over the wire in the case of gRPC, which always returns HTTP 200 even for errors. url [jvm] abstract val url : HttpUrl Immutable information about the incoming HTTP request.","title":"Properties"},{"location":"0.x/misk/misk.web/-http-call/accepts/","text":"// misk / misk.web / HttpCall / accepts accepts \u00b6 [jvm]\\ open fun accepts (): List <MediaRange>","title":"accepts - Misk"},{"location":"0.x/misk/misk.web/-http-call/accepts/#accepts","text":"[jvm]\\ open fun accepts (): List <MediaRange>","title":"accepts"},{"location":"0.x/misk/misk.web/-http-call/add-response-headers/","text":"// misk / misk.web / HttpCall / addResponseHeaders addResponseHeaders \u00b6 [jvm]\\ abstract fun addResponseHeaders (headers: Headers)","title":"addResponseHeaders - Misk"},{"location":"0.x/misk/misk.web/-http-call/add-response-headers/#addresponseheaders","text":"[jvm]\\ abstract fun addResponseHeaders (headers: Headers)","title":"addResponseHeaders"},{"location":"0.x/misk/misk.web/-http-call/as-ok-http-request/","text":"// misk / misk.web / HttpCall / asOkHttpRequest asOkHttpRequest \u00b6 [jvm]\\ open fun asOkHttpRequest (): Request","title":"asOkHttpRequest - Misk"},{"location":"0.x/misk/misk.web/-http-call/as-ok-http-request/#asokhttprequest","text":"[jvm]\\ open fun asOkHttpRequest (): Request","title":"asOkHttpRequest"},{"location":"0.x/misk/misk.web/-http-call/compute-request-header/","text":"// misk / misk.web / HttpCall / computeRequestHeader computeRequestHeader \u00b6 [jvm]\\ open fun computeRequestHeader (name: String , computeFn: ( String ?) -> Pair < String , String >?) Set or replaces an existing HTTP request header.","title":"computeRequestHeader - Misk"},{"location":"0.x/misk/misk.web/-http-call/compute-request-header/#computerequestheader","text":"[jvm]\\ open fun computeRequestHeader (name: String , computeFn: ( String ?) -> Pair < String , String >?) Set or replaces an existing HTTP request header.","title":"computeRequestHeader"},{"location":"0.x/misk/misk.web/-http-call/content-type/","text":"// misk / misk.web / HttpCall / contentType contentType \u00b6 [jvm]\\ open fun contentType (): MediaType?","title":"contentType - Misk"},{"location":"0.x/misk/misk.web/-http-call/content-type/#contenttype","text":"[jvm]\\ open fun contentType (): MediaType?","title":"contentType"},{"location":"0.x/misk/misk.web/-http-call/dispatch-mechanism/","text":"// misk / misk.web / HttpCall / dispatchMechanism dispatchMechanism \u00b6 [jvm]\\ abstract val dispatchMechanism : DispatchMechanism","title":"dispatchMechanism - Misk"},{"location":"0.x/misk/misk.web/-http-call/dispatch-mechanism/#dispatchmechanism","text":"[jvm]\\ abstract val dispatchMechanism : DispatchMechanism","title":"dispatchMechanism"},{"location":"0.x/misk/misk.web/-http-call/init-web-socket-listener/","text":"// misk / misk.web / HttpCall / initWebSocketListener initWebSocketListener \u00b6 [jvm]\\ abstract fun initWebSocketListener (webSocketListener: WebSocketListener) Set the call\u2019s web socket listener. This should only be called once, and only for web socket calls.","title":"initWebSocketListener - Misk"},{"location":"0.x/misk/misk.web/-http-call/init-web-socket-listener/#initwebsocketlistener","text":"[jvm]\\ abstract fun initWebSocketListener (webSocketListener: WebSocketListener) Set the call\u2019s web socket listener. This should only be called once, and only for web socket calls.","title":"initWebSocketListener"},{"location":"0.x/misk/misk.web/-http-call/link-layer-local-address/","text":"// misk / misk.web / HttpCall / linkLayerLocalAddress linkLayerLocalAddress \u00b6 [jvm]\\ abstract val linkLayerLocalAddress : SocketAddress ?","title":"linkLayerLocalAddress - Misk"},{"location":"0.x/misk/misk.web/-http-call/link-layer-local-address/#linklayerlocaladdress","text":"[jvm]\\ abstract val linkLayerLocalAddress : SocketAddress ?","title":"linkLayerLocalAddress"},{"location":"0.x/misk/misk.web/-http-call/network-status-code/","text":"// misk / misk.web / HttpCall / networkStatusCode networkStatusCode \u00b6 [jvm]\\ abstract val networkStatusCode : Int The HTTP status code actually sent over the network. For gRPC, this is always 200, even for errors, per the spec.","title":"networkStatusCode - Misk"},{"location":"0.x/misk/misk.web/-http-call/network-status-code/#networkstatuscode","text":"[jvm]\\ abstract val networkStatusCode : Int The HTTP status code actually sent over the network. For gRPC, this is always 200, even for errors, per the spec.","title":"networkStatusCode"},{"location":"0.x/misk/misk.web/-http-call/put-request-body/","text":"// misk / misk.web / HttpCall / putRequestBody putRequestBody \u00b6 [jvm]\\ abstract fun putRequestBody (requestBody: BufferedSource) Changes this call so that the next call to takeRequestBody returns requestBody . Use this to apply filters such as decompression or metrics. This may only be called on calls whose request body has been taken. Otherwise that would be leaked.","title":"putRequestBody - Misk"},{"location":"0.x/misk/misk.web/-http-call/put-request-body/#putrequestbody","text":"[jvm]\\ abstract fun putRequestBody (requestBody: BufferedSource) Changes this call so that the next call to takeRequestBody returns requestBody . Use this to apply filters such as decompression or metrics. This may only be called on calls whose request body has been taken. Otherwise that would be leaked.","title":"putRequestBody"},{"location":"0.x/misk/misk.web/-http-call/put-response-body/","text":"// misk / misk.web / HttpCall / putResponseBody putResponseBody \u00b6 [jvm]\\ abstract fun putResponseBody (responseBody: BufferedSink) Changes this call so that the next call to takeResponseBody returns responseBody . Use this to apply filters such as decompression or metrics. This may only be called on calls whose response body has been taken. Otherwise that would be leaked.","title":"putResponseBody - Misk"},{"location":"0.x/misk/misk.web/-http-call/put-response-body/#putresponsebody","text":"[jvm]\\ abstract fun putResponseBody (responseBody: BufferedSink) Changes this call so that the next call to takeResponseBody returns responseBody . Use this to apply filters such as decompression or metrics. This may only be called on calls whose response body has been taken. Otherwise that would be leaked.","title":"putResponseBody"},{"location":"0.x/misk/misk.web/-http-call/put-web-socket/","text":"// misk / misk.web / HttpCall / putWebSocket putWebSocket \u00b6 [jvm]\\ abstract fun putWebSocket (webSocket: WebSocket) Changes this call so that the next call to takeWebSocket returns webSocket . Use this to apply filters such as decompression or metrics. This may only be called on calls whose web socket has been taken. Otherwise that would be leaked.","title":"putWebSocket - Misk"},{"location":"0.x/misk/misk.web/-http-call/put-web-socket/#putwebsocket","text":"[jvm]\\ abstract fun putWebSocket (webSocket: WebSocket) Changes this call so that the next call to takeWebSocket returns webSocket . Use this to apply filters such as decompression or metrics. This may only be called on calls whose web socket has been taken. Otherwise that would be leaked.","title":"putWebSocket"},{"location":"0.x/misk/misk.web/-http-call/request-headers/","text":"// misk / misk.web / HttpCall / requestHeaders requestHeaders \u00b6 [jvm]\\ abstract var requestHeaders : Headers HTTP request headers that may be modified via interception.","title":"requestHeaders - Misk"},{"location":"0.x/misk/misk.web/-http-call/request-headers/#requestheaders","text":"[jvm]\\ abstract var requestHeaders : Headers HTTP request headers that may be modified via interception.","title":"requestHeaders"},{"location":"0.x/misk/misk.web/-http-call/require-trailers/","text":"// misk / misk.web / HttpCall / requireTrailers requireTrailers \u00b6 [jvm]\\ abstract fun requireTrailers () Call this before the response body is written to make sure it is encoded in a way that\u2019ll permit trailers to be sent. This will do chunked encoding for HTTP/1. For HTTP/2 trailers are always permitted. It is an error to call this for web socket calls.","title":"requireTrailers - Misk"},{"location":"0.x/misk/misk.web/-http-call/require-trailers/#requiretrailers","text":"[jvm]\\ abstract fun requireTrailers () Call this before the response body is written to make sure it is encoded in a way that\u2019ll permit trailers to be sent. This will do chunked encoding for HTTP/1. For HTTP/2 trailers are always permitted. It is an error to call this for web socket calls.","title":"requireTrailers"},{"location":"0.x/misk/misk.web/-http-call/response-headers/","text":"// misk / misk.web / HttpCall / responseHeaders responseHeaders \u00b6 [jvm]\\ abstract val responseHeaders : Headers","title":"responseHeaders - Misk"},{"location":"0.x/misk/misk.web/-http-call/response-headers/#responseheaders","text":"[jvm]\\ abstract val responseHeaders : Headers","title":"responseHeaders"},{"location":"0.x/misk/misk.web/-http-call/set-response-header/","text":"// misk / misk.web / HttpCall / setResponseHeader setResponseHeader \u00b6 [jvm]\\ abstract fun setResponseHeader (name: String , value: String )","title":"setResponseHeader - Misk"},{"location":"0.x/misk/misk.web/-http-call/set-response-header/#setresponseheader","text":"[jvm]\\ abstract fun setResponseHeader (name: String , value: String )","title":"setResponseHeader"},{"location":"0.x/misk/misk.web/-http-call/set-response-trailer/","text":"// misk / misk.web / HttpCall / setResponseTrailer setResponseTrailer \u00b6 [jvm]\\ abstract fun setResponseTrailer (name: String , value: String ) Add a trailer. This requires that requireTrailers was called before the response body is written.","title":"setResponseTrailer - Misk"},{"location":"0.x/misk/misk.web/-http-call/set-response-trailer/#setresponsetrailer","text":"[jvm]\\ abstract fun setResponseTrailer (name: String , value: String ) Add a trailer. This requires that requireTrailers was called before the response body is written.","title":"setResponseTrailer"},{"location":"0.x/misk/misk.web/-http-call/set-status-codes/","text":"// misk / misk.web / HttpCall / setStatusCodes setStatusCodes \u00b6 [jvm]\\ abstract fun setStatusCodes (statusCode: Int , networkStatusCode: Int ) Set both the raw network status code and the meaningful status code that\u2019s recorded in metrics","title":"setStatusCodes - Misk"},{"location":"0.x/misk/misk.web/-http-call/set-status-codes/#setstatuscodes","text":"[jvm]\\ abstract fun setStatusCodes (statusCode: Int , networkStatusCode: Int ) Set both the raw network status code and the meaningful status code that\u2019s recorded in metrics","title":"setStatusCodes"},{"location":"0.x/misk/misk.web/-http-call/status-code/","text":"// misk / misk.web / HttpCall / statusCode statusCode \u00b6 [jvm]\\ abstract var statusCode : Int Meaningful HTTP status about what actually happened. Not sent over the wire in the case of gRPC, which always returns HTTP 200 even for errors.","title":"statusCode - Misk"},{"location":"0.x/misk/misk.web/-http-call/status-code/#statuscode","text":"[jvm]\\ abstract var statusCode : Int Meaningful HTTP status about what actually happened. Not sent over the wire in the case of gRPC, which always returns HTTP 200 even for errors.","title":"statusCode"},{"location":"0.x/misk/misk.web/-http-call/take-request-body/","text":"// misk / misk.web / HttpCall / takeRequestBody takeRequestBody \u00b6 [jvm]\\ abstract fun takeRequestBody (): BufferedSource? Claim ownership of the request body stream. Returns null if the stream has already been claimed. Callers should read the HTTP request body or call putRequestBody to create a new chain with a request body that is unclaimed.","title":"takeRequestBody - Misk"},{"location":"0.x/misk/misk.web/-http-call/take-request-body/#takerequestbody","text":"[jvm]\\ abstract fun takeRequestBody (): BufferedSource? Claim ownership of the request body stream. Returns null if the stream has already been claimed. Callers should read the HTTP request body or call putRequestBody to create a new chain with a request body that is unclaimed.","title":"takeRequestBody"},{"location":"0.x/misk/misk.web/-http-call/take-response-body/","text":"// misk / misk.web / HttpCall / takeResponseBody takeResponseBody \u00b6 [jvm]\\ abstract fun takeResponseBody (): BufferedSink? Claim ownership of the response body stream. Returns null if the stream has already been claimed. Callers should write the HTTP response body or call putRequestBody to create a new chain with a response body that is unclaimed.","title":"takeResponseBody - Misk"},{"location":"0.x/misk/misk.web/-http-call/take-response-body/#takeresponsebody","text":"[jvm]\\ abstract fun takeResponseBody (): BufferedSink? Claim ownership of the response body stream. Returns null if the stream has already been claimed. Callers should write the HTTP response body or call putRequestBody to create a new chain with a response body that is unclaimed.","title":"takeResponseBody"},{"location":"0.x/misk/misk.web/-http-call/take-web-socket/","text":"// misk / misk.web / HttpCall / takeWebSocket takeWebSocket \u00b6 [jvm]\\ abstract fun takeWebSocket (): WebSocket? Claim ownership of the call\u2019s web socket.","title":"takeWebSocket - Misk"},{"location":"0.x/misk/misk.web/-http-call/take-web-socket/#takewebsocket","text":"[jvm]\\ abstract fun takeWebSocket (): WebSocket? Claim ownership of the call\u2019s web socket.","title":"takeWebSocket"},{"location":"0.x/misk/misk.web/-http-call/url/","text":"// misk / misk.web / HttpCall / url url \u00b6 [jvm]\\ abstract val url : HttpUrl Immutable information about the incoming HTTP request.","title":"url - Misk"},{"location":"0.x/misk/misk.web/-http-call/url/#url","text":"[jvm]\\ abstract val url : HttpUrl Immutable information about the incoming HTTP request.","title":"url"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/","text":"// misk / misk.web / MiskWebFormBuilder MiskWebFormBuilder \u00b6 [jvm]\\ class MiskWebFormBuilder Provides a mapping from field name to Type definition given a KType. Useful for processes that want to have a schema definition of a type. For example: used by the WebActions admin dashboard tab to show a statically typed form containing request fields for developers to fill out. Currently only supports Wire request type messages; non-Wire messages return an empty mapping. Constructors \u00b6 MiskWebFormBuilder [jvm] fun MiskWebFormBuilder () Types \u00b6 Name Summary Companion [jvm] object Companion Field [jvm] data class Field (name: String , type: String , repeated: Boolean ) Akin to a Proto field, a field can be of primitive or another Message type, and can be repeated to become a list. Type [jvm] data class Type (fields: List < MiskWebFormBuilder.Field >) Akin to a Proto Message, a Type has a list of fields Functions \u00b6 Name Summary calculateTypes [jvm] fun calculateTypes (requestType: KType ?): Map < String , MiskWebFormBuilder.Type >","title":"MiskWebFormBuilder - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/#miskwebformbuilder","text":"[jvm]\\ class MiskWebFormBuilder Provides a mapping from field name to Type definition given a KType. Useful for processes that want to have a schema definition of a type. For example: used by the WebActions admin dashboard tab to show a statically typed form containing request fields for developers to fill out. Currently only supports Wire request type messages; non-Wire messages return an empty mapping.","title":"MiskWebFormBuilder"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/#constructors","text":"MiskWebFormBuilder [jvm] fun MiskWebFormBuilder ()","title":"Constructors"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/#types","text":"Name Summary Companion [jvm] object Companion Field [jvm] data class Field (name: String , type: String , repeated: Boolean ) Akin to a Proto field, a field can be of primitive or another Message type, and can be repeated to become a list. Type [jvm] data class Type (fields: List < MiskWebFormBuilder.Field >) Akin to a Proto Message, a Type has a list of fields","title":"Types"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/#functions","text":"Name Summary calculateTypes [jvm] fun calculateTypes (requestType: KType ?): Map < String , MiskWebFormBuilder.Type >","title":"Functions"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-misk-web-form-builder/","text":"// misk / misk.web / MiskWebFormBuilder / MiskWebFormBuilder MiskWebFormBuilder \u00b6 [jvm]\\ fun MiskWebFormBuilder ()","title":"MiskWebFormBuilder - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-misk-web-form-builder/#miskwebformbuilder","text":"[jvm]\\ fun MiskWebFormBuilder ()","title":"MiskWebFormBuilder"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/calculate-types/","text":"// misk / misk.web / MiskWebFormBuilder / calculateTypes calculateTypes \u00b6 [jvm]\\ fun calculateTypes (requestType: KType ?): Map < String , MiskWebFormBuilder.Type >","title":"calculateTypes - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/calculate-types/#calculatetypes","text":"[jvm]\\ fun calculateTypes (requestType: KType ?): Map < String , MiskWebFormBuilder.Type >","title":"calculateTypes"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/","text":"// misk / misk.web / MiskWebFormBuilder / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary createEnumField [jvm] fun createEnumField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d createSyntheticEnumField [jvm] fun createSyntheticEnumField (fieldClassName: String , fieldName: String , enumValues: List < String >, repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d maybeCreatePrimitiveField [jvm] fun maybeCreatePrimitiveField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field ? Create misk-web Field s for primitives and enum types. Returns null if the type cannot be mapped.","title":"Companion - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/#functions","text":"Name Summary createEnumField [jvm] fun createEnumField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d createSyntheticEnumField [jvm] fun createSyntheticEnumField (fieldClassName: String , fieldName: String , enumValues: List < String >, repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d maybeCreatePrimitiveField [jvm] fun maybeCreatePrimitiveField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field ? Create misk-web Field s for primitives and enum types. Returns null if the type cannot be mapped.","title":"Functions"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/create-enum-field/","text":"// misk / misk.web / MiskWebFormBuilder / Companion / createEnumField createEnumField \u00b6 [jvm]\\ fun createEnumField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d","title":"createEnumField - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/create-enum-field/#createenumfield","text":"[jvm]\\ fun createEnumField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d","title":"createEnumField"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/create-synthetic-enum-field/","text":"// misk / misk.web / MiskWebFormBuilder / Companion / createSyntheticEnumField createSyntheticEnumField \u00b6 [jvm]\\ fun createSyntheticEnumField (fieldClassName: String , fieldName: String , enumValues: List < String >, repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d","title":"createSyntheticEnumField - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/create-synthetic-enum-field/#createsyntheticenumfield","text":"[jvm]\\ fun createSyntheticEnumField (fieldClassName: String , fieldName: String , enumValues: List < String >, repeated: Boolean ): MiskWebFormBuilder.Field Adds a field with a type that has the class name and enum values embedded Example: \u201cEnum\u201d","title":"createSyntheticEnumField"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/maybe-create-primitive-field/","text":"// misk / misk.web / MiskWebFormBuilder / Companion / maybeCreatePrimitiveField maybeCreatePrimitiveField \u00b6 [jvm]\\ fun maybeCreatePrimitiveField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field ? Create misk-web Field s for primitives and enum types. Returns null if the type cannot be mapped.","title":"maybeCreatePrimitiveField - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-companion/maybe-create-primitive-field/#maybecreateprimitivefield","text":"[jvm]\\ fun maybeCreatePrimitiveField (fieldClass: Class <*>, fieldName: String , repeated: Boolean ): MiskWebFormBuilder.Field ? Create misk-web Field s for primitives and enum types. Returns null if the type cannot be mapped.","title":"maybeCreatePrimitiveField"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/","text":"// misk / misk.web / MiskWebFormBuilder / Field Field \u00b6 [jvm]\\ data class Field (name: String , type: String , repeated: Boolean ) Akin to a Proto field, a field can be of primitive or another Message type, and can be repeated to become a list. Enums are encoded to contain their values within their Type definition as opposed to a unique Type. Constructors \u00b6 Field [jvm] fun Field (name: String , type: String , repeated: Boolean ) Properties \u00b6 Name Summary name [jvm] val name : String repeated [jvm] val repeated : Boolean type [jvm] val type : String","title":"Field - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/#field","text":"[jvm]\\ data class Field (name: String , type: String , repeated: Boolean ) Akin to a Proto field, a field can be of primitive or another Message type, and can be repeated to become a list. Enums are encoded to contain their values within their Type definition as opposed to a unique Type.","title":"Field"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/#constructors","text":"Field [jvm] fun Field (name: String , type: String , repeated: Boolean )","title":"Constructors"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/#properties","text":"Name Summary name [jvm] val name : String repeated [jvm] val repeated : Boolean type [jvm] val type : String","title":"Properties"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/-field/","text":"// misk / misk.web / MiskWebFormBuilder / Field / Field Field \u00b6 [jvm]\\ fun Field (name: String , type: String , repeated: Boolean )","title":"Field - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/-field/#field","text":"[jvm]\\ fun Field (name: String , type: String , repeated: Boolean )","title":"Field"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/name/","text":"// misk / misk.web / MiskWebFormBuilder / Field / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/repeated/","text":"// misk / misk.web / MiskWebFormBuilder / Field / repeated repeated \u00b6 [jvm]\\ val repeated : Boolean","title":"repeated - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/repeated/#repeated","text":"[jvm]\\ val repeated : Boolean","title":"repeated"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/type/","text":"// misk / misk.web / MiskWebFormBuilder / Field / type type \u00b6 [jvm]\\ val type : String","title":"type - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-field/type/#type","text":"[jvm]\\ val type : String","title":"type"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/","text":"// misk / misk.web / MiskWebFormBuilder / Type Type \u00b6 [jvm]\\ data class Type (fields: List < MiskWebFormBuilder.Field >) Akin to a Proto Message, a Type has a list of fields Constructors \u00b6 Type [jvm] fun Type (fields: List < MiskWebFormBuilder.Field >) Properties \u00b6 Name Summary fields [jvm] val fields : List < MiskWebFormBuilder.Field >","title":"Type - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/#type","text":"[jvm]\\ data class Type (fields: List < MiskWebFormBuilder.Field >) Akin to a Proto Message, a Type has a list of fields","title":"Type"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/#constructors","text":"Type [jvm] fun Type (fields: List < MiskWebFormBuilder.Field >)","title":"Constructors"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/#properties","text":"Name Summary fields [jvm] val fields : List < MiskWebFormBuilder.Field >","title":"Properties"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/-type/","text":"// misk / misk.web / MiskWebFormBuilder / Type / Type Type \u00b6 [jvm]\\ fun Type (fields: List < MiskWebFormBuilder.Field >)","title":"Type - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/-type/#type","text":"[jvm]\\ fun Type (fields: List < MiskWebFormBuilder.Field >)","title":"Type"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/fields/","text":"// misk / misk.web / MiskWebFormBuilder / Type / fields fields \u00b6 [jvm]\\ val fields : List < MiskWebFormBuilder.Field >","title":"fields - Misk"},{"location":"0.x/misk/misk.web/-misk-web-form-builder/-type/fields/#fields","text":"[jvm]\\ val fields : List < MiskWebFormBuilder.Field >","title":"fields"},{"location":"0.x/misk/misk.web/-misk-web-module/","text":"// misk / misk.web / MiskWebModule MiskWebModule \u00b6 [jvm]\\ class MiskWebModule (config: WebConfig , jettyDependsOn: List <Key<out Service>>) : KAbstractModule Types \u00b6 Name Summary MiskCallerProvider [jvm] class MiskCallerProvider @Injectconstructor(authenticators: List < MiskCallerAuthenticator >) : ActionScopedProvider<MiskCaller?> Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideGzipHandler [jvm] @Provides @Singleton fun provideGzipHandler (): GzipHandler provideStatisticsHandler [jvm] @Provides @Singleton fun provideStatisticsHandler (): StatisticsHandler requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"MiskWebModule - Misk"},{"location":"0.x/misk/misk.web/-misk-web-module/#miskwebmodule","text":"[jvm]\\ class MiskWebModule (config: WebConfig , jettyDependsOn: List <Key<out Service>>) : KAbstractModule","title":"MiskWebModule"},{"location":"0.x/misk/misk.web/-misk-web-module/#types","text":"Name Summary MiskCallerProvider [jvm] class MiskCallerProvider @Injectconstructor(authenticators: List < MiskCallerAuthenticator >) : ActionScopedProvider<MiskCaller?>","title":"Types"},{"location":"0.x/misk/misk.web/-misk-web-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideGzipHandler [jvm] @Provides @Singleton fun provideGzipHandler (): GzipHandler provideStatisticsHandler [jvm] @Provides @Singleton fun provideStatisticsHandler (): StatisticsHandler requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.web/-misk-web-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-web-module/","text":"// misk / misk.web / MiskWebModule / MiskWebModule MiskWebModule \u00b6 [jvm]\\ fun MiskWebModule (config: WebConfig , jettyDependsOn: List <Key<out Service>> = emptyList())","title":"MiskWebModule - Misk"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-web-module/#miskwebmodule","text":"[jvm]\\ fun MiskWebModule (config: WebConfig , jettyDependsOn: List <Key<out Service>> = emptyList())","title":"MiskWebModule"},{"location":"0.x/misk/misk.web/-misk-web-module/provide-gzip-handler/","text":"// misk / misk.web / MiskWebModule / provideGzipHandler provideGzipHandler \u00b6 [jvm]\\ @Provides @Singleton fun provideGzipHandler (): GzipHandler","title":"provideGzipHandler - Misk"},{"location":"0.x/misk/misk.web/-misk-web-module/provide-gzip-handler/#providegziphandler","text":"[jvm]\\ @Provides @Singleton fun provideGzipHandler (): GzipHandler","title":"provideGzipHandler"},{"location":"0.x/misk/misk.web/-misk-web-module/provide-statistics-handler/","text":"// misk / misk.web / MiskWebModule / provideStatisticsHandler provideStatisticsHandler \u00b6 [jvm]\\ @Provides @Singleton fun provideStatisticsHandler (): StatisticsHandler","title":"provideStatisticsHandler - Misk"},{"location":"0.x/misk/misk.web/-misk-web-module/provide-statistics-handler/#providestatisticshandler","text":"[jvm]\\ @Provides @Singleton fun provideStatisticsHandler (): StatisticsHandler","title":"provideStatisticsHandler"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-caller-provider/","text":"// misk / misk.web / MiskWebModule / MiskCallerProvider MiskCallerProvider \u00b6 [jvm]\\ class MiskCallerProvider @Injectconstructor(authenticators: List < MiskCallerAuthenticator >) : ActionScopedProvider<MiskCaller?> Functions \u00b6 Name Summary get [jvm] open override fun get (): MiskCaller?","title":"MiskCallerProvider - Misk"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-caller-provider/#miskcallerprovider","text":"[jvm]\\ class MiskCallerProvider @Injectconstructor(authenticators: List < MiskCallerAuthenticator >) : ActionScopedProvider<MiskCaller?>","title":"MiskCallerProvider"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-caller-provider/#functions","text":"Name Summary get [jvm] open override fun get (): MiskCaller?","title":"Functions"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-caller-provider/-misk-caller-provider/","text":"// misk / misk.web / MiskWebModule / MiskCallerProvider / MiskCallerProvider MiskCallerProvider \u00b6 [jvm]\\ @Inject fun MiskCallerProvider (authenticators: List < MiskCallerAuthenticator >)","title":"MiskCallerProvider - Misk"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-caller-provider/-misk-caller-provider/#miskcallerprovider","text":"[jvm]\\ @Inject fun MiskCallerProvider (authenticators: List < MiskCallerAuthenticator >)","title":"MiskCallerProvider"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-caller-provider/get/","text":"// misk / misk.web / MiskWebModule / MiskCallerProvider / get get \u00b6 [jvm]\\ open override fun get (): MiskCaller?","title":"get - Misk"},{"location":"0.x/misk/misk.web/-misk-web-module/-misk-caller-provider/get/#get","text":"[jvm]\\ open override fun get (): MiskCaller?","title":"get"},{"location":"0.x/misk/misk.web/-network-chain/","text":"// misk / misk.web / NetworkChain NetworkChain \u00b6 [jvm]\\ interface NetworkChain Functions \u00b6 Name Summary proceed [jvm] abstract fun proceed (httpCall: HttpCall ) Invoke the next call in the interceptor chain. Properties \u00b6 Name Summary action [jvm] abstract val action : Action The action for this call. httpCall [jvm] abstract val httpCall : HttpCall The live HTTP call. You can access hot streams on this call. webAction [jvm] abstract val webAction : WebAction The action instance this call is routing to.","title":"NetworkChain - Misk"},{"location":"0.x/misk/misk.web/-network-chain/#networkchain","text":"[jvm]\\ interface NetworkChain","title":"NetworkChain"},{"location":"0.x/misk/misk.web/-network-chain/#functions","text":"Name Summary proceed [jvm] abstract fun proceed (httpCall: HttpCall ) Invoke the next call in the interceptor chain.","title":"Functions"},{"location":"0.x/misk/misk.web/-network-chain/#properties","text":"Name Summary action [jvm] abstract val action : Action The action for this call. httpCall [jvm] abstract val httpCall : HttpCall The live HTTP call. You can access hot streams on this call. webAction [jvm] abstract val webAction : WebAction The action instance this call is routing to.","title":"Properties"},{"location":"0.x/misk/misk.web/-network-chain/action/","text":"// misk / misk.web / NetworkChain / action action \u00b6 [jvm]\\ abstract val action : Action The action for this call.","title":"action - Misk"},{"location":"0.x/misk/misk.web/-network-chain/action/#action","text":"[jvm]\\ abstract val action : Action The action for this call.","title":"action"},{"location":"0.x/misk/misk.web/-network-chain/http-call/","text":"// misk / misk.web / NetworkChain / httpCall httpCall \u00b6 [jvm]\\ abstract val httpCall : HttpCall The live HTTP call. You can access hot streams on this call.","title":"httpCall - Misk"},{"location":"0.x/misk/misk.web/-network-chain/http-call/#httpcall","text":"[jvm]\\ abstract val httpCall : HttpCall The live HTTP call. You can access hot streams on this call.","title":"httpCall"},{"location":"0.x/misk/misk.web/-network-chain/proceed/","text":"// misk / misk.web / NetworkChain / proceed proceed \u00b6 [jvm]\\ abstract fun proceed (httpCall: HttpCall ) Invoke the next call in the interceptor chain.","title":"proceed - Misk"},{"location":"0.x/misk/misk.web/-network-chain/proceed/#proceed","text":"[jvm]\\ abstract fun proceed (httpCall: HttpCall ) Invoke the next call in the interceptor chain.","title":"proceed"},{"location":"0.x/misk/misk.web/-network-chain/web-action/","text":"// misk / misk.web / NetworkChain / webAction webAction \u00b6 [jvm]\\ abstract val webAction : WebAction The action instance this call is routing to.","title":"webAction - Misk"},{"location":"0.x/misk/misk.web/-network-chain/web-action/#webaction","text":"[jvm]\\ abstract val webAction : WebAction The action instance this call is routing to.","title":"webAction"},{"location":"0.x/misk/misk.web/-network-interceptor/","text":"// misk / misk.web / NetworkInterceptor NetworkInterceptor \u00b6 [jvm]\\ interface NetworkInterceptor Types \u00b6 Name Summary Factory [jvm] interface Factory Functions \u00b6 Name Summary intercept [jvm] abstract fun intercept (chain: NetworkChain ) Inheritors \u00b6 Name ExceptionHandlingInterceptor RebalancingInterceptor RequestLoggingInterceptor WideOpenDevelopmentInterceptor","title":"NetworkInterceptor - Misk"},{"location":"0.x/misk/misk.web/-network-interceptor/#networkinterceptor","text":"[jvm]\\ interface NetworkInterceptor","title":"NetworkInterceptor"},{"location":"0.x/misk/misk.web/-network-interceptor/#types","text":"Name Summary Factory [jvm] interface Factory","title":"Types"},{"location":"0.x/misk/misk.web/-network-interceptor/#functions","text":"Name Summary intercept [jvm] abstract fun intercept (chain: NetworkChain )","title":"Functions"},{"location":"0.x/misk/misk.web/-network-interceptor/#inheritors","text":"Name ExceptionHandlingInterceptor RebalancingInterceptor RequestLoggingInterceptor WideOpenDevelopmentInterceptor","title":"Inheritors"},{"location":"0.x/misk/misk.web/-network-interceptor/intercept/","text":"// misk / misk.web / NetworkInterceptor / intercept intercept \u00b6 [jvm]\\ abstract fun intercept (chain: NetworkChain )","title":"intercept - Misk"},{"location":"0.x/misk/misk.web/-network-interceptor/intercept/#intercept","text":"[jvm]\\ abstract fun intercept (chain: NetworkChain )","title":"intercept"},{"location":"0.x/misk/misk.web/-network-interceptor/-factory/","text":"// misk / misk.web / NetworkInterceptor / Factory Factory \u00b6 [jvm]\\ interface Factory Functions \u00b6 Name Summary create [jvm] abstract fun create (action: Action ): NetworkInterceptor ? Inheritors \u00b6 Name Factory InternalErrorInterceptorFactory Factory Factory WideOpenDevelopmentInterceptorFactory","title":"Factory - Misk"},{"location":"0.x/misk/misk.web/-network-interceptor/-factory/#factory","text":"[jvm]\\ interface Factory","title":"Factory"},{"location":"0.x/misk/misk.web/-network-interceptor/-factory/#functions","text":"Name Summary create [jvm] abstract fun create (action: Action ): NetworkInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk.web/-network-interceptor/-factory/#inheritors","text":"Name Factory InternalErrorInterceptorFactory Factory Factory WideOpenDevelopmentInterceptorFactory","title":"Inheritors"},{"location":"0.x/misk/misk.web/-network-interceptor/-factory/create/","text":"// misk / misk.web / NetworkInterceptor / Factory / create create \u00b6 [jvm]\\ abstract fun create (action: Action ): NetworkInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk.web/-network-interceptor/-factory/create/#create","text":"[jvm]\\ abstract fun create (action: Action ): NetworkInterceptor ?","title":"create"},{"location":"0.x/misk/misk.web/-path-pattern/","text":"// misk / misk.web / PathPattern PathPattern \u00b6 [jvm]\\ class PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean ) : Comparable < PathPattern > A path with placeholders for variables. Paths may be constant like /app/home/ or dynamic like /user/{username}. Variables are delimited by curly braces and may specify an optional regex like this: {username:[a-z]+}. If no regex is specified the variable is a sequence of non-\u2018/\u2019 characters. Constructors \u00b6 PathPattern [jvm] fun PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary compareTo [jvm] open operator override fun compareTo (other: PathPattern ): Int Compares path patterns by specificity with the more specific pattern ordered first. equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int matcher [jvm] fun matcher (requestUrl: HttpUrl): Matcher ? Returns a Matcher if requestUrl can be matched, else null toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary matchesWildcardPath [jvm] val matchesWildcardPath : Boolean numRegexVariables [jvm] val numRegexVariables : Int numSegments [jvm] val numSegments : Int pattern [jvm] val pattern : String regex [jvm] val regex : Pattern variableNames [jvm] val variableNames : List < String >","title":"PathPattern - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/#pathpattern","text":"[jvm]\\ class PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean ) : Comparable < PathPattern > A path with placeholders for variables. Paths may be constant like /app/home/ or dynamic like /user/{username}. Variables are delimited by curly braces and may specify an optional regex like this: {username:[a-z]+}. If no regex is specified the variable is a sequence of non-\u2018/\u2019 characters.","title":"PathPattern"},{"location":"0.x/misk/misk.web/-path-pattern/#constructors","text":"PathPattern [jvm] fun PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean )","title":"Constructors"},{"location":"0.x/misk/misk.web/-path-pattern/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.web/-path-pattern/#functions","text":"Name Summary compareTo [jvm] open operator override fun compareTo (other: PathPattern ): Int Compares path patterns by specificity with the more specific pattern ordered first. equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int matcher [jvm] fun matcher (requestUrl: HttpUrl): Matcher ? Returns a Matcher if requestUrl can be matched, else null toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk/misk.web/-path-pattern/#properties","text":"Name Summary matchesWildcardPath [jvm] val matchesWildcardPath : Boolean numRegexVariables [jvm] val numRegexVariables : Int numSegments [jvm] val numSegments : Int pattern [jvm] val pattern : String regex [jvm] val regex : Pattern variableNames [jvm] val variableNames : List < String >","title":"Properties"},{"location":"0.x/misk/misk.web/-path-pattern/-path-pattern/","text":"// misk / misk.web / PathPattern / PathPattern PathPattern \u00b6 [jvm]\\ fun PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean )","title":"PathPattern - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/-path-pattern/#pathpattern","text":"[jvm]\\ fun PathPattern (pattern: String , regex: Pattern , variableNames: List < String >, numRegexVariables: Int , numSegments: Int , matchesWildcardPath: Boolean )","title":"PathPattern"},{"location":"0.x/misk/misk.web/-path-pattern/compare-to/","text":"// misk / misk.web / PathPattern / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: PathPattern ): Int Compares path patterns by specificity with the more specific pattern ordered first.","title":"compareTo - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: PathPattern ): Int Compares path patterns by specificity with the more specific pattern ordered first.","title":"compareTo"},{"location":"0.x/misk/misk.web/-path-pattern/equals/","text":"// misk / misk.web / PathPattern / equals equals \u00b6 [jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/equals/#equals","text":"[jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"0.x/misk/misk.web/-path-pattern/hash-code/","text":"// misk / misk.web / PathPattern / hashCode hashCode \u00b6 [jvm]\\ open override fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/hash-code/#hashcode","text":"[jvm]\\ open override fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk/misk.web/-path-pattern/matcher/","text":"// misk / misk.web / PathPattern / matcher matcher \u00b6 [jvm]\\ fun matcher (requestUrl: HttpUrl): Matcher ? Returns a Matcher if requestUrl can be matched, else null","title":"matcher - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/matcher/#matcher","text":"[jvm]\\ fun matcher (requestUrl: HttpUrl): Matcher ? Returns a Matcher if requestUrl can be matched, else null","title":"matcher"},{"location":"0.x/misk/misk.web/-path-pattern/matches-wildcard-path/","text":"// misk / misk.web / PathPattern / matchesWildcardPath matchesWildcardPath \u00b6 [jvm]\\ val matchesWildcardPath : Boolean","title":"matchesWildcardPath - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/matches-wildcard-path/#matcheswildcardpath","text":"[jvm]\\ val matchesWildcardPath : Boolean","title":"matchesWildcardPath"},{"location":"0.x/misk/misk.web/-path-pattern/num-regex-variables/","text":"// misk / misk.web / PathPattern / numRegexVariables numRegexVariables \u00b6 [jvm]\\ val numRegexVariables : Int","title":"numRegexVariables - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/num-regex-variables/#numregexvariables","text":"[jvm]\\ val numRegexVariables : Int","title":"numRegexVariables"},{"location":"0.x/misk/misk.web/-path-pattern/num-segments/","text":"// misk / misk.web / PathPattern / numSegments numSegments \u00b6 [jvm]\\ val numSegments : Int","title":"numSegments - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/num-segments/#numsegments","text":"[jvm]\\ val numSegments : Int","title":"numSegments"},{"location":"0.x/misk/misk.web/-path-pattern/pattern/","text":"// misk / misk.web / PathPattern / pattern pattern \u00b6 [jvm]\\ val pattern : String","title":"pattern - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/pattern/#pattern","text":"[jvm]\\ val pattern : String","title":"pattern"},{"location":"0.x/misk/misk.web/-path-pattern/regex/","text":"// misk / misk.web / PathPattern / regex regex \u00b6 [jvm]\\ val regex : Pattern","title":"regex - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/regex/#regex","text":"[jvm]\\ val regex : Pattern","title":"regex"},{"location":"0.x/misk/misk.web/-path-pattern/to-string/","text":"// misk / misk.web / PathPattern / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk/misk.web/-path-pattern/variable-names/","text":"// misk / misk.web / PathPattern / variableNames variableNames \u00b6 [jvm]\\ val variableNames : List < String >","title":"variableNames - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/variable-names/#variablenames","text":"[jvm]\\ val variableNames : List < String >","title":"variableNames"},{"location":"0.x/misk/misk.web/-path-pattern/-companion/","text":"// misk / misk.web / PathPattern / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary parse [jvm] fun parse (pattern: String ): PathPattern","title":"Companion - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web/-path-pattern/-companion/#functions","text":"Name Summary parse [jvm] fun parse (pattern: String ): PathPattern","title":"Functions"},{"location":"0.x/misk/misk.web/-path-pattern/-companion/parse/","text":"// misk / misk.web / PathPattern / Companion / parse parse \u00b6 [jvm]\\ fun parse (pattern: String ): PathPattern","title":"parse - Misk"},{"location":"0.x/misk/misk.web/-path-pattern/-companion/parse/#parse","text":"[jvm]\\ fun parse (pattern: String ): PathPattern","title":"parse"},{"location":"0.x/misk/misk.web/-socket-address/","text":"// misk / misk.web / SocketAddress SocketAddress \u00b6 [jvm]\\ sealed class SocketAddress Information about the socket on which a HTTP call arrived. Types \u00b6 Name Summary Network [jvm] class Network (ipAddress: String , port: Int ) : SocketAddress Unix [jvm] class Unix (path: String ) : SocketAddress Inheritors \u00b6 Name Network Unix","title":"SocketAddress - Misk"},{"location":"0.x/misk/misk.web/-socket-address/#socketaddress","text":"[jvm]\\ sealed class SocketAddress Information about the socket on which a HTTP call arrived.","title":"SocketAddress"},{"location":"0.x/misk/misk.web/-socket-address/#types","text":"Name Summary Network [jvm] class Network (ipAddress: String , port: Int ) : SocketAddress Unix [jvm] class Unix (path: String ) : SocketAddress","title":"Types"},{"location":"0.x/misk/misk.web/-socket-address/#inheritors","text":"Name Network Unix","title":"Inheritors"},{"location":"0.x/misk/misk.web/-socket-address/-network/","text":"// misk / misk.web / SocketAddress / Network Network \u00b6 [jvm]\\ class Network (ipAddress: String , port: Int ) : SocketAddress Properties \u00b6 Name Summary ipAddress [jvm] val ipAddress : String port [jvm] val port : Int","title":"Network - Misk"},{"location":"0.x/misk/misk.web/-socket-address/-network/#network","text":"[jvm]\\ class Network (ipAddress: String , port: Int ) : SocketAddress","title":"Network"},{"location":"0.x/misk/misk.web/-socket-address/-network/#properties","text":"Name Summary ipAddress [jvm] val ipAddress : String port [jvm] val port : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-socket-address/-network/-network/","text":"// misk / misk.web / SocketAddress / Network / Network Network \u00b6 [jvm]\\ fun Network (ipAddress: String , port: Int )","title":"Network - Misk"},{"location":"0.x/misk/misk.web/-socket-address/-network/-network/#network","text":"[jvm]\\ fun Network (ipAddress: String , port: Int )","title":"Network"},{"location":"0.x/misk/misk.web/-socket-address/-network/ip-address/","text":"// misk / misk.web / SocketAddress / Network / ipAddress ipAddress \u00b6 [jvm]\\ val ipAddress : String","title":"ipAddress - Misk"},{"location":"0.x/misk/misk.web/-socket-address/-network/ip-address/#ipaddress","text":"[jvm]\\ val ipAddress : String","title":"ipAddress"},{"location":"0.x/misk/misk.web/-socket-address/-network/port/","text":"// misk / misk.web / SocketAddress / Network / port port \u00b6 [jvm]\\ val port : Int","title":"port - Misk"},{"location":"0.x/misk/misk.web/-socket-address/-network/port/#port","text":"[jvm]\\ val port : Int","title":"port"},{"location":"0.x/misk/misk.web/-socket-address/-unix/","text":"// misk / misk.web / SocketAddress / Unix Unix \u00b6 [jvm]\\ class Unix (path: String ) : SocketAddress Properties \u00b6 Name Summary path [jvm] val path : String","title":"Unix - Misk"},{"location":"0.x/misk/misk.web/-socket-address/-unix/#unix","text":"[jvm]\\ class Unix (path: String ) : SocketAddress","title":"Unix"},{"location":"0.x/misk/misk.web/-socket-address/-unix/#properties","text":"Name Summary path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk/misk.web/-socket-address/-unix/-unix/","text":"// misk / misk.web / SocketAddress / Unix / Unix Unix \u00b6 [jvm]\\ fun Unix (path: String )","title":"Unix - Misk"},{"location":"0.x/misk/misk.web/-socket-address/-unix/-unix/#unix","text":"[jvm]\\ fun Unix (path: String )","title":"Unix"},{"location":"0.x/misk/misk.web/-socket-address/-unix/path/","text":"// misk / misk.web / SocketAddress / Unix / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk/misk.web/-socket-address/-unix/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk/misk.web/-web-action-seed-data-transformer-factory/","text":"// misk / misk.web / WebActionSeedDataTransformerFactory WebActionSeedDataTransformerFactory \u00b6 [jvm]\\ interface WebActionSeedDataTransformerFactory Creates a SeedDataTransformer for a specific web Action . This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<WebActionSeedDataTransformerFactory>().toInstance(WebActionSeedDataTransformerFactory(\u2026)) Functions \u00b6 Name Summary create [jvm] abstract fun create (pathPattern: PathPattern , action: Action ): SeedDataTransformer? Returns null to not transform the map on action .","title":"WebActionSeedDataTransformerFactory - Misk"},{"location":"0.x/misk/misk.web/-web-action-seed-data-transformer-factory/#webactionseeddatatransformerfactory","text":"[jvm]\\ interface WebActionSeedDataTransformerFactory Creates a SeedDataTransformer for a specific web Action . This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<WebActionSeedDataTransformerFactory>().toInstance(WebActionSeedDataTransformerFactory(\u2026))","title":"WebActionSeedDataTransformerFactory"},{"location":"0.x/misk/misk.web/-web-action-seed-data-transformer-factory/#functions","text":"Name Summary create [jvm] abstract fun create (pathPattern: PathPattern , action: Action ): SeedDataTransformer? Returns null to not transform the map on action .","title":"Functions"},{"location":"0.x/misk/misk.web/-web-action-seed-data-transformer-factory/create/","text":"// misk / misk.web / WebActionSeedDataTransformerFactory / create create \u00b6 [jvm]\\ abstract fun create (pathPattern: PathPattern , action: Action ): SeedDataTransformer? Returns null to not transform the map on action .","title":"create - Misk"},{"location":"0.x/misk/misk.web/-web-action-seed-data-transformer-factory/create/#create","text":"[jvm]\\ abstract fun create (pathPattern: PathPattern , action: Action ): SeedDataTransformer? Returns null to not transform the map on action .","title":"create"},{"location":"0.x/misk/misk.web/-web-config/","text":"// misk / misk.web / WebConfig WebConfig \u00b6 [jvm]\\ data class WebConfig (port: Int , idle_timeout: Long , health_port: Int , host: String ?, ssl: WebSslConfig ?, unix_domain_socket: WebUnixDomainSocketConfig ?, http2: Boolean , selectors: Int ?, acceptors: Int ?, queue_size: Int ?, jetty_max_thread_pool_size: Int , jetty_min_thread_pool_size: Int , jetty_max_thread_pool_queue_size: Int , enable_thread_pool_queue_metrics: Boolean , action_exception_log_level: ActionExceptionLogLevelConfig , jetty_max_concurrent_streams: Int ?, close_connection_percent: Double , gzip: Boolean , minGzipSize: Int , cors: Map < String , CorsConfig >, concurrency_limiter_disabled: Boolean , concurrency_limiter_log_level: Level, shutdown_sleep_ms: Int ) : Config Properties \u00b6 Name Summary acceptors [jvm] val acceptors : Int ? = null Number of acceptor threads. action_exception_log_level [jvm] val action_exception_log_level : ActionExceptionLogLevelConfig close_connection_percent [jvm] val close_connection_percent : Double = 0.01 A value in 0.0..100.0. Include \u2018Connection: close\u2019 in this percentage of responses. concurrency_limiter_disabled [jvm] val concurrency_limiter_disabled : Boolean = false If true, disables automatic load shedding when degraded. concurrency_limiter_log_level [jvm] val concurrency_limiter_log_level : Level The level of log when concurrency shedding. cors [jvm] val cors : Map < String , CorsConfig > enable_thread_pool_queue_metrics [jvm] val enable_thread_pool_queue_metrics : Boolean = false Flag to enable thread pool queue metrics gzip [jvm] val gzip : Boolean = true If true responses which are larger than the minGzipSize will be compressed. health_port [jvm] val health_port : Int If >= 0, use a dedicated jetty thread pool for health checking. host [jvm] val host : String ? = null The network interface to bind to. Null or 0.0.0.0 to bind to all interfaces. http2 [jvm] val http2 : Boolean = false HTTP/2 support is currently opt-in because we can\u2019t load balance it dynamically. idle_timeout [jvm] val idle_timeout : Long = 0 If a connection is unused for this many milliseconds, it is closed. If zero, it is not closed. jetty_max_concurrent_streams [jvm] val jetty_max_concurrent_streams : Int ? = null The maximum number of streams per HTTP/2 connection. jetty_max_thread_pool_queue_size [jvm] val jetty_max_thread_pool_queue_size : Int = 300 Maximum number of items in the queue for Jetty\u2019s thread pool. jetty_max_thread_pool_size [jvm] val jetty_max_thread_pool_size : Int = 200 Maximum number of threads in Jetty\u2019s thread pool. jetty_min_thread_pool_size [jvm] val jetty_min_thread_pool_size : Int = 8 Minimum number of threads in Jetty\u2019s thread pool. minGzipSize [jvm] val minGzipSize : Int = 1024 The minimum size in bytes before the response body will be compressed. port [jvm] val port : Int HTTP port to listen on, or 0 for any available port. queue_size [jvm] val queue_size : Int ? = null The accept backlog. selectors [jvm] val selectors : Int ? = null Number of NIO selector threads. shutdown_sleep_ms [jvm] val shutdown_sleep_ms : Int = 0 The number of milliseconds to sleep before commencing service shutdown. ssl [jvm] val ssl : WebSslConfig ? = null unix_domain_socket [jvm] val unix_domain_socket : WebUnixDomainSocketConfig ? = null Configuration to enable Jetty to listen for traffic on a unix domain socket being proxied through a sidecar (like Envoy).","title":"WebConfig - Misk"},{"location":"0.x/misk/misk.web/-web-config/#webconfig","text":"[jvm]\\ data class WebConfig (port: Int , idle_timeout: Long , health_port: Int , host: String ?, ssl: WebSslConfig ?, unix_domain_socket: WebUnixDomainSocketConfig ?, http2: Boolean , selectors: Int ?, acceptors: Int ?, queue_size: Int ?, jetty_max_thread_pool_size: Int , jetty_min_thread_pool_size: Int , jetty_max_thread_pool_queue_size: Int , enable_thread_pool_queue_metrics: Boolean , action_exception_log_level: ActionExceptionLogLevelConfig , jetty_max_concurrent_streams: Int ?, close_connection_percent: Double , gzip: Boolean , minGzipSize: Int , cors: Map < String , CorsConfig >, concurrency_limiter_disabled: Boolean , concurrency_limiter_log_level: Level, shutdown_sleep_ms: Int ) : Config","title":"WebConfig"},{"location":"0.x/misk/misk.web/-web-config/#properties","text":"Name Summary acceptors [jvm] val acceptors : Int ? = null Number of acceptor threads. action_exception_log_level [jvm] val action_exception_log_level : ActionExceptionLogLevelConfig close_connection_percent [jvm] val close_connection_percent : Double = 0.01 A value in 0.0..100.0. Include \u2018Connection: close\u2019 in this percentage of responses. concurrency_limiter_disabled [jvm] val concurrency_limiter_disabled : Boolean = false If true, disables automatic load shedding when degraded. concurrency_limiter_log_level [jvm] val concurrency_limiter_log_level : Level The level of log when concurrency shedding. cors [jvm] val cors : Map < String , CorsConfig > enable_thread_pool_queue_metrics [jvm] val enable_thread_pool_queue_metrics : Boolean = false Flag to enable thread pool queue metrics gzip [jvm] val gzip : Boolean = true If true responses which are larger than the minGzipSize will be compressed. health_port [jvm] val health_port : Int If >= 0, use a dedicated jetty thread pool for health checking. host [jvm] val host : String ? = null The network interface to bind to. Null or 0.0.0.0 to bind to all interfaces. http2 [jvm] val http2 : Boolean = false HTTP/2 support is currently opt-in because we can\u2019t load balance it dynamically. idle_timeout [jvm] val idle_timeout : Long = 0 If a connection is unused for this many milliseconds, it is closed. If zero, it is not closed. jetty_max_concurrent_streams [jvm] val jetty_max_concurrent_streams : Int ? = null The maximum number of streams per HTTP/2 connection. jetty_max_thread_pool_queue_size [jvm] val jetty_max_thread_pool_queue_size : Int = 300 Maximum number of items in the queue for Jetty\u2019s thread pool. jetty_max_thread_pool_size [jvm] val jetty_max_thread_pool_size : Int = 200 Maximum number of threads in Jetty\u2019s thread pool. jetty_min_thread_pool_size [jvm] val jetty_min_thread_pool_size : Int = 8 Minimum number of threads in Jetty\u2019s thread pool. minGzipSize [jvm] val minGzipSize : Int = 1024 The minimum size in bytes before the response body will be compressed. port [jvm] val port : Int HTTP port to listen on, or 0 for any available port. queue_size [jvm] val queue_size : Int ? = null The accept backlog. selectors [jvm] val selectors : Int ? = null Number of NIO selector threads. shutdown_sleep_ms [jvm] val shutdown_sleep_ms : Int = 0 The number of milliseconds to sleep before commencing service shutdown. ssl [jvm] val ssl : WebSslConfig ? = null unix_domain_socket [jvm] val unix_domain_socket : WebUnixDomainSocketConfig ? = null Configuration to enable Jetty to listen for traffic on a unix domain socket being proxied through a sidecar (like Envoy).","title":"Properties"},{"location":"0.x/misk/misk.web/-web-config/-web-config/","text":"// misk / misk.web / WebConfig / WebConfig WebConfig \u00b6 [jvm]\\ fun WebConfig (port: Int , idle_timeout: Long = 0, health_port: Int = -1, host: String ? = null, ssl: WebSslConfig ? = null, unix_domain_socket: WebUnixDomainSocketConfig ? = null, http2: Boolean = false, selectors: Int ? = null, acceptors: Int ? = null, queue_size: Int ? = null, jetty_max_thread_pool_size: Int = 200, jetty_min_thread_pool_size: Int = 8, jetty_max_thread_pool_queue_size: Int = 300, enable_thread_pool_queue_metrics: Boolean = false, action_exception_log_level: ActionExceptionLogLevelConfig = ActionExceptionLogLevelConfig(), jetty_max_concurrent_streams: Int ? = null, close_connection_percent: Double = 0.01, gzip: Boolean = true, minGzipSize: Int = 1024, cors: Map < String , CorsConfig > = mapOf(), concurrency_limiter_disabled: Boolean = false, concurrency_limiter_log_level: Level = Level.ERROR, shutdown_sleep_ms: Int = 0)","title":"WebConfig - Misk"},{"location":"0.x/misk/misk.web/-web-config/-web-config/#webconfig","text":"[jvm]\\ fun WebConfig (port: Int , idle_timeout: Long = 0, health_port: Int = -1, host: String ? = null, ssl: WebSslConfig ? = null, unix_domain_socket: WebUnixDomainSocketConfig ? = null, http2: Boolean = false, selectors: Int ? = null, acceptors: Int ? = null, queue_size: Int ? = null, jetty_max_thread_pool_size: Int = 200, jetty_min_thread_pool_size: Int = 8, jetty_max_thread_pool_queue_size: Int = 300, enable_thread_pool_queue_metrics: Boolean = false, action_exception_log_level: ActionExceptionLogLevelConfig = ActionExceptionLogLevelConfig(), jetty_max_concurrent_streams: Int ? = null, close_connection_percent: Double = 0.01, gzip: Boolean = true, minGzipSize: Int = 1024, cors: Map < String , CorsConfig > = mapOf(), concurrency_limiter_disabled: Boolean = false, concurrency_limiter_log_level: Level = Level.ERROR, shutdown_sleep_ms: Int = 0)","title":"WebConfig"},{"location":"0.x/misk/misk.web/-web-config/acceptors/","text":"// misk / misk.web / WebConfig / acceptors acceptors \u00b6 [jvm]\\ val acceptors : Int ? = null Number of acceptor threads.","title":"acceptors - Misk"},{"location":"0.x/misk/misk.web/-web-config/acceptors/#acceptors","text":"[jvm]\\ val acceptors : Int ? = null Number of acceptor threads.","title":"acceptors"},{"location":"0.x/misk/misk.web/-web-config/action_exception_log_level/","text":"// misk / misk.web / WebConfig / action_exception_log_level action_exception_log_level \u00b6 [jvm]\\ val action_exception_log_level : ActionExceptionLogLevelConfig","title":"action_exception_log_level - Misk"},{"location":"0.x/misk/misk.web/-web-config/action_exception_log_level/#action_exception_log_level","text":"[jvm]\\ val action_exception_log_level : ActionExceptionLogLevelConfig","title":"action_exception_log_level"},{"location":"0.x/misk/misk.web/-web-config/close_connection_percent/","text":"// misk / misk.web / WebConfig / close_connection_percent close_connection_percent \u00b6 [jvm]\\ val close_connection_percent : Double = 0.01 A value in 0.0..100.0. Include \u2018Connection: close\u2019 in this percentage of responses.","title":"close_connection_percent - Misk"},{"location":"0.x/misk/misk.web/-web-config/close_connection_percent/#close_connection_percent","text":"[jvm]\\ val close_connection_percent : Double = 0.01 A value in 0.0..100.0. Include \u2018Connection: close\u2019 in this percentage of responses.","title":"close_connection_percent"},{"location":"0.x/misk/misk.web/-web-config/concurrency_limiter_disabled/","text":"// misk / misk.web / WebConfig / concurrency_limiter_disabled concurrency_limiter_disabled \u00b6 [jvm]\\ val concurrency_limiter_disabled : Boolean = false If true, disables automatic load shedding when degraded.","title":"concurrency_limiter_disabled - Misk"},{"location":"0.x/misk/misk.web/-web-config/concurrency_limiter_disabled/#concurrency_limiter_disabled","text":"[jvm]\\ val concurrency_limiter_disabled : Boolean = false If true, disables automatic load shedding when degraded.","title":"concurrency_limiter_disabled"},{"location":"0.x/misk/misk.web/-web-config/concurrency_limiter_log_level/","text":"// misk / misk.web / WebConfig / concurrency_limiter_log_level concurrency_limiter_log_level \u00b6 [jvm]\\ val concurrency_limiter_log_level : Level The level of log when concurrency shedding.","title":"concurrency_limiter_log_level - Misk"},{"location":"0.x/misk/misk.web/-web-config/concurrency_limiter_log_level/#concurrency_limiter_log_level","text":"[jvm]\\ val concurrency_limiter_log_level : Level The level of log when concurrency shedding.","title":"concurrency_limiter_log_level"},{"location":"0.x/misk/misk.web/-web-config/cors/","text":"// misk / misk.web / WebConfig / cors cors \u00b6 [jvm]\\ val cors : Map < String , CorsConfig >","title":"cors - Misk"},{"location":"0.x/misk/misk.web/-web-config/cors/#cors","text":"[jvm]\\ val cors : Map < String , CorsConfig >","title":"cors"},{"location":"0.x/misk/misk.web/-web-config/enable_thread_pool_queue_metrics/","text":"// misk / misk.web / WebConfig / enable_thread_pool_queue_metrics enable_thread_pool_queue_metrics \u00b6 [jvm]\\ val enable_thread_pool_queue_metrics : Boolean = false Flag to enable thread pool queue metrics","title":"enable_thread_pool_queue_metrics - Misk"},{"location":"0.x/misk/misk.web/-web-config/enable_thread_pool_queue_metrics/#enable_thread_pool_queue_metrics","text":"[jvm]\\ val enable_thread_pool_queue_metrics : Boolean = false Flag to enable thread pool queue metrics","title":"enable_thread_pool_queue_metrics"},{"location":"0.x/misk/misk.web/-web-config/gzip/","text":"// misk / misk.web / WebConfig / gzip gzip \u00b6 [jvm]\\ val gzip : Boolean = true If true responses which are larger than the minGzipSize will be compressed.","title":"gzip - Misk"},{"location":"0.x/misk/misk.web/-web-config/gzip/#gzip","text":"[jvm]\\ val gzip : Boolean = true If true responses which are larger than the minGzipSize will be compressed.","title":"gzip"},{"location":"0.x/misk/misk.web/-web-config/health_port/","text":"// misk / misk.web / WebConfig / health_port health_port \u00b6 [jvm]\\ val health_port : Int If >= 0, use a dedicated jetty thread pool for health checking. A dedicated thread pool ensures that health checks are not queued or rejected when the service is saturated and queueing requests. If health checks are rejected and/or queued, the health checks may fail and k8s will kill the container, even though it might be perfectly healthy. This can cause cascading failures by sending more requests to other containers, resulting in longer queues and more health checks failures. TODO(rhall): make this required","title":"health_port - Misk"},{"location":"0.x/misk/misk.web/-web-config/health_port/#health_port","text":"[jvm]\\ val health_port : Int If >= 0, use a dedicated jetty thread pool for health checking. A dedicated thread pool ensures that health checks are not queued or rejected when the service is saturated and queueing requests. If health checks are rejected and/or queued, the health checks may fail and k8s will kill the container, even though it might be perfectly healthy. This can cause cascading failures by sending more requests to other containers, resulting in longer queues and more health checks failures. TODO(rhall): make this required","title":"health_port"},{"location":"0.x/misk/misk.web/-web-config/host/","text":"// misk / misk.web / WebConfig / host host \u00b6 [jvm]\\ val host : String ? = null The network interface to bind to. Null or 0.0.0.0 to bind to all interfaces.","title":"host - Misk"},{"location":"0.x/misk/misk.web/-web-config/host/#host","text":"[jvm]\\ val host : String ? = null The network interface to bind to. Null or 0.0.0.0 to bind to all interfaces.","title":"host"},{"location":"0.x/misk/misk.web/-web-config/http2/","text":"// misk / misk.web / WebConfig / http2 http2 \u00b6 [jvm]\\ val http2 : Boolean = false HTTP/2 support is currently opt-in because we can\u2019t load balance it dynamically.","title":"http2 - Misk"},{"location":"0.x/misk/misk.web/-web-config/http2/#http2","text":"[jvm]\\ val http2 : Boolean = false HTTP/2 support is currently opt-in because we can\u2019t load balance it dynamically.","title":"http2"},{"location":"0.x/misk/misk.web/-web-config/idle_timeout/","text":"// misk / misk.web / WebConfig / idle_timeout idle_timeout \u00b6 [jvm]\\ val idle_timeout : Long = 0 If a connection is unused for this many milliseconds, it is closed. If zero, it is not closed.","title":"idle_timeout - Misk"},{"location":"0.x/misk/misk.web/-web-config/idle_timeout/#idle_timeout","text":"[jvm]\\ val idle_timeout : Long = 0 If a connection is unused for this many milliseconds, it is closed. If zero, it is not closed.","title":"idle_timeout"},{"location":"0.x/misk/misk.web/-web-config/jetty_max_concurrent_streams/","text":"// misk / misk.web / WebConfig / jetty_max_concurrent_streams jetty_max_concurrent_streams \u00b6 [jvm]\\ val jetty_max_concurrent_streams : Int ? = null The maximum number of streams per HTTP/2 connection.","title":"jetty_max_concurrent_streams - Misk"},{"location":"0.x/misk/misk.web/-web-config/jetty_max_concurrent_streams/#jetty_max_concurrent_streams","text":"[jvm]\\ val jetty_max_concurrent_streams : Int ? = null The maximum number of streams per HTTP/2 connection.","title":"jetty_max_concurrent_streams"},{"location":"0.x/misk/misk.web/-web-config/jetty_max_thread_pool_queue_size/","text":"// misk / misk.web / WebConfig / jetty_max_thread_pool_queue_size jetty_max_thread_pool_queue_size \u00b6 [jvm]\\ val jetty_max_thread_pool_queue_size : Int = 300 Maximum number of items in the queue for Jetty\u2019s thread pool. If 0, no queueing is used and requests are directly handed off to the thread pool. If a thread is not available (i.e max threads in use) the request is rejected. Unfortunately Jetty rejects requests by closing the socket instead of returning a 429. This can lead to confusing EOFExceptions for the client.","title":"jetty_max_thread_pool_queue_size - Misk"},{"location":"0.x/misk/misk.web/-web-config/jetty_max_thread_pool_queue_size/#jetty_max_thread_pool_queue_size","text":"[jvm]\\ val jetty_max_thread_pool_queue_size : Int = 300 Maximum number of items in the queue for Jetty\u2019s thread pool. If 0, no queueing is used and requests are directly handed off to the thread pool. If a thread is not available (i.e max threads in use) the request is rejected. Unfortunately Jetty rejects requests by closing the socket instead of returning a 429. This can lead to confusing EOFExceptions for the client.","title":"jetty_max_thread_pool_queue_size"},{"location":"0.x/misk/misk.web/-web-config/jetty_max_thread_pool_size/","text":"// misk / misk.web / WebConfig / jetty_max_thread_pool_size jetty_max_thread_pool_size \u00b6 [jvm]\\ val jetty_max_thread_pool_size : Int = 200 Maximum number of threads in Jetty\u2019s thread pool.","title":"jetty_max_thread_pool_size - Misk"},{"location":"0.x/misk/misk.web/-web-config/jetty_max_thread_pool_size/#jetty_max_thread_pool_size","text":"[jvm]\\ val jetty_max_thread_pool_size : Int = 200 Maximum number of threads in Jetty\u2019s thread pool.","title":"jetty_max_thread_pool_size"},{"location":"0.x/misk/misk.web/-web-config/jetty_min_thread_pool_size/","text":"// misk / misk.web / WebConfig / jetty_min_thread_pool_size jetty_min_thread_pool_size \u00b6 [jvm]\\ val jetty_min_thread_pool_size : Int = 8 Minimum number of threads in Jetty\u2019s thread pool.","title":"jetty_min_thread_pool_size - Misk"},{"location":"0.x/misk/misk.web/-web-config/jetty_min_thread_pool_size/#jetty_min_thread_pool_size","text":"[jvm]\\ val jetty_min_thread_pool_size : Int = 8 Minimum number of threads in Jetty\u2019s thread pool.","title":"jetty_min_thread_pool_size"},{"location":"0.x/misk/misk.web/-web-config/min-gzip-size/","text":"// misk / misk.web / WebConfig / minGzipSize minGzipSize \u00b6 [jvm]\\ val minGzipSize : Int = 1024 The minimum size in bytes before the response body will be compressed.","title":"minGzipSize - Misk"},{"location":"0.x/misk/misk.web/-web-config/min-gzip-size/#mingzipsize","text":"[jvm]\\ val minGzipSize : Int = 1024 The minimum size in bytes before the response body will be compressed.","title":"minGzipSize"},{"location":"0.x/misk/misk.web/-web-config/port/","text":"// misk / misk.web / WebConfig / port port \u00b6 [jvm]\\ val port : Int HTTP port to listen on, or 0 for any available port.","title":"port - Misk"},{"location":"0.x/misk/misk.web/-web-config/port/#port","text":"[jvm]\\ val port : Int HTTP port to listen on, or 0 for any available port.","title":"port"},{"location":"0.x/misk/misk.web/-web-config/queue_size/","text":"// misk / misk.web / WebConfig / queue_size queue_size \u00b6 [jvm]\\ val queue_size : Int ? = null The accept backlog.","title":"queue_size - Misk"},{"location":"0.x/misk/misk.web/-web-config/queue_size/#queue_size","text":"[jvm]\\ val queue_size : Int ? = null The accept backlog.","title":"queue_size"},{"location":"0.x/misk/misk.web/-web-config/selectors/","text":"// misk / misk.web / WebConfig / selectors selectors \u00b6 [jvm]\\ val selectors : Int ? = null Number of NIO selector threads.","title":"selectors - Misk"},{"location":"0.x/misk/misk.web/-web-config/selectors/#selectors","text":"[jvm]\\ val selectors : Int ? = null Number of NIO selector threads.","title":"selectors"},{"location":"0.x/misk/misk.web/-web-config/shutdown_sleep_ms/","text":"// misk / misk.web / WebConfig / shutdown_sleep_ms shutdown_sleep_ms \u00b6 [jvm]\\ val shutdown_sleep_ms : Int = 0 The number of milliseconds to sleep before commencing service shutdown.","title":"shutdown_sleep_ms - Misk"},{"location":"0.x/misk/misk.web/-web-config/shutdown_sleep_ms/#shutdown_sleep_ms","text":"[jvm]\\ val shutdown_sleep_ms : Int = 0 The number of milliseconds to sleep before commencing service shutdown.","title":"shutdown_sleep_ms"},{"location":"0.x/misk/misk.web/-web-config/ssl/","text":"// misk / misk.web / WebConfig / ssl ssl \u00b6 [jvm]\\ val ssl : WebSslConfig ? = null","title":"ssl - Misk"},{"location":"0.x/misk/misk.web/-web-config/ssl/#ssl","text":"[jvm]\\ val ssl : WebSslConfig ? = null","title":"ssl"},{"location":"0.x/misk/misk.web/-web-config/unix_domain_socket/","text":"// misk / misk.web / WebConfig / unix_domain_socket unix_domain_socket \u00b6 [jvm]\\ val unix_domain_socket : WebUnixDomainSocketConfig ? = null Configuration to enable Jetty to listen for traffic on a unix domain socket being proxied through a sidecar (like Envoy).","title":"unix_domain_socket - Misk"},{"location":"0.x/misk/misk.web/-web-config/unix_domain_socket/#unix_domain_socket","text":"[jvm]\\ val unix_domain_socket : WebUnixDomainSocketConfig ? = null Configuration to enable Jetty to listen for traffic on a unix domain socket being proxied through a sidecar (like Envoy).","title":"unix_domain_socket"},{"location":"0.x/misk/misk.web/-web-ssl-config/","text":"// misk / misk.web / WebSslConfig WebSslConfig \u00b6 [jvm]\\ data class WebSslConfig (port: Int , cert_store: CertStoreConfig, trust_store: TrustStoreConfig?, mutual_auth: WebSslConfig.MutualAuth , cipher_compatibility: WebSslConfig.CipherCompatibility ) Types \u00b6 Name Summary CipherCompatibility [jvm] enum CipherCompatibility : Enum < WebSslConfig.CipherCompatibility > MutualAuth [jvm] enum MutualAuth : Enum < WebSslConfig.MutualAuth > Properties \u00b6 Name Summary cert_store [jvm] val cert_store : CertStoreConfig cipher_compatibility [jvm] val cipher_compatibility : WebSslConfig.CipherCompatibility mutual_auth [jvm] val mutual_auth : WebSslConfig.MutualAuth port [jvm] val port : Int HTTPS port to listen on, or 0 for any available port. trust_store [jvm] val trust_store : TrustStoreConfig? = null","title":"WebSslConfig - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/#websslconfig","text":"[jvm]\\ data class WebSslConfig (port: Int , cert_store: CertStoreConfig, trust_store: TrustStoreConfig?, mutual_auth: WebSslConfig.MutualAuth , cipher_compatibility: WebSslConfig.CipherCompatibility )","title":"WebSslConfig"},{"location":"0.x/misk/misk.web/-web-ssl-config/#types","text":"Name Summary CipherCompatibility [jvm] enum CipherCompatibility : Enum < WebSslConfig.CipherCompatibility > MutualAuth [jvm] enum MutualAuth : Enum < WebSslConfig.MutualAuth >","title":"Types"},{"location":"0.x/misk/misk.web/-web-ssl-config/#properties","text":"Name Summary cert_store [jvm] val cert_store : CertStoreConfig cipher_compatibility [jvm] val cipher_compatibility : WebSslConfig.CipherCompatibility mutual_auth [jvm] val mutual_auth : WebSslConfig.MutualAuth port [jvm] val port : Int HTTPS port to listen on, or 0 for any available port. trust_store [jvm] val trust_store : TrustStoreConfig? = null","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-web-ssl-config/","text":"// misk / misk.web / WebSslConfig / WebSslConfig WebSslConfig \u00b6 [jvm]\\ fun WebSslConfig (port: Int , cert_store: CertStoreConfig, trust_store: TrustStoreConfig? = null, mutual_auth: WebSslConfig.MutualAuth = MutualAuth.REQUIRED, cipher_compatibility: WebSslConfig.CipherCompatibility = CipherCompatibility.COMPATIBLE)","title":"WebSslConfig - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-web-ssl-config/#websslconfig","text":"[jvm]\\ fun WebSslConfig (port: Int , cert_store: CertStoreConfig, trust_store: TrustStoreConfig? = null, mutual_auth: WebSslConfig.MutualAuth = MutualAuth.REQUIRED, cipher_compatibility: WebSslConfig.CipherCompatibility = CipherCompatibility.COMPATIBLE)","title":"WebSslConfig"},{"location":"0.x/misk/misk.web/-web-ssl-config/cert_store/","text":"// misk / misk.web / WebSslConfig / cert_store cert_store \u00b6 [jvm]\\ val cert_store : CertStoreConfig","title":"cert_store - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/cert_store/#cert_store","text":"[jvm]\\ val cert_store : CertStoreConfig","title":"cert_store"},{"location":"0.x/misk/misk.web/-web-ssl-config/cipher_compatibility/","text":"// misk / misk.web / WebSslConfig / cipher_compatibility cipher_compatibility \u00b6 [jvm]\\ val cipher_compatibility : WebSslConfig.CipherCompatibility","title":"cipher_compatibility - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/cipher_compatibility/#cipher_compatibility","text":"[jvm]\\ val cipher_compatibility : WebSslConfig.CipherCompatibility","title":"cipher_compatibility"},{"location":"0.x/misk/misk.web/-web-ssl-config/mutual_auth/","text":"// misk / misk.web / WebSslConfig / mutual_auth mutual_auth \u00b6 [jvm]\\ val mutual_auth : WebSslConfig.MutualAuth","title":"mutual_auth - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/mutual_auth/#mutual_auth","text":"[jvm]\\ val mutual_auth : WebSslConfig.MutualAuth","title":"mutual_auth"},{"location":"0.x/misk/misk.web/-web-ssl-config/port/","text":"// misk / misk.web / WebSslConfig / port port \u00b6 [jvm]\\ val port : Int HTTPS port to listen on, or 0 for any available port.","title":"port - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/port/#port","text":"[jvm]\\ val port : Int HTTPS port to listen on, or 0 for any available port.","title":"port"},{"location":"0.x/misk/misk.web/-web-ssl-config/trust_store/","text":"// misk / misk.web / WebSslConfig / trust_store trust_store \u00b6 [jvm]\\ val trust_store : TrustStoreConfig? = null","title":"trust_store - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/trust_store/#trust_store","text":"[jvm]\\ val trust_store : TrustStoreConfig? = null","title":"trust_store"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/","text":"// misk / misk.web / WebSslConfig / CipherCompatibility CipherCompatibility \u00b6 [jvm]\\ enum CipherCompatibility : Enum < WebSslConfig.CipherCompatibility > Entries \u00b6 RESTRICTED [jvm] RESTRICTED () Supports a reduced set of SSL features, intended to meet stricter compliance requirements. MODERN [jvm] MODERN () Supports a wide set of SSL features, allowing modern clients to negotiate SSL. COMPATIBLE [jvm] COMPATIBLE () Allows the broadest set of clients, including clients that support only out-of-date SSL features. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"CipherCompatibility - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/#ciphercompatibility","text":"[jvm]\\ enum CipherCompatibility : Enum < WebSslConfig.CipherCompatibility >","title":"CipherCompatibility"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/#entries","text":"RESTRICTED [jvm] RESTRICTED () Supports a reduced set of SSL features, intended to meet stricter compliance requirements. MODERN [jvm] MODERN () Supports a wide set of SSL features, allowing modern clients to negotiate SSL. COMPATIBLE [jvm] COMPATIBLE () Allows the broadest set of clients, including clients that support only out-of-date SSL features.","title":"Entries"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-c-o-m-p-a-t-i-b-l-e/","text":"// misk / misk.web / WebSslConfig / CipherCompatibility / COMPATIBLE COMPATIBLE \u00b6 [jvm]\\ COMPATIBLE () Allows the broadest set of clients, including clients that support only out-of-date SSL features. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"COMPATIBLE - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-c-o-m-p-a-t-i-b-l-e/#compatible","text":"[jvm]\\ COMPATIBLE () Allows the broadest set of clients, including clients that support only out-of-date SSL features.","title":"COMPATIBLE"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-c-o-m-p-a-t-i-b-l-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-m-o-d-e-r-n/","text":"// misk / misk.web / WebSslConfig / CipherCompatibility / MODERN MODERN \u00b6 [jvm]\\ MODERN () Supports a wide set of SSL features, allowing modern clients to negotiate SSL. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"MODERN - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-m-o-d-e-r-n/#modern","text":"[jvm]\\ MODERN () Supports a wide set of SSL features, allowing modern clients to negotiate SSL.","title":"MODERN"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-m-o-d-e-r-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-r-e-s-t-r-i-c-t-e-d/","text":"// misk / misk.web / WebSslConfig / CipherCompatibility / RESTRICTED RESTRICTED \u00b6 [jvm]\\ RESTRICTED () Supports a reduced set of SSL features, intended to meet stricter compliance requirements. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"RESTRICTED - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-r-e-s-t-r-i-c-t-e-d/#restricted","text":"[jvm]\\ RESTRICTED () Supports a reduced set of SSL features, intended to meet stricter compliance requirements.","title":"RESTRICTED"},{"location":"0.x/misk/misk.web/-web-ssl-config/-cipher-compatibility/-r-e-s-t-r-i-c-t-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/","text":"// misk / misk.web / WebSslConfig / MutualAuth MutualAuth \u00b6 [jvm]\\ enum MutualAuth : Enum < WebSslConfig.MutualAuth > Entries \u00b6 DESIRED [jvm] DESIRED () REQUIRED [jvm] REQUIRED () NONE [jvm] NONE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"MutualAuth - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/#mutualauth","text":"[jvm]\\ enum MutualAuth : Enum < WebSslConfig.MutualAuth >","title":"MutualAuth"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/#entries","text":"DESIRED [jvm] DESIRED () REQUIRED [jvm] REQUIRED () NONE [jvm] NONE ()","title":"Entries"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-d-e-s-i-r-e-d/","text":"// misk / misk.web / WebSslConfig / MutualAuth / DESIRED DESIRED \u00b6 [jvm]\\ DESIRED () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"DESIRED - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-d-e-s-i-r-e-d/#desired","text":"[jvm]\\ DESIRED ()","title":"DESIRED"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-d-e-s-i-r-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-n-o-n-e/","text":"// misk / misk.web / WebSslConfig / MutualAuth / NONE NONE \u00b6 [jvm]\\ NONE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"NONE - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-n-o-n-e/#none","text":"[jvm]\\ NONE ()","title":"NONE"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-n-o-n-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-r-e-q-u-i-r-e-d/","text":"// misk / misk.web / WebSslConfig / MutualAuth / REQUIRED REQUIRED \u00b6 [jvm]\\ REQUIRED () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"REQUIRED - Misk"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-r-e-q-u-i-r-e-d/#required","text":"[jvm]\\ REQUIRED ()","title":"REQUIRED"},{"location":"0.x/misk/misk.web/-web-ssl-config/-mutual-auth/-r-e-q-u-i-r-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/","text":"// misk / misk.web / WebUnixDomainSocketConfig WebUnixDomainSocketConfig \u00b6 [jvm]\\ data class WebUnixDomainSocketConfig (path: String , h2c: Boolean ?) Properties \u00b6 Name Summary h2c [jvm] val h2c : Boolean ? = true If true, the listener will support H2C. path [jvm] val path : String The Unix Domain Socket to listen on.","title":"WebUnixDomainSocketConfig - Misk"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/#webunixdomainsocketconfig","text":"[jvm]\\ data class WebUnixDomainSocketConfig (path: String , h2c: Boolean ?)","title":"WebUnixDomainSocketConfig"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/#properties","text":"Name Summary h2c [jvm] val h2c : Boolean ? = true If true, the listener will support H2C. path [jvm] val path : String The Unix Domain Socket to listen on.","title":"Properties"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/-web-unix-domain-socket-config/","text":"// misk / misk.web / WebUnixDomainSocketConfig / WebUnixDomainSocketConfig WebUnixDomainSocketConfig \u00b6 [jvm]\\ fun WebUnixDomainSocketConfig (path: String , h2c: Boolean ? = true)","title":"WebUnixDomainSocketConfig - Misk"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/-web-unix-domain-socket-config/#webunixdomainsocketconfig","text":"[jvm]\\ fun WebUnixDomainSocketConfig (path: String , h2c: Boolean ? = true)","title":"WebUnixDomainSocketConfig"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/h2c/","text":"// misk / misk.web / WebUnixDomainSocketConfig / h2c h2c \u00b6 [jvm]\\ val h2c : Boolean ? = true If true, the listener will support H2C.","title":"h2c - Misk"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/h2c/#h2c","text":"[jvm]\\ val h2c : Boolean ? = true If true, the listener will support H2C.","title":"h2c"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/path/","text":"// misk / misk.web / WebUnixDomainSocketConfig / path path \u00b6 [jvm]\\ val path : String The Unix Domain Socket to listen on.","title":"path - Misk"},{"location":"0.x/misk/misk.web/-web-unix-domain-socket-config/path/#path","text":"[jvm]\\ val path : String The Unix Domain Socket to listen on.","title":"path"},{"location":"0.x/misk/misk.web.actions/","text":"// misk / misk.web.actions Package misk.web.actions \u00b6 Types \u00b6 Name Summary FakeWebSocket [jvm] class FakeWebSocket : WebSocket InternalErrorAction [jvm] @Singleton class InternalErrorAction @Injectconstructor : WebAction LivenessCheckAction [jvm] @Singleton class LivenessCheckAction : WebAction NotFoundAction [jvm] @Singleton class NotFoundAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >) : WebAction ReadinessCheckAction [jvm] @Singleton class ReadinessCheckAction : WebAction StatusAction [jvm] @Singleton class StatusAction : WebAction Returns the current status of the service for programmatic tools that want to query for the current state of the server Functions \u00b6 Name Summary asChain [jvm] fun WebAction. asChain (function: KFunction <*>, args: List < Any ?>, interceptors: List < ApplicationInterceptor >, httpCall: HttpCall ): Chain","title":"Package misk.web.actions - Misk"},{"location":"0.x/misk/misk.web.actions/#package-miskwebactions","text":"","title":"Package misk.web.actions"},{"location":"0.x/misk/misk.web.actions/#types","text":"Name Summary FakeWebSocket [jvm] class FakeWebSocket : WebSocket InternalErrorAction [jvm] @Singleton class InternalErrorAction @Injectconstructor : WebAction LivenessCheckAction [jvm] @Singleton class LivenessCheckAction : WebAction NotFoundAction [jvm] @Singleton class NotFoundAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >) : WebAction ReadinessCheckAction [jvm] @Singleton class ReadinessCheckAction : WebAction StatusAction [jvm] @Singleton class StatusAction : WebAction Returns the current status of the service for programmatic tools that want to query for the current state of the server","title":"Types"},{"location":"0.x/misk/misk.web.actions/#functions","text":"Name Summary asChain [jvm] fun WebAction. asChain (function: KFunction <*>, args: List < Any ?>, interceptors: List < ApplicationInterceptor >, httpCall: HttpCall ): Chain","title":"Functions"},{"location":"0.x/misk/misk.web.actions/as-chain/","text":"// misk / misk.web.actions / asChain asChain \u00b6 [jvm]\\ fun WebAction. asChain (function: KFunction <*>, args: List < Any ?>, interceptors: List < ApplicationInterceptor >, httpCall: HttpCall ): Chain","title":"asChain - Misk"},{"location":"0.x/misk/misk.web.actions/as-chain/#aschain","text":"[jvm]\\ fun WebAction. asChain (function: KFunction <*>, args: List < Any ?>, interceptors: List < ApplicationInterceptor >, httpCall: HttpCall ): Chain","title":"asChain"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/","text":"// misk / misk.web.actions / FakeWebSocket FakeWebSocket \u00b6 [jvm]\\ class FakeWebSocket : WebSocket Functions \u00b6 Name Summary cancel [jvm] open override fun cancel () close [jvm] open override fun close (code: Int , reason: String ?): Boolean queueSize [jvm] open override fun queueSize (): Long send [jvm] open override fun send (text: String ): Boolean open override fun send (bytes: ByteString): Boolean takeLog [jvm] fun takeLog (): List < String >","title":"FakeWebSocket - Misk"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/#fakewebsocket","text":"[jvm]\\ class FakeWebSocket : WebSocket","title":"FakeWebSocket"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/#functions","text":"Name Summary cancel [jvm] open override fun cancel () close [jvm] open override fun close (code: Int , reason: String ?): Boolean queueSize [jvm] open override fun queueSize (): Long send [jvm] open override fun send (text: String ): Boolean open override fun send (bytes: ByteString): Boolean takeLog [jvm] fun takeLog (): List < String >","title":"Functions"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/-fake-web-socket/","text":"// misk / misk.web.actions / FakeWebSocket / FakeWebSocket FakeWebSocket \u00b6 [jvm]\\ fun FakeWebSocket ()","title":"FakeWebSocket - Misk"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/-fake-web-socket/#fakewebsocket","text":"[jvm]\\ fun FakeWebSocket ()","title":"FakeWebSocket"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/cancel/","text":"// misk / misk.web.actions / FakeWebSocket / cancel cancel \u00b6 [jvm]\\ open override fun cancel ()","title":"cancel - Misk"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/cancel/#cancel","text":"[jvm]\\ open override fun cancel ()","title":"cancel"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/close/","text":"// misk / misk.web.actions / FakeWebSocket / close close \u00b6 [jvm]\\ open override fun close (code: Int , reason: String ?): Boolean","title":"close - Misk"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/close/#close","text":"[jvm]\\ open override fun close (code: Int , reason: String ?): Boolean","title":"close"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/queue-size/","text":"// misk / misk.web.actions / FakeWebSocket / queueSize queueSize \u00b6 [jvm]\\ open override fun queueSize (): Long","title":"queueSize - Misk"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/queue-size/#queuesize","text":"[jvm]\\ open override fun queueSize (): Long","title":"queueSize"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/send/","text":"// misk / misk.web.actions / FakeWebSocket / send send \u00b6 [jvm]\\ open override fun send (bytes: ByteString): Boolean open override fun send (text: String ): Boolean","title":"send - Misk"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/send/#send","text":"[jvm]\\ open override fun send (bytes: ByteString): Boolean open override fun send (text: String ): Boolean","title":"send"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/take-log/","text":"// misk / misk.web.actions / FakeWebSocket / takeLog takeLog \u00b6 [jvm]\\ fun takeLog (): List < String >","title":"takeLog - Misk"},{"location":"0.x/misk/misk.web.actions/-fake-web-socket/take-log/#takelog","text":"[jvm]\\ fun takeLog (): List < String >","title":"takeLog"},{"location":"0.x/misk/misk.web.actions/-internal-error-action/","text":"// misk / misk.web.actions / InternalErrorAction InternalErrorAction \u00b6 [jvm]\\ @Singleton class InternalErrorAction @Injectconstructor : WebAction Functions \u00b6 Name Summary error [jvm] fun error (): Nothing","title":"InternalErrorAction - Misk"},{"location":"0.x/misk/misk.web.actions/-internal-error-action/#internalerroraction","text":"[jvm]\\ @Singleton class InternalErrorAction @Injectconstructor : WebAction","title":"InternalErrorAction"},{"location":"0.x/misk/misk.web.actions/-internal-error-action/#functions","text":"Name Summary error [jvm] fun error (): Nothing","title":"Functions"},{"location":"0.x/misk/misk.web.actions/-internal-error-action/-internal-error-action/","text":"// misk / misk.web.actions / InternalErrorAction / InternalErrorAction InternalErrorAction \u00b6 [jvm]\\ @Inject fun InternalErrorAction ()","title":"InternalErrorAction - Misk"},{"location":"0.x/misk/misk.web.actions/-internal-error-action/-internal-error-action/#internalerroraction","text":"[jvm]\\ @Inject fun InternalErrorAction ()","title":"InternalErrorAction"},{"location":"0.x/misk/misk.web.actions/-internal-error-action/error/","text":"// misk / misk.web.actions / InternalErrorAction / error error \u00b6 [jvm]\\ fun error (): Nothing","title":"error - Misk"},{"location":"0.x/misk/misk.web.actions/-internal-error-action/error/#error","text":"[jvm]\\ fun error (): Nothing","title":"error"},{"location":"0.x/misk/misk.web.actions/-liveness-check-action/","text":"// misk / misk.web.actions / LivenessCheckAction LivenessCheckAction \u00b6 [jvm]\\ @Singleton class LivenessCheckAction : WebAction Functions \u00b6 Name Summary livenessCheck [jvm] fun livenessCheck (): Response< String >","title":"LivenessCheckAction - Misk"},{"location":"0.x/misk/misk.web.actions/-liveness-check-action/#livenesscheckaction","text":"[jvm]\\ @Singleton class LivenessCheckAction : WebAction","title":"LivenessCheckAction"},{"location":"0.x/misk/misk.web.actions/-liveness-check-action/#functions","text":"Name Summary livenessCheck [jvm] fun livenessCheck (): Response< String >","title":"Functions"},{"location":"0.x/misk/misk.web.actions/-liveness-check-action/liveness-check/","text":"// misk / misk.web.actions / LivenessCheckAction / livenessCheck livenessCheck \u00b6 [jvm]\\ fun livenessCheck (): Response< String >","title":"livenessCheck - Misk"},{"location":"0.x/misk/misk.web.actions/-liveness-check-action/liveness-check/#livenesscheck","text":"[jvm]\\ fun livenessCheck (): Response< String >","title":"livenessCheck"},{"location":"0.x/misk/misk.web.actions/-not-found-action/","text":"// misk / misk.web.actions / NotFoundAction NotFoundAction \u00b6 [jvm]\\ @Singleton class NotFoundAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >) : WebAction Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary notFound [jvm] fun notFound (path: String ): Response<ResponseBody>","title":"NotFoundAction - Misk"},{"location":"0.x/misk/misk.web.actions/-not-found-action/#notfoundaction","text":"[jvm]\\ @Singleton class NotFoundAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >) : WebAction","title":"NotFoundAction"},{"location":"0.x/misk/misk.web.actions/-not-found-action/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.web.actions/-not-found-action/#functions","text":"Name Summary notFound [jvm] fun notFound (path: String ): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk/misk.web.actions/-not-found-action/-not-found-action/","text":"// misk / misk.web.actions / NotFoundAction / NotFoundAction NotFoundAction \u00b6 [jvm]\\ @Inject fun NotFoundAction (clientHttpCall: ActionScoped< HttpCall >)","title":"NotFoundAction - Misk"},{"location":"0.x/misk/misk.web.actions/-not-found-action/-not-found-action/#notfoundaction","text":"[jvm]\\ @Inject fun NotFoundAction (clientHttpCall: ActionScoped< HttpCall >)","title":"NotFoundAction"},{"location":"0.x/misk/misk.web.actions/-not-found-action/not-found/","text":"// misk / misk.web.actions / NotFoundAction / notFound notFound \u00b6 [jvm]\\ fun notFound (path: String ): Response<ResponseBody>","title":"notFound - Misk"},{"location":"0.x/misk/misk.web.actions/-not-found-action/not-found/#notfound","text":"[jvm]\\ fun notFound (path: String ): Response<ResponseBody>","title":"notFound"},{"location":"0.x/misk/misk.web.actions/-not-found-action/-companion/","text":"// misk / misk.web.actions / NotFoundAction / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary response [jvm] fun response (path: String ): Response<ResponseBody>","title":"Companion - Misk"},{"location":"0.x/misk/misk.web.actions/-not-found-action/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web.actions/-not-found-action/-companion/#functions","text":"Name Summary response [jvm] fun response (path: String ): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk/misk.web.actions/-not-found-action/-companion/response/","text":"// misk / misk.web.actions / NotFoundAction / Companion / response response \u00b6 [jvm]\\ fun response (path: String ): Response<ResponseBody>","title":"response - Misk"},{"location":"0.x/misk/misk.web.actions/-not-found-action/-companion/response/#response","text":"[jvm]\\ fun response (path: String ): Response<ResponseBody>","title":"response"},{"location":"0.x/misk/misk.web.actions/-readiness-check-action/","text":"// misk / misk.web.actions / ReadinessCheckAction ReadinessCheckAction \u00b6 [jvm]\\ @Singleton class ReadinessCheckAction : WebAction Functions \u00b6 Name Summary readinessCheck [jvm] fun readinessCheck (): Response< String >","title":"ReadinessCheckAction - Misk"},{"location":"0.x/misk/misk.web.actions/-readiness-check-action/#readinesscheckaction","text":"[jvm]\\ @Singleton class ReadinessCheckAction : WebAction","title":"ReadinessCheckAction"},{"location":"0.x/misk/misk.web.actions/-readiness-check-action/#functions","text":"Name Summary readinessCheck [jvm] fun readinessCheck (): Response< String >","title":"Functions"},{"location":"0.x/misk/misk.web.actions/-readiness-check-action/readiness-check/","text":"// misk / misk.web.actions / ReadinessCheckAction / readinessCheck readinessCheck \u00b6 [jvm]\\ fun readinessCheck (): Response< String >","title":"readinessCheck - Misk"},{"location":"0.x/misk/misk.web.actions/-readiness-check-action/readiness-check/#readinesscheck","text":"[jvm]\\ fun readinessCheck (): Response< String >","title":"readinessCheck"},{"location":"0.x/misk/misk.web.actions/-status-action/","text":"// misk / misk.web.actions / StatusAction StatusAction \u00b6 [jvm]\\ @Singleton class StatusAction : WebAction Returns the current status of the service for programmatic tools that want to query for the current state of the server Types \u00b6 Name Summary Companion [jvm] object Companion ServerStatus [jvm] data class ServerStatus (serviceStatus: Map < String , Service.State>, healthCheckStatus: Map < String , HealthStatus>) Functions \u00b6 Name Summary getStatus [jvm] fun getStatus (): StatusAction.ServerStatus","title":"StatusAction - Misk"},{"location":"0.x/misk/misk.web.actions/-status-action/#statusaction","text":"[jvm]\\ @Singleton class StatusAction : WebAction Returns the current status of the service for programmatic tools that want to query for the current state of the server","title":"StatusAction"},{"location":"0.x/misk/misk.web.actions/-status-action/#types","text":"Name Summary Companion [jvm] object Companion ServerStatus [jvm] data class ServerStatus (serviceStatus: Map < String , Service.State>, healthCheckStatus: Map < String , HealthStatus>)","title":"Types"},{"location":"0.x/misk/misk.web.actions/-status-action/#functions","text":"Name Summary getStatus [jvm] fun getStatus (): StatusAction.ServerStatus","title":"Functions"},{"location":"0.x/misk/misk.web.actions/-status-action/get-status/","text":"// misk / misk.web.actions / StatusAction / getStatus getStatus \u00b6 [jvm]\\ fun getStatus (): StatusAction.ServerStatus","title":"getStatus - Misk"},{"location":"0.x/misk/misk.web.actions/-status-action/get-status/#getstatus","text":"[jvm]\\ fun getStatus (): StatusAction.ServerStatus","title":"getStatus"},{"location":"0.x/misk/misk.web.actions/-status-action/-companion/","text":"// misk / misk.web.actions / StatusAction / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk/misk.web.actions/-status-action/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/","text":"// misk / misk.web.actions / StatusAction / ServerStatus ServerStatus \u00b6 [jvm]\\ data class ServerStatus (serviceStatus: Map < String , Service.State>, healthCheckStatus: Map < String , HealthStatus>) Properties \u00b6 Name Summary healthCheckStatus [jvm] val healthCheckStatus : Map < String , HealthStatus> serviceStatus [jvm] val serviceStatus : Map < String , Service.State>","title":"ServerStatus - Misk"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/#serverstatus","text":"[jvm]\\ data class ServerStatus (serviceStatus: Map < String , Service.State>, healthCheckStatus: Map < String , HealthStatus>)","title":"ServerStatus"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/#properties","text":"Name Summary healthCheckStatus [jvm] val healthCheckStatus : Map < String , HealthStatus> serviceStatus [jvm] val serviceStatus : Map < String , Service.State>","title":"Properties"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/-server-status/","text":"// misk / misk.web.actions / StatusAction / ServerStatus / ServerStatus ServerStatus \u00b6 [jvm]\\ fun ServerStatus (serviceStatus: Map < String , Service.State>, healthCheckStatus: Map < String , HealthStatus>)","title":"ServerStatus - Misk"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/-server-status/#serverstatus","text":"[jvm]\\ fun ServerStatus (serviceStatus: Map < String , Service.State>, healthCheckStatus: Map < String , HealthStatus>)","title":"ServerStatus"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/health-check-status/","text":"// misk / misk.web.actions / StatusAction / ServerStatus / healthCheckStatus healthCheckStatus \u00b6 [jvm]\\ val healthCheckStatus : Map < String , HealthStatus>","title":"healthCheckStatus - Misk"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/health-check-status/#healthcheckstatus","text":"[jvm]\\ val healthCheckStatus : Map < String , HealthStatus>","title":"healthCheckStatus"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/service-status/","text":"// misk / misk.web.actions / StatusAction / ServerStatus / serviceStatus serviceStatus \u00b6 [jvm]\\ val serviceStatus : Map < String , Service.State>","title":"serviceStatus - Misk"},{"location":"0.x/misk/misk.web.actions/-status-action/-server-status/service-status/#servicestatus","text":"[jvm]\\ val serviceStatus : Map < String , Service.State>","title":"serviceStatus"},{"location":"0.x/misk/misk.web.exceptions/","text":"// misk / misk.web.exceptions Package misk.web.exceptions \u00b6 Types \u00b6 Name Summary ActionExceptionLogLevelConfig [jvm] data class ActionExceptionLogLevelConfig (client_error_level: Level, server_error_level: Level) : Config Configures the log Level for an ActionException. ExceptionHandlingInterceptor [jvm] class ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver ) : NetworkInterceptor Converts and logs application and component level dispatch exceptions into the appropriate response format. Allows application and component code to control how exceptions are represented to clients; for example by setting the status code appropriately, or by returning a specialized response format specific to the error. Components can control how exceptions are mapped by installing ExceptionMapper via the ExceptionMapperModule ExceptionMapper [jvm] interface ExceptionMapper <in T : Throwable > Maps an exception to a Response ExceptionMapperModule [jvm] class ExceptionMapperModule < M : ExceptionMapper < T >, in T : Throwable >(exceptionClass: KClass < T >, mapperClass: KClass < M >) : KAbstractModule Binds a Throwable to an ExceptionMapper . ExceptionMapperResolver [jvm] @Singleton class ExceptionMapperResolver GrpcErrorResponse [jvm] data class GrpcErrorResponse (status: GrpcStatus, message: String ?, details: List <AnyMessage>) RequestBodyExceptionMapper [jvm] class RequestBodyExceptionMapper : ExceptionMapper < RequestBodyException > Functions \u00b6 Name Summary toGrpcStatus [jvm] fun toGrpcStatus (statusCode: Int ): GrpcStatus https://grpc.github.io/grpc/core/md_doc_http-grpc-status-mapping.html","title":"Package misk.web.exceptions - Misk"},{"location":"0.x/misk/misk.web.exceptions/#package-miskwebexceptions","text":"","title":"Package misk.web.exceptions"},{"location":"0.x/misk/misk.web.exceptions/#types","text":"Name Summary ActionExceptionLogLevelConfig [jvm] data class ActionExceptionLogLevelConfig (client_error_level: Level, server_error_level: Level) : Config Configures the log Level for an ActionException. ExceptionHandlingInterceptor [jvm] class ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver ) : NetworkInterceptor Converts and logs application and component level dispatch exceptions into the appropriate response format. Allows application and component code to control how exceptions are represented to clients; for example by setting the status code appropriately, or by returning a specialized response format specific to the error. Components can control how exceptions are mapped by installing ExceptionMapper via the ExceptionMapperModule ExceptionMapper [jvm] interface ExceptionMapper <in T : Throwable > Maps an exception to a Response ExceptionMapperModule [jvm] class ExceptionMapperModule < M : ExceptionMapper < T >, in T : Throwable >(exceptionClass: KClass < T >, mapperClass: KClass < M >) : KAbstractModule Binds a Throwable to an ExceptionMapper . ExceptionMapperResolver [jvm] @Singleton class ExceptionMapperResolver GrpcErrorResponse [jvm] data class GrpcErrorResponse (status: GrpcStatus, message: String ?, details: List <AnyMessage>) RequestBodyExceptionMapper [jvm] class RequestBodyExceptionMapper : ExceptionMapper < RequestBodyException >","title":"Types"},{"location":"0.x/misk/misk.web.exceptions/#functions","text":"Name Summary toGrpcStatus [jvm] fun toGrpcStatus (statusCode: Int ): GrpcStatus https://grpc.github.io/grpc/core/md_doc_http-grpc-status-mapping.html","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/to-grpc-status/","text":"// misk / misk.web.exceptions / toGrpcStatus toGrpcStatus \u00b6 [jvm]\\ fun toGrpcStatus (statusCode: Int ): GrpcStatus https://grpc.github.io/grpc/core/md_doc_http-grpc-status-mapping.html","title":"toGrpcStatus - Misk"},{"location":"0.x/misk/misk.web.exceptions/to-grpc-status/#togrpcstatus","text":"[jvm]\\ fun toGrpcStatus (statusCode: Int ): GrpcStatus https://grpc.github.io/grpc/core/md_doc_http-grpc-status-mapping.html","title":"toGrpcStatus"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/","text":"// misk / misk.web.exceptions / ActionExceptionLogLevelConfig ActionExceptionLogLevelConfig \u00b6 [jvm]\\ data class ActionExceptionLogLevelConfig (client_error_level: Level, server_error_level: Level) : Config Configures the log Level for an ActionException. Constructors \u00b6 ActionExceptionLogLevelConfig [jvm] fun ActionExceptionLogLevelConfig (client_error_level: Level = Level.WARN, server_error_level: Level = Level.ERROR) Properties \u00b6 Name Summary client_error_level [jvm] val client_error_level : Level the level used for 4xx error codes server_error_level [jvm] val server_error_level : Level the level used for 5xx error codes","title":"ActionExceptionLogLevelConfig - Misk"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/#actionexceptionloglevelconfig","text":"[jvm]\\ data class ActionExceptionLogLevelConfig (client_error_level: Level, server_error_level: Level) : Config Configures the log Level for an ActionException.","title":"ActionExceptionLogLevelConfig"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/#constructors","text":"ActionExceptionLogLevelConfig [jvm] fun ActionExceptionLogLevelConfig (client_error_level: Level = Level.WARN, server_error_level: Level = Level.ERROR)","title":"Constructors"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/#properties","text":"Name Summary client_error_level [jvm] val client_error_level : Level the level used for 4xx error codes server_error_level [jvm] val server_error_level : Level the level used for 5xx error codes","title":"Properties"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/-action-exception-log-level-config/","text":"// misk / misk.web.exceptions / ActionExceptionLogLevelConfig / ActionExceptionLogLevelConfig ActionExceptionLogLevelConfig \u00b6 [jvm]\\ fun ActionExceptionLogLevelConfig (client_error_level: Level = Level.WARN, server_error_level: Level = Level.ERROR)","title":"ActionExceptionLogLevelConfig - Misk"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/-action-exception-log-level-config/#actionexceptionloglevelconfig","text":"[jvm]\\ fun ActionExceptionLogLevelConfig (client_error_level: Level = Level.WARN, server_error_level: Level = Level.ERROR)","title":"ActionExceptionLogLevelConfig"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/client_error_level/","text":"// misk / misk.web.exceptions / ActionExceptionLogLevelConfig / client_error_level client_error_level \u00b6 [jvm]\\ val client_error_level : Level","title":"client_error_level - Misk"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/client_error_level/#client_error_level","text":"[jvm]\\ val client_error_level : Level","title":"client_error_level"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/server_error_level/","text":"// misk / misk.web.exceptions / ActionExceptionLogLevelConfig / server_error_level server_error_level \u00b6 [jvm]\\ val server_error_level : Level","title":"server_error_level - Misk"},{"location":"0.x/misk/misk.web.exceptions/-action-exception-log-level-config/server_error_level/#server_error_level","text":"[jvm]\\ val server_error_level : Level","title":"server_error_level"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/","text":"// misk / misk.web.exceptions / ExceptionHandlingInterceptor ExceptionHandlingInterceptor \u00b6 [jvm]\\ class ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver ) : NetworkInterceptor Converts and logs application and component level dispatch exceptions into the appropriate response format. Allows application and component code to control how exceptions are represented to clients; for example by setting the status code appropriately, or by returning a specialized response format specific to the error. Components can control how exceptions are mapped by installing ExceptionMapper via the ExceptionMapperModule TODO(isabel): Set the response body in a ThreadLocal to log in RequestLoggingInterceptor Constructors \u00b6 ExceptionHandlingInterceptor [jvm] fun ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver ) Types \u00b6 Name Summary Factory [jvm] class Factory : NetworkInterceptor.Factory Functions \u00b6 Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain )","title":"ExceptionHandlingInterceptor - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/#exceptionhandlinginterceptor","text":"[jvm]\\ class ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver ) : NetworkInterceptor Converts and logs application and component level dispatch exceptions into the appropriate response format. Allows application and component code to control how exceptions are represented to clients; for example by setting the status code appropriately, or by returning a specialized response format specific to the error. Components can control how exceptions are mapped by installing ExceptionMapper via the ExceptionMapperModule TODO(isabel): Set the response body in a ThreadLocal to log in RequestLoggingInterceptor","title":"ExceptionHandlingInterceptor"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/#constructors","text":"ExceptionHandlingInterceptor [jvm] fun ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver )","title":"Constructors"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/#types","text":"Name Summary Factory [jvm] class Factory : NetworkInterceptor.Factory","title":"Types"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/#functions","text":"Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain )","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/-exception-handling-interceptor/","text":"// misk / misk.web.exceptions / ExceptionHandlingInterceptor / ExceptionHandlingInterceptor ExceptionHandlingInterceptor \u00b6 [jvm]\\ fun ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver )","title":"ExceptionHandlingInterceptor - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/-exception-handling-interceptor/#exceptionhandlinginterceptor","text":"[jvm]\\ fun ExceptionHandlingInterceptor (actionName: String , mapperResolver: ExceptionMapperResolver )","title":"ExceptionHandlingInterceptor"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/intercept/","text":"// misk / misk.web.exceptions / ExceptionHandlingInterceptor / intercept intercept \u00b6 [jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/intercept/#intercept","text":"[jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/-factory/","text":"// misk / misk.web.exceptions / ExceptionHandlingInterceptor / Factory Factory \u00b6 [jvm]\\ class Factory : NetworkInterceptor.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (action: Action ): ExceptionHandlingInterceptor","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/-factory/#factory","text":"[jvm]\\ class Factory : NetworkInterceptor.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/-factory/#functions","text":"Name Summary create [jvm] open override fun create (action: Action ): ExceptionHandlingInterceptor","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/-factory/create/","text":"// misk / misk.web.exceptions / ExceptionHandlingInterceptor / Factory / create create \u00b6 [jvm]\\ open override fun create (action: Action ): ExceptionHandlingInterceptor","title":"create - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-handling-interceptor/-factory/create/#create","text":"[jvm]\\ open override fun create (action: Action ): ExceptionHandlingInterceptor","title":"create"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/","text":"// misk / misk.web.exceptions / ExceptionMapper ExceptionMapper \u00b6 [jvm]\\ interface ExceptionMapper <in T : Throwable > Maps an exception to a Response Functions \u00b6 Name Summary canHandle [jvm] abstract fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open fun loggingLevel (th: T ): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: T ): GrpcErrorResponse ? toResponse [jvm] abstract fun toResponse (th: T ): Response<ResponseBody> Inheritors \u00b6 Name RequestBodyExceptionMapper","title":"ExceptionMapper - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/#exceptionmapper","text":"[jvm]\\ interface ExceptionMapper <in T : Throwable > Maps an exception to a Response","title":"ExceptionMapper"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/#functions","text":"Name Summary canHandle [jvm] abstract fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open fun loggingLevel (th: T ): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: T ): GrpcErrorResponse ? toResponse [jvm] abstract fun toResponse (th: T ): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/#inheritors","text":"Name RequestBodyExceptionMapper","title":"Inheritors"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/can-handle/","text":"// misk / misk.web.exceptions / ExceptionMapper / canHandle canHandle \u00b6 [jvm]\\ abstract fun canHandle (th: Throwable ): Boolean Return \u00b6 true if the ExceptionMapper can handle the given exception","title":"canHandle - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/can-handle/#canhandle","text":"[jvm]\\ abstract fun canHandle (th: Throwable ): Boolean","title":"canHandle"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/can-handle/#return","text":"true if the ExceptionMapper can handle the given exception","title":"Return"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/logging-level/","text":"// misk / misk.web.exceptions / ExceptionMapper / loggingLevel loggingLevel \u00b6 [jvm]\\ open fun loggingLevel (th: T ): Level Return \u00b6 the level at which the given exception should be logged. defaults to ERROR but can be overridden by the mapper for the given exception","title":"loggingLevel - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/logging-level/#logginglevel","text":"[jvm]\\ open fun loggingLevel (th: T ): Level","title":"loggingLevel"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/logging-level/#return","text":"the level at which the given exception should be logged. defaults to ERROR but can be overridden by the mapper for the given exception","title":"Return"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/to-grpc-response/","text":"// misk / misk.web.exceptions / ExceptionMapper / toGrpcResponse toGrpcResponse \u00b6 [jvm]\\ open fun toGrpcResponse (th: T ): GrpcErrorResponse ?","title":"toGrpcResponse - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/to-grpc-response/#togrpcresponse","text":"[jvm]\\ open fun toGrpcResponse (th: T ): GrpcErrorResponse ?","title":"toGrpcResponse"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/to-response/","text":"// misk / misk.web.exceptions / ExceptionMapper / toResponse toResponse \u00b6 [jvm]\\ abstract fun toResponse (th: T ): Response<ResponseBody> Return \u00b6 the Response corresponding to the exception.","title":"toResponse - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/to-response/#toresponse","text":"[jvm]\\ abstract fun toResponse (th: T ): Response<ResponseBody>","title":"toResponse"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper/to-response/#return","text":"the Response corresponding to the exception.","title":"Return"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/","text":"// misk / misk.web.exceptions / ExceptionMapperModule ExceptionMapperModule \u00b6 [jvm]\\ class ExceptionMapperModule < M : ExceptionMapper < T >, in T : Throwable >(exceptionClass: KClass < T >, mapperClass: KClass < M >) : KAbstractModule Binds a Throwable to an ExceptionMapper . When an Exception occurs dispatching an Action, the bound ExceptionMapper is called to handle the Exception. If there is not an explicit binding for the thrown Exception, the mapper for the closest superclass is used. Given the example code install(ExceptionMapperModule.create<ActionException, ActionExceptionMapper>())\\ install(ExceptionMapperModule.create<MyActionException, MyActionExceptionMapper>())\\ \\ class MyActionException : ActionException {}\\ class MyOtherActionException : ActionException {} MyActionException maps to the specific MyActionExceptionMapper and MyOtherActionException maps to the ActionExceptionMapper since uses the binding of the closest bound superclass. Constructors \u00b6 ExceptionMapperModule [jvm] fun < M : ExceptionMapper < T >, in T : Throwable > ExceptionMapperModule (exceptionClass: KClass < T >, mapperClass: KClass < M >) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder exceptionClass [jvm] val exceptionClass : KClass < T >","title":"ExceptionMapperModule - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/#exceptionmappermodule","text":"[jvm]\\ class ExceptionMapperModule < M : ExceptionMapper < T >, in T : Throwable >(exceptionClass: KClass < T >, mapperClass: KClass < M >) : KAbstractModule Binds a Throwable to an ExceptionMapper . When an Exception occurs dispatching an Action, the bound ExceptionMapper is called to handle the Exception. If there is not an explicit binding for the thrown Exception, the mapper for the closest superclass is used. Given the example code install(ExceptionMapperModule.create<ActionException, ActionExceptionMapper>())\\ install(ExceptionMapperModule.create<MyActionException, MyActionExceptionMapper>())\\ \\ class MyActionException : ActionException {}\\ class MyOtherActionException : ActionException {} MyActionException maps to the specific MyActionExceptionMapper and MyOtherActionException maps to the ActionExceptionMapper since uses the binding of the closest bound superclass.","title":"ExceptionMapperModule"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/#constructors","text":"ExceptionMapperModule [jvm] fun < M : ExceptionMapper < T >, in T : Throwable > ExceptionMapperModule (exceptionClass: KClass < T >, mapperClass: KClass < M >)","title":"Constructors"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/#properties","text":"Name Summary binder [jvm] val binder : Binder exceptionClass [jvm] val exceptionClass : KClass < T >","title":"Properties"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/-exception-mapper-module/","text":"// misk / misk.web.exceptions / ExceptionMapperModule / ExceptionMapperModule ExceptionMapperModule \u00b6 [jvm]\\ fun < M : ExceptionMapper < T >, in T : Throwable > ExceptionMapperModule (exceptionClass: KClass < T >, mapperClass: KClass < M >)","title":"ExceptionMapperModule - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/-exception-mapper-module/#exceptionmappermodule","text":"[jvm]\\ fun < M : ExceptionMapper < T >, in T : Throwable > ExceptionMapperModule (exceptionClass: KClass < T >, mapperClass: KClass < M >)","title":"ExceptionMapperModule"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/exception-class/","text":"// misk / misk.web.exceptions / ExceptionMapperModule / exceptionClass exceptionClass \u00b6 [jvm]\\ val exceptionClass : KClass < T >","title":"exceptionClass - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/exception-class/#exceptionclass","text":"[jvm]\\ val exceptionClass : KClass < T >","title":"exceptionClass"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/-companion/","text":"// misk / misk.web.exceptions / ExceptionMapperModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < T : Throwable , M : ExceptionMapper < T >> create (): ExceptionMapperModule < M , T >","title":"Companion - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < T : Throwable , M : ExceptionMapper < T >> create (): ExceptionMapperModule < M , T >","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/-companion/create/","text":"// misk / misk.web.exceptions / ExceptionMapperModule / Companion / create create \u00b6 [jvm]\\ inline fun < T : Throwable , M : ExceptionMapper < T >> create (): ExceptionMapperModule < M , T >","title":"create - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-module/-companion/create/#create","text":"[jvm]\\ inline fun < T : Throwable , M : ExceptionMapper < T >> create (): ExceptionMapperModule < M , T >","title":"create"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-resolver/","text":"// misk / misk.web.exceptions / ExceptionMapperResolver ExceptionMapperResolver \u00b6 [jvm]\\ @Singleton class ExceptionMapperResolver Functions \u00b6 Name Summary mapperFor [jvm] fun mapperFor (th: Throwable ): ExceptionMapper < Throwable >?","title":"ExceptionMapperResolver - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-resolver/#exceptionmapperresolver","text":"[jvm]\\ @Singleton class ExceptionMapperResolver","title":"ExceptionMapperResolver"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-resolver/#functions","text":"Name Summary mapperFor [jvm] fun mapperFor (th: Throwable ): ExceptionMapper < Throwable >?","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-resolver/mapper-for/","text":"// misk / misk.web.exceptions / ExceptionMapperResolver / mapperFor mapperFor \u00b6 [jvm]\\ fun mapperFor (th: Throwable ): ExceptionMapper < Throwable >?","title":"mapperFor - Misk"},{"location":"0.x/misk/misk.web.exceptions/-exception-mapper-resolver/mapper-for/#mapperfor","text":"[jvm]\\ fun mapperFor (th: Throwable ): ExceptionMapper < Throwable >?","title":"mapperFor"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/","text":"// misk / misk.web.exceptions / GrpcErrorResponse GrpcErrorResponse \u00b6 [jvm]\\ data class GrpcErrorResponse (status: GrpcStatus, message: String ?, details: List <AnyMessage>) Constructors \u00b6 GrpcErrorResponse [jvm] fun GrpcErrorResponse (status: GrpcStatus, message: String ?) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary copy [jvm] fun copy (status: GrpcStatus = this.status, message: String ? = this.message): GrpcErrorResponse Properties \u00b6 Name Summary details [jvm] val details : List <AnyMessage> message [jvm] val message : String ? status [jvm] val status : GrpcStatus","title":"GrpcErrorResponse - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/#grpcerrorresponse","text":"[jvm]\\ data class GrpcErrorResponse (status: GrpcStatus, message: String ?, details: List <AnyMessage>)","title":"GrpcErrorResponse"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/#constructors","text":"GrpcErrorResponse [jvm] fun GrpcErrorResponse (status: GrpcStatus, message: String ?)","title":"Constructors"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/#functions","text":"Name Summary copy [jvm] fun copy (status: GrpcStatus = this.status, message: String ? = this.message): GrpcErrorResponse","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/#properties","text":"Name Summary details [jvm] val details : List <AnyMessage> message [jvm] val message : String ? status [jvm] val status : GrpcStatus","title":"Properties"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/-grpc-error-response/","text":"// misk / misk.web.exceptions / GrpcErrorResponse / GrpcErrorResponse GrpcErrorResponse \u00b6 [jvm]\\ fun GrpcErrorResponse (status: GrpcStatus, message: String ?) fun GrpcErrorResponse (status: GrpcStatus, message: String ?, details: List <AnyMessage> = listOf())","title":"GrpcErrorResponse - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/-grpc-error-response/#grpcerrorresponse","text":"[jvm]\\ fun GrpcErrorResponse (status: GrpcStatus, message: String ?) fun GrpcErrorResponse (status: GrpcStatus, message: String ?, details: List <AnyMessage> = listOf())","title":"GrpcErrorResponse"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/copy/","text":"// misk / misk.web.exceptions / GrpcErrorResponse / copy copy \u00b6 [jvm]\\ fun copy (status: GrpcStatus = this.status, message: String ? = this.message): GrpcErrorResponse","title":"copy - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/copy/#copy","text":"[jvm]\\ fun copy (status: GrpcStatus = this.status, message: String ? = this.message): GrpcErrorResponse","title":"copy"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/details/","text":"// misk / misk.web.exceptions / GrpcErrorResponse / details details \u00b6 [jvm]\\ val details : List <AnyMessage>","title":"details - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/details/#details","text":"[jvm]\\ val details : List <AnyMessage>","title":"details"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/message/","text":"// misk / misk.web.exceptions / GrpcErrorResponse / message message \u00b6 [jvm]\\ val message : String ?","title":"message - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/message/#message","text":"[jvm]\\ val message : String ?","title":"message"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/status/","text":"// misk / misk.web.exceptions / GrpcErrorResponse / status status \u00b6 [jvm]\\ val status : GrpcStatus","title":"status - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/status/#status","text":"[jvm]\\ val status : GrpcStatus","title":"status"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/-companion/","text":"// misk / misk.web.exceptions / GrpcErrorResponse / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary INTERNAL_SERVER_ERROR [jvm] val INTERNAL_SERVER_ERROR : GrpcErrorResponse","title":"Companion - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/-companion/#properties","text":"Name Summary INTERNAL_SERVER_ERROR [jvm] val INTERNAL_SERVER_ERROR : GrpcErrorResponse","title":"Properties"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/-companion/-i-n-t-e-r-n-a-l_-s-e-r-v-e-r_-e-r-r-o-r/","text":"// misk / misk.web.exceptions / GrpcErrorResponse / Companion / INTERNAL_SERVER_ERROR INTERNAL_SERVER_ERROR \u00b6 [jvm]\\ val INTERNAL_SERVER_ERROR : GrpcErrorResponse","title":"INTERNAL_SERVER_ERROR - Misk"},{"location":"0.x/misk/misk.web.exceptions/-grpc-error-response/-companion/-i-n-t-e-r-n-a-l_-s-e-r-v-e-r_-e-r-r-o-r/#internal_server_error","text":"[jvm]\\ val INTERNAL_SERVER_ERROR : GrpcErrorResponse","title":"INTERNAL_SERVER_ERROR"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/","text":"// misk / misk.web.exceptions / RequestBodyExceptionMapper RequestBodyExceptionMapper \u00b6 [jvm]\\ class RequestBodyExceptionMapper : ExceptionMapper < RequestBodyException > Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary canHandle [jvm] open override fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open override fun loggingLevel (th: RequestBodyException ): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: RequestBodyException ): GrpcErrorResponse ? toResponse [jvm] open override fun toResponse (th: RequestBodyException ): Response<ResponseBody>","title":"RequestBodyExceptionMapper - Misk"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/#requestbodyexceptionmapper","text":"[jvm]\\ class RequestBodyExceptionMapper : ExceptionMapper < RequestBodyException >","title":"RequestBodyExceptionMapper"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/#functions","text":"Name Summary canHandle [jvm] open override fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open override fun loggingLevel (th: RequestBodyException ): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: RequestBodyException ): GrpcErrorResponse ? toResponse [jvm] open override fun toResponse (th: RequestBodyException ): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/can-handle/","text":"// misk / misk.web.exceptions / RequestBodyExceptionMapper / canHandle canHandle \u00b6 [jvm]\\ open override fun canHandle (th: Throwable ): Boolean Return \u00b6 true if the ExceptionMapper can handle the given exception","title":"canHandle - Misk"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/can-handle/#canhandle","text":"[jvm]\\ open override fun canHandle (th: Throwable ): Boolean","title":"canHandle"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/can-handle/#return","text":"true if the ExceptionMapper can handle the given exception","title":"Return"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/logging-level/","text":"// misk / misk.web.exceptions / RequestBodyExceptionMapper / loggingLevel loggingLevel \u00b6 [jvm]\\ open override fun loggingLevel (th: RequestBodyException ): Level Return \u00b6 the level at which the given exception should be logged. defaults to ERROR but can be overridden by the mapper for the given exception","title":"loggingLevel - Misk"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/logging-level/#logginglevel","text":"[jvm]\\ open override fun loggingLevel (th: RequestBodyException ): Level","title":"loggingLevel"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/logging-level/#return","text":"the level at which the given exception should be logged. defaults to ERROR but can be overridden by the mapper for the given exception","title":"Return"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/to-response/","text":"// misk / misk.web.exceptions / RequestBodyExceptionMapper / toResponse toResponse \u00b6 [jvm]\\ open override fun toResponse (th: RequestBodyException ): Response<ResponseBody> Return \u00b6 the Response corresponding to the exception.","title":"toResponse - Misk"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/to-response/#toresponse","text":"[jvm]\\ open override fun toResponse (th: RequestBodyException ): Response<ResponseBody>","title":"toResponse"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/to-response/#return","text":"the Response corresponding to the exception.","title":"Return"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/-companion/","text":"// misk / misk.web.exceptions / RequestBodyExceptionMapper / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary CLIENT_CLOSED_REQUEST [jvm] val CLIENT_CLOSED_REQUEST : Response<ResponseBody>","title":"Companion - Misk"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/-companion/#properties","text":"Name Summary CLIENT_CLOSED_REQUEST [jvm] val CLIENT_CLOSED_REQUEST : Response<ResponseBody>","title":"Properties"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/-companion/-c-l-i-e-n-t_-c-l-o-s-e-d_-r-e-q-u-e-s-t/","text":"// misk / misk.web.exceptions / RequestBodyExceptionMapper / Companion / CLIENT_CLOSED_REQUEST CLIENT_CLOSED_REQUEST \u00b6 [jvm]\\ val CLIENT_CLOSED_REQUEST : Response<ResponseBody>","title":"CLIENT_CLOSED_REQUEST - Misk"},{"location":"0.x/misk/misk.web.exceptions/-request-body-exception-mapper/-companion/-c-l-i-e-n-t_-c-l-o-s-e-d_-r-e-q-u-e-s-t/#client_closed_request","text":"[jvm]\\ val CLIENT_CLOSED_REQUEST : Response<ResponseBody>","title":"CLIENT_CLOSED_REQUEST"},{"location":"0.x/misk/misk.web.extractors/","text":"// misk / misk.web.extractors Package misk.web.extractors \u00b6 Types \u00b6 Name Summary RequestBodyException [jvm] class RequestBodyException (cause: Throwable ) : IOException StringConverter [jvm] typealias StringConverter = ( String ) -> Any ? Functions \u00b6 Name Summary converterFor [jvm] fun converterFor (type: KType ): StringConverter ?","title":"Package misk.web.extractors - Misk"},{"location":"0.x/misk/misk.web.extractors/#package-miskwebextractors","text":"","title":"Package misk.web.extractors"},{"location":"0.x/misk/misk.web.extractors/#types","text":"Name Summary RequestBodyException [jvm] class RequestBodyException (cause: Throwable ) : IOException StringConverter [jvm] typealias StringConverter = ( String ) -> Any ?","title":"Types"},{"location":"0.x/misk/misk.web.extractors/#functions","text":"Name Summary converterFor [jvm] fun converterFor (type: KType ): StringConverter ?","title":"Functions"},{"location":"0.x/misk/misk.web.extractors/converter-for/","text":"// misk / misk.web.extractors / converterFor converterFor \u00b6 [jvm]\\ fun converterFor (type: KType ): StringConverter ?","title":"converterFor - Misk"},{"location":"0.x/misk/misk.web.extractors/converter-for/#converterfor","text":"[jvm]\\ fun converterFor (type: KType ): StringConverter ?","title":"converterFor"},{"location":"0.x/misk/misk.web.extractors/-request-body-exception/","text":"// misk / misk.web.extractors / RequestBodyException RequestBodyException \u00b6 [jvm]\\ class RequestBodyException (cause: Throwable ) : IOException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"RequestBodyException - Misk"},{"location":"0.x/misk/misk.web.extractors/-request-body-exception/#requestbodyexception","text":"[jvm]\\ class RequestBodyException (cause: Throwable ) : IOException","title":"RequestBodyException"},{"location":"0.x/misk/misk.web.extractors/-request-body-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk/misk.web.extractors/-request-body-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk/misk.web.extractors/-request-body-exception/-request-body-exception/","text":"// misk / misk.web.extractors / RequestBodyException / RequestBodyException RequestBodyException \u00b6 [jvm]\\ fun RequestBodyException (cause: Throwable )","title":"RequestBodyException - Misk"},{"location":"0.x/misk/misk.web.extractors/-request-body-exception/-request-body-exception/#requestbodyexception","text":"[jvm]\\ fun RequestBodyException (cause: Throwable )","title":"RequestBodyException"},{"location":"0.x/misk/misk.web.formatter/","text":"// misk / misk.web.formatter Package misk.web.formatter \u00b6 Types \u00b6 Name Summary ClassNameFormatter [jvm] class ClassNameFormatter @Injectconstructor","title":"Package misk.web.formatter - Misk"},{"location":"0.x/misk/misk.web.formatter/#package-miskwebformatter","text":"","title":"Package misk.web.formatter"},{"location":"0.x/misk/misk.web.formatter/#types","text":"Name Summary ClassNameFormatter [jvm] class ClassNameFormatter @Injectconstructor","title":"Types"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/","text":"// misk / misk.web.formatter / ClassNameFormatter ClassNameFormatter \u00b6 [jvm]\\ class ClassNameFormatter @Injectconstructor Types \u00b6 Name Summary Companion [jvm] object Companion","title":"ClassNameFormatter - Misk"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/#classnameformatter","text":"[jvm]\\ class ClassNameFormatter @Injectconstructor","title":"ClassNameFormatter"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/-class-name-formatter/","text":"// misk / misk.web.formatter / ClassNameFormatter / ClassNameFormatter ClassNameFormatter \u00b6 [jvm]\\ @Inject fun ClassNameFormatter ()","title":"ClassNameFormatter - Misk"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/-class-name-formatter/#classnameformatter","text":"[jvm]\\ @Inject fun ClassNameFormatter ()","title":"ClassNameFormatter"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/-companion/","text":"// misk / misk.web.formatter / ClassNameFormatter / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary format [jvm] fun < T : Any > format (kclass: KClass < T >): String","title":"Companion - Misk"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/-companion/#functions","text":"Name Summary format [jvm] fun < T : Any > format (kclass: KClass < T >): String","title":"Functions"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/-companion/format/","text":"// misk / misk.web.formatter / ClassNameFormatter / Companion / format format \u00b6 [jvm]\\ fun < T : Any > format (kclass: KClass < T >): String","title":"format - Misk"},{"location":"0.x/misk/misk.web.formatter/-class-name-formatter/-companion/format/#format","text":"[jvm]\\ fun < T : Any > format (kclass: KClass < T >): String","title":"format"},{"location":"0.x/misk/misk.web.interceptors/","text":"// misk / misk.web.interceptors Package misk.web.interceptors \u00b6 Types \u00b6 Name Summary BeforeContentEncoding [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class BeforeContentEncoding Denotes a target to be in the first order of execution before any content decoding happens. A NetworkInterceptor bound with BeforeContentEncoding is automatically installed before interceptors annotated with ForContentEncoding. ConcurrencyLimiterFactory [jvm] interface ConcurrencyLimiterFactory Multibind an instance to provide a custom Limiter for concurrency shedding. The first instance to return non-null is used. InternalErrorInterceptorFactory [jvm] @Singleton class InternalErrorInterceptorFactory @Injectconstructor : NetworkInterceptor.Factory LogRateLimiter [jvm] @Singleton class LogRateLimiter @Injectconstructor(rateLimiterFactory: RateLimiter.Factory) Holds rate limiters for logging success and error responses. There is a rate limiter for every action and service that calls it, for both success and error. The rate limiters are created according to the value set in LogRequestResponse annotation. RebalancingInterceptor [jvm] class RebalancingInterceptor @Injectconstructor(random: ThreadLocalRandom, probability: Double ) : NetworkInterceptor When we\u2019re deploying and redeploying our pods, we want to make sure that clients rebalance onto the new pods. This randomly closes connections so they will be recreated, naturally balancing connections across pods. RequestBodyLoggingInterceptor [jvm] class RequestBodyLoggingInterceptor : ApplicationInterceptor Stores request and response information for an action in a ThreadLocal, to be logged in RequestLoggingInterceptor RequestLoggingInterceptor [jvm] class RequestLoggingInterceptor : NetworkInterceptor Logs request and response information for an action. Timing information doesn\u2019t count time writing the response to the remote client. ResponseBodyMarshallerFactory [jvm] @Singleton class ResponseBodyMarshallerFactory WideOpenDevelopmentInterceptor [jvm] class WideOpenDevelopmentInterceptor @Injectconstructor : NetworkInterceptor WideOpenDevelopmentInterceptorFactory [jvm] class WideOpenDevelopmentInterceptorFactory @Injectconstructor(wideOpenDevelopmentInterceptor: WideOpenDevelopmentInterceptor , deployment: Deployment) : NetworkInterceptor.Factory","title":"Package misk.web.interceptors - Misk"},{"location":"0.x/misk/misk.web.interceptors/#package-miskwebinterceptors","text":"","title":"Package misk.web.interceptors"},{"location":"0.x/misk/misk.web.interceptors/#types","text":"Name Summary BeforeContentEncoding [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class BeforeContentEncoding Denotes a target to be in the first order of execution before any content decoding happens. A NetworkInterceptor bound with BeforeContentEncoding is automatically installed before interceptors annotated with ForContentEncoding. ConcurrencyLimiterFactory [jvm] interface ConcurrencyLimiterFactory Multibind an instance to provide a custom Limiter for concurrency shedding. The first instance to return non-null is used. InternalErrorInterceptorFactory [jvm] @Singleton class InternalErrorInterceptorFactory @Injectconstructor : NetworkInterceptor.Factory LogRateLimiter [jvm] @Singleton class LogRateLimiter @Injectconstructor(rateLimiterFactory: RateLimiter.Factory) Holds rate limiters for logging success and error responses. There is a rate limiter for every action and service that calls it, for both success and error. The rate limiters are created according to the value set in LogRequestResponse annotation. RebalancingInterceptor [jvm] class RebalancingInterceptor @Injectconstructor(random: ThreadLocalRandom, probability: Double ) : NetworkInterceptor When we\u2019re deploying and redeploying our pods, we want to make sure that clients rebalance onto the new pods. This randomly closes connections so they will be recreated, naturally balancing connections across pods. RequestBodyLoggingInterceptor [jvm] class RequestBodyLoggingInterceptor : ApplicationInterceptor Stores request and response information for an action in a ThreadLocal, to be logged in RequestLoggingInterceptor RequestLoggingInterceptor [jvm] class RequestLoggingInterceptor : NetworkInterceptor Logs request and response information for an action. Timing information doesn\u2019t count time writing the response to the remote client. ResponseBodyMarshallerFactory [jvm] @Singleton class ResponseBodyMarshallerFactory WideOpenDevelopmentInterceptor [jvm] class WideOpenDevelopmentInterceptor @Injectconstructor : NetworkInterceptor WideOpenDevelopmentInterceptorFactory [jvm] class WideOpenDevelopmentInterceptorFactory @Injectconstructor(wideOpenDevelopmentInterceptor: WideOpenDevelopmentInterceptor , deployment: Deployment) : NetworkInterceptor.Factory","title":"Types"},{"location":"0.x/misk/misk.web.interceptors/-before-content-encoding/","text":"// misk / misk.web.interceptors / BeforeContentEncoding BeforeContentEncoding \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class BeforeContentEncoding Denotes a target to be in the first order of execution before any content decoding happens. A NetworkInterceptor bound with BeforeContentEncoding is automatically installed before interceptors annotated with ForContentEncoding. Constructors \u00b6 BeforeContentEncoding [jvm] fun BeforeContentEncoding ()","title":"BeforeContentEncoding - Misk"},{"location":"0.x/misk/misk.web.interceptors/-before-content-encoding/#beforecontentencoding","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.VALUE_PARAMETER , AnnotationTarget.FIELD , AnnotationTarget.TYPE ]) annotation class BeforeContentEncoding Denotes a target to be in the first order of execution before any content decoding happens. A NetworkInterceptor bound with BeforeContentEncoding is automatically installed before interceptors annotated with ForContentEncoding.","title":"BeforeContentEncoding"},{"location":"0.x/misk/misk.web.interceptors/-before-content-encoding/#constructors","text":"BeforeContentEncoding [jvm] fun BeforeContentEncoding ()","title":"Constructors"},{"location":"0.x/misk/misk.web.interceptors/-before-content-encoding/-before-content-encoding/","text":"// misk / misk.web.interceptors / BeforeContentEncoding / BeforeContentEncoding BeforeContentEncoding \u00b6 [jvm]\\ fun BeforeContentEncoding ()","title":"BeforeContentEncoding - Misk"},{"location":"0.x/misk/misk.web.interceptors/-before-content-encoding/-before-content-encoding/#beforecontentencoding","text":"[jvm]\\ fun BeforeContentEncoding ()","title":"BeforeContentEncoding"},{"location":"0.x/misk/misk.web.interceptors/-concurrency-limiter-factory/","text":"// misk / misk.web.interceptors / ConcurrencyLimiterFactory ConcurrencyLimiterFactory \u00b6 [jvm]\\ interface ConcurrencyLimiterFactory Multibind an instance to provide a custom Limiter for concurrency shedding. The first instance to return non-null is used. Misk\u2019s ConcurrencyLimitsInterceptor honors the Quota-Path HTTP header to give callers control of how their calls are aggregated when computing system throughput. The create function will be called for each unique Quota-Path received from an application. If the same Quota-Path header is used on different actions, create is only called for the first action that uses the header. Functions \u00b6 Name Summary create [jvm] abstract fun create (action: Action ): Limiter< String >?","title":"ConcurrencyLimiterFactory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-concurrency-limiter-factory/#concurrencylimiterfactory","text":"[jvm]\\ interface ConcurrencyLimiterFactory Multibind an instance to provide a custom Limiter for concurrency shedding. The first instance to return non-null is used. Misk\u2019s ConcurrencyLimitsInterceptor honors the Quota-Path HTTP header to give callers control of how their calls are aggregated when computing system throughput. The create function will be called for each unique Quota-Path received from an application. If the same Quota-Path header is used on different actions, create is only called for the first action that uses the header.","title":"ConcurrencyLimiterFactory"},{"location":"0.x/misk/misk.web.interceptors/-concurrency-limiter-factory/#functions","text":"Name Summary create [jvm] abstract fun create (action: Action ): Limiter< String >?","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-concurrency-limiter-factory/create/","text":"// misk / misk.web.interceptors / ConcurrencyLimiterFactory / create create \u00b6 [jvm]\\ abstract fun create (action: Action ): Limiter< String >?","title":"create - Misk"},{"location":"0.x/misk/misk.web.interceptors/-concurrency-limiter-factory/create/#create","text":"[jvm]\\ abstract fun create (action: Action ): Limiter< String >?","title":"create"},{"location":"0.x/misk/misk.web.interceptors/-internal-error-interceptor-factory/","text":"// misk / misk.web.interceptors / InternalErrorInterceptorFactory InternalErrorInterceptorFactory \u00b6 [jvm]\\ @Singleton class InternalErrorInterceptorFactory @Injectconstructor : NetworkInterceptor.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"InternalErrorInterceptorFactory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-internal-error-interceptor-factory/#internalerrorinterceptorfactory","text":"[jvm]\\ @Singleton class InternalErrorInterceptorFactory @Injectconstructor : NetworkInterceptor.Factory","title":"InternalErrorInterceptorFactory"},{"location":"0.x/misk/misk.web.interceptors/-internal-error-interceptor-factory/#functions","text":"Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-internal-error-interceptor-factory/-internal-error-interceptor-factory/","text":"// misk / misk.web.interceptors / InternalErrorInterceptorFactory / InternalErrorInterceptorFactory InternalErrorInterceptorFactory \u00b6 [jvm]\\ @Inject fun InternalErrorInterceptorFactory ()","title":"InternalErrorInterceptorFactory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-internal-error-interceptor-factory/-internal-error-interceptor-factory/#internalerrorinterceptorfactory","text":"[jvm]\\ @Inject fun InternalErrorInterceptorFactory ()","title":"InternalErrorInterceptorFactory"},{"location":"0.x/misk/misk.web.interceptors/-internal-error-interceptor-factory/create/","text":"// misk / misk.web.interceptors / InternalErrorInterceptorFactory / create create \u00b6 [jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.interceptors/-internal-error-interceptor-factory/create/#create","text":"[jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/","text":"// misk / misk.web.interceptors / LogRateLimiter LogRateLimiter \u00b6 [jvm]\\ @Singleton class LogRateLimiter @Injectconstructor(rateLimiterFactory: RateLimiter.Factory) Holds rate limiters for logging success and error responses. There is a rate limiter for every action and service that calls it, for both success and error. The rate limiters are created according to the value set in LogRequestResponse annotation. Constructors \u00b6 LogRateLimiter [jvm] @Inject fun LogRateLimiter (rateLimiterFactory: RateLimiter.Factory) Types \u00b6 Name Summary LogBucketId [jvm] data class LogBucketId (actionClass: String , isError: Boolean ) : Comparable < LogRateLimiter.LogBucketId > Functions \u00b6 Name Summary tryAcquire [jvm] fun tryAcquire (bucketId: LogRateLimiter.LogBucketId , ratePerSecond: Long ): Boolean","title":"LogRateLimiter - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/#logratelimiter","text":"[jvm]\\ @Singleton class LogRateLimiter @Injectconstructor(rateLimiterFactory: RateLimiter.Factory) Holds rate limiters for logging success and error responses. There is a rate limiter for every action and service that calls it, for both success and error. The rate limiters are created according to the value set in LogRequestResponse annotation.","title":"LogRateLimiter"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/#constructors","text":"LogRateLimiter [jvm] @Inject fun LogRateLimiter (rateLimiterFactory: RateLimiter.Factory)","title":"Constructors"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/#types","text":"Name Summary LogBucketId [jvm] data class LogBucketId (actionClass: String , isError: Boolean ) : Comparable < LogRateLimiter.LogBucketId >","title":"Types"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/#functions","text":"Name Summary tryAcquire [jvm] fun tryAcquire (bucketId: LogRateLimiter.LogBucketId , ratePerSecond: Long ): Boolean","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-rate-limiter/","text":"// misk / misk.web.interceptors / LogRateLimiter / LogRateLimiter LogRateLimiter \u00b6 [jvm]\\ @Inject fun LogRateLimiter (rateLimiterFactory: RateLimiter.Factory)","title":"LogRateLimiter - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-rate-limiter/#logratelimiter","text":"[jvm]\\ @Inject fun LogRateLimiter (rateLimiterFactory: RateLimiter.Factory)","title":"LogRateLimiter"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/try-acquire/","text":"// misk / misk.web.interceptors / LogRateLimiter / tryAcquire tryAcquire \u00b6 [jvm]\\ fun tryAcquire (bucketId: LogRateLimiter.LogBucketId , ratePerSecond: Long ): Boolean","title":"tryAcquire - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/try-acquire/#tryacquire","text":"[jvm]\\ fun tryAcquire (bucketId: LogRateLimiter.LogBucketId , ratePerSecond: Long ): Boolean","title":"tryAcquire"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/","text":"// misk / misk.web.interceptors / LogRateLimiter / LogBucketId LogBucketId \u00b6 [jvm]\\ data class LogBucketId (actionClass: String , isError: Boolean ) : Comparable < LogRateLimiter.LogBucketId > Functions \u00b6 Name Summary compareTo [jvm] open operator override fun compareTo (other: LogRateLimiter.LogBucketId ): Int toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary actionClass [jvm] val actionClass : String ActionClass from which we can grab the LogRequestResponse isError [jvm] val isError : Boolean If the response code is error, we look up the errorRateLimiter","title":"LogBucketId - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/#logbucketid","text":"[jvm]\\ data class LogBucketId (actionClass: String , isError: Boolean ) : Comparable < LogRateLimiter.LogBucketId >","title":"LogBucketId"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/#functions","text":"Name Summary compareTo [jvm] open operator override fun compareTo (other: LogRateLimiter.LogBucketId ): Int toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/#properties","text":"Name Summary actionClass [jvm] val actionClass : String ActionClass from which we can grab the LogRequestResponse isError [jvm] val isError : Boolean If the response code is error, we look up the errorRateLimiter","title":"Properties"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/-log-bucket-id/","text":"// misk / misk.web.interceptors / LogRateLimiter / LogBucketId / LogBucketId LogBucketId \u00b6 [jvm]\\ fun LogBucketId (actionClass: String , isError: Boolean )","title":"LogBucketId - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/-log-bucket-id/#logbucketid","text":"[jvm]\\ fun LogBucketId (actionClass: String , isError: Boolean )","title":"LogBucketId"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/action-class/","text":"// misk / misk.web.interceptors / LogRateLimiter / LogBucketId / actionClass actionClass \u00b6 [jvm]\\ val actionClass : String ActionClass from which we can grab the LogRequestResponse","title":"actionClass - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/action-class/#actionclass","text":"[jvm]\\ val actionClass : String ActionClass from which we can grab the LogRequestResponse","title":"actionClass"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/compare-to/","text":"// misk / misk.web.interceptors / LogRateLimiter / LogBucketId / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: LogRateLimiter.LogBucketId ): Int","title":"compareTo - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: LogRateLimiter.LogBucketId ): Int","title":"compareTo"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/is-error/","text":"// misk / misk.web.interceptors / LogRateLimiter / LogBucketId / isError isError \u00b6 [jvm]\\ val isError : Boolean If the response code is error, we look up the errorRateLimiter","title":"isError - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/is-error/#iserror","text":"[jvm]\\ val isError : Boolean If the response code is error, we look up the errorRateLimiter","title":"isError"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/to-string/","text":"// misk / misk.web.interceptors / LogRateLimiter / LogBucketId / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk/misk.web.interceptors/-log-rate-limiter/-log-bucket-id/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/","text":"// misk / misk.web.interceptors / RebalancingInterceptor RebalancingInterceptor \u00b6 [jvm]\\ class RebalancingInterceptor @Injectconstructor(random: ThreadLocalRandom, probability: Double ) : NetworkInterceptor When we\u2019re deploying and redeploying our pods, we want to make sure that clients rebalance onto the new pods. This randomly closes connections so they will be recreated, naturally balancing connections across pods. This does not close Unix domain socket connections. This interceptor is intended to mitigate imbalanced load from long-lived client connections maintained from client apps. Connections over UDS are oriented towards service mesh sidecars that employ sufficient client-side load balancing. Constructors \u00b6 RebalancingInterceptor [jvm] @Inject fun RebalancingInterceptor (random: ThreadLocalRandom, probability: Double ) Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory : NetworkInterceptor.Factory Functions \u00b6 Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain )","title":"RebalancingInterceptor - Misk"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/#rebalancinginterceptor","text":"[jvm]\\ class RebalancingInterceptor @Injectconstructor(random: ThreadLocalRandom, probability: Double ) : NetworkInterceptor When we\u2019re deploying and redeploying our pods, we want to make sure that clients rebalance onto the new pods. This randomly closes connections so they will be recreated, naturally balancing connections across pods. This does not close Unix domain socket connections. This interceptor is intended to mitigate imbalanced load from long-lived client connections maintained from client apps. Connections over UDS are oriented towards service mesh sidecars that employ sufficient client-side load balancing.","title":"RebalancingInterceptor"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/#constructors","text":"RebalancingInterceptor [jvm] @Inject fun RebalancingInterceptor (random: ThreadLocalRandom, probability: Double )","title":"Constructors"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/#types","text":"Name Summary Factory [jvm] @Singleton class Factory : NetworkInterceptor.Factory","title":"Types"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/#functions","text":"Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain )","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/-rebalancing-interceptor/","text":"// misk / misk.web.interceptors / RebalancingInterceptor / RebalancingInterceptor RebalancingInterceptor \u00b6 [jvm]\\ @Inject fun RebalancingInterceptor (random: ThreadLocalRandom, probability: Double )","title":"RebalancingInterceptor - Misk"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/-rebalancing-interceptor/#rebalancinginterceptor","text":"[jvm]\\ @Inject fun RebalancingInterceptor (random: ThreadLocalRandom, probability: Double )","title":"RebalancingInterceptor"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/intercept/","text":"// misk / misk.web.interceptors / RebalancingInterceptor / intercept intercept \u00b6 [jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept - Misk"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/intercept/#intercept","text":"[jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/-factory/","text":"// misk / misk.web.interceptors / RebalancingInterceptor / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory : NetworkInterceptor.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/-factory/#factory","text":"[jvm]\\ @Singleton class Factory : NetworkInterceptor.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/-factory/#functions","text":"Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/-factory/create/","text":"// misk / misk.web.interceptors / RebalancingInterceptor / Factory / create create \u00b6 [jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.interceptors/-rebalancing-interceptor/-factory/create/#create","text":"[jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/","text":"// misk / misk.web.interceptors / RequestBodyLoggingInterceptor RequestBodyLoggingInterceptor \u00b6 [jvm]\\ class RequestBodyLoggingInterceptor : ApplicationInterceptor Stores request and response information for an action in a ThreadLocal, to be logged in RequestLoggingInterceptor Timing information doesn\u2019t count time writing the response to the remote client. Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory : ApplicationInterceptor.Factory Functions \u00b6 Name Summary intercept [jvm] open override fun intercept (chain: Chain ): Any","title":"RequestBodyLoggingInterceptor - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/#requestbodylogginginterceptor","text":"[jvm]\\ class RequestBodyLoggingInterceptor : ApplicationInterceptor Stores request and response information for an action in a ThreadLocal, to be logged in RequestLoggingInterceptor Timing information doesn\u2019t count time writing the response to the remote client.","title":"RequestBodyLoggingInterceptor"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/#types","text":"Name Summary Factory [jvm] @Singleton class Factory : ApplicationInterceptor.Factory","title":"Types"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/#functions","text":"Name Summary intercept [jvm] open override fun intercept (chain: Chain ): Any","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/intercept/","text":"// misk / misk.web.interceptors / RequestBodyLoggingInterceptor / intercept intercept \u00b6 [jvm]\\ open override fun intercept (chain: Chain ): Any","title":"intercept - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/intercept/#intercept","text":"[jvm]\\ open override fun intercept (chain: Chain ): Any","title":"intercept"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/-factory/","text":"// misk / misk.web.interceptors / RequestBodyLoggingInterceptor / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory : ApplicationInterceptor.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (action: Action ): ApplicationInterceptor ?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/-factory/#factory","text":"[jvm]\\ @Singleton class Factory : ApplicationInterceptor.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/-factory/#functions","text":"Name Summary create [jvm] open override fun create (action: Action ): ApplicationInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/-factory/create/","text":"// misk / misk.web.interceptors / RequestBodyLoggingInterceptor / Factory / create create \u00b6 [jvm]\\ open override fun create (action: Action ): ApplicationInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-body-logging-interceptor/-factory/create/#create","text":"[jvm]\\ open override fun create (action: Action ): ApplicationInterceptor ?","title":"create"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/","text":"// misk / misk.web.interceptors / RequestLoggingInterceptor RequestLoggingInterceptor \u00b6 [jvm]\\ class RequestLoggingInterceptor : NetworkInterceptor Logs request and response information for an action. Timing information doesn\u2019t count time writing the response to the remote client. Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory : NetworkInterceptor.Factory Functions \u00b6 Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain ) maybeLog [jvm] fun maybeLog (httpCall: HttpCall , stopwatch: Stopwatch, error: Throwable ?)","title":"RequestLoggingInterceptor - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/#requestlogginginterceptor","text":"[jvm]\\ class RequestLoggingInterceptor : NetworkInterceptor Logs request and response information for an action. Timing information doesn\u2019t count time writing the response to the remote client.","title":"RequestLoggingInterceptor"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/#types","text":"Name Summary Factory [jvm] @Singleton class Factory : NetworkInterceptor.Factory","title":"Types"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/#functions","text":"Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain ) maybeLog [jvm] fun maybeLog (httpCall: HttpCall , stopwatch: Stopwatch, error: Throwable ?)","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/intercept/","text":"// misk / misk.web.interceptors / RequestLoggingInterceptor / intercept intercept \u00b6 [jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/intercept/#intercept","text":"[jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/maybe-log/","text":"// misk / misk.web.interceptors / RequestLoggingInterceptor / maybeLog maybeLog \u00b6 [jvm]\\ fun maybeLog (httpCall: HttpCall , stopwatch: Stopwatch, error: Throwable ?)","title":"maybeLog - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/maybe-log/#maybelog","text":"[jvm]\\ fun maybeLog (httpCall: HttpCall , stopwatch: Stopwatch, error: Throwable ?)","title":"maybeLog"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/-factory/","text":"// misk / misk.web.interceptors / RequestLoggingInterceptor / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory : NetworkInterceptor.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/-factory/#factory","text":"[jvm]\\ @Singleton class Factory : NetworkInterceptor.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/-factory/#functions","text":"Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/-factory/create/","text":"// misk / misk.web.interceptors / RequestLoggingInterceptor / Factory / create create \u00b6 [jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.interceptors/-request-logging-interceptor/-factory/create/#create","text":"[jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create"},{"location":"0.x/misk/misk.web.interceptors/-response-body-marshaller-factory/","text":"// misk / misk.web.interceptors / ResponseBodyMarshallerFactory ResponseBodyMarshallerFactory \u00b6 [jvm]\\ @Singleton class ResponseBodyMarshallerFactory Functions \u00b6 Name Summary create [jvm] fun create (action: Action ): Marshaller < Any > Returns a marshaller for action , or null if it has no response to marshal.","title":"ResponseBodyMarshallerFactory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-response-body-marshaller-factory/#responsebodymarshallerfactory","text":"[jvm]\\ @Singleton class ResponseBodyMarshallerFactory","title":"ResponseBodyMarshallerFactory"},{"location":"0.x/misk/misk.web.interceptors/-response-body-marshaller-factory/#functions","text":"Name Summary create [jvm] fun create (action: Action ): Marshaller < Any > Returns a marshaller for action , or null if it has no response to marshal.","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-response-body-marshaller-factory/create/","text":"// misk / misk.web.interceptors / ResponseBodyMarshallerFactory / create create \u00b6 [jvm]\\ fun create (action: Action ): Marshaller < Any > Returns a marshaller for action , or null if it has no response to marshal.","title":"create - Misk"},{"location":"0.x/misk/misk.web.interceptors/-response-body-marshaller-factory/create/#create","text":"[jvm]\\ fun create (action: Action ): Marshaller < Any > Returns a marshaller for action , or null if it has no response to marshal.","title":"create"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor/","text":"// misk / misk.web.interceptors / WideOpenDevelopmentInterceptor WideOpenDevelopmentInterceptor \u00b6 [jvm]\\ class WideOpenDevelopmentInterceptor @Injectconstructor : NetworkInterceptor Functions \u00b6 Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain )","title":"WideOpenDevelopmentInterceptor - Misk"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor/#wideopendevelopmentinterceptor","text":"[jvm]\\ class WideOpenDevelopmentInterceptor @Injectconstructor : NetworkInterceptor","title":"WideOpenDevelopmentInterceptor"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor/#functions","text":"Name Summary intercept [jvm] open override fun intercept (chain: NetworkChain )","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor/-wide-open-development-interceptor/","text":"// misk / misk.web.interceptors / WideOpenDevelopmentInterceptor / WideOpenDevelopmentInterceptor WideOpenDevelopmentInterceptor \u00b6 [jvm]\\ @Inject fun WideOpenDevelopmentInterceptor ()","title":"WideOpenDevelopmentInterceptor - Misk"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor/-wide-open-development-interceptor/#wideopendevelopmentinterceptor","text":"[jvm]\\ @Inject fun WideOpenDevelopmentInterceptor ()","title":"WideOpenDevelopmentInterceptor"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor/intercept/","text":"// misk / misk.web.interceptors / WideOpenDevelopmentInterceptor / intercept intercept \u00b6 [jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept - Misk"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor/intercept/#intercept","text":"[jvm]\\ open override fun intercept (chain: NetworkChain )","title":"intercept"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor-factory/","text":"// misk / misk.web.interceptors / WideOpenDevelopmentInterceptorFactory WideOpenDevelopmentInterceptorFactory \u00b6 [jvm]\\ class WideOpenDevelopmentInterceptorFactory @Injectconstructor(wideOpenDevelopmentInterceptor: WideOpenDevelopmentInterceptor , deployment: Deployment) : NetworkInterceptor.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"WideOpenDevelopmentInterceptorFactory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor-factory/#wideopendevelopmentinterceptorfactory","text":"[jvm]\\ class WideOpenDevelopmentInterceptorFactory @Injectconstructor(wideOpenDevelopmentInterceptor: WideOpenDevelopmentInterceptor , deployment: Deployment) : NetworkInterceptor.Factory","title":"WideOpenDevelopmentInterceptorFactory"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor-factory/#functions","text":"Name Summary create [jvm] open override fun create (action: Action ): NetworkInterceptor ?","title":"Functions"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor-factory/-wide-open-development-interceptor-factory/","text":"// misk / misk.web.interceptors / WideOpenDevelopmentInterceptorFactory / WideOpenDevelopmentInterceptorFactory WideOpenDevelopmentInterceptorFactory \u00b6 [jvm]\\ @Inject fun WideOpenDevelopmentInterceptorFactory (wideOpenDevelopmentInterceptor: WideOpenDevelopmentInterceptor , deployment: Deployment)","title":"WideOpenDevelopmentInterceptorFactory - Misk"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor-factory/-wide-open-development-interceptor-factory/#wideopendevelopmentinterceptorfactory","text":"[jvm]\\ @Inject fun WideOpenDevelopmentInterceptorFactory (wideOpenDevelopmentInterceptor: WideOpenDevelopmentInterceptor , deployment: Deployment)","title":"WideOpenDevelopmentInterceptorFactory"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor-factory/create/","text":"// misk / misk.web.interceptors / WideOpenDevelopmentInterceptorFactory / create create \u00b6 [jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.interceptors/-wide-open-development-interceptor-factory/create/#create","text":"[jvm]\\ open override fun create (action: Action ): NetworkInterceptor ?","title":"create"},{"location":"0.x/misk/misk.web.jetty/","text":"// misk / misk.web.jetty Package misk.web.jetty \u00b6 Types \u00b6 Name Summary JettyService [jvm] @Singleton class JettyService : AbstractIdleService MeasuredQueuedThreadPool [jvm] class MeasuredQueuedThreadPool (threadPool: QueuedThreadPool) : MeasuredThreadPool A MeasuredThreadPool for a QueuedThreadPool MeasuredThreadPool [jvm] interface MeasuredThreadPool A common interface that can emit metrics about a thread pool. MeasuredThreadPoolExecutor [jvm] class MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor ) : MeasuredThreadPool A MeasuredThreadPool for a ThreadPoolExecutor ThreadPoolQueueMetrics [jvm] @Singleton class ThreadPoolQueueMetrics","title":"Package misk.web.jetty - Misk"},{"location":"0.x/misk/misk.web.jetty/#package-miskwebjetty","text":"","title":"Package misk.web.jetty"},{"location":"0.x/misk/misk.web.jetty/#types","text":"Name Summary JettyService [jvm] @Singleton class JettyService : AbstractIdleService MeasuredQueuedThreadPool [jvm] class MeasuredQueuedThreadPool (threadPool: QueuedThreadPool) : MeasuredThreadPool A MeasuredThreadPool for a QueuedThreadPool MeasuredThreadPool [jvm] interface MeasuredThreadPool A common interface that can emit metrics about a thread pool. MeasuredThreadPoolExecutor [jvm] class MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor ) : MeasuredThreadPool A MeasuredThreadPool for a ThreadPoolExecutor ThreadPoolQueueMetrics [jvm] @Singleton class ThreadPoolQueueMetrics","title":"Types"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/","text":"// misk / misk.web.jetty / JettyService JettyService \u00b6 [jvm]\\ @Singleton class JettyService : AbstractIdleService Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary healthServerUrl [jvm] val healthServerUrl : HttpUrl? httpServerUrl [jvm] val httpServerUrl : HttpUrl httpsServerUrl [jvm] val httpsServerUrl : HttpUrl?","title":"JettyService - Misk"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/#jettyservice","text":"[jvm]\\ @Singleton class JettyService : AbstractIdleService","title":"JettyService"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/#properties","text":"Name Summary healthServerUrl [jvm] val healthServerUrl : HttpUrl? httpServerUrl [jvm] val httpServerUrl : HttpUrl httpsServerUrl [jvm] val httpsServerUrl : HttpUrl?","title":"Properties"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/health-server-url/","text":"// misk / misk.web.jetty / JettyService / healthServerUrl healthServerUrl \u00b6 [jvm]\\ val healthServerUrl : HttpUrl?","title":"healthServerUrl - Misk"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/health-server-url/#healthserverurl","text":"[jvm]\\ val healthServerUrl : HttpUrl?","title":"healthServerUrl"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/http-server-url/","text":"// misk / misk.web.jetty / JettyService / httpServerUrl httpServerUrl \u00b6 [jvm]\\ val httpServerUrl : HttpUrl","title":"httpServerUrl - Misk"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/http-server-url/#httpserverurl","text":"[jvm]\\ val httpServerUrl : HttpUrl","title":"httpServerUrl"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/https-server-url/","text":"// misk / misk.web.jetty / JettyService / httpsServerUrl httpsServerUrl \u00b6 [jvm]\\ val httpsServerUrl : HttpUrl?","title":"httpsServerUrl - Misk"},{"location":"0.x/misk/misk.web.jetty/-jetty-service/https-server-url/#httpsserverurl","text":"[jvm]\\ val httpsServerUrl : HttpUrl?","title":"httpsServerUrl"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/","text":"// misk / misk.web.jetty / MeasuredQueuedThreadPool MeasuredQueuedThreadPool \u00b6 [jvm]\\ class MeasuredQueuedThreadPool (threadPool: QueuedThreadPool) : MeasuredThreadPool A MeasuredThreadPool for a QueuedThreadPool Constructors \u00b6 MeasuredQueuedThreadPool [jvm] fun MeasuredQueuedThreadPool (threadPool: QueuedThreadPool) Functions \u00b6 Name Summary activeCount [jvm] open override fun activeCount (): Int The number of active threads. maxPoolSize [jvm] open override fun maxPoolSize (): Int The maximum size the pool can grow to. poolSize [jvm] open override fun poolSize (): Int The current size of the thread pool. queueSize [jvm] open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"MeasuredQueuedThreadPool - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/#measuredqueuedthreadpool","text":"[jvm]\\ class MeasuredQueuedThreadPool (threadPool: QueuedThreadPool) : MeasuredThreadPool A MeasuredThreadPool for a QueuedThreadPool","title":"MeasuredQueuedThreadPool"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/#constructors","text":"MeasuredQueuedThreadPool [jvm] fun MeasuredQueuedThreadPool (threadPool: QueuedThreadPool)","title":"Constructors"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/#functions","text":"Name Summary activeCount [jvm] open override fun activeCount (): Int The number of active threads. maxPoolSize [jvm] open override fun maxPoolSize (): Int The maximum size the pool can grow to. poolSize [jvm] open override fun poolSize (): Int The current size of the thread pool. queueSize [jvm] open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"Functions"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/-measured-queued-thread-pool/","text":"// misk / misk.web.jetty / MeasuredQueuedThreadPool / MeasuredQueuedThreadPool MeasuredQueuedThreadPool \u00b6 [jvm]\\ fun MeasuredQueuedThreadPool (threadPool: QueuedThreadPool)","title":"MeasuredQueuedThreadPool - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/-measured-queued-thread-pool/#measuredqueuedthreadpool","text":"[jvm]\\ fun MeasuredQueuedThreadPool (threadPool: QueuedThreadPool)","title":"MeasuredQueuedThreadPool"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/active-count/","text":"// misk / misk.web.jetty / MeasuredQueuedThreadPool / activeCount activeCount \u00b6 [jvm]\\ open override fun activeCount (): Int The number of active threads.","title":"activeCount - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/active-count/#activecount","text":"[jvm]\\ open override fun activeCount (): Int The number of active threads.","title":"activeCount"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/max-pool-size/","text":"// misk / misk.web.jetty / MeasuredQueuedThreadPool / maxPoolSize maxPoolSize \u00b6 [jvm]\\ open override fun maxPoolSize (): Int The maximum size the pool can grow to.","title":"maxPoolSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/max-pool-size/#maxpoolsize","text":"[jvm]\\ open override fun maxPoolSize (): Int The maximum size the pool can grow to.","title":"maxPoolSize"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/pool-size/","text":"// misk / misk.web.jetty / MeasuredQueuedThreadPool / poolSize poolSize \u00b6 [jvm]\\ open override fun poolSize (): Int The current size of the thread pool.","title":"poolSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/pool-size/#poolsize","text":"[jvm]\\ open override fun poolSize (): Int The current size of the thread pool.","title":"poolSize"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/queue-size/","text":"// misk / misk.web.jetty / MeasuredQueuedThreadPool / queueSize queueSize \u00b6 [jvm]\\ open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"queueSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-queued-thread-pool/queue-size/#queuesize","text":"[jvm]\\ open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"queueSize"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/","text":"// misk / misk.web.jetty / MeasuredThreadPool MeasuredThreadPool \u00b6 [jvm]\\ interface MeasuredThreadPool A common interface that can emit metrics about a thread pool. Functions \u00b6 Name Summary activeCount [jvm] abstract fun activeCount (): Int The number of active threads. maxPoolSize [jvm] abstract fun maxPoolSize (): Int The maximum size the pool can grow to. poolSize [jvm] abstract fun poolSize (): Int The current size of the thread pool. queueSize [jvm] abstract fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool. Inheritors \u00b6 Name MeasuredQueuedThreadPool MeasuredThreadPoolExecutor","title":"MeasuredThreadPool - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/#measuredthreadpool","text":"[jvm]\\ interface MeasuredThreadPool A common interface that can emit metrics about a thread pool.","title":"MeasuredThreadPool"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/#functions","text":"Name Summary activeCount [jvm] abstract fun activeCount (): Int The number of active threads. maxPoolSize [jvm] abstract fun maxPoolSize (): Int The maximum size the pool can grow to. poolSize [jvm] abstract fun poolSize (): Int The current size of the thread pool. queueSize [jvm] abstract fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"Functions"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/#inheritors","text":"Name MeasuredQueuedThreadPool MeasuredThreadPoolExecutor","title":"Inheritors"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/active-count/","text":"// misk / misk.web.jetty / MeasuredThreadPool / activeCount activeCount \u00b6 [jvm]\\ abstract fun activeCount (): Int The number of active threads.","title":"activeCount - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/active-count/#activecount","text":"[jvm]\\ abstract fun activeCount (): Int The number of active threads.","title":"activeCount"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/max-pool-size/","text":"// misk / misk.web.jetty / MeasuredThreadPool / maxPoolSize maxPoolSize \u00b6 [jvm]\\ abstract fun maxPoolSize (): Int The maximum size the pool can grow to.","title":"maxPoolSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/max-pool-size/#maxpoolsize","text":"[jvm]\\ abstract fun maxPoolSize (): Int The maximum size the pool can grow to.","title":"maxPoolSize"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/pool-size/","text":"// misk / misk.web.jetty / MeasuredThreadPool / poolSize poolSize \u00b6 [jvm]\\ abstract fun poolSize (): Int The current size of the thread pool.","title":"poolSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/pool-size/#poolsize","text":"[jvm]\\ abstract fun poolSize (): Int The current size of the thread pool.","title":"poolSize"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/queue-size/","text":"// misk / misk.web.jetty / MeasuredThreadPool / queueSize queueSize \u00b6 [jvm]\\ abstract fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"queueSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool/queue-size/#queuesize","text":"[jvm]\\ abstract fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"queueSize"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/","text":"// misk / misk.web.jetty / MeasuredThreadPoolExecutor MeasuredThreadPoolExecutor \u00b6 [jvm]\\ class MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor ) : MeasuredThreadPool A MeasuredThreadPool for a ThreadPoolExecutor Constructors \u00b6 MeasuredThreadPoolExecutor [jvm] fun MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor ) Functions \u00b6 Name Summary activeCount [jvm] open override fun activeCount (): Int The number of active threads. maxPoolSize [jvm] open override fun maxPoolSize (): Int The maximum size the pool can grow to. poolSize [jvm] open override fun poolSize (): Int The current size of the thread pool. queueSize [jvm] open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"MeasuredThreadPoolExecutor - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/#measuredthreadpoolexecutor","text":"[jvm]\\ class MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor ) : MeasuredThreadPool A MeasuredThreadPool for a ThreadPoolExecutor","title":"MeasuredThreadPoolExecutor"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/#constructors","text":"MeasuredThreadPoolExecutor [jvm] fun MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor )","title":"Constructors"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/#functions","text":"Name Summary activeCount [jvm] open override fun activeCount (): Int The number of active threads. maxPoolSize [jvm] open override fun maxPoolSize (): Int The maximum size the pool can grow to. poolSize [jvm] open override fun poolSize (): Int The current size of the thread pool. queueSize [jvm] open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"Functions"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/-measured-thread-pool-executor/","text":"// misk / misk.web.jetty / MeasuredThreadPoolExecutor / MeasuredThreadPoolExecutor MeasuredThreadPoolExecutor \u00b6 [jvm]\\ fun MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor )","title":"MeasuredThreadPoolExecutor - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/-measured-thread-pool-executor/#measuredthreadpoolexecutor","text":"[jvm]\\ fun MeasuredThreadPoolExecutor (threadPool: ThreadPoolExecutor )","title":"MeasuredThreadPoolExecutor"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/active-count/","text":"// misk / misk.web.jetty / MeasuredThreadPoolExecutor / activeCount activeCount \u00b6 [jvm]\\ open override fun activeCount (): Int The number of active threads.","title":"activeCount - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/active-count/#activecount","text":"[jvm]\\ open override fun activeCount (): Int The number of active threads.","title":"activeCount"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/max-pool-size/","text":"// misk / misk.web.jetty / MeasuredThreadPoolExecutor / maxPoolSize maxPoolSize \u00b6 [jvm]\\ open override fun maxPoolSize (): Int The maximum size the pool can grow to.","title":"maxPoolSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/max-pool-size/#maxpoolsize","text":"[jvm]\\ open override fun maxPoolSize (): Int The maximum size the pool can grow to.","title":"maxPoolSize"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/pool-size/","text":"// misk / misk.web.jetty / MeasuredThreadPoolExecutor / poolSize poolSize \u00b6 [jvm]\\ open override fun poolSize (): Int The current size of the thread pool.","title":"poolSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/pool-size/#poolsize","text":"[jvm]\\ open override fun poolSize (): Int The current size of the thread pool.","title":"poolSize"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/queue-size/","text":"// misk / misk.web.jetty / MeasuredThreadPoolExecutor / queueSize queueSize \u00b6 [jvm]\\ open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"queueSize - Misk"},{"location":"0.x/misk/misk.web.jetty/-measured-thread-pool-executor/queue-size/#queuesize","text":"[jvm]\\ open override fun queueSize (): Int The current number of tasks in the queue waiting to be processed by the thread pool.","title":"queueSize"},{"location":"0.x/misk/misk.web.jetty/-thread-pool-queue-metrics/","text":"// misk / misk.web.jetty / ThreadPoolQueueMetrics ThreadPoolQueueMetrics \u00b6 [jvm]\\ @Singleton class ThreadPoolQueueMetrics Functions \u00b6 Name Summary recordQueueLatency [jvm] fun recordQueueLatency (latency: Duration )","title":"ThreadPoolQueueMetrics - Misk"},{"location":"0.x/misk/misk.web.jetty/-thread-pool-queue-metrics/#threadpoolqueuemetrics","text":"[jvm]\\ @Singleton class ThreadPoolQueueMetrics","title":"ThreadPoolQueueMetrics"},{"location":"0.x/misk/misk.web.jetty/-thread-pool-queue-metrics/#functions","text":"Name Summary recordQueueLatency [jvm] fun recordQueueLatency (latency: Duration )","title":"Functions"},{"location":"0.x/misk/misk.web.jetty/-thread-pool-queue-metrics/record-queue-latency/","text":"// misk / misk.web.jetty / ThreadPoolQueueMetrics / recordQueueLatency recordQueueLatency \u00b6 [jvm]\\ fun recordQueueLatency (latency: Duration )","title":"recordQueueLatency - Misk"},{"location":"0.x/misk/misk.web.jetty/-thread-pool-queue-metrics/record-queue-latency/#recordqueuelatency","text":"[jvm]\\ fun recordQueueLatency (latency: Duration )","title":"recordQueueLatency"},{"location":"0.x/misk/misk.web.marshal/","text":"// misk / misk.web.marshal Package misk.web.marshal \u00b6 Types \u00b6 Name Summary GenericMarshallers [jvm] object GenericMarshallers Handles generic marshalling, for cases where the action doesn\u2019t explicitly specify return content GenericUnmarshallers [jvm] object GenericUnmarshallers Handles generic unmarshalling, for cases where the action can accept anything JsonMarshaller [jvm] class JsonMarshaller < T >(adapter: JsonAdapter< T >) : Marshaller < T > JsonUnmarshaller [jvm] class JsonUnmarshaller (adapter: JsonAdapter< Any >) : Unmarshaller Marshaller [jvm] interface Marshaller <in T > Marshalls typed kotlin objects into a ResponseBody MultipartUnmarshaller [jvm] object MultipartUnmarshaller : Unmarshaller PlainTextMarshaller [jvm] object PlainTextMarshaller : Marshaller < Any > PlainTextUnmarshaller [jvm] object PlainTextUnmarshaller ProtobufMarshaller [jvm] class ProtobufMarshaller < T >(adapter: ProtoAdapter< T >) : Marshaller < T > ProtobufUnmarshaller [jvm] class ProtobufUnmarshaller (adapter: ProtoAdapter< Any >) : Unmarshaller Unmarshaller [jvm] interface Unmarshaller Unmarshalls a typed object from an incoming source","title":"Package misk.web.marshal - Misk"},{"location":"0.x/misk/misk.web.marshal/#package-miskwebmarshal","text":"","title":"Package misk.web.marshal"},{"location":"0.x/misk/misk.web.marshal/#types","text":"Name Summary GenericMarshallers [jvm] object GenericMarshallers Handles generic marshalling, for cases where the action doesn\u2019t explicitly specify return content GenericUnmarshallers [jvm] object GenericUnmarshallers Handles generic unmarshalling, for cases where the action can accept anything JsonMarshaller [jvm] class JsonMarshaller < T >(adapter: JsonAdapter< T >) : Marshaller < T > JsonUnmarshaller [jvm] class JsonUnmarshaller (adapter: JsonAdapter< Any >) : Unmarshaller Marshaller [jvm] interface Marshaller <in T > Marshalls typed kotlin objects into a ResponseBody MultipartUnmarshaller [jvm] object MultipartUnmarshaller : Unmarshaller PlainTextMarshaller [jvm] object PlainTextMarshaller : Marshaller < Any > PlainTextUnmarshaller [jvm] object PlainTextUnmarshaller ProtobufMarshaller [jvm] class ProtobufMarshaller < T >(adapter: ProtoAdapter< T >) : Marshaller < T > ProtobufUnmarshaller [jvm] class ProtobufUnmarshaller (adapter: ProtoAdapter< Any >) : Unmarshaller Unmarshaller [jvm] interface Unmarshaller Unmarshalls a typed object from an incoming source","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/","text":"// misk / misk.web.marshal / GenericMarshallers GenericMarshallers \u00b6 [jvm]\\ object GenericMarshallers Handles generic marshalling, for cases where the action doesn\u2019t explicitly specify return content Types \u00b6 Name Summary FromByteString [jvm] class FromByteString (contentType: MediaType?) : Marshaller <ByteString> ToNothing [jvm] class ToNothing (contentType: MediaType?) : Marshaller < Nothing > Functions \u00b6 Name Summary canHandle [jvm] fun canHandle (type: Type ): Boolean fun canHandle (type: KType ): Boolean from [jvm] fun from (contentType: MediaType?, returnType: KType ): Marshaller < Any >?","title":"GenericMarshallers - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/#genericmarshallers","text":"[jvm]\\ object GenericMarshallers Handles generic marshalling, for cases where the action doesn\u2019t explicitly specify return content","title":"GenericMarshallers"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/#types","text":"Name Summary FromByteString [jvm] class FromByteString (contentType: MediaType?) : Marshaller <ByteString> ToNothing [jvm] class ToNothing (contentType: MediaType?) : Marshaller < Nothing >","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/#functions","text":"Name Summary canHandle [jvm] fun canHandle (type: Type ): Boolean fun canHandle (type: KType ): Boolean from [jvm] fun from (contentType: MediaType?, returnType: KType ): Marshaller < Any >?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/can-handle/","text":"// misk / misk.web.marshal / GenericMarshallers / canHandle canHandle \u00b6 [jvm]\\ fun canHandle (type: KType ): Boolean fun canHandle (type: Type ): Boolean","title":"canHandle - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/can-handle/#canhandle","text":"[jvm]\\ fun canHandle (type: KType ): Boolean fun canHandle (type: Type ): Boolean","title":"canHandle"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/from/","text":"// misk / misk.web.marshal / GenericMarshallers / from from \u00b6 [jvm]\\ fun from (contentType: MediaType?, returnType: KType ): Marshaller < Any >?","title":"from - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/from/#from","text":"[jvm]\\ fun from (contentType: MediaType?, returnType: KType ): Marshaller < Any >?","title":"from"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/","text":"// misk / misk.web.marshal / GenericMarshallers / FromByteString FromByteString \u00b6 [jvm]\\ class FromByteString (contentType: MediaType?) : Marshaller <ByteString> Functions \u00b6 Name Summary contentType [jvm] open override fun contentType (): MediaType? responseBody [jvm] open override fun responseBody (o: ByteString): ResponseBody","title":"FromByteString - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/#frombytestring","text":"[jvm]\\ class FromByteString (contentType: MediaType?) : Marshaller <ByteString>","title":"FromByteString"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/#functions","text":"Name Summary contentType [jvm] open override fun contentType (): MediaType? responseBody [jvm] open override fun responseBody (o: ByteString): ResponseBody","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/-from-byte-string/","text":"// misk / misk.web.marshal / GenericMarshallers / FromByteString / FromByteString FromByteString \u00b6 [jvm]\\ fun FromByteString (contentType: MediaType?)","title":"FromByteString - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/-from-byte-string/#frombytestring","text":"[jvm]\\ fun FromByteString (contentType: MediaType?)","title":"FromByteString"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/content-type/","text":"// misk / misk.web.marshal / GenericMarshallers / FromByteString / contentType contentType \u00b6 [jvm]\\ open override fun contentType (): MediaType? Return \u00b6 the media type of the marshalled content, if known to the Marshaller","title":"contentType - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/content-type/#contenttype","text":"[jvm]\\ open override fun contentType (): MediaType?","title":"contentType"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/content-type/#return","text":"the media type of the marshalled content, if known to the Marshaller","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/response-body/","text":"// misk / misk.web.marshal / GenericMarshallers / FromByteString / responseBody responseBody \u00b6 [jvm]\\ open override fun responseBody (o: ByteString): ResponseBody Return \u00b6 The object marshalled into a ResponseBody","title":"responseBody - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/response-body/#responsebody","text":"[jvm]\\ open override fun responseBody (o: ByteString): ResponseBody","title":"responseBody"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-from-byte-string/response-body/#return","text":"The object marshalled into a ResponseBody","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/","text":"// misk / misk.web.marshal / GenericMarshallers / ToNothing ToNothing \u00b6 [jvm]\\ class ToNothing (contentType: MediaType?) : Marshaller < Nothing > Functions \u00b6 Name Summary contentType [jvm] open override fun contentType (): MediaType? responseBody [jvm] open override fun responseBody (o: Nothing ): ResponseBody","title":"ToNothing - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/#tonothing","text":"[jvm]\\ class ToNothing (contentType: MediaType?) : Marshaller < Nothing >","title":"ToNothing"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/#functions","text":"Name Summary contentType [jvm] open override fun contentType (): MediaType? responseBody [jvm] open override fun responseBody (o: Nothing ): ResponseBody","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/-to-nothing/","text":"// misk / misk.web.marshal / GenericMarshallers / ToNothing / ToNothing ToNothing \u00b6 [jvm]\\ fun ToNothing (contentType: MediaType?)","title":"ToNothing - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/-to-nothing/#tonothing","text":"[jvm]\\ fun ToNothing (contentType: MediaType?)","title":"ToNothing"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/content-type/","text":"// misk / misk.web.marshal / GenericMarshallers / ToNothing / contentType contentType \u00b6 [jvm]\\ open override fun contentType (): MediaType? Return \u00b6 the media type of the marshalled content, if known to the Marshaller","title":"contentType - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/content-type/#contenttype","text":"[jvm]\\ open override fun contentType (): MediaType?","title":"contentType"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/content-type/#return","text":"the media type of the marshalled content, if known to the Marshaller","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/response-body/","text":"// misk / misk.web.marshal / GenericMarshallers / ToNothing / responseBody responseBody \u00b6 [jvm]\\ open override fun responseBody (o: Nothing ): ResponseBody Return \u00b6 The object marshalled into a ResponseBody","title":"responseBody - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/response-body/#responsebody","text":"[jvm]\\ open override fun responseBody (o: Nothing ): ResponseBody","title":"responseBody"},{"location":"0.x/misk/misk.web.marshal/-generic-marshallers/-to-nothing/response-body/#return","text":"The object marshalled into a ResponseBody","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-generic-unmarshallers/","text":"// misk / misk.web.marshal / GenericUnmarshallers GenericUnmarshallers \u00b6 [jvm]\\ object GenericUnmarshallers Handles generic unmarshalling, for cases where the action can accept anything Functions \u00b6 Name Summary canHandle [jvm] fun canHandle (type: Type ): Boolean fun canHandle (type: KType ): Boolean into [jvm] fun into (parameter: KParameter ): Unmarshaller ?","title":"GenericUnmarshallers - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-unmarshallers/#genericunmarshallers","text":"[jvm]\\ object GenericUnmarshallers Handles generic unmarshalling, for cases where the action can accept anything","title":"GenericUnmarshallers"},{"location":"0.x/misk/misk.web.marshal/-generic-unmarshallers/#functions","text":"Name Summary canHandle [jvm] fun canHandle (type: Type ): Boolean fun canHandle (type: KType ): Boolean into [jvm] fun into (parameter: KParameter ): Unmarshaller ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-generic-unmarshallers/can-handle/","text":"// misk / misk.web.marshal / GenericUnmarshallers / canHandle canHandle \u00b6 [jvm]\\ fun canHandle (type: KType ): Boolean fun canHandle (type: Type ): Boolean","title":"canHandle - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-unmarshallers/can-handle/#canhandle","text":"[jvm]\\ fun canHandle (type: KType ): Boolean fun canHandle (type: Type ): Boolean","title":"canHandle"},{"location":"0.x/misk/misk.web.marshal/-generic-unmarshallers/into/","text":"// misk / misk.web.marshal / GenericUnmarshallers / into into \u00b6 [jvm]\\ fun into (parameter: KParameter ): Unmarshaller ?","title":"into - Misk"},{"location":"0.x/misk/misk.web.marshal/-generic-unmarshallers/into/#into","text":"[jvm]\\ fun into (parameter: KParameter ): Unmarshaller ?","title":"into"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/","text":"// misk / misk.web.marshal / JsonMarshaller JsonMarshaller \u00b6 [jvm]\\ class JsonMarshaller < T >(adapter: JsonAdapter< T >) : Marshaller < T > Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory : Marshaller.Factory Functions \u00b6 Name Summary contentType [jvm] open override fun contentType (): MediaType responseBody [jvm] open override fun responseBody (o: T ): ResponseBody Properties \u00b6 Name Summary adapter [jvm] val adapter : JsonAdapter< T >","title":"JsonMarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/#jsonmarshaller","text":"[jvm]\\ class JsonMarshaller < T >(adapter: JsonAdapter< T >) : Marshaller < T >","title":"JsonMarshaller"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/#types","text":"Name Summary Factory [jvm] @Singleton class Factory : Marshaller.Factory","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/#functions","text":"Name Summary contentType [jvm] open override fun contentType (): MediaType responseBody [jvm] open override fun responseBody (o: T ): ResponseBody","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/#properties","text":"Name Summary adapter [jvm] val adapter : JsonAdapter< T >","title":"Properties"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-json-marshaller/","text":"// misk / misk.web.marshal / JsonMarshaller / JsonMarshaller JsonMarshaller \u00b6 [jvm]\\ fun < T > JsonMarshaller (adapter: JsonAdapter< T >)","title":"JsonMarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-json-marshaller/#jsonmarshaller","text":"[jvm]\\ fun < T > JsonMarshaller (adapter: JsonAdapter< T >)","title":"JsonMarshaller"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/adapter/","text":"// misk / misk.web.marshal / JsonMarshaller / adapter adapter \u00b6 [jvm]\\ val adapter : JsonAdapter< T >","title":"adapter - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/adapter/#adapter","text":"[jvm]\\ val adapter : JsonAdapter< T >","title":"adapter"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/content-type/","text":"// misk / misk.web.marshal / JsonMarshaller / contentType contentType \u00b6 [jvm]\\ open override fun contentType (): MediaType Return \u00b6 the media type of the marshalled content, if known to the Marshaller","title":"contentType - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/content-type/#contenttype","text":"[jvm]\\ open override fun contentType (): MediaType","title":"contentType"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/content-type/#return","text":"the media type of the marshalled content, if known to the Marshaller","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/response-body/","text":"// misk / misk.web.marshal / JsonMarshaller / responseBody responseBody \u00b6 [jvm]\\ open override fun responseBody (o: T ): ResponseBody Return \u00b6 The object marshalled into a ResponseBody","title":"responseBody - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/response-body/#responsebody","text":"[jvm]\\ open override fun responseBody (o: T ): ResponseBody","title":"responseBody"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/response-body/#return","text":"The object marshalled into a ResponseBody","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/","text":"// misk / misk.web.marshal / JsonMarshaller / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory : Marshaller.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >? Properties \u00b6 Name Summary moshi [jvm] val moshi : Moshi","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/#factory","text":"[jvm]\\ @Singleton class Factory : Marshaller.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/#functions","text":"Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/#properties","text":"Name Summary moshi [jvm] val moshi : Moshi","title":"Properties"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/create/","text":"// misk / misk.web.marshal / JsonMarshaller / Factory / create create \u00b6 [jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/create/#create","text":"[jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/moshi/","text":"// misk / misk.web.marshal / JsonMarshaller / Factory / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-marshaller/-factory/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/","text":"// misk / misk.web.marshal / JsonUnmarshaller JsonUnmarshaller \u00b6 [jvm]\\ class JsonUnmarshaller (adapter: JsonAdapter< Any >) : Unmarshaller Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory : Unmarshaller.Factory Functions \u00b6 Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ? Properties \u00b6 Name Summary adapter [jvm] val adapter : JsonAdapter< Any >","title":"JsonUnmarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/#jsonunmarshaller","text":"[jvm]\\ class JsonUnmarshaller (adapter: JsonAdapter< Any >) : Unmarshaller","title":"JsonUnmarshaller"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/#types","text":"Name Summary Factory [jvm] @Singleton class Factory : Unmarshaller.Factory","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/#functions","text":"Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/#properties","text":"Name Summary adapter [jvm] val adapter : JsonAdapter< Any >","title":"Properties"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-json-unmarshaller/","text":"// misk / misk.web.marshal / JsonUnmarshaller / JsonUnmarshaller JsonUnmarshaller \u00b6 [jvm]\\ fun JsonUnmarshaller (adapter: JsonAdapter< Any >)","title":"JsonUnmarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-json-unmarshaller/#jsonunmarshaller","text":"[jvm]\\ fun JsonUnmarshaller (adapter: JsonAdapter< Any >)","title":"JsonUnmarshaller"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/adapter/","text":"// misk / misk.web.marshal / JsonUnmarshaller / adapter adapter \u00b6 [jvm]\\ val adapter : JsonAdapter< Any >","title":"adapter - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/adapter/#adapter","text":"[jvm]\\ val adapter : JsonAdapter< Any >","title":"adapter"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/unmarshal/","text":"// misk / misk.web.marshal / JsonUnmarshaller / unmarshal unmarshal \u00b6 [jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ?","title":"unmarshal - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/unmarshal/#unmarshal","text":"[jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ?","title":"unmarshal"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/","text":"// misk / misk.web.marshal / JsonUnmarshaller / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory : Unmarshaller.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ? Properties \u00b6 Name Summary moshi [jvm] val moshi : Moshi","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/#factory","text":"[jvm]\\ @Singleton class Factory : Unmarshaller.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/#functions","text":"Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/#properties","text":"Name Summary moshi [jvm] val moshi : Moshi","title":"Properties"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/create/","text":"// misk / misk.web.marshal / JsonUnmarshaller / Factory / create create \u00b6 [jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/create/#create","text":"[jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/moshi/","text":"// misk / misk.web.marshal / JsonUnmarshaller / Factory / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk/misk.web.marshal/-json-unmarshaller/-factory/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk/misk.web.marshal/-marshaller/","text":"// misk / misk.web.marshal / Marshaller Marshaller \u00b6 [jvm]\\ interface Marshaller <in T > Marshalls typed kotlin objects into a ResponseBody Types \u00b6 Name Summary Companion [jvm] object Companion Factory [jvm] interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: Functions \u00b6 Name Summary contentType [jvm] abstract fun contentType (): MediaType? responseBody [jvm] abstract fun responseBody (o: T ): ResponseBody Inheritors \u00b6 Name FromByteString ToNothing JsonMarshaller PlainTextMarshaller ProtobufMarshaller","title":"Marshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-marshaller/#marshaller","text":"[jvm]\\ interface Marshaller <in T > Marshalls typed kotlin objects into a ResponseBody","title":"Marshaller"},{"location":"0.x/misk/misk.web.marshal/-marshaller/#types","text":"Name Summary Companion [jvm] object Companion Factory [jvm] interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule:","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-marshaller/#functions","text":"Name Summary contentType [jvm] abstract fun contentType (): MediaType? responseBody [jvm] abstract fun responseBody (o: T ): ResponseBody","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-marshaller/#inheritors","text":"Name FromByteString ToNothing JsonMarshaller PlainTextMarshaller ProtobufMarshaller","title":"Inheritors"},{"location":"0.x/misk/misk.web.marshal/-marshaller/content-type/","text":"// misk / misk.web.marshal / Marshaller / contentType contentType \u00b6 [jvm]\\ abstract fun contentType (): MediaType? Return \u00b6 the media type of the marshalled content, if known to the Marshaller","title":"contentType - Misk"},{"location":"0.x/misk/misk.web.marshal/-marshaller/content-type/#contenttype","text":"[jvm]\\ abstract fun contentType (): MediaType?","title":"contentType"},{"location":"0.x/misk/misk.web.marshal/-marshaller/content-type/#return","text":"the media type of the marshalled content, if known to the Marshaller","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-marshaller/response-body/","text":"// misk / misk.web.marshal / Marshaller / responseBody responseBody \u00b6 [jvm]\\ abstract fun responseBody (o: T ): ResponseBody Return \u00b6 The object marshalled into a ResponseBody","title":"responseBody - Misk"},{"location":"0.x/misk/misk.web.marshal/-marshaller/response-body/#responsebody","text":"[jvm]\\ abstract fun responseBody (o: T ): ResponseBody","title":"responseBody"},{"location":"0.x/misk/misk.web.marshal/-marshaller/response-body/#return","text":"The object marshalled into a ResponseBody","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-companion/","text":"// misk / misk.web.marshal / Marshaller / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary actualResponseType [jvm] fun actualResponseType (type: KType ): Type","title":"Companion - Misk"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-companion/#functions","text":"Name Summary actualResponseType [jvm] fun actualResponseType (type: KType ): Type","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-companion/actual-response-type/","text":"// misk / misk.web.marshal / Marshaller / Companion / actualResponseType actualResponseType \u00b6 [jvm]\\ fun actualResponseType (type: KType ): Type","title":"actualResponseType - Misk"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-companion/actual-response-type/#actualresponsetype","text":"[jvm]\\ fun actualResponseType (type: KType ): Type","title":"actualResponseType"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-factory/","text":"// misk / misk.web.marshal / Marshaller / Factory Factory \u00b6 [jvm]\\ interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<Marshaller.Factory>().to<MyFactory>() Functions \u00b6 Name Summary create [jvm] abstract fun create (mediaType: MediaType, type: KType ): Marshaller < Any >? Inheritors \u00b6 Name Factory Factory Factory","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-factory/#factory","text":"[jvm]\\ interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<Marshaller.Factory>().to<MyFactory>()","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-factory/#functions","text":"Name Summary create [jvm] abstract fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-factory/#inheritors","text":"Name Factory Factory Factory","title":"Inheritors"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-factory/create/","text":"// misk / misk.web.marshal / Marshaller / Factory / create create \u00b6 [jvm]\\ abstract fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-marshaller/-factory/create/#create","text":"[jvm]\\ abstract fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/","text":"// misk / misk.web.marshal / MultipartUnmarshaller MultipartUnmarshaller \u00b6 [jvm]\\ object MultipartUnmarshaller : Unmarshaller Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory : Unmarshaller.Factory Functions \u00b6 Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): MultipartReader","title":"MultipartUnmarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/#multipartunmarshaller","text":"[jvm]\\ object MultipartUnmarshaller : Unmarshaller","title":"MultipartUnmarshaller"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/#types","text":"Name Summary Factory [jvm] @Singleton class Factory : Unmarshaller.Factory","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/#functions","text":"Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): MultipartReader","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/unmarshal/","text":"// misk / misk.web.marshal / MultipartUnmarshaller / unmarshal unmarshal \u00b6 [jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): MultipartReader","title":"unmarshal - Misk"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/unmarshal/#unmarshal","text":"[jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): MultipartReader","title":"unmarshal"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/","text":"// misk / misk.web.marshal / MultipartUnmarshaller / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory : Unmarshaller.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ? Properties \u00b6 Name Summary moshi [jvm] val moshi : Moshi","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/#factory","text":"[jvm]\\ @Singleton class Factory : Unmarshaller.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/#functions","text":"Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/#properties","text":"Name Summary moshi [jvm] val moshi : Moshi","title":"Properties"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/create/","text":"// misk / misk.web.marshal / MultipartUnmarshaller / Factory / create create \u00b6 [jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/create/#create","text":"[jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/moshi/","text":"// misk / misk.web.marshal / MultipartUnmarshaller / Factory / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk/misk.web.marshal/-multipart-unmarshaller/-factory/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/","text":"// misk / misk.web.marshal / PlainTextMarshaller PlainTextMarshaller \u00b6 [jvm]\\ object PlainTextMarshaller : Marshaller < Any > Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory @Injectconstructor : Marshaller.Factory Functions \u00b6 Name Summary contentType [jvm] open override fun contentType (): MediaType responseBody [jvm] open override fun responseBody (o: Any ): ResponseBody","title":"PlainTextMarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/#plaintextmarshaller","text":"[jvm]\\ object PlainTextMarshaller : Marshaller < Any >","title":"PlainTextMarshaller"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/#types","text":"Name Summary Factory [jvm] @Singleton class Factory @Injectconstructor : Marshaller.Factory","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/#functions","text":"Name Summary contentType [jvm] open override fun contentType (): MediaType responseBody [jvm] open override fun responseBody (o: Any ): ResponseBody","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/content-type/","text":"// misk / misk.web.marshal / PlainTextMarshaller / contentType contentType \u00b6 [jvm]\\ open override fun contentType (): MediaType Return \u00b6 the media type of the marshalled content, if known to the Marshaller","title":"contentType - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/content-type/#contenttype","text":"[jvm]\\ open override fun contentType (): MediaType","title":"contentType"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/content-type/#return","text":"the media type of the marshalled content, if known to the Marshaller","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/response-body/","text":"// misk / misk.web.marshal / PlainTextMarshaller / responseBody responseBody \u00b6 [jvm]\\ open override fun responseBody (o: Any ): ResponseBody Return \u00b6 The object marshalled into a ResponseBody","title":"responseBody - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/response-body/#responsebody","text":"[jvm]\\ open override fun responseBody (o: Any ): ResponseBody","title":"responseBody"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/response-body/#return","text":"The object marshalled into a ResponseBody","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/-factory/","text":"// misk / misk.web.marshal / PlainTextMarshaller / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory @Injectconstructor : Marshaller.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/-factory/#factory","text":"[jvm]\\ @Singleton class Factory @Injectconstructor : Marshaller.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/-factory/#functions","text":"Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/-factory/-factory/","text":"// misk / misk.web.marshal / PlainTextMarshaller / Factory / Factory Factory \u00b6 [jvm]\\ @Inject fun Factory ()","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/-factory/-factory/#factory","text":"[jvm]\\ @Inject fun Factory ()","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/-factory/create/","text":"// misk / misk.web.marshal / PlainTextMarshaller / Factory / create create \u00b6 [jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-marshaller/-factory/create/#create","text":"[jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller PlainTextUnmarshaller \u00b6 [jvm]\\ object PlainTextUnmarshaller Types \u00b6 Name Summary Factory [jvm] class Factory @Injectconstructor : Unmarshaller.Factory ToByteString [jvm] object ToByteString : Unmarshaller ToString [jvm] object ToString : Unmarshaller","title":"PlainTextUnmarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/#plaintextunmarshaller","text":"[jvm]\\ object PlainTextUnmarshaller","title":"PlainTextUnmarshaller"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/#types","text":"Name Summary Factory [jvm] class Factory @Injectconstructor : Unmarshaller.Factory ToByteString [jvm] object ToByteString : Unmarshaller ToString [jvm] object ToString : Unmarshaller","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-factory/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller / Factory Factory \u00b6 [jvm]\\ class Factory @Injectconstructor : Unmarshaller.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-factory/#factory","text":"[jvm]\\ class Factory @Injectconstructor : Unmarshaller.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-factory/#functions","text":"Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-factory/-factory/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller / Factory / Factory Factory \u00b6 [jvm]\\ @Inject fun Factory ()","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-factory/-factory/#factory","text":"[jvm]\\ @Inject fun Factory ()","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-factory/create/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller / Factory / create create \u00b6 [jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-factory/create/#create","text":"[jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-byte-string/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller / ToByteString ToByteString \u00b6 [jvm]\\ object ToByteString : Unmarshaller Functions \u00b6 Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): ByteString","title":"ToByteString - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-byte-string/#tobytestring","text":"[jvm]\\ object ToByteString : Unmarshaller","title":"ToByteString"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-byte-string/#functions","text":"Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): ByteString","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-byte-string/unmarshal/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller / ToByteString / unmarshal unmarshal \u00b6 [jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): ByteString","title":"unmarshal - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-byte-string/unmarshal/#unmarshal","text":"[jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): ByteString","title":"unmarshal"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-string/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller / ToString ToString \u00b6 [jvm]\\ object ToString : Unmarshaller Functions \u00b6 Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): String","title":"ToString - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-string/#tostring","text":"[jvm]\\ object ToString : Unmarshaller","title":"ToString"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-string/#functions","text":"Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): String","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-string/unmarshal/","text":"// misk / misk.web.marshal / PlainTextUnmarshaller / ToString / unmarshal unmarshal \u00b6 [jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): String","title":"unmarshal - Misk"},{"location":"0.x/misk/misk.web.marshal/-plain-text-unmarshaller/-to-string/unmarshal/#unmarshal","text":"[jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): String","title":"unmarshal"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/","text":"// misk / misk.web.marshal / ProtobufMarshaller ProtobufMarshaller \u00b6 [jvm]\\ class ProtobufMarshaller < T >(adapter: ProtoAdapter< T >) : Marshaller < T > Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory @Injectconstructor : Marshaller.Factory Functions \u00b6 Name Summary contentType [jvm] open override fun contentType (): MediaType responseBody [jvm] open override fun responseBody (o: T ): ResponseBody Properties \u00b6 Name Summary adapter [jvm] val adapter : ProtoAdapter< T >","title":"ProtobufMarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/#protobufmarshaller","text":"[jvm]\\ class ProtobufMarshaller < T >(adapter: ProtoAdapter< T >) : Marshaller < T >","title":"ProtobufMarshaller"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/#types","text":"Name Summary Factory [jvm] @Singleton class Factory @Injectconstructor : Marshaller.Factory","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/#functions","text":"Name Summary contentType [jvm] open override fun contentType (): MediaType responseBody [jvm] open override fun responseBody (o: T ): ResponseBody","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/#properties","text":"Name Summary adapter [jvm] val adapter : ProtoAdapter< T >","title":"Properties"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-protobuf-marshaller/","text":"// misk / misk.web.marshal / ProtobufMarshaller / ProtobufMarshaller ProtobufMarshaller \u00b6 [jvm]\\ fun < T > ProtobufMarshaller (adapter: ProtoAdapter< T >)","title":"ProtobufMarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-protobuf-marshaller/#protobufmarshaller","text":"[jvm]\\ fun < T > ProtobufMarshaller (adapter: ProtoAdapter< T >)","title":"ProtobufMarshaller"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/adapter/","text":"// misk / misk.web.marshal / ProtobufMarshaller / adapter adapter \u00b6 [jvm]\\ val adapter : ProtoAdapter< T >","title":"adapter - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/adapter/#adapter","text":"[jvm]\\ val adapter : ProtoAdapter< T >","title":"adapter"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/content-type/","text":"// misk / misk.web.marshal / ProtobufMarshaller / contentType contentType \u00b6 [jvm]\\ open override fun contentType (): MediaType Return \u00b6 the media type of the marshalled content, if known to the Marshaller","title":"contentType - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/content-type/#contenttype","text":"[jvm]\\ open override fun contentType (): MediaType","title":"contentType"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/content-type/#return","text":"the media type of the marshalled content, if known to the Marshaller","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/response-body/","text":"// misk / misk.web.marshal / ProtobufMarshaller / responseBody responseBody \u00b6 [jvm]\\ open override fun responseBody (o: T ): ResponseBody Return \u00b6 The object marshalled into a ResponseBody","title":"responseBody - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/response-body/#responsebody","text":"[jvm]\\ open override fun responseBody (o: T ): ResponseBody","title":"responseBody"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/response-body/#return","text":"The object marshalled into a ResponseBody","title":"Return"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-factory/","text":"// misk / misk.web.marshal / ProtobufMarshaller / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory @Injectconstructor : Marshaller.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-factory/#factory","text":"[jvm]\\ @Singleton class Factory @Injectconstructor : Marshaller.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-factory/#functions","text":"Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-factory/-factory/","text":"// misk / misk.web.marshal / ProtobufMarshaller / Factory / Factory Factory \u00b6 [jvm]\\ @Inject fun Factory ()","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-factory/-factory/#factory","text":"[jvm]\\ @Inject fun Factory ()","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-factory/create/","text":"// misk / misk.web.marshal / ProtobufMarshaller / Factory / create create \u00b6 [jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-marshaller/-factory/create/#create","text":"[jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Marshaller < Any >?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/","text":"// misk / misk.web.marshal / ProtobufUnmarshaller ProtobufUnmarshaller \u00b6 [jvm]\\ class ProtobufUnmarshaller (adapter: ProtoAdapter< Any >) : Unmarshaller Types \u00b6 Name Summary Factory [jvm] @Singleton class Factory @Injectconstructor : Unmarshaller.Factory Functions \u00b6 Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any Properties \u00b6 Name Summary adapter [jvm] val adapter : ProtoAdapter< Any >","title":"ProtobufUnmarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/#protobufunmarshaller","text":"[jvm]\\ class ProtobufUnmarshaller (adapter: ProtoAdapter< Any >) : Unmarshaller","title":"ProtobufUnmarshaller"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/#types","text":"Name Summary Factory [jvm] @Singleton class Factory @Injectconstructor : Unmarshaller.Factory","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/#functions","text":"Name Summary unmarshal [jvm] open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/#properties","text":"Name Summary adapter [jvm] val adapter : ProtoAdapter< Any >","title":"Properties"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-protobuf-unmarshaller/","text":"// misk / misk.web.marshal / ProtobufUnmarshaller / ProtobufUnmarshaller ProtobufUnmarshaller \u00b6 [jvm]\\ fun ProtobufUnmarshaller (adapter: ProtoAdapter< Any >)","title":"ProtobufUnmarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-protobuf-unmarshaller/#protobufunmarshaller","text":"[jvm]\\ fun ProtobufUnmarshaller (adapter: ProtoAdapter< Any >)","title":"ProtobufUnmarshaller"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/adapter/","text":"// misk / misk.web.marshal / ProtobufUnmarshaller / adapter adapter \u00b6 [jvm]\\ val adapter : ProtoAdapter< Any >","title":"adapter - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/adapter/#adapter","text":"[jvm]\\ val adapter : ProtoAdapter< Any >","title":"adapter"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/unmarshal/","text":"// misk / misk.web.marshal / ProtobufUnmarshaller / unmarshal unmarshal \u00b6 [jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any","title":"unmarshal - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/unmarshal/#unmarshal","text":"[jvm]\\ open override fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any","title":"unmarshal"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-factory/","text":"// misk / misk.web.marshal / ProtobufUnmarshaller / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory @Injectconstructor : Unmarshaller.Factory Functions \u00b6 Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-factory/#factory","text":"[jvm]\\ @Singleton class Factory @Injectconstructor : Unmarshaller.Factory","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-factory/#functions","text":"Name Summary create [jvm] open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-factory/-factory/","text":"// misk / misk.web.marshal / ProtobufUnmarshaller / Factory / Factory Factory \u00b6 [jvm]\\ @Inject fun Factory ()","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-factory/-factory/#factory","text":"[jvm]\\ @Inject fun Factory ()","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-factory/create/","text":"// misk / misk.web.marshal / ProtobufUnmarshaller / Factory / create create \u00b6 [jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-protobuf-unmarshaller/-factory/create/#create","text":"[jvm]\\ open override fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/","text":"// misk / misk.web.marshal / Unmarshaller Unmarshaller \u00b6 [jvm]\\ interface Unmarshaller Unmarshalls a typed object from an incoming source Types \u00b6 Name Summary Factory [jvm] interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: Functions \u00b6 Name Summary unmarshal [jvm] abstract fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ? Inheritors \u00b6 Name JsonUnmarshaller MultipartUnmarshaller ToString ToByteString ProtobufUnmarshaller","title":"Unmarshaller - Misk"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/#unmarshaller","text":"[jvm]\\ interface Unmarshaller Unmarshalls a typed object from an incoming source","title":"Unmarshaller"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/#types","text":"Name Summary Factory [jvm] interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule:","title":"Types"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/#functions","text":"Name Summary unmarshal [jvm] abstract fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/#inheritors","text":"Name JsonUnmarshaller MultipartUnmarshaller ToString ToByteString ProtobufUnmarshaller","title":"Inheritors"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/unmarshal/","text":"// misk / misk.web.marshal / Unmarshaller / unmarshal unmarshal \u00b6 [jvm]\\ abstract fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ?","title":"unmarshal - Misk"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/unmarshal/#unmarshal","text":"[jvm]\\ abstract fun unmarshal (requestHeaders: Headers, source: BufferedSource): Any ?","title":"unmarshal"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/-factory/","text":"// misk / misk.web.marshal / Unmarshaller / Factory Factory \u00b6 [jvm]\\ interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<Unmarshaller.Factory>().to<MyFactory>() Functions \u00b6 Name Summary create [jvm] abstract fun create (mediaType: MediaType, type: KType ): Unmarshaller ? Inheritors \u00b6 Name Factory Factory Factory Factory","title":"Factory - Misk"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/-factory/#factory","text":"[jvm]\\ interface Factory This interface is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<Unmarshaller.Factory>().to<MyFactory>()","title":"Factory"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/-factory/#functions","text":"Name Summary create [jvm] abstract fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"Functions"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/-factory/#inheritors","text":"Name Factory Factory Factory Factory","title":"Inheritors"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/-factory/create/","text":"// misk / misk.web.marshal / Unmarshaller / Factory / create create \u00b6 [jvm]\\ abstract fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create - Misk"},{"location":"0.x/misk/misk.web.marshal/-unmarshaller/-factory/create/#create","text":"[jvm]\\ abstract fun create (mediaType: MediaType, type: KType ): Unmarshaller ?","title":"create"},{"location":"0.x/misk/misk.web.mdc/","text":"// misk / misk.web.mdc Package misk.web.mdc \u00b6 Types \u00b6 Name Summary LogContextProvider [jvm] interface LogContextProvider","title":"Package misk.web.mdc - Misk"},{"location":"0.x/misk/misk.web.mdc/#package-miskwebmdc","text":"","title":"Package misk.web.mdc"},{"location":"0.x/misk/misk.web.mdc/#types","text":"Name Summary LogContextProvider [jvm] interface LogContextProvider","title":"Types"},{"location":"0.x/misk/misk.web.mdc/-log-context-provider/","text":"// misk / misk.web.mdc / LogContextProvider LogContextProvider \u00b6 [jvm]\\ interface LogContextProvider Functions \u00b6 Name Summary get [jvm] abstract fun get (request: HttpServletRequest): String ?","title":"LogContextProvider - Misk"},{"location":"0.x/misk/misk.web.mdc/-log-context-provider/#logcontextprovider","text":"[jvm]\\ interface LogContextProvider","title":"LogContextProvider"},{"location":"0.x/misk/misk.web.mdc/-log-context-provider/#functions","text":"Name Summary get [jvm] abstract fun get (request: HttpServletRequest): String ?","title":"Functions"},{"location":"0.x/misk/misk.web.mdc/-log-context-provider/get/","text":"// misk / misk.web.mdc / LogContextProvider / get get \u00b6 [jvm]\\ abstract fun get (request: HttpServletRequest): String ?","title":"get - Misk"},{"location":"0.x/misk/misk.web.mdc/-log-context-provider/get/#get","text":"[jvm]\\ abstract fun get (request: HttpServletRequest): String ?","title":"get"},{"location":"0.x/misk/misk.web.metadata.webaction/","text":"// misk / misk.web.metadata.webaction Package misk.web.metadata.webaction \u00b6 Types \u00b6 Name Summary WebActionMetadata [jvm] data class WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >) Metadata front end model for Web Action Misk-Web Tab WebActionMetadataList [jvm] @Singleton class WebActionMetadataList","title":"Package misk.web.metadata.webaction - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/#package-miskwebmetadatawebaction","text":"","title":"Package misk.web.metadata.webaction"},{"location":"0.x/misk/misk.web.metadata.webaction/#types","text":"Name Summary WebActionMetadata [jvm] data class WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >) Metadata front end model for Web Action Misk-Web Tab WebActionMetadataList [jvm] @Singleton class WebActionMetadataList","title":"Types"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata WebActionMetadata \u00b6 [jvm]\\ data class WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >) Metadata front end model for Web Action Misk-Web Tab Constructors \u00b6 WebActionMetadata [jvm] fun WebActionMetadata (name: String , function: KFunction <*>, functionAnnotations: List < Annotation >, description: String ?, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameterTypes: List < KType >, parameters: List < KParameter >, requestType: KType ?, returnType: KType , responseType: KType ?, pathPattern: PathPattern , applicationInterceptors: List < ApplicationInterceptor >, networkInterceptors: List < NetworkInterceptor >, dispatchMechanism: DispatchMechanism , allowedServices: Set < String >, allowedCapabilities: Set < String >) WebActionMetadata [jvm] fun WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >) Types \u00b6 Name Summary ParameterMetaData [jvm] data class ParameterMetaData (name: String ?, annotations: List < String >, type: String ) Properties \u00b6 Name Summary allowedCapabilities [jvm] val allowedCapabilities : Set < String > allowedServices [jvm] val allowedServices : Set < String > applicationInterceptors [jvm] val applicationInterceptors : List < String > description [jvm] val description : String ? function [jvm] val function : String functionAnnotations [jvm] val functionAnnotations : List < String > httpMethod [jvm] val httpMethod : String name [jvm] val name : String networkInterceptors [jvm] val networkInterceptors : List < String > packageName [jvm] val packageName : String ? parameters [jvm] val parameters : List < WebActionMetadata.ParameterMetaData > parameterTypes [jvm] val parameterTypes : List < String > pathPattern [jvm] val pathPattern : String requestMediaTypes [jvm] val requestMediaTypes : List < String > requestType [jvm] val requestType : String ? responseMediaType [jvm] val responseMediaType : String ? responseType [jvm] val responseType : String responseTypes [jvm] val responseTypes : Map < String , MiskWebFormBuilder.Type > returnType [jvm] val returnType : String types [jvm] val types : Map < String , MiskWebFormBuilder.Type >","title":"WebActionMetadata - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/#webactionmetadata","text":"[jvm]\\ data class WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >) Metadata front end model for Web Action Misk-Web Tab","title":"WebActionMetadata"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/#constructors","text":"WebActionMetadata [jvm] fun WebActionMetadata (name: String , function: KFunction <*>, functionAnnotations: List < Annotation >, description: String ?, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameterTypes: List < KType >, parameters: List < KParameter >, requestType: KType ?, returnType: KType , responseType: KType ?, pathPattern: PathPattern , applicationInterceptors: List < ApplicationInterceptor >, networkInterceptors: List < NetworkInterceptor >, dispatchMechanism: DispatchMechanism , allowedServices: Set < String >, allowedCapabilities: Set < String >) WebActionMetadata [jvm] fun WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >)","title":"Constructors"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/#types","text":"Name Summary ParameterMetaData [jvm] data class ParameterMetaData (name: String ?, annotations: List < String >, type: String )","title":"Types"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/#properties","text":"Name Summary allowedCapabilities [jvm] val allowedCapabilities : Set < String > allowedServices [jvm] val allowedServices : Set < String > applicationInterceptors [jvm] val applicationInterceptors : List < String > description [jvm] val description : String ? function [jvm] val function : String functionAnnotations [jvm] val functionAnnotations : List < String > httpMethod [jvm] val httpMethod : String name [jvm] val name : String networkInterceptors [jvm] val networkInterceptors : List < String > packageName [jvm] val packageName : String ? parameters [jvm] val parameters : List < WebActionMetadata.ParameterMetaData > parameterTypes [jvm] val parameterTypes : List < String > pathPattern [jvm] val pathPattern : String requestMediaTypes [jvm] val requestMediaTypes : List < String > requestType [jvm] val requestType : String ? responseMediaType [jvm] val responseMediaType : String ? responseType [jvm] val responseType : String responseTypes [jvm] val responseTypes : Map < String , MiskWebFormBuilder.Type > returnType [jvm] val returnType : String types [jvm] val types : Map < String , MiskWebFormBuilder.Type >","title":"Properties"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-web-action-metadata/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / WebActionMetadata WebActionMetadata \u00b6 [jvm]\\ fun WebActionMetadata (name: String , function: KFunction <*>, functionAnnotations: List < Annotation >, description: String ?, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameterTypes: List < KType >, parameters: List < KParameter >, requestType: KType ?, returnType: KType , responseType: KType ?, pathPattern: PathPattern , applicationInterceptors: List < ApplicationInterceptor >, networkInterceptors: List < NetworkInterceptor >, dispatchMechanism: DispatchMechanism , allowedServices: Set < String >, allowedCapabilities: Set < String >) fun WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >)","title":"WebActionMetadata - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-web-action-metadata/#webactionmetadata","text":"[jvm]\\ fun WebActionMetadata (name: String , function: KFunction <*>, functionAnnotations: List < Annotation >, description: String ?, acceptedMediaRanges: List <MediaRange>, responseContentType: MediaType?, parameterTypes: List < KType >, parameters: List < KParameter >, requestType: KType ?, returnType: KType , responseType: KType ?, pathPattern: PathPattern , applicationInterceptors: List < ApplicationInterceptor >, networkInterceptors: List < NetworkInterceptor >, dispatchMechanism: DispatchMechanism , allowedServices: Set < String >, allowedCapabilities: Set < String >) fun WebActionMetadata (name: String , function: String , packageName: String ?, description: String ?, functionAnnotations: List < String >, requestMediaTypes: List < String >, responseMediaType: String ?, parameterTypes: List < String >, parameters: List < WebActionMetadata.ParameterMetaData >, requestType: String ?, returnType: String , responseType: String , types: Map < String , MiskWebFormBuilder.Type >, responseTypes: Map < String , MiskWebFormBuilder.Type >, pathPattern: String , applicationInterceptors: List < String >, networkInterceptors: List < String >, httpMethod: String , allowedServices: Set < String >, allowedCapabilities: Set < String >)","title":"WebActionMetadata"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/allowed-capabilities/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / allowedCapabilities allowedCapabilities \u00b6 [jvm]\\ val allowedCapabilities : Set < String >","title":"allowedCapabilities - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/allowed-capabilities/#allowedcapabilities","text":"[jvm]\\ val allowedCapabilities : Set < String >","title":"allowedCapabilities"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/allowed-services/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / allowedServices allowedServices \u00b6 [jvm]\\ val allowedServices : Set < String >","title":"allowedServices - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/allowed-services/#allowedservices","text":"[jvm]\\ val allowedServices : Set < String >","title":"allowedServices"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/application-interceptors/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / applicationInterceptors applicationInterceptors \u00b6 [jvm]\\ val applicationInterceptors : List < String >","title":"applicationInterceptors - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/application-interceptors/#applicationinterceptors","text":"[jvm]\\ val applicationInterceptors : List < String >","title":"applicationInterceptors"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/description/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / description description \u00b6 [jvm]\\ val description : String ?","title":"description - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/description/#description","text":"[jvm]\\ val description : String ?","title":"description"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/function-annotations/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / functionAnnotations functionAnnotations \u00b6 [jvm]\\ val functionAnnotations : List < String >","title":"functionAnnotations - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/function-annotations/#functionannotations","text":"[jvm]\\ val functionAnnotations : List < String >","title":"functionAnnotations"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/function/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / function function \u00b6 [jvm]\\ val function : String","title":"function - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/function/#function","text":"[jvm]\\ val function : String","title":"function"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/http-method/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / httpMethod httpMethod \u00b6 [jvm]\\ val httpMethod : String","title":"httpMethod - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/http-method/#httpmethod","text":"[jvm]\\ val httpMethod : String","title":"httpMethod"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/name/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/network-interceptors/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / networkInterceptors networkInterceptors \u00b6 [jvm]\\ val networkInterceptors : List < String >","title":"networkInterceptors - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/network-interceptors/#networkinterceptors","text":"[jvm]\\ val networkInterceptors : List < String >","title":"networkInterceptors"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/package-name/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / packageName packageName \u00b6 [jvm]\\ val packageName : String ?","title":"packageName - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/package-name/#packagename","text":"[jvm]\\ val packageName : String ?","title":"packageName"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/parameter-types/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / parameterTypes parameterTypes \u00b6 [jvm]\\ val parameterTypes : List < String >","title":"parameterTypes - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/parameter-types/#parametertypes","text":"[jvm]\\ val parameterTypes : List < String >","title":"parameterTypes"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/parameters/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / parameters parameters \u00b6 [jvm]\\ val parameters : List < WebActionMetadata.ParameterMetaData >","title":"parameters - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/parameters/#parameters","text":"[jvm]\\ val parameters : List < WebActionMetadata.ParameterMetaData >","title":"parameters"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/path-pattern/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / pathPattern pathPattern \u00b6 [jvm]\\ val pathPattern : String","title":"pathPattern - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/path-pattern/#pathpattern","text":"[jvm]\\ val pathPattern : String","title":"pathPattern"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/request-media-types/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / requestMediaTypes requestMediaTypes \u00b6 [jvm]\\ val requestMediaTypes : List < String >","title":"requestMediaTypes - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/request-media-types/#requestmediatypes","text":"[jvm]\\ val requestMediaTypes : List < String >","title":"requestMediaTypes"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/request-type/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / requestType requestType \u00b6 [jvm]\\ val requestType : String ?","title":"requestType - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/request-type/#requesttype","text":"[jvm]\\ val requestType : String ?","title":"requestType"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/response-media-type/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / responseMediaType responseMediaType \u00b6 [jvm]\\ val responseMediaType : String ?","title":"responseMediaType - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/response-media-type/#responsemediatype","text":"[jvm]\\ val responseMediaType : String ?","title":"responseMediaType"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/response-type/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / responseType responseType \u00b6 [jvm]\\ val responseType : String","title":"responseType - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/response-type/#responsetype","text":"[jvm]\\ val responseType : String","title":"responseType"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/response-types/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / responseTypes responseTypes \u00b6 [jvm]\\ val responseTypes : Map < String , MiskWebFormBuilder.Type >","title":"responseTypes - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/response-types/#responsetypes","text":"[jvm]\\ val responseTypes : Map < String , MiskWebFormBuilder.Type >","title":"responseTypes"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/return-type/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / returnType returnType \u00b6 [jvm]\\ val returnType : String","title":"returnType - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/return-type/#returntype","text":"[jvm]\\ val returnType : String","title":"returnType"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/types/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / types types \u00b6 [jvm]\\ val types : Map < String , MiskWebFormBuilder.Type >","title":"types - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/types/#types","text":"[jvm]\\ val types : Map < String , MiskWebFormBuilder.Type >","title":"types"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / ParameterMetaData ParameterMetaData \u00b6 [jvm]\\ data class ParameterMetaData (name: String ?, annotations: List < String >, type: String ) Properties \u00b6 Name Summary annotations [jvm] val annotations : List < String > name [jvm] val name : String ? type [jvm] val type : String","title":"ParameterMetaData - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/#parametermetadata","text":"[jvm]\\ data class ParameterMetaData (name: String ?, annotations: List < String >, type: String )","title":"ParameterMetaData"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/#properties","text":"Name Summary annotations [jvm] val annotations : List < String > name [jvm] val name : String ? type [jvm] val type : String","title":"Properties"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/-parameter-meta-data/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / ParameterMetaData / ParameterMetaData ParameterMetaData \u00b6 [jvm]\\ fun ParameterMetaData (name: String ?, annotations: List < String >, type: String )","title":"ParameterMetaData - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/-parameter-meta-data/#parametermetadata","text":"[jvm]\\ fun ParameterMetaData (name: String ?, annotations: List < String >, type: String )","title":"ParameterMetaData"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/annotations/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / ParameterMetaData / annotations annotations \u00b6 [jvm]\\ val annotations : List < String >","title":"annotations - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/annotations/#annotations","text":"[jvm]\\ val annotations : List < String >","title":"annotations"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/name/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / ParameterMetaData / name name \u00b6 [jvm]\\ val name : String ?","title":"name - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/name/#name","text":"[jvm]\\ val name : String ?","title":"name"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/type/","text":"// misk / misk.web.metadata.webaction / WebActionMetadata / ParameterMetaData / type type \u00b6 [jvm]\\ val type : String","title":"type - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata/-parameter-meta-data/type/#type","text":"[jvm]\\ val type : String","title":"type"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata-list/","text":"// misk / misk.web.metadata.webaction / WebActionMetadataList WebActionMetadataList \u00b6 [jvm]\\ @Singleton class WebActionMetadataList Functions \u00b6 Name Summary get [jvm] fun get (): List < WebActionMetadata >","title":"WebActionMetadataList - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata-list/#webactionmetadatalist","text":"[jvm]\\ @Singleton class WebActionMetadataList","title":"WebActionMetadataList"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata-list/#functions","text":"Name Summary get [jvm] fun get (): List < WebActionMetadata >","title":"Functions"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata-list/get/","text":"// misk / misk.web.metadata.webaction / WebActionMetadataList / get get \u00b6 [jvm]\\ fun get (): List < WebActionMetadata >","title":"get - Misk"},{"location":"0.x/misk/misk.web.metadata.webaction/-web-action-metadata-list/get/#get","text":"[jvm]\\ fun get (): List < WebActionMetadata >","title":"get"},{"location":"0.x/misk/misk.web.proxy/","text":"// misk / misk.web.proxy Package misk.web.proxy \u00b6 Types \u00b6 Name Summary OptionalBinder [jvm] @Singleton class OptionalBinder @Injectconstructor https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor WebProxyAction [jvm] @Singleton class WebProxyAction @Injectconstructor(optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder ) : WebAction WebProxyAction WebProxyEntry [jvm] class WebProxyEntry (url_path_prefix: String , web_proxy_url: HttpUrl) : ValidWebEntry Maps URLs requested against this server to URLs of servers to delegate to Functions \u00b6 Name Summary WebProxyEntry [jvm] fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: String ): WebProxyEntry","title":"Package misk.web.proxy - Misk"},{"location":"0.x/misk/misk.web.proxy/#package-miskwebproxy","text":"","title":"Package misk.web.proxy"},{"location":"0.x/misk/misk.web.proxy/#types","text":"Name Summary OptionalBinder [jvm] @Singleton class OptionalBinder @Injectconstructor https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor WebProxyAction [jvm] @Singleton class WebProxyAction @Injectconstructor(optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder ) : WebAction WebProxyAction WebProxyEntry [jvm] class WebProxyEntry (url_path_prefix: String , web_proxy_url: HttpUrl) : ValidWebEntry Maps URLs requested against this server to URLs of servers to delegate to","title":"Types"},{"location":"0.x/misk/misk.web.proxy/#functions","text":"Name Summary WebProxyEntry [jvm] fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: String ): WebProxyEntry","title":"Functions"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/","text":"// misk / misk.web.proxy / WebProxyEntry WebProxyEntry \u00b6 [jvm]\\ fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: String ): WebProxyEntry","title":"WebProxyEntry - Misk"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/#webproxyentry","text":"[jvm]\\ fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: String ): WebProxyEntry","title":"WebProxyEntry"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/","text":"// misk / misk.web.proxy / OptionalBinder OptionalBinder \u00b6 [jvm]\\ @Singleton class OptionalBinder @Injectconstructor https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor Constructors \u00b6 OptionalBinder [jvm] @Inject fun OptionalBinder () Properties \u00b6 Name Summary proxyClient [jvm] @Inject(optional = true) @Named(value = \u201cweb_proxy_action\u201d) var proxyClient : OkHttpClient","title":"OptionalBinder - Misk"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/#optionalbinder","text":"[jvm]\\ @Singleton class OptionalBinder @Injectconstructor https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor","title":"OptionalBinder"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/#constructors","text":"OptionalBinder [jvm] @Inject fun OptionalBinder ()","title":"Constructors"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/#properties","text":"Name Summary proxyClient [jvm] @Inject(optional = true) @Named(value = \u201cweb_proxy_action\u201d) var proxyClient : OkHttpClient","title":"Properties"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/-optional-binder/","text":"// misk / misk.web.proxy / OptionalBinder / OptionalBinder OptionalBinder \u00b6 [jvm]\\ @Inject fun OptionalBinder ()","title":"OptionalBinder - Misk"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/-optional-binder/#optionalbinder","text":"[jvm]\\ @Inject fun OptionalBinder ()","title":"OptionalBinder"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/proxy-client/","text":"// misk / misk.web.proxy / OptionalBinder / proxyClient proxyClient \u00b6 [jvm]\\ @Inject(optional = true) @Named(value = \u201cweb_proxy_action\u201d) var proxyClient : OkHttpClient","title":"proxyClient - Misk"},{"location":"0.x/misk/misk.web.proxy/-optional-binder/proxy-client/#proxyclient","text":"[jvm]\\ @Inject(optional = true) @Named(value = \u201cweb_proxy_action\u201d) var proxyClient : OkHttpClient","title":"proxyClient"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/","text":"// misk / misk.web.proxy / WebProxyAction WebProxyAction \u00b6 [jvm]\\ @Singleton class WebProxyAction @Injectconstructor(optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder ) : WebAction WebProxyAction Guidelines Overlapping entry prefixes will resolve to the longest match Example Entries: /_admin/config/, /_admin/config/subtab/ Request: /_admin/config/subtab/app.js will resolve to the /_admin/config/subtab/ entry url_path_prefix starts with \u201c/\u201d url_path_prefix ends with \u201c/\u201d web_proxy_url ends with \u201c/\u201d and doesn\u2019t contain any path segments Expected Functionality Entries following above rules are injected into action Action attempts to findEntryFromUrl incoming request paths against entries If findEntryFromUrl found, incoming request path is appended to host + port of StaticResourceEntry.server_url Else, 404 Constructors \u00b6 WebProxyAction [jvm] @Inject fun WebProxyAction (optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder ) Functions \u00b6 Name Summary action [jvm] fun action (): Response<ResponseBody>","title":"WebProxyAction - Misk"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/#webproxyaction","text":"[jvm]\\ @Singleton class WebProxyAction @Injectconstructor(optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder ) : WebAction WebProxyAction Guidelines Overlapping entry prefixes will resolve to the longest match Example Entries: /_admin/config/, /_admin/config/subtab/ Request: /_admin/config/subtab/app.js will resolve to the /_admin/config/subtab/ entry url_path_prefix starts with \u201c/\u201d url_path_prefix ends with \u201c/\u201d web_proxy_url ends with \u201c/\u201d and doesn\u2019t contain any path segments Expected Functionality Entries following above rules are injected into action Action attempts to findEntryFromUrl incoming request paths against entries If findEntryFromUrl found, incoming request path is appended to host + port of StaticResourceEntry.server_url Else, 404","title":"WebProxyAction"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/#constructors","text":"WebProxyAction [jvm] @Inject fun WebProxyAction (optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder )","title":"Constructors"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/#functions","text":"Name Summary action [jvm] fun action (): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/-web-proxy-action/","text":"// misk / misk.web.proxy / WebProxyAction / WebProxyAction WebProxyAction \u00b6 [jvm]\\ @Inject fun WebProxyAction (optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder )","title":"WebProxyAction - Misk"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/-web-proxy-action/#webproxyaction","text":"[jvm]\\ @Inject fun WebProxyAction (optionalBinder: OptionalBinder , clientHttpCall: ActionScoped< HttpCall >, staticResourceAction: StaticResourceAction , resourceEntryFinder: ResourceEntryFinder )","title":"WebProxyAction"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/action/","text":"// misk / misk.web.proxy / WebProxyAction / action action \u00b6 [jvm]\\ fun action (): Response<ResponseBody>","title":"action - Misk"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-action/action/#action","text":"[jvm]\\ fun action (): Response<ResponseBody>","title":"action"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/","text":"// misk / misk.web.proxy / WebProxyEntry WebProxyEntry \u00b6 [jvm]\\ class WebProxyEntry (url_path_prefix: String , web_proxy_url: HttpUrl) : ValidWebEntry Maps URLs requested against this server to URLs of servers to delegate to url_path_prefix: /_admin/ web_proxy_url: http://localhost:3000/ An incoming request then for /_admin/config.js would route to http://localhost:3000/_admin/config.js . This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<WebProxyEntry>().toInstance(WebProxyEntry(\u2026)) Constructors \u00b6 WebProxyEntry [jvm] fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: HttpUrl) Properties \u00b6 Name Summary slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String web_proxy_url [jvm] val web_proxy_url : HttpUrl","title":"WebProxyEntry - Misk"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/#webproxyentry","text":"[jvm]\\ class WebProxyEntry (url_path_prefix: String , web_proxy_url: HttpUrl) : ValidWebEntry Maps URLs requested against this server to URLs of servers to delegate to url_path_prefix: /_admin/ web_proxy_url: http://localhost:3000/ An incoming request then for /_admin/config.js would route to http://localhost:3000/_admin/config.js . This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<WebProxyEntry>().toInstance(WebProxyEntry(\u2026))","title":"WebProxyEntry"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/#constructors","text":"WebProxyEntry [jvm] fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: HttpUrl)","title":"Constructors"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/#properties","text":"Name Summary slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String web_proxy_url [jvm] val web_proxy_url : HttpUrl","title":"Properties"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/-web-proxy-entry/","text":"// misk / misk.web.proxy / WebProxyEntry / WebProxyEntry WebProxyEntry \u00b6 [jvm]\\ fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: HttpUrl)","title":"WebProxyEntry - Misk"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/-web-proxy-entry/#webproxyentry","text":"[jvm]\\ fun WebProxyEntry (url_path_prefix: String = \u201c/\u201d, web_proxy_url: HttpUrl)","title":"WebProxyEntry"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/web_proxy_url/","text":"// misk / misk.web.proxy / WebProxyEntry / web_proxy_url web_proxy_url \u00b6 [jvm]\\ val web_proxy_url : HttpUrl","title":"web_proxy_url - Misk"},{"location":"0.x/misk/misk.web.proxy/-web-proxy-entry/web_proxy_url/#web_proxy_url","text":"[jvm]\\ val web_proxy_url : HttpUrl","title":"web_proxy_url"},{"location":"0.x/misk/misk.web.resources/","text":"// misk / misk.web.resources Package misk.web.resources \u00b6 Types \u00b6 Name Summary ResourceEntryFinder [jvm] class ResourceEntryFinder @Injectconstructor(webProxyEntries: List < WebProxyEntry >, staticResourceEntries: List < StaticResourceEntry >) StaticResourceAction [jvm] @Singleton class StaticResourceAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder ) : WebAction StaticResourceAction This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: StaticResourceEntry [jvm] class StaticResourceEntry (url_path_prefix: String , resourcePath: String ) : ValidWebEntry This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule:","title":"Package misk.web.resources - Misk"},{"location":"0.x/misk/misk.web.resources/#package-miskwebresources","text":"","title":"Package misk.web.resources"},{"location":"0.x/misk/misk.web.resources/#types","text":"Name Summary ResourceEntryFinder [jvm] class ResourceEntryFinder @Injectconstructor(webProxyEntries: List < WebProxyEntry >, staticResourceEntries: List < StaticResourceEntry >) StaticResourceAction [jvm] @Singleton class StaticResourceAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder ) : WebAction StaticResourceAction This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: StaticResourceEntry [jvm] class StaticResourceEntry (url_path_prefix: String , resourcePath: String ) : ValidWebEntry This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule:","title":"Types"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/","text":"// misk / misk.web.resources / ResourceEntryFinder ResourceEntryFinder \u00b6 [jvm]\\ class ResourceEntryFinder @Injectconstructor(webProxyEntries: List < WebProxyEntry >, staticResourceEntries: List < StaticResourceEntry >) Functions \u00b6 Name Summary staticResource [jvm] fun staticResource (url: HttpUrl): ValidWebEntry? webProxy [jvm] fun webProxy (url: HttpUrl): ValidWebEntry?","title":"ResourceEntryFinder - Misk"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/#resourceentryfinder","text":"[jvm]\\ class ResourceEntryFinder @Injectconstructor(webProxyEntries: List < WebProxyEntry >, staticResourceEntries: List < StaticResourceEntry >)","title":"ResourceEntryFinder"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/#functions","text":"Name Summary staticResource [jvm] fun staticResource (url: HttpUrl): ValidWebEntry? webProxy [jvm] fun webProxy (url: HttpUrl): ValidWebEntry?","title":"Functions"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/-resource-entry-finder/","text":"// misk / misk.web.resources / ResourceEntryFinder / ResourceEntryFinder ResourceEntryFinder \u00b6 [jvm]\\ @Inject fun ResourceEntryFinder (webProxyEntries: List < WebProxyEntry >, staticResourceEntries: List < StaticResourceEntry >)","title":"ResourceEntryFinder - Misk"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/-resource-entry-finder/#resourceentryfinder","text":"[jvm]\\ @Inject fun ResourceEntryFinder (webProxyEntries: List < WebProxyEntry >, staticResourceEntries: List < StaticResourceEntry >)","title":"ResourceEntryFinder"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/static-resource/","text":"// misk / misk.web.resources / ResourceEntryFinder / staticResource staticResource \u00b6 [jvm]\\ fun staticResource (url: HttpUrl): ValidWebEntry? Return \u00b6 entry whose url_path_prefix most closely matches given url; longest match wins","title":"staticResource - Misk"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/static-resource/#staticresource","text":"[jvm]\\ fun staticResource (url: HttpUrl): ValidWebEntry?","title":"staticResource"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/static-resource/#return","text":"entry whose url_path_prefix most closely matches given url; longest match wins","title":"Return"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/web-proxy/","text":"// misk / misk.web.resources / ResourceEntryFinder / webProxy webProxy \u00b6 [jvm]\\ fun webProxy (url: HttpUrl): ValidWebEntry? Return \u00b6 entry whose url_path_prefix most closely matches given url; longest match wins","title":"webProxy - Misk"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/web-proxy/#webproxy","text":"[jvm]\\ fun webProxy (url: HttpUrl): ValidWebEntry?","title":"webProxy"},{"location":"0.x/misk/misk.web.resources/-resource-entry-finder/web-proxy/#return","text":"entry whose url_path_prefix most closely matches given url; longest match wins","title":"Return"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/","text":"// misk / misk.web.resources / StaticResourceAction StaticResourceAction \u00b6 [jvm]\\ @Singleton class StaticResourceAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder ) : WebAction StaticResourceAction This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<StaticResourceEntry>().toInstance(StaticResourceEntry(\u2026)) Constructors \u00b6 StaticResourceAction [jvm] @Inject fun StaticResourceAction (clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder ) Functions \u00b6 Name Summary action [jvm] fun action (): Response<ResponseBody> getResponse [jvm] fun getResponse (httpCall: HttpCall ): Response<ResponseBody>","title":"StaticResourceAction - Misk"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/#staticresourceaction","text":"[jvm]\\ @Singleton class StaticResourceAction @Injectconstructor(clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder ) : WebAction StaticResourceAction This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<StaticResourceEntry>().toInstance(StaticResourceEntry(\u2026))","title":"StaticResourceAction"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/#constructors","text":"StaticResourceAction [jvm] @Inject fun StaticResourceAction (clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder )","title":"Constructors"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/#functions","text":"Name Summary action [jvm] fun action (): Response<ResponseBody> getResponse [jvm] fun getResponse (httpCall: HttpCall ): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/-static-resource-action/","text":"// misk / misk.web.resources / StaticResourceAction / StaticResourceAction StaticResourceAction \u00b6 [jvm]\\ @Inject fun StaticResourceAction (clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder )","title":"StaticResourceAction - Misk"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/-static-resource-action/#staticresourceaction","text":"[jvm]\\ @Inject fun StaticResourceAction (clientHttpCall: ActionScoped< HttpCall >, resourceLoader: ResourceLoader, resourceEntryFinder: ResourceEntryFinder )","title":"StaticResourceAction"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/action/","text":"// misk / misk.web.resources / StaticResourceAction / action action \u00b6 [jvm]\\ fun action (): Response<ResponseBody>","title":"action - Misk"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/action/#action","text":"[jvm]\\ fun action (): Response<ResponseBody>","title":"action"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/get-response/","text":"// misk / misk.web.resources / StaticResourceAction / getResponse getResponse \u00b6 [jvm]\\ fun getResponse (httpCall: HttpCall ): Response<ResponseBody>","title":"getResponse - Misk"},{"location":"0.x/misk/misk.web.resources/-static-resource-action/get-response/#getresponse","text":"[jvm]\\ fun getResponse (httpCall: HttpCall ): Response<ResponseBody>","title":"getResponse"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/","text":"// misk / misk.web.resources / StaticResourceEntry StaticResourceEntry \u00b6 [jvm]\\ class StaticResourceEntry (url_path_prefix: String , resourcePath: String ) : ValidWebEntry This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<StaticResourceEntry>().toInstance(StaticResourceEntry(\u2026)) Constructors \u00b6 StaticResourceEntry [jvm] fun StaticResourceEntry (url_path_prefix: String = \u201c/\u201d, resourcePath: String ) Functions \u00b6 Name Summary resourcePath [jvm] fun resourcePath (urlPath: String ): String Properties \u00b6 Name Summary slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"StaticResourceEntry - Misk"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/#staticresourceentry","text":"[jvm]\\ class StaticResourceEntry (url_path_prefix: String , resourcePath: String ) : ValidWebEntry This data class is used with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<StaticResourceEntry>().toInstance(StaticResourceEntry(\u2026))","title":"StaticResourceEntry"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/#constructors","text":"StaticResourceEntry [jvm] fun StaticResourceEntry (url_path_prefix: String = \u201c/\u201d, resourcePath: String )","title":"Constructors"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/#functions","text":"Name Summary resourcePath [jvm] fun resourcePath (urlPath: String ): String","title":"Functions"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/#properties","text":"Name Summary slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/-static-resource-entry/","text":"// misk / misk.web.resources / StaticResourceEntry / StaticResourceEntry StaticResourceEntry \u00b6 [jvm]\\ fun StaticResourceEntry (url_path_prefix: String = \u201c/\u201d, resourcePath: String )","title":"StaticResourceEntry - Misk"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/-static-resource-entry/#staticresourceentry","text":"[jvm]\\ fun StaticResourceEntry (url_path_prefix: String = \u201c/\u201d, resourcePath: String )","title":"StaticResourceEntry"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/resource-path/","text":"// misk / misk.web.resources / StaticResourceEntry / resourcePath resourcePath \u00b6 [jvm]\\ fun resourcePath (urlPath: String ): String","title":"resourcePath - Misk"},{"location":"0.x/misk/misk.web.resources/-static-resource-entry/resource-path/#resourcepath","text":"[jvm]\\ fun resourcePath (urlPath: String ): String","title":"resourcePath"},{"location":"0.x/misk-action-scopes/misk.concurrent/","text":"// misk-action-scopes / misk.concurrent Package misk.concurrent \u00b6 Types \u00b6 Name Summary WrappingListeningExecutorService [jvm] abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls","title":"Package misk.concurrent - Misk"},{"location":"0.x/misk-action-scopes/misk.concurrent/#package-miskconcurrent","text":"","title":"Package misk.concurrent"},{"location":"0.x/misk-action-scopes/misk.concurrent/#types","text":"Name Summary WrappingListeningExecutorService [jvm] abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls","title":"Types"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/","text":"// misk-action-scopes / misk.concurrent / WrappingListeningExecutorService WrappingListeningExecutorService \u00b6 [jvm]\\ abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls Constructors \u00b6 WrappingListeningExecutorService [jvm] fun WrappingListeningExecutorService () Functions \u00b6 Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean delegate [jvm] abstract override fun delegate (): ListeningExecutorService execute [jvm] open override fun execute (runnable: Runnable ) invokeAll [jvm] open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >> invokeAny [jvm] open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (runnable: Runnable ): ListenableFuture<*> open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > toString [jvm] open override fun toString (): String Inheritors \u00b6 Name ActionScopedExecutorService","title":"WrappingListeningExecutorService - Misk"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/#wrappinglisteningexecutorservice","text":"[jvm]\\ abstract class WrappingListeningExecutorService : ForwardingListeningExecutorService ListeningExecutorService which wraps all calls","title":"WrappingListeningExecutorService"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/#constructors","text":"WrappingListeningExecutorService [jvm] fun WrappingListeningExecutorService ()","title":"Constructors"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/#functions","text":"Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean delegate [jvm] abstract override fun delegate (): ListeningExecutorService execute [jvm] open override fun execute (runnable: Runnable ) invokeAll [jvm] open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >> invokeAny [jvm] open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (runnable: Runnable ): ListenableFuture<*> open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/#inheritors","text":"Name ActionScopedExecutorService","title":"Inheritors"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/-wrapping-listening-executor-service/","text":"// misk-action-scopes / misk.concurrent / WrappingListeningExecutorService / WrappingListeningExecutorService WrappingListeningExecutorService \u00b6 [jvm]\\ fun WrappingListeningExecutorService ()","title":"WrappingListeningExecutorService - Misk"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/-wrapping-listening-executor-service/#wrappinglisteningexecutorservice","text":"[jvm]\\ fun WrappingListeningExecutorService ()","title":"WrappingListeningExecutorService"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/execute/","text":"// misk-action-scopes / misk.concurrent / WrappingListeningExecutorService / execute execute \u00b6 [jvm]\\ open override fun execute (runnable: Runnable )","title":"execute - Misk"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/execute/#execute","text":"[jvm]\\ open override fun execute (runnable: Runnable )","title":"execute"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/invoke-all/","text":"// misk-action-scopes / misk.concurrent / WrappingListeningExecutorService / invokeAll invokeAll \u00b6 [jvm]\\ open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >>","title":"invokeAll - Misk"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/invoke-all/#invokeall","text":"[jvm]\\ open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >>","title":"invokeAll"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/invoke-any/","text":"// misk-action-scopes / misk.concurrent / WrappingListeningExecutorService / invokeAny invokeAny \u00b6 [jvm]\\ open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T","title":"invokeAny - Misk"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/invoke-any/#invokeany","text":"[jvm]\\ open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T","title":"invokeAny"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/submit/","text":"// misk-action-scopes / misk.concurrent / WrappingListeningExecutorService / submit submit \u00b6 [jvm]\\ open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > open override fun submit (runnable: Runnable ): ListenableFuture<*>","title":"submit - Misk"},{"location":"0.x/misk-action-scopes/misk.concurrent/-wrapping-listening-executor-service/submit/#submit","text":"[jvm]\\ open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > open override fun submit (runnable: Runnable ): ListenableFuture<*>","title":"submit"},{"location":"0.x/misk-action-scopes/misk.scope/","text":"// misk-action-scopes / misk.scope Package misk.scope \u00b6 Types \u00b6 Name Summary ActionScope [jvm] @Singleton class ActionScope : AutoCloseable ActionScoped [jvm] interface ActionScoped <out T > Provides access to a context object specific to the current action ActionScopedProvider [jvm] interface ActionScopedProvider <out T > An ActionScopedProvider is implemented by components and application code that wants provide contextual information based on an incoming request, job data, etc. ActionScopedProviderModule [jvm] abstract class ActionScopedProviderModule : KAbstractModule Module used by components and applications to provide ActionScoped context objects SeedDataTransformer [jvm] interface SeedDataTransformer While executing, actions have ActionScoped values that can be injected by anything running within the action.","title":"Package misk.scope - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/#package-miskscope","text":"","title":"Package misk.scope"},{"location":"0.x/misk-action-scopes/misk.scope/#types","text":"Name Summary ActionScope [jvm] @Singleton class ActionScope : AutoCloseable ActionScoped [jvm] interface ActionScoped <out T > Provides access to a context object specific to the current action ActionScopedProvider [jvm] interface ActionScopedProvider <out T > An ActionScopedProvider is implemented by components and application code that wants provide contextual information based on an incoming request, job data, etc. ActionScopedProviderModule [jvm] abstract class ActionScopedProviderModule : KAbstractModule Module used by components and applications to provide ActionScoped context objects SeedDataTransformer [jvm] interface SeedDataTransformer While executing, actions have ActionScoped values that can be injected by anything running within the action.","title":"Types"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/","text":"// misk-action-scopes / misk.scope / ActionScope ActionScope \u00b6 [jvm]\\ @Singleton class ActionScope : AutoCloseable Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary close [jvm] open override fun close () enter [jvm] fun enter (seedData: Map <Key<*>, Any ?>): ActionScope Starts the scope on a thread with the provided seed data get [jvm] fun < T > get (key: Key< T >): T Returns the action scoped value for the given key inScope [jvm] fun inScope (): Boolean Returns true if currently in the scope propagate [jvm] fun < T > propagate (c: Callable < T >): Callable < T > Wraps a Callable that will be called on another thread, propagating the current scoped data onto that thread [jvm] fun < T > propagate (f: () -> T ): () -> T Wraps a function or lambda that will be called on another thread, propagating the current scoped data onto that thread [jvm] fun < T > propagate (f: KFunction < T >): KFunction < T > Wraps a KFunction that will be called on another thread, propagating the current scoped data onto that thread","title":"ActionScope - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/#actionscope","text":"[jvm]\\ @Singleton class ActionScope : AutoCloseable","title":"ActionScope"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/#functions","text":"Name Summary close [jvm] open override fun close () enter [jvm] fun enter (seedData: Map <Key<*>, Any ?>): ActionScope Starts the scope on a thread with the provided seed data get [jvm] fun < T > get (key: Key< T >): T Returns the action scoped value for the given key inScope [jvm] fun inScope (): Boolean Returns true if currently in the scope propagate [jvm] fun < T > propagate (c: Callable < T >): Callable < T > Wraps a Callable that will be called on another thread, propagating the current scoped data onto that thread [jvm] fun < T > propagate (f: () -> T ): () -> T Wraps a function or lambda that will be called on another thread, propagating the current scoped data onto that thread [jvm] fun < T > propagate (f: KFunction < T >): KFunction < T > Wraps a KFunction that will be called on another thread, propagating the current scoped data onto that thread","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/close/","text":"// misk-action-scopes / misk.scope / ActionScope / close close \u00b6 [jvm]\\ open override fun close ()","title":"close - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/close/#close","text":"[jvm]\\ open override fun close ()","title":"close"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/enter/","text":"// misk-action-scopes / misk.scope / ActionScope / enter enter \u00b6 [jvm]\\ fun enter (seedData: Map <Key<*>, Any ?>): ActionScope Starts the scope on a thread with the provided seed data","title":"enter - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/enter/#enter","text":"[jvm]\\ fun enter (seedData: Map <Key<*>, Any ?>): ActionScope Starts the scope on a thread with the provided seed data","title":"enter"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/get/","text":"// misk-action-scopes / misk.scope / ActionScope / get get \u00b6 [jvm]\\ fun < T > get (key: Key< T >): T Returns the action scoped value for the given key","title":"get - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/get/#get","text":"[jvm]\\ fun < T > get (key: Key< T >): T Returns the action scoped value for the given key","title":"get"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/in-scope/","text":"// misk-action-scopes / misk.scope / ActionScope / inScope inScope \u00b6 [jvm]\\ fun inScope (): Boolean Returns true if currently in the scope","title":"inScope - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/in-scope/#inscope","text":"[jvm]\\ fun inScope (): Boolean Returns true if currently in the scope","title":"inScope"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/propagate/","text":"// misk-action-scopes / misk.scope / ActionScope / propagate propagate \u00b6 [jvm]\\ fun < T > propagate (c: Callable < T >): Callable < T > Wraps a Callable that will be called on another thread, propagating the current scoped data onto that thread [jvm]\\ fun < T > propagate (f: KFunction < T >): KFunction < T > Wraps a KFunction that will be called on another thread, propagating the current scoped data onto that thread [jvm]\\ fun < T > propagate (f: () -> T ): () -> T Wraps a function or lambda that will be called on another thread, propagating the current scoped data onto that thread","title":"propagate - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/propagate/#propagate","text":"[jvm]\\ fun < T > propagate (c: Callable < T >): Callable < T > Wraps a Callable that will be called on another thread, propagating the current scoped data onto that thread [jvm]\\ fun < T > propagate (f: KFunction < T >): KFunction < T > Wraps a KFunction that will be called on another thread, propagating the current scoped data onto that thread [jvm]\\ fun < T > propagate (f: () -> T ): () -> T Wraps a function or lambda that will be called on another thread, propagating the current scoped data onto that thread","title":"propagate"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/-companion/","text":"// misk-action-scopes / misk.scope / ActionScope / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scope/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/","text":"// misk-action-scopes / misk.scope / ActionScoped ActionScoped \u00b6 [jvm]\\ interface ActionScoped <out T > Provides access to a context object specific to the current action Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary get [jvm] abstract fun get (): T","title":"ActionScoped - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/#actionscoped","text":"[jvm]\\ interface ActionScoped <out T > Provides access to a context object specific to the current action","title":"ActionScoped"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/#functions","text":"Name Summary get [jvm] abstract fun get (): T","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/get/","text":"// misk-action-scopes / misk.scope / ActionScoped / get get \u00b6 [jvm]\\ abstract fun get (): T","title":"get - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/get/#get","text":"[jvm]\\ abstract fun get (): T","title":"get"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/-companion/","text":"// misk-action-scopes / misk.scope / ActionScoped / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary of [jvm] fun < T > of (value: T ): ActionScoped < T >","title":"Companion - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/-companion/#functions","text":"Name Summary of [jvm] fun < T > of (value: T ): ActionScoped < T >","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/-companion/of/","text":"// misk-action-scopes / misk.scope / ActionScoped / Companion / of of \u00b6 [jvm]\\ fun < T > of (value: T ): ActionScoped < T > Return \u00b6 an ActionScoped hard-coded to a specific value, useful for tests","title":"of - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/-companion/of/#of","text":"[jvm]\\ fun < T > of (value: T ): ActionScoped < T >","title":"of"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped/-companion/of/#return","text":"an ActionScoped hard-coded to a specific value, useful for tests","title":"Return"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider/","text":"// misk-action-scopes / misk.scope / ActionScopedProvider ActionScopedProvider \u00b6 [jvm]\\ interface ActionScopedProvider <out T > An ActionScopedProvider is implemented by components and application code that wants provide contextual information based on an incoming request, job data, etc. Functions \u00b6 Name Summary get [jvm] abstract fun get (): T","title":"ActionScopedProvider - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider/#actionscopedprovider","text":"[jvm]\\ interface ActionScopedProvider <out T > An ActionScopedProvider is implemented by components and application code that wants provide contextual information based on an incoming request, job data, etc.","title":"ActionScopedProvider"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider/#functions","text":"Name Summary get [jvm] abstract fun get (): T","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider/get/","text":"// misk-action-scopes / misk.scope / ActionScopedProvider / get get \u00b6 [jvm]\\ abstract fun get (): T","title":"get - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider/get/#get","text":"[jvm]\\ abstract fun get (): T","title":"get"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/","text":"// misk-action-scopes / misk.scope / ActionScopedProviderModule ActionScopedProviderModule \u00b6 [jvm]\\ abstract class ActionScopedProviderModule : KAbstractModule Module used by components and applications to provide ActionScoped context objects Constructors \u00b6 ActionScopedProviderModule [jvm] fun ActionScopedProviderModule () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindProvider [jvm] fun < T , A : Annotation > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) fun < T > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) fun < T : Any , A : Annotation > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) fun < T : Any > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) Binds an annotation qualified ActionScoped along with its provider bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) bindSeedData [jvm] fun < T : Any > bindSeedData (type: TypeLiteral< T >) fun < T : Any > bindSeedData (kclass: KClass < T >) Binds an ActionScoped which only pulls from data seeded at the scope entry [jvm] fun < T : Any > bindSeedData (type: TypeLiteral< T >, a: Annotation ) fun < T : Any > bindSeedData (kclass: KClass < T >, a: Annotation ) fun < T : Any , A : Annotation > bindSeedData (kclass: KClass < T >, a: KClass < A >) Binds an annotation qualified ActionScoped which only pulls from data seeded at the scope entry configure [jvm] override fun configure (p0: Binder) configureProviders [jvm] abstract fun configureProviders () convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ActionScopedProviderModule - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/#actionscopedprovidermodule","text":"[jvm]\\ abstract class ActionScopedProviderModule : KAbstractModule Module used by components and applications to provide ActionScoped context objects","title":"ActionScopedProviderModule"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/#constructors","text":"ActionScopedProviderModule [jvm] fun ActionScopedProviderModule ()","title":"Constructors"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindProvider [jvm] fun < T , A : Annotation > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) fun < T > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) fun < T : Any , A : Annotation > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) fun < T : Any > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) Binds an annotation qualified ActionScoped along with its provider bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) bindSeedData [jvm] fun < T : Any > bindSeedData (type: TypeLiteral< T >) fun < T : Any > bindSeedData (kclass: KClass < T >) Binds an ActionScoped which only pulls from data seeded at the scope entry [jvm] fun < T : Any > bindSeedData (type: TypeLiteral< T >, a: Annotation ) fun < T : Any > bindSeedData (kclass: KClass < T >, a: Annotation ) fun < T : Any , A : Annotation > bindSeedData (kclass: KClass < T >, a: KClass < A >) Binds an annotation qualified ActionScoped which only pulls from data seeded at the scope entry configure [jvm] override fun configure (p0: Binder) configureProviders [jvm] abstract fun configureProviders () convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/-action-scoped-provider-module/","text":"// misk-action-scopes / misk.scope / ActionScopedProviderModule / ActionScopedProviderModule ActionScopedProviderModule \u00b6 [jvm]\\ fun ActionScopedProviderModule ()","title":"ActionScopedProviderModule - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/-action-scoped-provider-module/#actionscopedprovidermodule","text":"[jvm]\\ fun ActionScopedProviderModule ()","title":"ActionScopedProviderModule"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/bind-provider/","text":"// misk-action-scopes / misk.scope / ActionScopedProviderModule / bindProvider bindProvider \u00b6 [jvm]\\ fun < T : Any > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) fun < T > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) fun < T : Any , A : Annotation > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) fun < T , A : Annotation > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) Binds an annotation qualified ActionScoped along with its provider","title":"bindProvider - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/bind-provider/#bindprovider","text":"[jvm]\\ fun < T : Any > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) fun < T > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Annotation ? = null) fun < T : Any , A : Annotation > bindProvider (kclass: KClass < T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) fun < T , A : Annotation > bindProvider (type: TypeLiteral< T >, providerType: KClass <out ActionScopedProvider < T >>, annotatedBy: Class < A >) Binds an annotation qualified ActionScoped along with its provider","title":"bindProvider"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/bind-seed-data/","text":"// misk-action-scopes / misk.scope / ActionScopedProviderModule / bindSeedData bindSeedData \u00b6 [jvm]\\ fun < T : Any > bindSeedData (kclass: KClass < T >) fun < T : Any > bindSeedData (type: TypeLiteral< T >) Binds an ActionScoped which only pulls from data seeded at the scope entry [jvm]\\ fun < T : Any > bindSeedData (kclass: KClass < T >, a: Annotation ) fun < T : Any > bindSeedData (type: TypeLiteral< T >, a: Annotation ) fun < T : Any , A : Annotation > bindSeedData (kclass: KClass < T >, a: KClass < A >) Binds an annotation qualified ActionScoped which only pulls from data seeded at the scope entry","title":"bindSeedData - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/bind-seed-data/#bindseeddata","text":"[jvm]\\ fun < T : Any > bindSeedData (kclass: KClass < T >) fun < T : Any > bindSeedData (type: TypeLiteral< T >) Binds an ActionScoped which only pulls from data seeded at the scope entry [jvm]\\ fun < T : Any > bindSeedData (kclass: KClass < T >, a: Annotation ) fun < T : Any > bindSeedData (type: TypeLiteral< T >, a: Annotation ) fun < T : Any , A : Annotation > bindSeedData (kclass: KClass < T >, a: KClass < A >) Binds an annotation qualified ActionScoped which only pulls from data seeded at the scope entry","title":"bindSeedData"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/configure-providers/","text":"// misk-action-scopes / misk.scope / ActionScopedProviderModule / configureProviders configureProviders \u00b6 [jvm]\\ abstract fun configureProviders ()","title":"configureProviders - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/configure-providers/#configureproviders","text":"[jvm]\\ abstract fun configureProviders ()","title":"configureProviders"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/-companion/","text":"// misk-action-scopes / misk.scope / ActionScopedProviderModule / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-action-scoped-provider-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-action-scopes/misk.scope/-seed-data-transformer/","text":"// misk-action-scopes / misk.scope / SeedDataTransformer SeedDataTransformer \u00b6 [jvm]\\ interface SeedDataTransformer While executing, actions have ActionScoped values that can be injected by anything running within the action. For example, these values are seeded by default for web actions: HttpCall HttpServletRequest These types are the initial keys in the seedData map; they map to the corresponding instances. Implementations of this interface may modify this map. To add new seed data keys, you must also subclass ActionScopedProviderModule and call ActionScopedProviderModule.bindSeedData . This makes the seed data type injectable by Guice. Functions \u00b6 Name Summary transform [jvm] abstract fun transform (seedData: Map <Key< >, Any ?>): Map <Key< >, Any ?>","title":"SeedDataTransformer - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-seed-data-transformer/#seeddatatransformer","text":"[jvm]\\ interface SeedDataTransformer While executing, actions have ActionScoped values that can be injected by anything running within the action. For example, these values are seeded by default for web actions: HttpCall HttpServletRequest These types are the initial keys in the seedData map; they map to the corresponding instances. Implementations of this interface may modify this map. To add new seed data keys, you must also subclass ActionScopedProviderModule and call ActionScopedProviderModule.bindSeedData . This makes the seed data type injectable by Guice.","title":"SeedDataTransformer"},{"location":"0.x/misk-action-scopes/misk.scope/-seed-data-transformer/#functions","text":"Name Summary transform [jvm] abstract fun transform (seedData: Map <Key< >, Any ?>): Map <Key< >, Any ?>","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.scope/-seed-data-transformer/transform/","text":"// misk-action-scopes / misk.scope / SeedDataTransformer / transform transform \u00b6 [jvm]\\ abstract fun transform (seedData: Map <Key< >, Any ?>): Map <Key< >, Any ?>","title":"transform - Misk"},{"location":"0.x/misk-action-scopes/misk.scope/-seed-data-transformer/transform/#transform","text":"[jvm]\\ abstract fun transform (seedData: Map <Key< >, Any ?>): Map <Key< >, Any ?>","title":"transform"},{"location":"0.x/misk-action-scopes/misk.scope.executor/","text":"// misk-action-scopes / misk.scope.executor Package misk.scope.executor \u00b6 Types \u00b6 Name Summary ActionScopedExecutorService [jvm] class ActionScopedExecutorService (target: ExecutorService , scope: ActionScope ) : WrappingListeningExecutorService Wraps a ListeningExecutorService to propagate the current action scope to any tasks submitted by the current thread","title":"Package misk.scope.executor - Misk"},{"location":"0.x/misk-action-scopes/misk.scope.executor/#package-miskscopeexecutor","text":"","title":"Package misk.scope.executor"},{"location":"0.x/misk-action-scopes/misk.scope.executor/#types","text":"Name Summary ActionScopedExecutorService [jvm] class ActionScopedExecutorService (target: ExecutorService , scope: ActionScope ) : WrappingListeningExecutorService Wraps a ListeningExecutorService to propagate the current action scope to any tasks submitted by the current thread","title":"Types"},{"location":"0.x/misk-action-scopes/misk.scope.executor/-action-scoped-executor-service/","text":"// misk-action-scopes / misk.scope.executor / ActionScopedExecutorService ActionScopedExecutorService \u00b6 [jvm]\\ class ActionScopedExecutorService (target: ExecutorService , scope: ActionScope ) : WrappingListeningExecutorService Wraps a ListeningExecutorService to propagate the current action scope to any tasks submitted by the current thread Constructors \u00b6 ActionScopedExecutorService [jvm] fun ActionScopedExecutorService (target: ExecutorService , scope: ActionScope ) Functions \u00b6 Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean execute [jvm] open override fun execute (runnable: Runnable ) invokeAll [jvm] open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >> invokeAny [jvm] open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (runnable: Runnable ): ListenableFuture<*> open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > toString [jvm] open override fun toString (): String","title":"ActionScopedExecutorService - Misk"},{"location":"0.x/misk-action-scopes/misk.scope.executor/-action-scoped-executor-service/#actionscopedexecutorservice","text":"[jvm]\\ class ActionScopedExecutorService (target: ExecutorService , scope: ActionScope ) : WrappingListeningExecutorService Wraps a ListeningExecutorService to propagate the current action scope to any tasks submitted by the current thread","title":"ActionScopedExecutorService"},{"location":"0.x/misk-action-scopes/misk.scope.executor/-action-scoped-executor-service/#constructors","text":"ActionScopedExecutorService [jvm] fun ActionScopedExecutorService (target: ExecutorService , scope: ActionScope )","title":"Constructors"},{"location":"0.x/misk-action-scopes/misk.scope.executor/-action-scoped-executor-service/#functions","text":"Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean execute [jvm] open override fun execute (runnable: Runnable ) invokeAll [jvm] open override fun < T > invokeAll (callables: Collection < Callable < T >>): List < Future < T >> open override fun < T > invokeAll (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): List < Future < T >> invokeAny [jvm] open override fun < T > invokeAny (callables: Collection < Callable < T >>): T open override fun < T > invokeAny (callables: Collection < Callable < T >>, timeout: Long , timeUnit: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (runnable: Runnable ): ListenableFuture<*> open override fun < T > submit (callable: Callable < T >): ListenableFuture< T > open override fun < T > submit (runnable: Runnable , result: T ): ListenableFuture< T > toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-action-scopes/misk.scope.executor/-action-scoped-executor-service/-action-scoped-executor-service/","text":"// misk-action-scopes / misk.scope.executor / ActionScopedExecutorService / ActionScopedExecutorService ActionScopedExecutorService \u00b6 [jvm]\\ fun ActionScopedExecutorService (target: ExecutorService , scope: ActionScope )","title":"ActionScopedExecutorService - Misk"},{"location":"0.x/misk-action-scopes/misk.scope.executor/-action-scoped-executor-service/-action-scoped-executor-service/#actionscopedexecutorservice","text":"[jvm]\\ fun ActionScopedExecutorService (target: ExecutorService , scope: ActionScope )","title":"ActionScopedExecutorService"},{"location":"0.x/misk-actions/misk/","text":"// misk-actions / misk Package misk \u00b6 Types \u00b6 Name Summary MiskCaller [jvm] data class MiskCaller (service: String ?, user: String ?, capabilities: Set < String >) Information about the authenticated caller of a given action","title":"Package misk - Misk"},{"location":"0.x/misk-actions/misk/#package-misk","text":"","title":"Package misk"},{"location":"0.x/misk-actions/misk/#types","text":"Name Summary MiskCaller [jvm] data class MiskCaller (service: String ?, user: String ?, capabilities: Set < String >) Information about the authenticated caller of a given action","title":"Types"},{"location":"0.x/misk-actions/misk/-misk-caller/","text":"// misk-actions / misk / MiskCaller MiskCaller \u00b6 [jvm]\\ data class MiskCaller (service: String ?, user: String ?, capabilities: Set < String >) Information about the authenticated caller of a given action Constructors \u00b6 MiskCaller [jvm] fun MiskCaller (service: String ? = null, user: String ? = null, capabilities: Set < String > = setOf()) Functions \u00b6 Name Summary isAllowed [jvm] fun isAllowed (allowedCapabilities: Set < String >, allowedServices: Set < String >): Boolean Determine based on allowed capabilities/services if the caller is permitted toString [jvm] open override fun toString (): String We don\u2019t like to log usernames. Properties \u00b6 Name Summary capabilities [jvm] val capabilities : Set < String > Set of capabilities given to a human user, typically provided by the SSO infrastructure principal [jvm] val principal : String The identity of the calling principal, regardless of whether they are a service or a user service [jvm] val service : String ? = null Present if the caller is an authenticated peer service user [jvm] val user : String ? = null Present if the caller is a human user, typically from an SSO proxy","title":"MiskCaller - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/#miskcaller","text":"[jvm]\\ data class MiskCaller (service: String ?, user: String ?, capabilities: Set < String >) Information about the authenticated caller of a given action","title":"MiskCaller"},{"location":"0.x/misk-actions/misk/-misk-caller/#constructors","text":"MiskCaller [jvm] fun MiskCaller (service: String ? = null, user: String ? = null, capabilities: Set < String > = setOf())","title":"Constructors"},{"location":"0.x/misk-actions/misk/-misk-caller/#functions","text":"Name Summary isAllowed [jvm] fun isAllowed (allowedCapabilities: Set < String >, allowedServices: Set < String >): Boolean Determine based on allowed capabilities/services if the caller is permitted toString [jvm] open override fun toString (): String We don\u2019t like to log usernames.","title":"Functions"},{"location":"0.x/misk-actions/misk/-misk-caller/#properties","text":"Name Summary capabilities [jvm] val capabilities : Set < String > Set of capabilities given to a human user, typically provided by the SSO infrastructure principal [jvm] val principal : String The identity of the calling principal, regardless of whether they are a service or a user service [jvm] val service : String ? = null Present if the caller is an authenticated peer service user [jvm] val user : String ? = null Present if the caller is a human user, typically from an SSO proxy","title":"Properties"},{"location":"0.x/misk-actions/misk/-misk-caller/-misk-caller/","text":"// misk-actions / misk / MiskCaller / MiskCaller MiskCaller \u00b6 [jvm]\\ fun MiskCaller (service: String ? = null, user: String ? = null, capabilities: Set < String > = setOf())","title":"MiskCaller - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/-misk-caller/#miskcaller","text":"[jvm]\\ fun MiskCaller (service: String ? = null, user: String ? = null, capabilities: Set < String > = setOf())","title":"MiskCaller"},{"location":"0.x/misk-actions/misk/-misk-caller/capabilities/","text":"// misk-actions / misk / MiskCaller / capabilities capabilities \u00b6 [jvm]\\ val capabilities : Set < String > Set of capabilities given to a human user, typically provided by the SSO infrastructure","title":"capabilities - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/capabilities/#capabilities","text":"[jvm]\\ val capabilities : Set < String > Set of capabilities given to a human user, typically provided by the SSO infrastructure","title":"capabilities"},{"location":"0.x/misk-actions/misk/-misk-caller/is-allowed/","text":"// misk-actions / misk / MiskCaller / isAllowed isAllowed \u00b6 [jvm]\\ fun isAllowed (allowedCapabilities: Set < String >, allowedServices: Set < String >): Boolean Determine based on allowed capabilities/services if the caller is permitted","title":"isAllowed - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/is-allowed/#isallowed","text":"[jvm]\\ fun isAllowed (allowedCapabilities: Set < String >, allowedServices: Set < String >): Boolean Determine based on allowed capabilities/services if the caller is permitted","title":"isAllowed"},{"location":"0.x/misk-actions/misk/-misk-caller/principal/","text":"// misk-actions / misk / MiskCaller / principal principal \u00b6 [jvm]\\ val principal : String The identity of the calling principal, regardless of whether they are a service or a user","title":"principal - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/principal/#principal","text":"[jvm]\\ val principal : String The identity of the calling principal, regardless of whether they are a service or a user","title":"principal"},{"location":"0.x/misk-actions/misk/-misk-caller/service/","text":"// misk-actions / misk / MiskCaller / service service \u00b6 [jvm]\\ val service : String ? = null Present if the caller is an authenticated peer service","title":"service - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/service/#service","text":"[jvm]\\ val service : String ? = null Present if the caller is an authenticated peer service","title":"service"},{"location":"0.x/misk-actions/misk/-misk-caller/to-string/","text":"// misk-actions / misk / MiskCaller / toString toString \u00b6 [jvm]\\ open override fun toString (): String We don\u2019t like to log usernames.","title":"toString - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String We don\u2019t like to log usernames.","title":"toString"},{"location":"0.x/misk-actions/misk/-misk-caller/user/","text":"// misk-actions / misk / MiskCaller / user user \u00b6 [jvm]\\ val user : String ? = null Present if the caller is a human user, typically from an SSO proxy","title":"user - Misk"},{"location":"0.x/misk-actions/misk/-misk-caller/user/#user","text":"[jvm]\\ val user : String ? = null Present if the caller is a human user, typically from an SSO proxy","title":"user"},{"location":"0.x/misk-actions/misk.exceptions/","text":"// misk-actions / misk.exceptions Package misk.exceptions \u00b6 Types \u00b6 Name Summary BadRequestException [jvm] open class BadRequestException (message: String , cause: Throwable ?) : WebActionException Base exception for bad client requests ClientClosedRequestException [jvm] open class ClientClosedRequestException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. ConflictException [jvm] open class ConflictException (message: String , cause: Throwable ?) : WebActionException Base exception for when a request causes a conflict GatewayTimeoutException [jvm] open class GatewayTimeoutException (message: String , cause: Throwable ?) : WebActionException Base exception for when a server is acting as a gateway and cannot get a response in time. The message is not exposed to the caller. NotFoundException [jvm] open class NotFoundException (message: String , cause: Throwable ?) : WebActionException Base exception for when resources are not found PayloadTooLargeException [jvm] open class PayloadTooLargeException (message: String , cause: Throwable ?) : WebActionException ResourceUnavailableException [jvm] open class ResourceUnavailableException (message: String , cause: Throwable ?) : WebActionException Base exception for when a resource is unavailable. The message is not exposed to the caller. TooManyRequestsException [jvm] open class TooManyRequestsException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. UnauthenticatedException [jvm] open class UnauthenticatedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authentication fails UnauthorizedException [jvm] open class UnauthorizedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authenticated credentials lack access to a resource UnprocessableEntityException [jvm] open class UnprocessableEntityException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. UnsupportedMediaTypeException [jvm] open class UnsupportedMediaTypeException (message: String , cause: Throwable ?) : WebActionException WebActionException [jvm] open class WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ?, grpcStatus: GrpcStatus?, details: List <AnyMessage>) : RuntimeException Even though all kotlin exceptions are runtime exceptions. To ensure java inter-op all exception need to extend from RuntimeException. Functions \u00b6 Name Summary requireRequest [jvm] inline fun requireRequest (check: Boolean , lazyMessage: () -> String ) Similar to kotlin.require , but throws BadRequestException if the check fails","title":"Package misk.exceptions - Misk"},{"location":"0.x/misk-actions/misk.exceptions/#package-miskexceptions","text":"","title":"Package misk.exceptions"},{"location":"0.x/misk-actions/misk.exceptions/#types","text":"Name Summary BadRequestException [jvm] open class BadRequestException (message: String , cause: Throwable ?) : WebActionException Base exception for bad client requests ClientClosedRequestException [jvm] open class ClientClosedRequestException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. ConflictException [jvm] open class ConflictException (message: String , cause: Throwable ?) : WebActionException Base exception for when a request causes a conflict GatewayTimeoutException [jvm] open class GatewayTimeoutException (message: String , cause: Throwable ?) : WebActionException Base exception for when a server is acting as a gateway and cannot get a response in time. The message is not exposed to the caller. NotFoundException [jvm] open class NotFoundException (message: String , cause: Throwable ?) : WebActionException Base exception for when resources are not found PayloadTooLargeException [jvm] open class PayloadTooLargeException (message: String , cause: Throwable ?) : WebActionException ResourceUnavailableException [jvm] open class ResourceUnavailableException (message: String , cause: Throwable ?) : WebActionException Base exception for when a resource is unavailable. The message is not exposed to the caller. TooManyRequestsException [jvm] open class TooManyRequestsException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. UnauthenticatedException [jvm] open class UnauthenticatedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authentication fails UnauthorizedException [jvm] open class UnauthorizedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authenticated credentials lack access to a resource UnprocessableEntityException [jvm] open class UnprocessableEntityException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. UnsupportedMediaTypeException [jvm] open class UnsupportedMediaTypeException (message: String , cause: Throwable ?) : WebActionException WebActionException [jvm] open class WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ?, grpcStatus: GrpcStatus?, details: List <AnyMessage>) : RuntimeException Even though all kotlin exceptions are runtime exceptions. To ensure java inter-op all exception need to extend from RuntimeException.","title":"Types"},{"location":"0.x/misk-actions/misk.exceptions/#functions","text":"Name Summary requireRequest [jvm] inline fun requireRequest (check: Boolean , lazyMessage: () -> String ) Similar to kotlin.require , but throws BadRequestException if the check fails","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/require-request/","text":"// misk-actions / misk.exceptions / requireRequest requireRequest \u00b6 [jvm]\\ inline fun requireRequest (check: Boolean , lazyMessage: () -> String ) Similar to kotlin.require , but throws BadRequestException if the check fails","title":"requireRequest - Misk"},{"location":"0.x/misk-actions/misk.exceptions/require-request/#requirerequest","text":"[jvm]\\ inline fun requireRequest (check: Boolean , lazyMessage: () -> String ) Similar to kotlin.require , but throws BadRequestException if the check fails","title":"requireRequest"},{"location":"0.x/misk-actions/misk.exceptions/-bad-request-exception/","text":"// misk-actions / misk.exceptions / BadRequestException BadRequestException \u00b6 [jvm]\\ open class BadRequestException (message: String , cause: Throwable ?) : WebActionException Base exception for bad client requests Constructors \u00b6 BadRequestException [jvm] fun BadRequestException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"BadRequestException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-bad-request-exception/#badrequestexception","text":"[jvm]\\ open class BadRequestException (message: String , cause: Throwable ?) : WebActionException Base exception for bad client requests","title":"BadRequestException"},{"location":"0.x/misk-actions/misk.exceptions/-bad-request-exception/#constructors","text":"BadRequestException [jvm] fun BadRequestException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-bad-request-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-bad-request-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-bad-request-exception/-bad-request-exception/","text":"// misk-actions / misk.exceptions / BadRequestException / BadRequestException BadRequestException \u00b6 [jvm]\\ fun BadRequestException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"BadRequestException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-bad-request-exception/-bad-request-exception/#badrequestexception","text":"[jvm]\\ fun BadRequestException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"BadRequestException"},{"location":"0.x/misk-actions/misk.exceptions/-client-closed-request-exception/","text":"// misk-actions / misk.exceptions / ClientClosedRequestException ClientClosedRequestException \u00b6 [jvm]\\ open class ClientClosedRequestException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. Constructors \u00b6 ClientClosedRequestException [jvm] fun ClientClosedRequestException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"ClientClosedRequestException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-client-closed-request-exception/#clientclosedrequestexception","text":"[jvm]\\ open class ClientClosedRequestException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk.","title":"ClientClosedRequestException"},{"location":"0.x/misk-actions/misk.exceptions/-client-closed-request-exception/#constructors","text":"ClientClosedRequestException [jvm] fun ClientClosedRequestException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-client-closed-request-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-client-closed-request-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-client-closed-request-exception/-client-closed-request-exception/","text":"// misk-actions / misk.exceptions / ClientClosedRequestException / ClientClosedRequestException ClientClosedRequestException \u00b6 [jvm]\\ fun ClientClosedRequestException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"ClientClosedRequestException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-client-closed-request-exception/-client-closed-request-exception/#clientclosedrequestexception","text":"[jvm]\\ fun ClientClosedRequestException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"ClientClosedRequestException"},{"location":"0.x/misk-actions/misk.exceptions/-conflict-exception/","text":"// misk-actions / misk.exceptions / ConflictException ConflictException \u00b6 [jvm]\\ open class ConflictException (message: String , cause: Throwable ?) : WebActionException Base exception for when a request causes a conflict Constructors \u00b6 ConflictException [jvm] fun ConflictException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"ConflictException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-conflict-exception/#conflictexception","text":"[jvm]\\ open class ConflictException (message: String , cause: Throwable ?) : WebActionException Base exception for when a request causes a conflict","title":"ConflictException"},{"location":"0.x/misk-actions/misk.exceptions/-conflict-exception/#constructors","text":"ConflictException [jvm] fun ConflictException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-conflict-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-conflict-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-conflict-exception/-conflict-exception/","text":"// misk-actions / misk.exceptions / ConflictException / ConflictException ConflictException \u00b6 [jvm]\\ fun ConflictException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"ConflictException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-conflict-exception/-conflict-exception/#conflictexception","text":"[jvm]\\ fun ConflictException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"ConflictException"},{"location":"0.x/misk-actions/misk.exceptions/-gateway-timeout-exception/","text":"// misk-actions / misk.exceptions / GatewayTimeoutException GatewayTimeoutException \u00b6 [jvm]\\ open class GatewayTimeoutException (message: String , cause: Throwable ?) : WebActionException Base exception for when a server is acting as a gateway and cannot get a response in time. The message is not exposed to the caller. Constructors \u00b6 GatewayTimeoutException [jvm] fun GatewayTimeoutException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"GatewayTimeoutException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-gateway-timeout-exception/#gatewaytimeoutexception","text":"[jvm]\\ open class GatewayTimeoutException (message: String , cause: Throwable ?) : WebActionException Base exception for when a server is acting as a gateway and cannot get a response in time. The message is not exposed to the caller.","title":"GatewayTimeoutException"},{"location":"0.x/misk-actions/misk.exceptions/-gateway-timeout-exception/#constructors","text":"GatewayTimeoutException [jvm] fun GatewayTimeoutException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-gateway-timeout-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-gateway-timeout-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-gateway-timeout-exception/-gateway-timeout-exception/","text":"// misk-actions / misk.exceptions / GatewayTimeoutException / GatewayTimeoutException GatewayTimeoutException \u00b6 [jvm]\\ fun GatewayTimeoutException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"GatewayTimeoutException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-gateway-timeout-exception/-gateway-timeout-exception/#gatewaytimeoutexception","text":"[jvm]\\ fun GatewayTimeoutException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"GatewayTimeoutException"},{"location":"0.x/misk-actions/misk.exceptions/-not-found-exception/","text":"// misk-actions / misk.exceptions / NotFoundException NotFoundException \u00b6 [jvm]\\ open class NotFoundException (message: String , cause: Throwable ?) : WebActionException Base exception for when resources are not found Constructors \u00b6 NotFoundException [jvm] fun NotFoundException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"NotFoundException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-not-found-exception/#notfoundexception","text":"[jvm]\\ open class NotFoundException (message: String , cause: Throwable ?) : WebActionException Base exception for when resources are not found","title":"NotFoundException"},{"location":"0.x/misk-actions/misk.exceptions/-not-found-exception/#constructors","text":"NotFoundException [jvm] fun NotFoundException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-not-found-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-not-found-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-not-found-exception/-not-found-exception/","text":"// misk-actions / misk.exceptions / NotFoundException / NotFoundException NotFoundException \u00b6 [jvm]\\ fun NotFoundException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"NotFoundException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-not-found-exception/-not-found-exception/#notfoundexception","text":"[jvm]\\ fun NotFoundException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"NotFoundException"},{"location":"0.x/misk-actions/misk.exceptions/-payload-too-large-exception/","text":"// misk-actions / misk.exceptions / PayloadTooLargeException PayloadTooLargeException \u00b6 [jvm]\\ open class PayloadTooLargeException (message: String , cause: Throwable ?) : WebActionException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"PayloadTooLargeException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-payload-too-large-exception/#payloadtoolargeexception","text":"[jvm]\\ open class PayloadTooLargeException (message: String , cause: Throwable ?) : WebActionException","title":"PayloadTooLargeException"},{"location":"0.x/misk-actions/misk.exceptions/-payload-too-large-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-payload-too-large-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-payload-too-large-exception/-payload-too-large-exception/","text":"// misk-actions / misk.exceptions / PayloadTooLargeException / PayloadTooLargeException PayloadTooLargeException \u00b6 [jvm]\\ fun PayloadTooLargeException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"PayloadTooLargeException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-payload-too-large-exception/-payload-too-large-exception/#payloadtoolargeexception","text":"[jvm]\\ fun PayloadTooLargeException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"PayloadTooLargeException"},{"location":"0.x/misk-actions/misk.exceptions/-resource-unavailable-exception/","text":"// misk-actions / misk.exceptions / ResourceUnavailableException ResourceUnavailableException \u00b6 [jvm]\\ open class ResourceUnavailableException (message: String , cause: Throwable ?) : WebActionException Base exception for when a resource is unavailable. The message is not exposed to the caller. Constructors \u00b6 ResourceUnavailableException [jvm] fun ResourceUnavailableException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"ResourceUnavailableException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-resource-unavailable-exception/#resourceunavailableexception","text":"[jvm]\\ open class ResourceUnavailableException (message: String , cause: Throwable ?) : WebActionException Base exception for when a resource is unavailable. The message is not exposed to the caller.","title":"ResourceUnavailableException"},{"location":"0.x/misk-actions/misk.exceptions/-resource-unavailable-exception/#constructors","text":"ResourceUnavailableException [jvm] fun ResourceUnavailableException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-resource-unavailable-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-resource-unavailable-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-resource-unavailable-exception/-resource-unavailable-exception/","text":"// misk-actions / misk.exceptions / ResourceUnavailableException / ResourceUnavailableException ResourceUnavailableException \u00b6 [jvm]\\ fun ResourceUnavailableException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"ResourceUnavailableException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-resource-unavailable-exception/-resource-unavailable-exception/#resourceunavailableexception","text":"[jvm]\\ fun ResourceUnavailableException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"ResourceUnavailableException"},{"location":"0.x/misk-actions/misk.exceptions/-too-many-requests-exception/","text":"// misk-actions / misk.exceptions / TooManyRequestsException TooManyRequestsException \u00b6 [jvm]\\ open class TooManyRequestsException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. Constructors \u00b6 TooManyRequestsException [jvm] fun TooManyRequestsException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"TooManyRequestsException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-too-many-requests-exception/#toomanyrequestsexception","text":"[jvm]\\ open class TooManyRequestsException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk.","title":"TooManyRequestsException"},{"location":"0.x/misk-actions/misk.exceptions/-too-many-requests-exception/#constructors","text":"TooManyRequestsException [jvm] fun TooManyRequestsException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-too-many-requests-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-too-many-requests-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-too-many-requests-exception/-too-many-requests-exception/","text":"// misk-actions / misk.exceptions / TooManyRequestsException / TooManyRequestsException TooManyRequestsException \u00b6 [jvm]\\ fun TooManyRequestsException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"TooManyRequestsException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-too-many-requests-exception/-too-many-requests-exception/#toomanyrequestsexception","text":"[jvm]\\ fun TooManyRequestsException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"TooManyRequestsException"},{"location":"0.x/misk-actions/misk.exceptions/-unauthenticated-exception/","text":"// misk-actions / misk.exceptions / UnauthenticatedException UnauthenticatedException \u00b6 [jvm]\\ open class UnauthenticatedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authentication fails Constructors \u00b6 UnauthenticatedException [jvm] fun UnauthenticatedException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"UnauthenticatedException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unauthenticated-exception/#unauthenticatedexception","text":"[jvm]\\ open class UnauthenticatedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authentication fails","title":"UnauthenticatedException"},{"location":"0.x/misk-actions/misk.exceptions/-unauthenticated-exception/#constructors","text":"UnauthenticatedException [jvm] fun UnauthenticatedException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-unauthenticated-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-unauthenticated-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-unauthenticated-exception/-unauthenticated-exception/","text":"// misk-actions / misk.exceptions / UnauthenticatedException / UnauthenticatedException UnauthenticatedException \u00b6 [jvm]\\ fun UnauthenticatedException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnauthenticatedException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unauthenticated-exception/-unauthenticated-exception/#unauthenticatedexception","text":"[jvm]\\ fun UnauthenticatedException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnauthenticatedException"},{"location":"0.x/misk-actions/misk.exceptions/-unauthorized-exception/","text":"// misk-actions / misk.exceptions / UnauthorizedException UnauthorizedException \u00b6 [jvm]\\ open class UnauthorizedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authenticated credentials lack access to a resource Constructors \u00b6 UnauthorizedException [jvm] fun UnauthorizedException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"UnauthorizedException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unauthorized-exception/#unauthorizedexception","text":"[jvm]\\ open class UnauthorizedException (message: String , cause: Throwable ?) : WebActionException Base exception for when authenticated credentials lack access to a resource","title":"UnauthorizedException"},{"location":"0.x/misk-actions/misk.exceptions/-unauthorized-exception/#constructors","text":"UnauthorizedException [jvm] fun UnauthorizedException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-unauthorized-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-unauthorized-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-unauthorized-exception/-unauthorized-exception/","text":"// misk-actions / misk.exceptions / UnauthorizedException / UnauthorizedException UnauthorizedException \u00b6 [jvm]\\ fun UnauthorizedException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnauthorizedException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unauthorized-exception/-unauthorized-exception/#unauthorizedexception","text":"[jvm]\\ fun UnauthorizedException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnauthorizedException"},{"location":"0.x/misk-actions/misk.exceptions/-unprocessable-entity-exception/","text":"// misk-actions / misk.exceptions / UnprocessableEntityException UnprocessableEntityException \u00b6 [jvm]\\ open class UnprocessableEntityException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk. Constructors \u00b6 UnprocessableEntityException [jvm] fun UnprocessableEntityException (message: String = \u201c\u201d, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"UnprocessableEntityException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unprocessable-entity-exception/#unprocessableentityexception","text":"[jvm]\\ open class UnprocessableEntityException (message: String , cause: Throwable ?) : WebActionException This exception is custom to Misk.","title":"UnprocessableEntityException"},{"location":"0.x/misk-actions/misk.exceptions/-unprocessable-entity-exception/#constructors","text":"UnprocessableEntityException [jvm] fun UnprocessableEntityException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-unprocessable-entity-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-unprocessable-entity-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-unprocessable-entity-exception/-unprocessable-entity-exception/","text":"// misk-actions / misk.exceptions / UnprocessableEntityException / UnprocessableEntityException UnprocessableEntityException \u00b6 [jvm]\\ fun UnprocessableEntityException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnprocessableEntityException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unprocessable-entity-exception/-unprocessable-entity-exception/#unprocessableentityexception","text":"[jvm]\\ fun UnprocessableEntityException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnprocessableEntityException"},{"location":"0.x/misk-actions/misk.exceptions/-unsupported-media-type-exception/","text":"// misk-actions / misk.exceptions / UnsupportedMediaTypeException UnsupportedMediaTypeException \u00b6 [jvm]\\ open class UnsupportedMediaTypeException (message: String , cause: Throwable ?) : WebActionException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"UnsupportedMediaTypeException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unsupported-media-type-exception/#unsupportedmediatypeexception","text":"[jvm]\\ open class UnsupportedMediaTypeException (message: String , cause: Throwable ?) : WebActionException","title":"UnsupportedMediaTypeException"},{"location":"0.x/misk-actions/misk.exceptions/-unsupported-media-type-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-unsupported-media-type-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-unsupported-media-type-exception/-unsupported-media-type-exception/","text":"// misk-actions / misk.exceptions / UnsupportedMediaTypeException / UnsupportedMediaTypeException UnsupportedMediaTypeException \u00b6 [jvm]\\ fun UnsupportedMediaTypeException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnsupportedMediaTypeException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-unsupported-media-type-exception/-unsupported-media-type-exception/#unsupportedmediatypeexception","text":"[jvm]\\ fun UnsupportedMediaTypeException (message: String = \u201c\u201d, cause: Throwable ? = null)","title":"UnsupportedMediaTypeException"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/","text":"// misk-actions / misk.exceptions / WebActionException WebActionException \u00b6 [jvm]\\ open class WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ?, grpcStatus: GrpcStatus?, details: List <AnyMessage>) : RuntimeException Even though all kotlin exceptions are runtime exceptions. To ensure java inter-op all exception need to extend from RuntimeException. Constructors \u00b6 WebActionException [jvm] fun WebActionException (code: Int , message: String , cause: Throwable ? = null) WebActionException [jvm] fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null) WebActionException [jvm] fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null, grpcStatus: GrpcStatus? = null, details: List <AnyMessage> = listOf()) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body. Inheritors \u00b6 Name NotFoundException UnauthenticatedException UnauthorizedException ResourceUnavailableException BadRequestException ConflictException UnprocessableEntityException TooManyRequestsException ClientClosedRequestException GatewayTimeoutException PayloadTooLargeException UnsupportedMediaTypeException","title":"WebActionException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/#webactionexception","text":"[jvm]\\ open class WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ?, grpcStatus: GrpcStatus?, details: List <AnyMessage>) : RuntimeException Even though all kotlin exceptions are runtime exceptions. To ensure java inter-op all exception need to extend from RuntimeException.","title":"WebActionException"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/#constructors","text":"WebActionException [jvm] fun WebActionException (code: Int , message: String , cause: Throwable ? = null) WebActionException [jvm] fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null) WebActionException [jvm] fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null, grpcStatus: GrpcStatus? = null, details: List <AnyMessage> = listOf())","title":"Constructors"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int The HTTP status code. Should be 400..599. details [jvm] val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. grpcStatus [jvm] val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . isClientError [jvm] val isClientError : Boolean isServerError [jvm] val isServerError : Boolean message [jvm] open val message : String ? responseBody [jvm] val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"Properties"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/#inheritors","text":"Name NotFoundException UnauthenticatedException UnauthorizedException ResourceUnavailableException BadRequestException ConflictException UnprocessableEntityException TooManyRequestsException ClientClosedRequestException GatewayTimeoutException PayloadTooLargeException UnsupportedMediaTypeException","title":"Inheritors"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/-web-action-exception/","text":"// misk-actions / misk.exceptions / WebActionException / WebActionException WebActionException \u00b6 [jvm]\\ fun WebActionException (code: Int , message: String , cause: Throwable ? = null) fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null) fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null, grpcStatus: GrpcStatus? = null, details: List <AnyMessage> = listOf())","title":"WebActionException - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/-web-action-exception/#webactionexception","text":"[jvm]\\ fun WebActionException (code: Int , message: String , cause: Throwable ? = null) fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null) fun WebActionException (code: Int , responseBody: String , message: String , cause: Throwable ? = null, grpcStatus: GrpcStatus? = null, details: List <AnyMessage> = listOf())","title":"WebActionException"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/code/","text":"// misk-actions / misk.exceptions / WebActionException / code code \u00b6 [jvm]\\ val code : Int The HTTP status code. Should be 400..599.","title":"code - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/code/#code","text":"[jvm]\\ val code : Int The HTTP status code. Should be 400..599.","title":"code"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/details/","text":"// misk-actions / misk.exceptions / WebActionException / details details \u00b6 [jvm]\\ val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. Reference: https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto","title":"details - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/details/#details","text":"[jvm]\\ val details : List <AnyMessage> Details are used to enrich gRPC errors with additional proto-encoded messages. error_details.proto is a well-known collection of details, but clients can define their own. This field is ignored for REST responses. Reference: https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto","title":"details"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/grpc-status/","text":"// misk-actions / misk.exceptions / WebActionException / grpcStatus grpcStatus \u00b6 [jvm]\\ val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . Reference: https://github.com/grpc/grpc/blob/master/doc/statuscodes.md","title":"grpcStatus - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/grpc-status/#grpcstatus","text":"[jvm]\\ val grpcStatus : GrpcStatus? = null The gPRC status code. If unset, it will be inferred from code . Reference: https://github.com/grpc/grpc/blob/master/doc/statuscodes.md","title":"grpcStatus"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/is-client-error/","text":"// misk-actions / misk.exceptions / WebActionException / isClientError isClientError \u00b6 [jvm]\\ val isClientError : Boolean","title":"isClientError - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/is-client-error/#isclienterror","text":"[jvm]\\ val isClientError : Boolean","title":"isClientError"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/is-server-error/","text":"// misk-actions / misk.exceptions / WebActionException / isServerError isServerError \u00b6 [jvm]\\ val isServerError : Boolean","title":"isServerError - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/is-server-error/#isservererror","text":"[jvm]\\ val isServerError : Boolean","title":"isServerError"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/response-body/","text":"// misk-actions / misk.exceptions / WebActionException / responseBody responseBody \u00b6 [jvm]\\ val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"responseBody - Misk"},{"location":"0.x/misk-actions/misk.exceptions/-web-action-exception/response-body/#responsebody","text":"[jvm]\\ val responseBody : String This is returned to the caller as is. Be mindful not to leak internal implementation details and possible vulnerabilities in the response body.","title":"responseBody"},{"location":"0.x/misk-actions/misk.security.authz/","text":"// misk-actions / misk.security.authz Package misk.security.authz \u00b6 Types \u00b6 Name Summary Authenticated [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Authenticated (services: Array < String >, capabilities: Array < String >) Annotation indicating that a given action requires an authenticated caller - either a human in a specific capability, or one of a set of services Unauthenticated [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Unauthenticated Annotation indicating that a given action supports unauthenticated access","title":"Package misk.security.authz - Misk"},{"location":"0.x/misk-actions/misk.security.authz/#package-misksecurityauthz","text":"","title":"Package misk.security.authz"},{"location":"0.x/misk-actions/misk.security.authz/#types","text":"Name Summary Authenticated [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Authenticated (services: Array < String >, capabilities: Array < String >) Annotation indicating that a given action requires an authenticated caller - either a human in a specific capability, or one of a set of services Unauthenticated [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Unauthenticated Annotation indicating that a given action supports unauthenticated access","title":"Types"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/","text":"// misk-actions / misk.security.authz / Authenticated Authenticated \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Authenticated (services: Array < String >, capabilities: Array < String >) Annotation indicating that a given action requires an authenticated caller - either a human in a specific capability, or one of a set of services Constructors \u00b6 Authenticated [jvm] fun Authenticated (services: Array < String > = [], capabilities: Array < String > = []) Properties \u00b6 Name Summary capabilities [jvm] val capabilities : Array < String > services [jvm] val services : Array < String >","title":"Authenticated - Misk"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/#authenticated","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Authenticated (services: Array < String >, capabilities: Array < String >) Annotation indicating that a given action requires an authenticated caller - either a human in a specific capability, or one of a set of services","title":"Authenticated"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/#constructors","text":"Authenticated [jvm] fun Authenticated (services: Array < String > = [], capabilities: Array < String > = [])","title":"Constructors"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/#properties","text":"Name Summary capabilities [jvm] val capabilities : Array < String > services [jvm] val services : Array < String >","title":"Properties"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/-authenticated/","text":"// misk-actions / misk.security.authz / Authenticated / Authenticated Authenticated \u00b6 [jvm]\\ fun Authenticated (services: Array < String > = [], capabilities: Array < String > = [])","title":"Authenticated - Misk"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/-authenticated/#authenticated","text":"[jvm]\\ fun Authenticated (services: Array < String > = [], capabilities: Array < String > = [])","title":"Authenticated"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/capabilities/","text":"// misk-actions / misk.security.authz / Authenticated / capabilities capabilities \u00b6 [jvm]\\ val capabilities : Array < String >","title":"capabilities - Misk"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/capabilities/#capabilities","text":"[jvm]\\ val capabilities : Array < String >","title":"capabilities"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/services/","text":"// misk-actions / misk.security.authz / Authenticated / services services \u00b6 [jvm]\\ val services : Array < String >","title":"services - Misk"},{"location":"0.x/misk-actions/misk.security.authz/-authenticated/services/#services","text":"[jvm]\\ val services : Array < String >","title":"services"},{"location":"0.x/misk-actions/misk.security.authz/-unauthenticated/","text":"// misk-actions / misk.security.authz / Unauthenticated Unauthenticated \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Unauthenticated Annotation indicating that a given action supports unauthenticated access Constructors \u00b6 Unauthenticated [jvm] fun Unauthenticated ()","title":"Unauthenticated - Misk"},{"location":"0.x/misk-actions/misk.security.authz/-unauthenticated/#unauthenticated","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Unauthenticated Annotation indicating that a given action supports unauthenticated access","title":"Unauthenticated"},{"location":"0.x/misk-actions/misk.security.authz/-unauthenticated/#constructors","text":"Unauthenticated [jvm] fun Unauthenticated ()","title":"Constructors"},{"location":"0.x/misk-actions/misk.security.authz/-unauthenticated/-unauthenticated/","text":"// misk-actions / misk.security.authz / Unauthenticated / Unauthenticated Unauthenticated \u00b6 [jvm]\\ fun Unauthenticated ()","title":"Unauthenticated - Misk"},{"location":"0.x/misk-actions/misk.security.authz/-unauthenticated/-unauthenticated/#unauthenticated","text":"[jvm]\\ fun Unauthenticated ()","title":"Unauthenticated"},{"location":"0.x/misk-actions/misk.web/","text":"// misk-actions / misk.web Package misk.web \u00b6 Types \u00b6 Name Summary AvailableWhenDegraded [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AvailableWhenDegraded When the service is overloaded Misk will intervene and reject calls by returning \u201cHTTP 503 Service Unavailable\u201d. We call this load shedding and it works similarly to flow control in TCP. ConnectWebSocket [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ConnectWebSocket (pathPattern: String ) Delete [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Delete (pathPattern: String ) Description [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Description (text: String ) FormField [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormField (name: String ) FormValue [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormValue Get [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Get (pathPattern: String ) Patch [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Patch (pathPattern: String ) PathParam [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class PathParam (value: String ) Post [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Post (pathPattern: String ) Put [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Put (pathPattern: String ) QueryParam [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class QueryParam (value: String ) RequestBody [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestBody RequestContentType [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class RequestContentType (value: String ) RequestHeaders [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestHeaders Response [jvm] data class Response <out T >(body: T , headers: Headers, statusCode: Int ) An HTTP response body, headers, and status code. ResponseBody [jvm] interface ResponseBody ResponseContentType [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ResponseContentType (value: String ) WebActionModule [jvm] class WebActionModule < A : WebAction > : KAbstractModule","title":"Package misk.web - Misk"},{"location":"0.x/misk-actions/misk.web/#package-miskweb","text":"","title":"Package misk.web"},{"location":"0.x/misk-actions/misk.web/#types","text":"Name Summary AvailableWhenDegraded [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AvailableWhenDegraded When the service is overloaded Misk will intervene and reject calls by returning \u201cHTTP 503 Service Unavailable\u201d. We call this load shedding and it works similarly to flow control in TCP. ConnectWebSocket [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ConnectWebSocket (pathPattern: String ) Delete [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Delete (pathPattern: String ) Description [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Description (text: String ) FormField [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormField (name: String ) FormValue [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormValue Get [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Get (pathPattern: String ) Patch [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Patch (pathPattern: String ) PathParam [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class PathParam (value: String ) Post [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Post (pathPattern: String ) Put [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Put (pathPattern: String ) QueryParam [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class QueryParam (value: String ) RequestBody [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestBody RequestContentType [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class RequestContentType (value: String ) RequestHeaders [jvm] @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestHeaders Response [jvm] data class Response <out T >(body: T , headers: Headers, statusCode: Int ) An HTTP response body, headers, and status code. ResponseBody [jvm] interface ResponseBody ResponseContentType [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ResponseContentType (value: String ) WebActionModule [jvm] class WebActionModule < A : WebAction > : KAbstractModule","title":"Types"},{"location":"0.x/misk-actions/misk.web/-available-when-degraded/","text":"// misk-actions / misk.web / AvailableWhenDegraded AvailableWhenDegraded \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AvailableWhenDegraded When the service is overloaded Misk will intervene and reject calls by returning \u201cHTTP 503 Service Unavailable\u201d. We call this load shedding and it works similarly to flow control in TCP. We must not shed calls to status endpoints like health checks as doing so may create cascading failures: overloaded instances that do not respond to health checks will be killed, and this further overloads the remaining peers. Only put this on endpoints that must never be rejected. Such endpoints must not do RPCs, database queries or other I/O because unexpected latency there can take down the entire service. Constructors \u00b6 AvailableWhenDegraded [jvm] fun AvailableWhenDegraded ()","title":"AvailableWhenDegraded - Misk"},{"location":"0.x/misk-actions/misk.web/-available-when-degraded/#availablewhendegraded","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AvailableWhenDegraded When the service is overloaded Misk will intervene and reject calls by returning \u201cHTTP 503 Service Unavailable\u201d. We call this load shedding and it works similarly to flow control in TCP. We must not shed calls to status endpoints like health checks as doing so may create cascading failures: overloaded instances that do not respond to health checks will be killed, and this further overloads the remaining peers. Only put this on endpoints that must never be rejected. Such endpoints must not do RPCs, database queries or other I/O because unexpected latency there can take down the entire service.","title":"AvailableWhenDegraded"},{"location":"0.x/misk-actions/misk.web/-available-when-degraded/#constructors","text":"AvailableWhenDegraded [jvm] fun AvailableWhenDegraded ()","title":"Constructors"},{"location":"0.x/misk-actions/misk.web/-available-when-degraded/-available-when-degraded/","text":"// misk-actions / misk.web / AvailableWhenDegraded / AvailableWhenDegraded AvailableWhenDegraded \u00b6 [jvm]\\ fun AvailableWhenDegraded ()","title":"AvailableWhenDegraded - Misk"},{"location":"0.x/misk-actions/misk.web/-available-when-degraded/-available-when-degraded/#availablewhendegraded","text":"[jvm]\\ fun AvailableWhenDegraded ()","title":"AvailableWhenDegraded"},{"location":"0.x/misk-actions/misk.web/-connect-web-socket/","text":"// misk-actions / misk.web / ConnectWebSocket ConnectWebSocket \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ConnectWebSocket (pathPattern: String ) Properties \u00b6 Name Summary pathPattern [jvm] val pathPattern : String","title":"ConnectWebSocket - Misk"},{"location":"0.x/misk-actions/misk.web/-connect-web-socket/#connectwebsocket","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ConnectWebSocket (pathPattern: String )","title":"ConnectWebSocket"},{"location":"0.x/misk-actions/misk.web/-connect-web-socket/#properties","text":"Name Summary pathPattern [jvm] val pathPattern : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-connect-web-socket/-connect-web-socket/","text":"// misk-actions / misk.web / ConnectWebSocket / ConnectWebSocket ConnectWebSocket \u00b6 [jvm]\\ fun ConnectWebSocket (pathPattern: String )","title":"ConnectWebSocket - Misk"},{"location":"0.x/misk-actions/misk.web/-connect-web-socket/-connect-web-socket/#connectwebsocket","text":"[jvm]\\ fun ConnectWebSocket (pathPattern: String )","title":"ConnectWebSocket"},{"location":"0.x/misk-actions/misk.web/-connect-web-socket/path-pattern/","text":"// misk-actions / misk.web / ConnectWebSocket / pathPattern pathPattern \u00b6 [jvm]\\ val pathPattern : String","title":"pathPattern - Misk"},{"location":"0.x/misk-actions/misk.web/-connect-web-socket/path-pattern/#pathpattern","text":"[jvm]\\ val pathPattern : String","title":"pathPattern"},{"location":"0.x/misk-actions/misk.web/-delete/","text":"// misk-actions / misk.web / Delete Delete \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Delete (pathPattern: String ) Properties \u00b6 Name Summary pathPattern [jvm] val pathPattern : String","title":"Delete - Misk"},{"location":"0.x/misk-actions/misk.web/-delete/#delete","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Delete (pathPattern: String )","title":"Delete"},{"location":"0.x/misk-actions/misk.web/-delete/#properties","text":"Name Summary pathPattern [jvm] val pathPattern : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-delete/-delete/","text":"// misk-actions / misk.web / Delete / Delete Delete \u00b6 [jvm]\\ fun Delete (pathPattern: String )","title":"Delete - Misk"},{"location":"0.x/misk-actions/misk.web/-delete/-delete/#delete","text":"[jvm]\\ fun Delete (pathPattern: String )","title":"Delete"},{"location":"0.x/misk-actions/misk.web/-delete/path-pattern/","text":"// misk-actions / misk.web / Delete / pathPattern pathPattern \u00b6 [jvm]\\ val pathPattern : String","title":"pathPattern - Misk"},{"location":"0.x/misk-actions/misk.web/-delete/path-pattern/#pathpattern","text":"[jvm]\\ val pathPattern : String","title":"pathPattern"},{"location":"0.x/misk-actions/misk.web/-description/","text":"// misk-actions / misk.web / Description Description \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Description (text: String ) Properties \u00b6 Name Summary text [jvm] val text : String","title":"Description - Misk"},{"location":"0.x/misk-actions/misk.web/-description/#description","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Description (text: String )","title":"Description"},{"location":"0.x/misk-actions/misk.web/-description/#properties","text":"Name Summary text [jvm] val text : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-description/-description/","text":"// misk-actions / misk.web / Description / Description Description \u00b6 [jvm]\\ fun Description (text: String )","title":"Description - Misk"},{"location":"0.x/misk-actions/misk.web/-description/-description/#description","text":"[jvm]\\ fun Description (text: String )","title":"Description"},{"location":"0.x/misk-actions/misk.web/-description/text/","text":"// misk-actions / misk.web / Description / text text \u00b6 [jvm]\\ val text : String","title":"text - Misk"},{"location":"0.x/misk-actions/misk.web/-description/text/#text","text":"[jvm]\\ val text : String","title":"text"},{"location":"0.x/misk-actions/misk.web/-form-field/","text":"// misk-actions / misk.web / FormField FormField \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormField (name: String ) Properties \u00b6 Name Summary name [jvm] val name : String","title":"FormField - Misk"},{"location":"0.x/misk-actions/misk.web/-form-field/#formfield","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormField (name: String )","title":"FormField"},{"location":"0.x/misk-actions/misk.web/-form-field/#properties","text":"Name Summary name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-form-field/-form-field/","text":"// misk-actions / misk.web / FormField / FormField FormField \u00b6 [jvm]\\ fun FormField (name: String )","title":"FormField - Misk"},{"location":"0.x/misk-actions/misk.web/-form-field/-form-field/#formfield","text":"[jvm]\\ fun FormField (name: String )","title":"FormField"},{"location":"0.x/misk-actions/misk.web/-form-field/name/","text":"// misk-actions / misk.web / FormField / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-actions/misk.web/-form-field/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-actions/misk.web/-form-value/","text":"// misk-actions / misk.web / FormValue FormValue \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormValue","title":"FormValue - Misk"},{"location":"0.x/misk-actions/misk.web/-form-value/#formvalue","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class FormValue","title":"FormValue"},{"location":"0.x/misk-actions/misk.web/-form-value/-form-value/","text":"// misk-actions / misk.web / FormValue / FormValue FormValue \u00b6 [jvm]\\ fun FormValue ()","title":"FormValue - Misk"},{"location":"0.x/misk-actions/misk.web/-form-value/-form-value/#formvalue","text":"[jvm]\\ fun FormValue ()","title":"FormValue"},{"location":"0.x/misk-actions/misk.web/-get/","text":"// misk-actions / misk.web / Get Get \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Get (pathPattern: String ) Properties \u00b6 Name Summary pathPattern [jvm] val pathPattern : String","title":"Get - Misk"},{"location":"0.x/misk-actions/misk.web/-get/#get","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Get (pathPattern: String )","title":"Get"},{"location":"0.x/misk-actions/misk.web/-get/#properties","text":"Name Summary pathPattern [jvm] val pathPattern : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-get/-get/","text":"// misk-actions / misk.web / Get / Get Get \u00b6 [jvm]\\ fun Get (pathPattern: String )","title":"Get - Misk"},{"location":"0.x/misk-actions/misk.web/-get/-get/#get","text":"[jvm]\\ fun Get (pathPattern: String )","title":"Get"},{"location":"0.x/misk-actions/misk.web/-get/path-pattern/","text":"// misk-actions / misk.web / Get / pathPattern pathPattern \u00b6 [jvm]\\ val pathPattern : String","title":"pathPattern - Misk"},{"location":"0.x/misk-actions/misk.web/-get/path-pattern/#pathpattern","text":"[jvm]\\ val pathPattern : String","title":"pathPattern"},{"location":"0.x/misk-actions/misk.web/-patch/","text":"// misk-actions / misk.web / Patch Patch \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Patch (pathPattern: String ) Properties \u00b6 Name Summary pathPattern [jvm] val pathPattern : String","title":"Patch - Misk"},{"location":"0.x/misk-actions/misk.web/-patch/#patch","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Patch (pathPattern: String )","title":"Patch"},{"location":"0.x/misk-actions/misk.web/-patch/#properties","text":"Name Summary pathPattern [jvm] val pathPattern : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-patch/-patch/","text":"// misk-actions / misk.web / Patch / Patch Patch \u00b6 [jvm]\\ fun Patch (pathPattern: String )","title":"Patch - Misk"},{"location":"0.x/misk-actions/misk.web/-patch/-patch/#patch","text":"[jvm]\\ fun Patch (pathPattern: String )","title":"Patch"},{"location":"0.x/misk-actions/misk.web/-patch/path-pattern/","text":"// misk-actions / misk.web / Patch / pathPattern pathPattern \u00b6 [jvm]\\ val pathPattern : String","title":"pathPattern - Misk"},{"location":"0.x/misk-actions/misk.web/-patch/path-pattern/#pathpattern","text":"[jvm]\\ val pathPattern : String","title":"pathPattern"},{"location":"0.x/misk-actions/misk.web/-path-param/","text":"// misk-actions / misk.web / PathParam PathParam \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class PathParam (value: String ) Properties \u00b6 Name Summary value [jvm] val value : String","title":"PathParam - Misk"},{"location":"0.x/misk-actions/misk.web/-path-param/#pathparam","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class PathParam (value: String )","title":"PathParam"},{"location":"0.x/misk-actions/misk.web/-path-param/#properties","text":"Name Summary value [jvm] val value : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-path-param/-path-param/","text":"// misk-actions / misk.web / PathParam / PathParam PathParam \u00b6 [jvm]\\ fun PathParam (value: String = \u201c\u201d)","title":"PathParam - Misk"},{"location":"0.x/misk-actions/misk.web/-path-param/-path-param/#pathparam","text":"[jvm]\\ fun PathParam (value: String = \u201c\u201d)","title":"PathParam"},{"location":"0.x/misk-actions/misk.web/-path-param/value/","text":"// misk-actions / misk.web / PathParam / value value \u00b6 [jvm]\\ val value : String","title":"value - Misk"},{"location":"0.x/misk-actions/misk.web/-path-param/value/#value","text":"[jvm]\\ val value : String","title":"value"},{"location":"0.x/misk-actions/misk.web/-post/","text":"// misk-actions / misk.web / Post Post \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Post (pathPattern: String ) Properties \u00b6 Name Summary pathPattern [jvm] val pathPattern : String","title":"Post - Misk"},{"location":"0.x/misk-actions/misk.web/-post/#post","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Post (pathPattern: String )","title":"Post"},{"location":"0.x/misk-actions/misk.web/-post/#properties","text":"Name Summary pathPattern [jvm] val pathPattern : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-post/-post/","text":"// misk-actions / misk.web / Post / Post Post \u00b6 [jvm]\\ fun Post (pathPattern: String )","title":"Post - Misk"},{"location":"0.x/misk-actions/misk.web/-post/-post/#post","text":"[jvm]\\ fun Post (pathPattern: String )","title":"Post"},{"location":"0.x/misk-actions/misk.web/-post/path-pattern/","text":"// misk-actions / misk.web / Post / pathPattern pathPattern \u00b6 [jvm]\\ val pathPattern : String","title":"pathPattern - Misk"},{"location":"0.x/misk-actions/misk.web/-post/path-pattern/#pathpattern","text":"[jvm]\\ val pathPattern : String","title":"pathPattern"},{"location":"0.x/misk-actions/misk.web/-put/","text":"// misk-actions / misk.web / Put Put \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Put (pathPattern: String ) Properties \u00b6 Name Summary pathPattern [jvm] val pathPattern : String","title":"Put - Misk"},{"location":"0.x/misk-actions/misk.web/-put/#put","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class Put (pathPattern: String )","title":"Put"},{"location":"0.x/misk-actions/misk.web/-put/#properties","text":"Name Summary pathPattern [jvm] val pathPattern : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-put/-put/","text":"// misk-actions / misk.web / Put / Put Put \u00b6 [jvm]\\ fun Put (pathPattern: String )","title":"Put - Misk"},{"location":"0.x/misk-actions/misk.web/-put/-put/#put","text":"[jvm]\\ fun Put (pathPattern: String )","title":"Put"},{"location":"0.x/misk-actions/misk.web/-put/path-pattern/","text":"// misk-actions / misk.web / Put / pathPattern pathPattern \u00b6 [jvm]\\ val pathPattern : String","title":"pathPattern - Misk"},{"location":"0.x/misk-actions/misk.web/-put/path-pattern/#pathpattern","text":"[jvm]\\ val pathPattern : String","title":"pathPattern"},{"location":"0.x/misk-actions/misk.web/-query-param/","text":"// misk-actions / misk.web / QueryParam QueryParam \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class QueryParam (value: String ) Properties \u00b6 Name Summary value [jvm] val value : String","title":"QueryParam - Misk"},{"location":"0.x/misk-actions/misk.web/-query-param/#queryparam","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class QueryParam (value: String )","title":"QueryParam"},{"location":"0.x/misk-actions/misk.web/-query-param/#properties","text":"Name Summary value [jvm] val value : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-query-param/-query-param/","text":"// misk-actions / misk.web / QueryParam / QueryParam QueryParam \u00b6 [jvm]\\ fun QueryParam (value: String = \u201c\u201d)","title":"QueryParam - Misk"},{"location":"0.x/misk-actions/misk.web/-query-param/-query-param/#queryparam","text":"[jvm]\\ fun QueryParam (value: String = \u201c\u201d)","title":"QueryParam"},{"location":"0.x/misk-actions/misk.web/-query-param/value/","text":"// misk-actions / misk.web / QueryParam / value value \u00b6 [jvm]\\ val value : String","title":"value - Misk"},{"location":"0.x/misk-actions/misk.web/-query-param/value/#value","text":"[jvm]\\ val value : String","title":"value"},{"location":"0.x/misk-actions/misk.web/-request-body/","text":"// misk-actions / misk.web / RequestBody RequestBody \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestBody","title":"RequestBody - Misk"},{"location":"0.x/misk-actions/misk.web/-request-body/#requestbody","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestBody","title":"RequestBody"},{"location":"0.x/misk-actions/misk.web/-request-body/-request-body/","text":"// misk-actions / misk.web / RequestBody / RequestBody RequestBody \u00b6 [jvm]\\ fun RequestBody ()","title":"RequestBody - Misk"},{"location":"0.x/misk-actions/misk.web/-request-body/-request-body/#requestbody","text":"[jvm]\\ fun RequestBody ()","title":"RequestBody"},{"location":"0.x/misk-actions/misk.web/-request-content-type/","text":"// misk-actions / misk.web / RequestContentType RequestContentType \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class RequestContentType (value: String ) Properties \u00b6 Name Summary value [jvm] val value : Array <out String >","title":"RequestContentType - Misk"},{"location":"0.x/misk-actions/misk.web/-request-content-type/#requestcontenttype","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class RequestContentType (value: String )","title":"RequestContentType"},{"location":"0.x/misk-actions/misk.web/-request-content-type/#properties","text":"Name Summary value [jvm] val value : Array <out String >","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-request-content-type/-request-content-type/","text":"// misk-actions / misk.web / RequestContentType / RequestContentType RequestContentType \u00b6 [jvm]\\ fun RequestContentType (vararg value: String )","title":"RequestContentType - Misk"},{"location":"0.x/misk-actions/misk.web/-request-content-type/-request-content-type/#requestcontenttype","text":"[jvm]\\ fun RequestContentType (vararg value: String )","title":"RequestContentType"},{"location":"0.x/misk-actions/misk.web/-request-content-type/value/","text":"// misk-actions / misk.web / RequestContentType / value value \u00b6 [jvm]\\ val value : Array <out String >","title":"value - Misk"},{"location":"0.x/misk-actions/misk.web/-request-content-type/value/#value","text":"[jvm]\\ val value : Array <out String >","title":"value"},{"location":"0.x/misk-actions/misk.web/-request-headers/","text":"// misk-actions / misk.web / RequestHeaders RequestHeaders \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestHeaders","title":"RequestHeaders - Misk"},{"location":"0.x/misk-actions/misk.web/-request-headers/#requestheaders","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.VALUE_PARAMETER ]) annotation class RequestHeaders","title":"RequestHeaders"},{"location":"0.x/misk-actions/misk.web/-request-headers/-request-headers/","text":"// misk-actions / misk.web / RequestHeaders / RequestHeaders RequestHeaders \u00b6 [jvm]\\ fun RequestHeaders ()","title":"RequestHeaders - Misk"},{"location":"0.x/misk-actions/misk.web/-request-headers/-request-headers/#requestheaders","text":"[jvm]\\ fun RequestHeaders ()","title":"RequestHeaders"},{"location":"0.x/misk-actions/misk.web/-response/","text":"// misk-actions / misk.web / Response Response \u00b6 [jvm]\\ data class Response <out T >(body: T , headers: Headers, statusCode: Int ) An HTTP response body, headers, and status code. Constructors \u00b6 Response [jvm] fun <out T > Response (body: T , headers: Headers = headersOf(), statusCode: Int = 200) Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary body [jvm] val body : T headers [jvm] val headers : Headers statusCode [jvm] val statusCode : Int = 200","title":"Response - Misk"},{"location":"0.x/misk-actions/misk.web/-response/#response","text":"[jvm]\\ data class Response <out T >(body: T , headers: Headers, statusCode: Int ) An HTTP response body, headers, and status code.","title":"Response"},{"location":"0.x/misk-actions/misk.web/-response/#constructors","text":"Response [jvm] fun <out T > Response (body: T , headers: Headers = headersOf(), statusCode: Int = 200)","title":"Constructors"},{"location":"0.x/misk-actions/misk.web/-response/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-actions/misk.web/-response/#properties","text":"Name Summary body [jvm] val body : T headers [jvm] val headers : Headers statusCode [jvm] val statusCode : Int = 200","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-response/-response/","text":"// misk-actions / misk.web / Response / Response Response \u00b6 [jvm]\\ fun <out T > Response (body: T , headers: Headers = headersOf(), statusCode: Int = 200)","title":"Response - Misk"},{"location":"0.x/misk-actions/misk.web/-response/-response/#response","text":"[jvm]\\ fun <out T > Response (body: T , headers: Headers = headersOf(), statusCode: Int = 200)","title":"Response"},{"location":"0.x/misk-actions/misk.web/-response/body/","text":"// misk-actions / misk.web / Response / body body \u00b6 [jvm]\\ val body : T","title":"body - Misk"},{"location":"0.x/misk-actions/misk.web/-response/body/#body","text":"[jvm]\\ val body : T","title":"body"},{"location":"0.x/misk-actions/misk.web/-response/headers/","text":"// misk-actions / misk.web / Response / headers headers \u00b6 [jvm]\\ val headers : Headers","title":"headers - Misk"},{"location":"0.x/misk-actions/misk.web/-response/headers/#headers","text":"[jvm]\\ val headers : Headers","title":"headers"},{"location":"0.x/misk-actions/misk.web/-response/status-code/","text":"// misk-actions / misk.web / Response / statusCode statusCode \u00b6 [jvm]\\ val statusCode : Int = 200","title":"statusCode - Misk"},{"location":"0.x/misk-actions/misk.web/-response/status-code/#statuscode","text":"[jvm]\\ val statusCode : Int = 200","title":"statusCode"},{"location":"0.x/misk-actions/misk.web/-response/to-string/","text":"// misk-actions / misk.web / Response / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-actions/misk.web/-response/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-actions/misk.web/-response-body/","text":"// misk-actions / misk.web / ResponseBody ResponseBody \u00b6 [jvm]\\ interface ResponseBody Functions \u00b6 Name Summary writeTo [jvm] abstract fun writeTo (sink: BufferedSink)","title":"ResponseBody - Misk"},{"location":"0.x/misk-actions/misk.web/-response-body/#responsebody","text":"[jvm]\\ interface ResponseBody","title":"ResponseBody"},{"location":"0.x/misk-actions/misk.web/-response-body/#functions","text":"Name Summary writeTo [jvm] abstract fun writeTo (sink: BufferedSink)","title":"Functions"},{"location":"0.x/misk-actions/misk.web/-response-body/write-to/","text":"// misk-actions / misk.web / ResponseBody / writeTo writeTo \u00b6 [jvm]\\ abstract fun writeTo (sink: BufferedSink)","title":"writeTo - Misk"},{"location":"0.x/misk-actions/misk.web/-response-body/write-to/#writeto","text":"[jvm]\\ abstract fun writeTo (sink: BufferedSink)","title":"writeTo"},{"location":"0.x/misk-actions/misk.web/-response-content-type/","text":"// misk-actions / misk.web / ResponseContentType ResponseContentType \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ResponseContentType (value: String ) Properties \u00b6 Name Summary value [jvm] val value : String","title":"ResponseContentType - Misk"},{"location":"0.x/misk-actions/misk.web/-response-content-type/#responsecontenttype","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class ResponseContentType (value: String )","title":"ResponseContentType"},{"location":"0.x/misk-actions/misk.web/-response-content-type/#properties","text":"Name Summary value [jvm] val value : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-response-content-type/-response-content-type/","text":"// misk-actions / misk.web / ResponseContentType / ResponseContentType ResponseContentType \u00b6 [jvm]\\ fun ResponseContentType (value: String )","title":"ResponseContentType - Misk"},{"location":"0.x/misk-actions/misk.web/-response-content-type/-response-content-type/#responsecontenttype","text":"[jvm]\\ fun ResponseContentType (value: String )","title":"ResponseContentType"},{"location":"0.x/misk-actions/misk.web/-response-content-type/value/","text":"// misk-actions / misk.web / ResponseContentType / value value \u00b6 [jvm]\\ val value : String","title":"value - Misk"},{"location":"0.x/misk-actions/misk.web/-response-content-type/value/#value","text":"[jvm]\\ val value : String","title":"value"},{"location":"0.x/misk-actions/misk.web/-web-action-module/","text":"// misk-actions / misk.web / WebActionModule WebActionModule \u00b6 [jvm]\\ class WebActionModule < A : WebAction > : KAbstractModule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary actionClass [jvm] val actionClass : KClass < A > binder [jvm] val binder : Binder url_path_prefix [jvm] val url_path_prefix : String","title":"WebActionModule - Misk"},{"location":"0.x/misk-actions/misk.web/-web-action-module/#webactionmodule","text":"[jvm]\\ class WebActionModule < A : WebAction > : KAbstractModule","title":"WebActionModule"},{"location":"0.x/misk-actions/misk.web/-web-action-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-actions/misk.web/-web-action-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-actions/misk.web/-web-action-module/#properties","text":"Name Summary actionClass [jvm] val actionClass : KClass < A > binder [jvm] val binder : Binder url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web/-web-action-module/action-class/","text":"// misk-actions / misk.web / WebActionModule / actionClass actionClass \u00b6 [jvm]\\ val actionClass : KClass < A >","title":"actionClass - Misk"},{"location":"0.x/misk-actions/misk.web/-web-action-module/action-class/#actionclass","text":"[jvm]\\ val actionClass : KClass < A >","title":"actionClass"},{"location":"0.x/misk-actions/misk.web/-web-action-module/url_path_prefix/","text":"// misk-actions / misk.web / WebActionModule / url_path_prefix url_path_prefix \u00b6 [jvm]\\ val url_path_prefix : String","title":"url_path_prefix - Misk"},{"location":"0.x/misk-actions/misk.web/-web-action-module/url_path_prefix/#url_path_prefix","text":"[jvm]\\ val url_path_prefix : String","title":"url_path_prefix"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/","text":"// misk-actions / misk.web / WebActionModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < A : WebAction > create (): WebActionModule < A > @ JvmStatic fun < A : WebAction > create (actionClass: Class < A >): WebActionModule < A > [jvm] fun < A : WebAction > create (actionClass: KClass < A >): WebActionModule < A > Registers a web action. createWithPrefix [jvm] inline fun < A : WebAction > createWithPrefix (url_path_prefix: String ): WebActionModule < A > @ JvmStatic fun < A : WebAction > createWithPrefix (actionClass: Class < A >, url_path_prefix: String ): WebActionModule < A > [jvm] fun < A : WebAction > createWithPrefix (actionClass: KClass < A >, url_path_prefix: String ): WebActionModule < A > Registers a web action with a path prefix.","title":"Companion - Misk"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < A : WebAction > create (): WebActionModule < A > @ JvmStatic fun < A : WebAction > create (actionClass: Class < A >): WebActionModule < A > [jvm] fun < A : WebAction > create (actionClass: KClass < A >): WebActionModule < A > Registers a web action. createWithPrefix [jvm] inline fun < A : WebAction > createWithPrefix (url_path_prefix: String ): WebActionModule < A > @ JvmStatic fun < A : WebAction > createWithPrefix (actionClass: Class < A >, url_path_prefix: String ): WebActionModule < A > [jvm] fun < A : WebAction > createWithPrefix (actionClass: KClass < A >, url_path_prefix: String ): WebActionModule < A > Registers a web action with a path prefix.","title":"Functions"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/create-with-prefix/","text":"// misk-actions / misk.web / WebActionModule / Companion / createWithPrefix createWithPrefix \u00b6 [jvm]\\ inline fun < A : WebAction > createWithPrefix (url_path_prefix: String ): WebActionModule < A > @ JvmStatic fun < A : WebAction > createWithPrefix (actionClass: Class < A >, url_path_prefix: String ): WebActionModule < A > [jvm]\\ fun < A : WebAction > createWithPrefix (actionClass: KClass < A >, url_path_prefix: String ): WebActionModule < A > Registers a web action with a path prefix. Parameters \u00b6 jvm actionClass : The web action to register. url_path_prefix : Defaults to \u201c/\u201d. If not empty, must match pattern requirements: - must begin with \u201c/\u201d - any number of non-whitespace characters (including additional path segments or \u201c/\u201d) - must terminate with a non-\u201c/\u201d because rest of path will start with \u201c/\u201d","title":"createWithPrefix - Misk"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/create-with-prefix/#createwithprefix","text":"[jvm]\\ inline fun < A : WebAction > createWithPrefix (url_path_prefix: String ): WebActionModule < A > @ JvmStatic fun < A : WebAction > createWithPrefix (actionClass: Class < A >, url_path_prefix: String ): WebActionModule < A > [jvm]\\ fun < A : WebAction > createWithPrefix (actionClass: KClass < A >, url_path_prefix: String ): WebActionModule < A > Registers a web action with a path prefix.","title":"createWithPrefix"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/create-with-prefix/#parameters","text":"jvm actionClass : The web action to register. url_path_prefix : Defaults to \u201c/\u201d. If not empty, must match pattern requirements: - must begin with \u201c/\u201d - any number of non-whitespace characters (including additional path segments or \u201c/\u201d) - must terminate with a non-\u201c/\u201d because rest of path will start with \u201c/\u201d","title":"Parameters"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/create/","text":"// misk-actions / misk.web / WebActionModule / Companion / create create \u00b6 [jvm]\\ inline fun < A : WebAction > create (): WebActionModule < A > @ JvmStatic fun < A : WebAction > create (actionClass: Class < A >): WebActionModule < A > [jvm]\\ fun < A : WebAction > create (actionClass: KClass < A >): WebActionModule < A > Registers a web action. Parameters \u00b6 jvm actionClass : The web action to register.","title":"create - Misk"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/create/#create","text":"[jvm]\\ inline fun < A : WebAction > create (): WebActionModule < A > @ JvmStatic fun < A : WebAction > create (actionClass: Class < A >): WebActionModule < A > [jvm]\\ fun < A : WebAction > create (actionClass: KClass < A >): WebActionModule < A > Registers a web action.","title":"create"},{"location":"0.x/misk-actions/misk.web/-web-action-module/-companion/create/#parameters","text":"jvm actionClass : The web action to register.","title":"Parameters"},{"location":"0.x/misk-actions/misk.web.actions/","text":"// misk-actions / misk.web.actions Package misk.web.actions \u00b6 Types \u00b6 Name Summary WebAction [jvm] interface WebAction WebActionEntry [jvm] class WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String ) : ValidWebEntry WebActionEntry WebSocket [jvm] interface WebSocket A non-blocking interface to a web socket. WebSocketListener [jvm] open class WebSocketListener","title":"Package misk.web.actions - Misk"},{"location":"0.x/misk-actions/misk.web.actions/#package-miskwebactions","text":"","title":"Package misk.web.actions"},{"location":"0.x/misk-actions/misk.web.actions/#types","text":"Name Summary WebAction [jvm] interface WebAction WebActionEntry [jvm] class WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String ) : ValidWebEntry WebActionEntry WebSocket [jvm] interface WebSocket A non-blocking interface to a web socket. WebSocketListener [jvm] open class WebSocketListener","title":"Types"},{"location":"0.x/misk-actions/misk.web.actions/-web-action/","text":"// misk-actions / misk.web.actions / WebAction WebAction \u00b6 [jvm]\\ interface WebAction","title":"WebAction - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-action/#webaction","text":"[jvm]\\ interface WebAction","title":"WebAction"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/","text":"// misk-actions / misk.web.actions / WebActionEntry WebActionEntry \u00b6 [jvm]\\ class WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String ) : ValidWebEntry WebActionEntry A registration of a web action with optional configuration to customize. Parameters \u00b6 jvm actionClass : WebAction to multibind to WebServlet url_path_prefix : Must match pattern requirements: - must begin with \u201c/\u201d - any number of non-whitespace characters (including additional path segments or \u201c/\u201d) - must terminate with a non-\u201c/\u201d because rest of path will start with \u201c/\u201d Constructors \u00b6 WebActionEntry [jvm] fun WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String ) Properties \u00b6 Name Summary actionClass [jvm] val actionClass : KClass <out WebAction > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"WebActionEntry - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/#webactionentry","text":"[jvm]\\ class WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String ) : ValidWebEntry WebActionEntry A registration of a web action with optional configuration to customize.","title":"WebActionEntry"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/#parameters","text":"jvm actionClass : WebAction to multibind to WebServlet url_path_prefix : Must match pattern requirements: - must begin with \u201c/\u201d - any number of non-whitespace characters (including additional path segments or \u201c/\u201d) - must terminate with a non-\u201c/\u201d because rest of path will start with \u201c/\u201d","title":"Parameters"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/#constructors","text":"WebActionEntry [jvm] fun WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String )","title":"Constructors"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/#properties","text":"Name Summary actionClass [jvm] val actionClass : KClass <out WebAction > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/-web-action-entry/","text":"// misk-actions / misk.web.actions / WebActionEntry / WebActionEntry WebActionEntry \u00b6 [jvm]\\ fun WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String ) Parameters \u00b6 jvm actionClass : WebAction to multibind to WebServlet url_path_prefix : Must match pattern requirements: - must begin with \u201c/\u201d - any number of non-whitespace characters (including additional path segments or \u201c/\u201d) - must terminate with a non-\u201c/\u201d because rest of path will start with \u201c/\u201d","title":"WebActionEntry - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/-web-action-entry/#webactionentry","text":"[jvm]\\ fun WebActionEntry (actionClass: KClass <out WebAction >, url_path_prefix: String )","title":"WebActionEntry"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/-web-action-entry/#parameters","text":"jvm actionClass : WebAction to multibind to WebServlet url_path_prefix : Must match pattern requirements: - must begin with \u201c/\u201d - any number of non-whitespace characters (including additional path segments or \u201c/\u201d) - must terminate with a non-\u201c/\u201d because rest of path will start with \u201c/\u201d","title":"Parameters"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/action-class/","text":"// misk-actions / misk.web.actions / WebActionEntry / actionClass actionClass \u00b6 [jvm]\\ val actionClass : KClass <out WebAction >","title":"actionClass - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-action-entry/action-class/#actionclass","text":"[jvm]\\ val actionClass : KClass <out WebAction >","title":"actionClass"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/","text":"// misk-actions / misk.web.actions / WebSocket WebSocket \u00b6 [jvm]\\ interface WebSocket A non-blocking interface to a web socket. Web Socket Lifecycle Upon normal operation each web socket progresses through a sequence of states: Connecting: the initial state of each web socket. Messages may be enqueued but they won't be transmitted until the web socket is open. Open: the web socket has been accepted by the remote peer and is fully operational. Messages in either direction are enqueued for immediate transmission. Closing: one of the peers on the web socket has initiated a graceful shutdown. The web socket will continue to transmit already-enqueued messages but will refuse to enqueue new ones. Closed: the web socket has transmitted all of its messages and has received all messages from the peer. Web sockets may fail due to HTTP upgrade problems, connectivity problems, or if either peer chooses to short-circuit the graceful shutdown process: Canceled: the web socket connection failed. Messages that were successfully enqueued by either peer may not have been transmitted to the other. Note that the state progression is independent for each peer. Arriving at a gracefully-closed state indicates that a peer has sent all of its outgoing messages and received all of its incoming messages. But it does not guarantee that the other peer will successfully receive all of its incoming messages. Functions \u00b6 Name Summary cancel [jvm] abstract fun cancel () Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled. close [jvm] abstract fun close (code: Int , reason: String ?): Boolean Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to {@link #send} will return false and their messages will not be enqueued. queueSize [jvm] abstract fun queueSize (): Long Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted. send [jvm] abstract fun send (text: String ): Boolean Attempts to enqueue {@code bytes} to be sent as a the data of a binary (type {@code 0x2}) message. [jvm] abstract fun send (bytes: ByteString): Boolean Attempts to enqueue {@code text} to be UTF-8 encoded and sent as a the data of a text (type {@code 0x1}) message.","title":"WebSocket - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/#websocket","text":"[jvm]\\ interface WebSocket A non-blocking interface to a web socket.","title":"WebSocket"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/#functions","text":"Name Summary cancel [jvm] abstract fun cancel () Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled. close [jvm] abstract fun close (code: Int , reason: String ?): Boolean Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to {@link #send} will return false and their messages will not be enqueued. queueSize [jvm] abstract fun queueSize (): Long Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted. send [jvm] abstract fun send (text: String ): Boolean Attempts to enqueue {@code bytes} to be sent as a the data of a binary (type {@code 0x2}) message. [jvm] abstract fun send (bytes: ByteString): Boolean Attempts to enqueue {@code text} to be UTF-8 encoded and sent as a the data of a text (type {@code 0x1}) message.","title":"Functions"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/cancel/","text":"// misk-actions / misk.web.actions / WebSocket / cancel cancel \u00b6 [jvm]\\ abstract fun cancel () Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled.","title":"cancel - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/cancel/#cancel","text":"[jvm]\\ abstract fun cancel () Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled.","title":"cancel"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/close/","text":"// misk-actions / misk.web.actions / WebSocket / close close \u00b6 [jvm]\\ abstract fun close (code: Int , reason: String ?): Boolean Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to {@link #send} will return false and their messages will not be enqueued. This returns true if a graceful shutdown was initiated by this call. It returns false and if a graceful shutdown was already underway or if the web socket is already closed or canceled. ## Parameters jvm | | | |---|---| | code | Status code as defined by Section 7.4 of RFC 6455 . | | reason | Reason for shutting down or {@code null}. |","title":"close - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/close/#close","text":"[jvm]\\ abstract fun close (code: Int , reason: String ?): Boolean Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to {@link #send} will return false and their messages will not be enqueued. This returns true if a graceful shutdown was initiated by this call. It returns false and if a graceful shutdown was already underway or if the web socket is already closed or canceled. ## Parameters jvm | | | |---|---| | code | Status code as defined by Section 7.4 of RFC 6455 . | | reason | Reason for shutting down or {@code null}. |","title":"close"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/queue-size/","text":"// misk-actions / misk.web.actions / WebSocket / queueSize queueSize \u00b6 [jvm]\\ abstract fun queueSize (): Long Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted.","title":"queueSize - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/queue-size/#queuesize","text":"[jvm]\\ abstract fun queueSize (): Long Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted.","title":"queueSize"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/send/","text":"// misk-actions / misk.web.actions / WebSocket / send send \u00b6 [jvm]\\ abstract fun send (bytes: ByteString): Boolean Attempts to enqueue {@code text} to be UTF-8 encoded and sent as a the data of a text (type {@code 0x1}) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer will be rejected and trigger a {@linkplain #close graceful shutdown} of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately. [jvm]\\ abstract fun [send](send.md)(text: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) Attempts to enqueue {@code bytes} to be sent as a the data of a binary (type {@code 0x2}) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer will be rejected and trigger a {@linkplain #close graceful shutdown} of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately.","title":"send - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket/send/#send","text":"[jvm]\\ abstract fun send (bytes: ByteString): Boolean Attempts to enqueue {@code text} to be UTF-8 encoded and sent as a the data of a text (type {@code 0x1}) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer will be rejected and trigger a {@linkplain #close graceful shutdown} of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately. [jvm]\\ abstract fun [send](send.md)(text: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) Attempts to enqueue {@code bytes} to be sent as a the data of a binary (type {@code 0x2}) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer will be rejected and trigger a {@linkplain #close graceful shutdown} of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately.","title":"send"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/","text":"// misk-actions / misk.web.actions / WebSocketListener WebSocketListener \u00b6 [jvm]\\ open class WebSocketListener Functions \u00b6 Name Summary onClosed [jvm] open fun onClosed (webSocket: WebSocket , code: Int , reason: String ?) Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made. onClosing [jvm] open fun onClosing (webSocket: WebSocket , code: Int , reason: String ?) Invoked when the remote peer has indicated that no more incoming messages will be transmitted. onFailure [jvm] open fun onFailure (webSocket: WebSocket , t: Throwable ) Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made. onMessage [jvm] open fun onMessage (webSocket: WebSocket , text: String ) Invoked when a text (type {@code 0x1}) message has been received. [jvm] open fun onMessage (webSocket: WebSocket , bytes: ByteString) Invoked when a binary (type {@code 0x2}) message has been received.","title":"WebSocketListener - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/#websocketlistener","text":"[jvm]\\ open class WebSocketListener","title":"WebSocketListener"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/#functions","text":"Name Summary onClosed [jvm] open fun onClosed (webSocket: WebSocket , code: Int , reason: String ?) Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made. onClosing [jvm] open fun onClosing (webSocket: WebSocket , code: Int , reason: String ?) Invoked when the remote peer has indicated that no more incoming messages will be transmitted. onFailure [jvm] open fun onFailure (webSocket: WebSocket , t: Throwable ) Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made. onMessage [jvm] open fun onMessage (webSocket: WebSocket , text: String ) Invoked when a text (type {@code 0x1}) message has been received. [jvm] open fun onMessage (webSocket: WebSocket , bytes: ByteString) Invoked when a binary (type {@code 0x2}) message has been received.","title":"Functions"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/-web-socket-listener/","text":"// misk-actions / misk.web.actions / WebSocketListener / WebSocketListener WebSocketListener \u00b6 [jvm]\\ fun WebSocketListener ()","title":"WebSocketListener - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/-web-socket-listener/#websocketlistener","text":"[jvm]\\ fun WebSocketListener ()","title":"WebSocketListener"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-closed/","text":"// misk-actions / misk.web.actions / WebSocketListener / onClosed onClosed \u00b6 [jvm]\\ open fun onClosed (webSocket: WebSocket , code: Int , reason: String ?) Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made.","title":"onClosed - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-closed/#onclosed","text":"[jvm]\\ open fun onClosed (webSocket: WebSocket , code: Int , reason: String ?) Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made.","title":"onClosed"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-closing/","text":"// misk-actions / misk.web.actions / WebSocketListener / onClosing onClosing \u00b6 [jvm]\\ open fun onClosing (webSocket: WebSocket , code: Int , reason: String ?) Invoked when the remote peer has indicated that no more incoming messages will be transmitted.","title":"onClosing - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-closing/#onclosing","text":"[jvm]\\ open fun onClosing (webSocket: WebSocket , code: Int , reason: String ?) Invoked when the remote peer has indicated that no more incoming messages will be transmitted.","title":"onClosing"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-failure/","text":"// misk-actions / misk.web.actions / WebSocketListener / onFailure onFailure \u00b6 [jvm]\\ open fun onFailure (webSocket: WebSocket , t: Throwable ) Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made.","title":"onFailure - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-failure/#onfailure","text":"[jvm]\\ open fun onFailure (webSocket: WebSocket , t: Throwable ) Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made.","title":"onFailure"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-message/","text":"// misk-actions / misk.web.actions / WebSocketListener / onMessage onMessage \u00b6 [jvm]\\ open fun onMessage (webSocket: WebSocket , text: String ) Invoked when a text (type {@code 0x1}) message has been received. [jvm]\\ open fun onMessage (webSocket: WebSocket , bytes: ByteString) Invoked when a binary (type {@code 0x2}) message has been received.","title":"onMessage - Misk"},{"location":"0.x/misk-actions/misk.web.actions/-web-socket-listener/on-message/#onmessage","text":"[jvm]\\ open fun onMessage (webSocket: WebSocket , text: String ) Invoked when a text (type {@code 0x1}) message has been received. [jvm]\\ open fun onMessage (webSocket: WebSocket , bytes: ByteString) Invoked when a binary (type {@code 0x2}) message has been received.","title":"onMessage"},{"location":"0.x/misk-actions/misk.web.dashboard/","text":"// misk-actions / misk.web.dashboard Package misk.web.dashboard \u00b6 Types \u00b6 Name Summary ValidWebEntry [jvm] abstract class ValidWebEntry (slug: String , url_path_prefix: String )","title":"Package misk.web.dashboard - Misk"},{"location":"0.x/misk-actions/misk.web.dashboard/#package-miskwebdashboard","text":"","title":"Package misk.web.dashboard"},{"location":"0.x/misk-actions/misk.web.dashboard/#types","text":"Name Summary ValidWebEntry [jvm] abstract class ValidWebEntry (slug: String , url_path_prefix: String )","title":"Types"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/","text":"// misk-actions / misk.web.dashboard / ValidWebEntry ValidWebEntry \u00b6 [jvm]\\ abstract class ValidWebEntry (slug: String , url_path_prefix: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String Inheritors \u00b6 Name WebActionEntry","title":"ValidWebEntry - Misk"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/#validwebentry","text":"[jvm]\\ abstract class ValidWebEntry (slug: String , url_path_prefix: String )","title":"ValidWebEntry"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/#properties","text":"Name Summary slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/#inheritors","text":"Name WebActionEntry","title":"Inheritors"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/-valid-web-entry/","text":"// misk-actions / misk.web.dashboard / ValidWebEntry / ValidWebEntry ValidWebEntry \u00b6 [jvm]\\ fun ValidWebEntry (slug: String = \u201c\u201d, url_path_prefix: String = \u201c/\u201d)","title":"ValidWebEntry - Misk"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/-valid-web-entry/#validwebentry","text":"[jvm]\\ fun ValidWebEntry (slug: String = \u201c\u201d, url_path_prefix: String = \u201c/\u201d)","title":"ValidWebEntry"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/slug/","text":"// misk-actions / misk.web.dashboard / ValidWebEntry / slug slug \u00b6 [jvm]\\ val slug : String","title":"slug - Misk"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/slug/#slug","text":"[jvm]\\ val slug : String","title":"slug"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/url_path_prefix/","text":"// misk-actions / misk.web.dashboard / ValidWebEntry / url_path_prefix url_path_prefix \u00b6 [jvm]\\ val url_path_prefix : String","title":"url_path_prefix - Misk"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/url_path_prefix/#url_path_prefix","text":"[jvm]\\ val url_path_prefix : String","title":"url_path_prefix"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/-companion/","text":"// misk-actions / misk.web.dashboard / ValidWebEntry / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary slugify [jvm] inline fun < A : Annotation > slugify (): String Generate a valid slug from an Annotation class [jvm] fun String . slugify (): String Generate a valid slug from a String","title":"Companion - Misk"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/-companion/#functions","text":"Name Summary slugify [jvm] inline fun < A : Annotation > slugify (): String Generate a valid slug from an Annotation class [jvm] fun String . slugify (): String Generate a valid slug from a String","title":"Functions"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/-companion/slugify/","text":"// misk-actions / misk.web.dashboard / ValidWebEntry / Companion / slugify slugify \u00b6 [jvm]\\ inline fun < A : Annotation > slugify (): String Generate a valid slug from an Annotation class [jvm]\\ fun String . slugify (): String Generate a valid slug from a String","title":"slugify - Misk"},{"location":"0.x/misk-actions/misk.web.dashboard/-valid-web-entry/-companion/slugify/#slugify","text":"[jvm]\\ inline fun < A : Annotation > slugify (): String Generate a valid slug from an Annotation class [jvm]\\ fun String . slugify (): String Generate a valid slug from a String","title":"slugify"},{"location":"0.x/misk-actions/misk.web.interceptors/","text":"// misk-actions / misk.web.interceptors Package misk.web.interceptors \u00b6 Types \u00b6 Name Summary LogRequestResponse [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION , AnnotationTarget.CLASS ]) annotation class LogRequestResponse (ratePerSecond: Long , errorRatePerSecond: Long , bodySampling: Double , errorBodySampling: Double ) Annotation indicating that request and response information should be logged.","title":"Package misk.web.interceptors - Misk"},{"location":"0.x/misk-actions/misk.web.interceptors/#package-miskwebinterceptors","text":"","title":"Package misk.web.interceptors"},{"location":"0.x/misk-actions/misk.web.interceptors/#types","text":"Name Summary LogRequestResponse [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION , AnnotationTarget.CLASS ]) annotation class LogRequestResponse (ratePerSecond: Long , errorRatePerSecond: Long , bodySampling: Double , errorBodySampling: Double ) Annotation indicating that request and response information should be logged.","title":"Types"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/","text":"// misk-actions / misk.web.interceptors / LogRequestResponse LogRequestResponse \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION , AnnotationTarget.CLASS ]) annotation class LogRequestResponse (ratePerSecond: Long , errorRatePerSecond: Long , bodySampling: Double , errorBodySampling: Double ) Annotation indicating that request and response information should be logged. Rate limiting is used to sample the number of requests logged. The value specified is the log events per sec allotted per action. By default we set rate limiting for successes to 10 log events per second, enough to show things are happening without sending too many logs. By default rate limiting is off for errors, as we would want to surface such logs for investigation. If you would like to turn off rate limiting and emit all logs, set ratePerSecond and/or errorRatePerSecond to 0. Percentage sampling is used to sample request and response bodies, with 0.0 for none and 1.0 for all. Valid values are in the range 0.0, 1.0. If arguments and responses may include sensitive information, it is expected that the toString() methods of these objects will redact it. Constructors \u00b6 LogRequestResponse [jvm] fun LogRequestResponse (ratePerSecond: Long = 10, errorRatePerSecond: Long = 0, bodySampling: Double = 0.0, errorBodySampling: Double = 0.0) Properties \u00b6 Name Summary bodySampling [jvm] val bodySampling : Double = 0.0 By default do not log request and response bodies errorBodySampling [jvm] val errorBodySampling : Double = 0.0 errorRatePerSecond [jvm] val errorRatePerSecond : Long = 0 By default, rate limiting is off for error logs ratePerSecond [jvm] val ratePerSecond : Long = 10","title":"LogRequestResponse - Misk"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/#logrequestresponse","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION , AnnotationTarget.CLASS ]) annotation class LogRequestResponse (ratePerSecond: Long , errorRatePerSecond: Long , bodySampling: Double , errorBodySampling: Double ) Annotation indicating that request and response information should be logged. Rate limiting is used to sample the number of requests logged. The value specified is the log events per sec allotted per action. By default we set rate limiting for successes to 10 log events per second, enough to show things are happening without sending too many logs. By default rate limiting is off for errors, as we would want to surface such logs for investigation. If you would like to turn off rate limiting and emit all logs, set ratePerSecond and/or errorRatePerSecond to 0. Percentage sampling is used to sample request and response bodies, with 0.0 for none and 1.0 for all. Valid values are in the range 0.0, 1.0. If arguments and responses may include sensitive information, it is expected that the toString() methods of these objects will redact it.","title":"LogRequestResponse"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/#constructors","text":"LogRequestResponse [jvm] fun LogRequestResponse (ratePerSecond: Long = 10, errorRatePerSecond: Long = 0, bodySampling: Double = 0.0, errorBodySampling: Double = 0.0)","title":"Constructors"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/#properties","text":"Name Summary bodySampling [jvm] val bodySampling : Double = 0.0 By default do not log request and response bodies errorBodySampling [jvm] val errorBodySampling : Double = 0.0 errorRatePerSecond [jvm] val errorRatePerSecond : Long = 0 By default, rate limiting is off for error logs ratePerSecond [jvm] val ratePerSecond : Long = 10","title":"Properties"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/-log-request-response/","text":"// misk-actions / misk.web.interceptors / LogRequestResponse / LogRequestResponse LogRequestResponse \u00b6 [jvm]\\ fun LogRequestResponse (ratePerSecond: Long = 10, errorRatePerSecond: Long = 0, bodySampling: Double = 0.0, errorBodySampling: Double = 0.0)","title":"LogRequestResponse - Misk"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/-log-request-response/#logrequestresponse","text":"[jvm]\\ fun LogRequestResponse (ratePerSecond: Long = 10, errorRatePerSecond: Long = 0, bodySampling: Double = 0.0, errorBodySampling: Double = 0.0)","title":"LogRequestResponse"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/body-sampling/","text":"// misk-actions / misk.web.interceptors / LogRequestResponse / bodySampling bodySampling \u00b6 [jvm]\\ val bodySampling : Double = 0.0 By default do not log request and response bodies","title":"bodySampling - Misk"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/body-sampling/#bodysampling","text":"[jvm]\\ val bodySampling : Double = 0.0 By default do not log request and response bodies","title":"bodySampling"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/error-body-sampling/","text":"// misk-actions / misk.web.interceptors / LogRequestResponse / errorBodySampling errorBodySampling \u00b6 [jvm]\\ val errorBodySampling : Double = 0.0","title":"errorBodySampling - Misk"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/error-body-sampling/#errorbodysampling","text":"[jvm]\\ val errorBodySampling : Double = 0.0","title":"errorBodySampling"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/error-rate-per-second/","text":"// misk-actions / misk.web.interceptors / LogRequestResponse / errorRatePerSecond errorRatePerSecond \u00b6 [jvm]\\ val errorRatePerSecond : Long = 0 By default, rate limiting is off for error logs","title":"errorRatePerSecond - Misk"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/error-rate-per-second/#errorratepersecond","text":"[jvm]\\ val errorRatePerSecond : Long = 0 By default, rate limiting is off for error logs","title":"errorRatePerSecond"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/rate-per-second/","text":"// misk-actions / misk.web.interceptors / LogRequestResponse / ratePerSecond ratePerSecond \u00b6 [jvm]\\ val ratePerSecond : Long = 10","title":"ratePerSecond - Misk"},{"location":"0.x/misk-actions/misk.web.interceptors/-log-request-response/rate-per-second/#ratepersecond","text":"[jvm]\\ val ratePerSecond : Long = 10","title":"ratePerSecond"},{"location":"0.x/misk-admin/misk.web.dashboard/","text":"// misk-admin / misk.web.dashboard Package misk.web.dashboard \u00b6 Types \u00b6 Name Summary AdminDashboard [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class AdminDashboard Dashboard Annotation used for all tabs bound in the Misk Admin Dashboard AdminDashboardAccess [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AdminDashboardAccess AdminDashboardModule [jvm] class AdminDashboardModule (isDevelopment: Boolean ) : KAbstractModule Installs default Admin Dashboard that runs at multibound DashboardHomeUrl AdminDashboardTestingModule [jvm] class AdminDashboardTestingModule : KAbstractModule ConfigDashboardTabModule [jvm] class ConfigDashboardTabModule (isDevelopment: Boolean ) : KAbstractModule Installs Config tab for the Misk Admin Dashboard DashboardHomeUrl [jvm] data class DashboardHomeUrl (dashboard_slug: String , url: String ) : ValidWebEntry Url to link to for the home button in the dashboard navbar 1 DashboardHomeUrl should be bound per dashboard DashboardModule [jvm] class DashboardModule : KAbstractModule Support Misk-Web Dashboards including the Misk AdminDashboard and service specific front end apps DashboardNavbarItem [jvm] data class DashboardNavbarItem (dashboard_slug: String , item: String , order: Int ) : ValidWebEntry A list of elements to add to the dashboard navbar Misk-Web\u2019s default navbar handles responsive layout of these items so overflow navbar items are included in the drop down menu DashboardNavbarStatus [jvm] data class DashboardNavbarStatus (dashboard_slug: String , status: String ) : ValidWebEntry Banner text to show below the dashboard navbar 0 or 1 DashboardNavbarStatus should be bound per dashboard DashboardTab [jvm] class DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String , capabilities: Set < String >, services: Set < String >) : WebTab A WebTab with additional fields to bind to a specific Dashboard that has a tabs menu DashboardTabProvider [jvm] class DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String , dashboard_slug: String , accessAnnotation: KClass <out Annotation >?, capabilities: Set < String >, services: Set < String >) : Provider< DashboardTab > Sets the tab\u2019s authentication capabilities/services by the multibound AccessAnnotationEntry DashboardTheme [jvm] data class DashboardTheme (dashboard_slug: String , theme: MiskWebTheme ) Per dashboard customization of the navbar theme EnvironmentToColorLookup [jvm] data class EnvironmentToColorLookup (default: String , DEVELOPMENT: String , TESTING: String , STAGING: String , PRODUCTION: String ) MiskWebColor [jvm] enum MiskWebColor : Enum < MiskWebColor > Matches the Misk-Web Color enum in @misk/core/src/utilities/css.ts MiskWebTheme [jvm] data class MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String ) Matches the Misk-Web Theme interface in @misk/core/src/utilities/theme.ts WebTab [jvm] abstract class WebTab (slug: String , url_path_prefix: String , capabilities: Set < String >, services: Set < String >) : ValidWebEntry WebTabResourceModule [jvm] class WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String , resourcePath: String ) : KAbstractModule Declare how to serve the resources for a WebTab (JS, HTML, CSS\u2026) Functions \u00b6 Name Summary DashboardHomeUrl [jvm] inline fun < DA : Annotation > DashboardHomeUrl (urlPathPrefix: String ): DashboardHomeUrl DashboardNavbarItem [jvm] inline fun < DA : Annotation > DashboardNavbarItem (item: String , order: Int ): DashboardNavbarItem DashboardNavbarStatus [jvm] inline fun < DA : Annotation > DashboardNavbarStatus (status: String ): DashboardNavbarStatus DashboardTabProvider [jvm] inline fun < DA : Annotation , AA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d): DashboardTabProvider Binds a DashboardTab for Dashboard DA with access annotation AA [jvm] inline fun < DA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf()): DashboardTabProvider Binds a DashboardTab for Dashboard DA with optional access capabilities and services DashboardTheme [jvm] inline fun < DA : Annotation > DashboardTheme (theme: MiskWebTheme ): DashboardTheme","title":"Package misk.web.dashboard - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/#package-miskwebdashboard","text":"","title":"Package misk.web.dashboard"},{"location":"0.x/misk-admin/misk.web.dashboard/#types","text":"Name Summary AdminDashboard [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class AdminDashboard Dashboard Annotation used for all tabs bound in the Misk Admin Dashboard AdminDashboardAccess [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AdminDashboardAccess AdminDashboardModule [jvm] class AdminDashboardModule (isDevelopment: Boolean ) : KAbstractModule Installs default Admin Dashboard that runs at multibound DashboardHomeUrl AdminDashboardTestingModule [jvm] class AdminDashboardTestingModule : KAbstractModule ConfigDashboardTabModule [jvm] class ConfigDashboardTabModule (isDevelopment: Boolean ) : KAbstractModule Installs Config tab for the Misk Admin Dashboard DashboardHomeUrl [jvm] data class DashboardHomeUrl (dashboard_slug: String , url: String ) : ValidWebEntry Url to link to for the home button in the dashboard navbar 1 DashboardHomeUrl should be bound per dashboard DashboardModule [jvm] class DashboardModule : KAbstractModule Support Misk-Web Dashboards including the Misk AdminDashboard and service specific front end apps DashboardNavbarItem [jvm] data class DashboardNavbarItem (dashboard_slug: String , item: String , order: Int ) : ValidWebEntry A list of elements to add to the dashboard navbar Misk-Web\u2019s default navbar handles responsive layout of these items so overflow navbar items are included in the drop down menu DashboardNavbarStatus [jvm] data class DashboardNavbarStatus (dashboard_slug: String , status: String ) : ValidWebEntry Banner text to show below the dashboard navbar 0 or 1 DashboardNavbarStatus should be bound per dashboard DashboardTab [jvm] class DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String , capabilities: Set < String >, services: Set < String >) : WebTab A WebTab with additional fields to bind to a specific Dashboard that has a tabs menu DashboardTabProvider [jvm] class DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String , dashboard_slug: String , accessAnnotation: KClass <out Annotation >?, capabilities: Set < String >, services: Set < String >) : Provider< DashboardTab > Sets the tab\u2019s authentication capabilities/services by the multibound AccessAnnotationEntry DashboardTheme [jvm] data class DashboardTheme (dashboard_slug: String , theme: MiskWebTheme ) Per dashboard customization of the navbar theme EnvironmentToColorLookup [jvm] data class EnvironmentToColorLookup (default: String , DEVELOPMENT: String , TESTING: String , STAGING: String , PRODUCTION: String ) MiskWebColor [jvm] enum MiskWebColor : Enum < MiskWebColor > Matches the Misk-Web Color enum in @misk/core/src/utilities/css.ts MiskWebTheme [jvm] data class MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String ) Matches the Misk-Web Theme interface in @misk/core/src/utilities/theme.ts WebTab [jvm] abstract class WebTab (slug: String , url_path_prefix: String , capabilities: Set < String >, services: Set < String >) : ValidWebEntry WebTabResourceModule [jvm] class WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String , resourcePath: String ) : KAbstractModule Declare how to serve the resources for a WebTab (JS, HTML, CSS\u2026)","title":"Types"},{"location":"0.x/misk-admin/misk.web.dashboard/#functions","text":"Name Summary DashboardHomeUrl [jvm] inline fun < DA : Annotation > DashboardHomeUrl (urlPathPrefix: String ): DashboardHomeUrl DashboardNavbarItem [jvm] inline fun < DA : Annotation > DashboardNavbarItem (item: String , order: Int ): DashboardNavbarItem DashboardNavbarStatus [jvm] inline fun < DA : Annotation > DashboardNavbarStatus (status: String ): DashboardNavbarStatus DashboardTabProvider [jvm] inline fun < DA : Annotation , AA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d): DashboardTabProvider Binds a DashboardTab for Dashboard DA with access annotation AA [jvm] inline fun < DA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf()): DashboardTabProvider Binds a DashboardTab for Dashboard DA with optional access capabilities and services DashboardTheme [jvm] inline fun < DA : Annotation > DashboardTheme (theme: MiskWebTheme ): DashboardTheme","title":"Functions"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/","text":"// misk-admin / misk.web.dashboard / DashboardHomeUrl DashboardHomeUrl \u00b6 [jvm]\\ inline fun < DA : Annotation > DashboardHomeUrl (urlPathPrefix: String ): DashboardHomeUrl","title":"DashboardHomeUrl - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/#dashboardhomeurl","text":"[jvm]\\ inline fun < DA : Annotation > DashboardHomeUrl (urlPathPrefix: String ): DashboardHomeUrl","title":"DashboardHomeUrl"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarItem DashboardNavbarItem \u00b6 [jvm]\\ inline fun < DA : Annotation > DashboardNavbarItem (item: String , order: Int ): DashboardNavbarItem","title":"DashboardNavbarItem - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/#dashboardnavbaritem","text":"[jvm]\\ inline fun < DA : Annotation > DashboardNavbarItem (item: String , order: Int ): DashboardNavbarItem","title":"DashboardNavbarItem"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarStatus DashboardNavbarStatus \u00b6 [jvm]\\ inline fun < DA : Annotation > DashboardNavbarStatus (status: String ): DashboardNavbarStatus","title":"DashboardNavbarStatus - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/#dashboardnavbarstatus","text":"[jvm]\\ inline fun < DA : Annotation > DashboardNavbarStatus (status: String ): DashboardNavbarStatus","title":"DashboardNavbarStatus"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider DashboardTabProvider \u00b6 [jvm]\\ inline fun < DA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf()): DashboardTabProvider Binds a DashboardTab for Dashboard DA with optional access capabilities and services [jvm]\\ inline fun < DA : Annotation , AA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d): DashboardTabProvider Binds a DashboardTab for Dashboard DA with access annotation AA","title":"DashboardTabProvider - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/#dashboardtabprovider","text":"[jvm]\\ inline fun < DA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf()): DashboardTabProvider Binds a DashboardTab for Dashboard DA with optional access capabilities and services [jvm]\\ inline fun < DA : Annotation , AA : Annotation > DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d): DashboardTabProvider Binds a DashboardTab for Dashboard DA with access annotation AA","title":"DashboardTabProvider"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/","text":"// misk-admin / misk.web.dashboard / DashboardTheme DashboardTheme \u00b6 [jvm]\\ inline fun < DA : Annotation > DashboardTheme (theme: MiskWebTheme ): DashboardTheme","title":"DashboardTheme - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/#dashboardtheme","text":"[jvm]\\ inline fun < DA : Annotation > DashboardTheme (theme: MiskWebTheme ): DashboardTheme","title":"DashboardTheme"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard/","text":"// misk-admin / misk.web.dashboard / AdminDashboard AdminDashboard \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class AdminDashboard Dashboard Annotation used for all tabs bound in the Misk Admin Dashboard Constructors \u00b6 AdminDashboard [jvm] fun AdminDashboard ()","title":"AdminDashboard - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard/#admindashboard","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION ]) annotation class AdminDashboard Dashboard Annotation used for all tabs bound in the Misk Admin Dashboard","title":"AdminDashboard"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard/#constructors","text":"AdminDashboard [jvm] fun AdminDashboard ()","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard/-admin-dashboard/","text":"// misk-admin / misk.web.dashboard / AdminDashboard / AdminDashboard AdminDashboard \u00b6 [jvm]\\ fun AdminDashboard ()","title":"AdminDashboard - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard/-admin-dashboard/#admindashboard","text":"[jvm]\\ fun AdminDashboard ()","title":"AdminDashboard"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-access/","text":"// misk-admin / misk.web.dashboard / AdminDashboardAccess AdminDashboardAccess \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AdminDashboardAccess","title":"AdminDashboardAccess - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-access/#admindashboardaccess","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class AdminDashboardAccess","title":"AdminDashboardAccess"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-access/-admin-dashboard-access/","text":"// misk-admin / misk.web.dashboard / AdminDashboardAccess / AdminDashboardAccess AdminDashboardAccess \u00b6 [jvm]\\ fun AdminDashboardAccess ()","title":"AdminDashboardAccess - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-access/-admin-dashboard-access/#admindashboardaccess","text":"[jvm]\\ fun AdminDashboardAccess ()","title":"AdminDashboardAccess"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-module/","text":"// misk-admin / misk.web.dashboard / AdminDashboardModule AdminDashboardModule \u00b6 [jvm]\\ class AdminDashboardModule (isDevelopment: Boolean ) : KAbstractModule Installs default Admin Dashboard that runs at multibound DashboardHomeUrl Each Misk included tab in dashboard is installed with the respective: Multibindings for API endpoints Multibindings for Dashboard Tab registration WebTabResourceModule that configures location of the tab compiled web code (classpath and web proxy) To add tabs to the Misk Admin Dashboard, bind the DashboardTab with the Dashboard Annotation AdminDashboard . Tabs are then included in the admin dashboard menu grouping according to the DashboardTab .category field and sorting by DashboardTab .name Constructors \u00b6 AdminDashboardModule [jvm] fun AdminDashboardModule (isDevelopment: Boolean ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AdminDashboardModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-module/#admindashboardmodule","text":"[jvm]\\ class AdminDashboardModule (isDevelopment: Boolean ) : KAbstractModule Installs default Admin Dashboard that runs at multibound DashboardHomeUrl Each Misk included tab in dashboard is installed with the respective: Multibindings for API endpoints Multibindings for Dashboard Tab registration WebTabResourceModule that configures location of the tab compiled web code (classpath and web proxy) To add tabs to the Misk Admin Dashboard, bind the DashboardTab with the Dashboard Annotation AdminDashboard . Tabs are then included in the admin dashboard menu grouping according to the DashboardTab .category field and sorting by DashboardTab .name","title":"AdminDashboardModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-module/#constructors","text":"AdminDashboardModule [jvm] fun AdminDashboardModule (isDevelopment: Boolean )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-module/-admin-dashboard-module/","text":"// misk-admin / misk.web.dashboard / AdminDashboardModule / AdminDashboardModule AdminDashboardModule \u00b6 [jvm]\\ fun AdminDashboardModule (isDevelopment: Boolean )","title":"AdminDashboardModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-module/-admin-dashboard-module/#admindashboardmodule","text":"[jvm]\\ fun AdminDashboardModule (isDevelopment: Boolean )","title":"AdminDashboardModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-testing-module/","text":"// misk-admin / misk.web.dashboard / AdminDashboardTestingModule AdminDashboardTestingModule \u00b6 [jvm]\\ class AdminDashboardTestingModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AdminDashboardTestingModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-testing-module/#admindashboardtestingmodule","text":"[jvm]\\ class AdminDashboardTestingModule : KAbstractModule","title":"AdminDashboardTestingModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-testing-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-testing-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-testing-module/-admin-dashboard-testing-module/","text":"// misk-admin / misk.web.dashboard / AdminDashboardTestingModule / AdminDashboardTestingModule AdminDashboardTestingModule \u00b6 [jvm]\\ fun AdminDashboardTestingModule ()","title":"AdminDashboardTestingModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-admin-dashboard-testing-module/-admin-dashboard-testing-module/#admindashboardtestingmodule","text":"[jvm]\\ fun AdminDashboardTestingModule ()","title":"AdminDashboardTestingModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-config-dashboard-tab-module/","text":"// misk-admin / misk.web.dashboard / ConfigDashboardTabModule ConfigDashboardTabModule \u00b6 [jvm]\\ class ConfigDashboardTabModule (isDevelopment: Boolean ) : KAbstractModule Installs Config tab for the Misk Admin Dashboard The Config tab shows the raw config inputs and the merged runtime config for a given service If you have config parameters that include secrets, you should NOT install this tab because the secrets will be visible at runtime in the admin dashboard. TODO There is insufficient secrets redaction that doesn\u2019t allow flexibility in secret names when redaction is run Constructors \u00b6 ConfigDashboardTabModule [jvm] fun ConfigDashboardTabModule (isDevelopment: Boolean ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ConfigDashboardTabModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-config-dashboard-tab-module/#configdashboardtabmodule","text":"[jvm]\\ class ConfigDashboardTabModule (isDevelopment: Boolean ) : KAbstractModule Installs Config tab for the Misk Admin Dashboard The Config tab shows the raw config inputs and the merged runtime config for a given service If you have config parameters that include secrets, you should NOT install this tab because the secrets will be visible at runtime in the admin dashboard. TODO There is insufficient secrets redaction that doesn\u2019t allow flexibility in secret names when redaction is run","title":"ConfigDashboardTabModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-config-dashboard-tab-module/#constructors","text":"ConfigDashboardTabModule [jvm] fun ConfigDashboardTabModule (isDevelopment: Boolean )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-config-dashboard-tab-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-admin/misk.web.dashboard/-config-dashboard-tab-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-config-dashboard-tab-module/-config-dashboard-tab-module/","text":"// misk-admin / misk.web.dashboard / ConfigDashboardTabModule / ConfigDashboardTabModule ConfigDashboardTabModule \u00b6 [jvm]\\ fun ConfigDashboardTabModule (isDevelopment: Boolean )","title":"ConfigDashboardTabModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-config-dashboard-tab-module/-config-dashboard-tab-module/#configdashboardtabmodule","text":"[jvm]\\ fun ConfigDashboardTabModule (isDevelopment: Boolean )","title":"ConfigDashboardTabModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/","text":"// misk-admin / misk.web.dashboard / DashboardHomeUrl DashboardHomeUrl \u00b6 [jvm]\\ data class DashboardHomeUrl (dashboard_slug: String , url: String ) : ValidWebEntry Url to link to for the home button in the dashboard navbar 1 DashboardHomeUrl should be bound per dashboard Constructors \u00b6 DashboardHomeUrl [jvm] fun DashboardHomeUrl (dashboard_slug: String , url: String ) Properties \u00b6 Name Summary dashboard_slug [jvm] val dashboard_slug : String slug [jvm] val slug : String url [jvm] val url : String url_path_prefix [jvm] val url_path_prefix : String","title":"DashboardHomeUrl - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/#dashboardhomeurl","text":"[jvm]\\ data class DashboardHomeUrl (dashboard_slug: String , url: String ) : ValidWebEntry Url to link to for the home button in the dashboard navbar 1 DashboardHomeUrl should be bound per dashboard","title":"DashboardHomeUrl"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/#constructors","text":"DashboardHomeUrl [jvm] fun DashboardHomeUrl (dashboard_slug: String , url: String )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/#properties","text":"Name Summary dashboard_slug [jvm] val dashboard_slug : String slug [jvm] val slug : String url [jvm] val url : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/-dashboard-home-url/","text":"// misk-admin / misk.web.dashboard / DashboardHomeUrl / DashboardHomeUrl DashboardHomeUrl \u00b6 [jvm]\\ fun DashboardHomeUrl (dashboard_slug: String , url: String )","title":"DashboardHomeUrl - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/-dashboard-home-url/#dashboardhomeurl","text":"[jvm]\\ fun DashboardHomeUrl (dashboard_slug: String , url: String )","title":"DashboardHomeUrl"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/dashboard_slug/","text":"// misk-admin / misk.web.dashboard / DashboardHomeUrl / dashboard_slug dashboard_slug \u00b6 [jvm]\\ val dashboard_slug : String","title":"dashboard_slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/dashboard_slug/#dashboard_slug","text":"[jvm]\\ val dashboard_slug : String","title":"dashboard_slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/url/","text":"// misk-admin / misk.web.dashboard / DashboardHomeUrl / url url \u00b6 [jvm]\\ val url : String","title":"url - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-home-url/url/#url","text":"[jvm]\\ val url : String","title":"url"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-module/","text":"// misk-admin / misk.web.dashboard / DashboardModule DashboardModule \u00b6 [jvm]\\ class DashboardModule : KAbstractModule Support Misk-Web Dashboards including the Misk AdminDashboard and service specific front end apps Constructors \u00b6 DashboardModule [jvm] fun DashboardModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"DashboardModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-module/#dashboardmodule","text":"[jvm]\\ class DashboardModule : KAbstractModule Support Misk-Web Dashboards including the Misk AdminDashboard and service specific front end apps","title":"DashboardModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-module/#constructors","text":"DashboardModule [jvm] fun DashboardModule ()","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-module/-dashboard-module/","text":"// misk-admin / misk.web.dashboard / DashboardModule / DashboardModule DashboardModule \u00b6 [jvm]\\ fun DashboardModule ()","title":"DashboardModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-module/-dashboard-module/#dashboardmodule","text":"[jvm]\\ fun DashboardModule ()","title":"DashboardModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarItem DashboardNavbarItem \u00b6 [jvm]\\ data class DashboardNavbarItem (dashboard_slug: String , item: String , order: Int ) : ValidWebEntry A list of elements to add to the dashboard navbar Misk-Web\u2019s default navbar handles responsive layout of these items so overflow navbar items are included in the drop down menu Constructors \u00b6 DashboardNavbarItem [jvm] fun DashboardNavbarItem (dashboard_slug: String , item: String , order: Int ) Properties \u00b6 Name Summary dashboard_slug [jvm] val dashboard_slug : String item [jvm] val item : String order [jvm] val order : Int slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"DashboardNavbarItem - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/#dashboardnavbaritem","text":"[jvm]\\ data class DashboardNavbarItem (dashboard_slug: String , item: String , order: Int ) : ValidWebEntry A list of elements to add to the dashboard navbar Misk-Web\u2019s default navbar handles responsive layout of these items so overflow navbar items are included in the drop down menu","title":"DashboardNavbarItem"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/#constructors","text":"DashboardNavbarItem [jvm] fun DashboardNavbarItem (dashboard_slug: String , item: String , order: Int )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/#properties","text":"Name Summary dashboard_slug [jvm] val dashboard_slug : String item [jvm] val item : String order [jvm] val order : Int slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/-dashboard-navbar-item/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarItem / DashboardNavbarItem DashboardNavbarItem \u00b6 [jvm]\\ fun DashboardNavbarItem (dashboard_slug: String , item: String , order: Int )","title":"DashboardNavbarItem - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/-dashboard-navbar-item/#dashboardnavbaritem","text":"[jvm]\\ fun DashboardNavbarItem (dashboard_slug: String , item: String , order: Int )","title":"DashboardNavbarItem"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/dashboard_slug/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarItem / dashboard_slug dashboard_slug \u00b6 [jvm]\\ val dashboard_slug : String","title":"dashboard_slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/dashboard_slug/#dashboard_slug","text":"[jvm]\\ val dashboard_slug : String","title":"dashboard_slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/item/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarItem / item item \u00b6 [jvm]\\ val item : String","title":"item - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/item/#item","text":"[jvm]\\ val item : String","title":"item"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/order/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarItem / order order \u00b6 [jvm]\\ val order : Int","title":"order - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-item/order/#order","text":"[jvm]\\ val order : Int","title":"order"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarStatus DashboardNavbarStatus \u00b6 [jvm]\\ data class DashboardNavbarStatus (dashboard_slug: String , status: String ) : ValidWebEntry Banner text to show below the dashboard navbar 0 or 1 DashboardNavbarStatus should be bound per dashboard Constructors \u00b6 DashboardNavbarStatus [jvm] fun DashboardNavbarStatus (dashboard_slug: String , status: String ) Properties \u00b6 Name Summary dashboard_slug [jvm] val dashboard_slug : String slug [jvm] val slug : String status [jvm] val status : String url_path_prefix [jvm] val url_path_prefix : String","title":"DashboardNavbarStatus - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/#dashboardnavbarstatus","text":"[jvm]\\ data class DashboardNavbarStatus (dashboard_slug: String , status: String ) : ValidWebEntry Banner text to show below the dashboard navbar 0 or 1 DashboardNavbarStatus should be bound per dashboard","title":"DashboardNavbarStatus"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/#constructors","text":"DashboardNavbarStatus [jvm] fun DashboardNavbarStatus (dashboard_slug: String , status: String )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/#properties","text":"Name Summary dashboard_slug [jvm] val dashboard_slug : String slug [jvm] val slug : String status [jvm] val status : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/-dashboard-navbar-status/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarStatus / DashboardNavbarStatus DashboardNavbarStatus \u00b6 [jvm]\\ fun DashboardNavbarStatus (dashboard_slug: String , status: String )","title":"DashboardNavbarStatus - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/-dashboard-navbar-status/#dashboardnavbarstatus","text":"[jvm]\\ fun DashboardNavbarStatus (dashboard_slug: String , status: String )","title":"DashboardNavbarStatus"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/dashboard_slug/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarStatus / dashboard_slug dashboard_slug \u00b6 [jvm]\\ val dashboard_slug : String","title":"dashboard_slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/dashboard_slug/#dashboard_slug","text":"[jvm]\\ val dashboard_slug : String","title":"dashboard_slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/status/","text":"// misk-admin / misk.web.dashboard / DashboardNavbarStatus / status status \u00b6 [jvm]\\ val status : String","title":"status - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-navbar-status/status/#status","text":"[jvm]\\ val status : String","title":"status"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/","text":"// misk-admin / misk.web.dashboard / DashboardTab DashboardTab \u00b6 [jvm]\\ class DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String , capabilities: Set < String >, services: Set < String >) : WebTab A WebTab with additional fields to bind to a specific Dashboard that has a tabs menu Constructors \u00b6 DashboardTab [jvm] fun DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String = \u201c\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf()) Properties \u00b6 Name Summary capabilities [jvm] val capabilities : Set < String > category [jvm] val category : String A title case category used to group tabs in the dashboard menu dashboard_slug [jvm] val dashboard_slug : String A slug that identifies which dashboard the tab is installed to, generated from a slugified Dashboard Annotation class simple name name [jvm] val name : String A title case name used in the dashboard menu for the link to the tab services [jvm] val services : Set < String > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"DashboardTab - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/#dashboardtab","text":"[jvm]\\ class DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String , capabilities: Set < String >, services: Set < String >) : WebTab A WebTab with additional fields to bind to a specific Dashboard that has a tabs menu","title":"DashboardTab"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/#constructors","text":"DashboardTab [jvm] fun DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String = \u201c\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/#properties","text":"Name Summary capabilities [jvm] val capabilities : Set < String > category [jvm] val category : String A title case category used to group tabs in the dashboard menu dashboard_slug [jvm] val dashboard_slug : String A slug that identifies which dashboard the tab is installed to, generated from a slugified Dashboard Annotation class simple name name [jvm] val name : String A title case name used in the dashboard menu for the link to the tab services [jvm] val services : Set < String > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/-dashboard-tab/","text":"// misk-admin / misk.web.dashboard / DashboardTab / DashboardTab DashboardTab \u00b6 [jvm]\\ fun DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String = \u201c\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"DashboardTab - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/-dashboard-tab/#dashboardtab","text":"[jvm]\\ fun DashboardTab (slug: String , url_path_prefix: String , dashboard_slug: String , name: String , category: String = \u201c\u201d, capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"DashboardTab"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/category/","text":"// misk-admin / misk.web.dashboard / DashboardTab / category category \u00b6 [jvm]\\ val category : String","title":"category - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/category/#category","text":"[jvm]\\ val category : String","title":"category"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/dashboard_slug/","text":"// misk-admin / misk.web.dashboard / DashboardTab / dashboard_slug dashboard_slug \u00b6 [jvm]\\ val dashboard_slug : String","title":"dashboard_slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/dashboard_slug/#dashboard_slug","text":"[jvm]\\ val dashboard_slug : String","title":"dashboard_slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/name/","text":"// misk-admin / misk.web.dashboard / DashboardTab / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider DashboardTabProvider \u00b6 [jvm]\\ class DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String , dashboard_slug: String , accessAnnotation: KClass <out Annotation >?, capabilities: Set < String >, services: Set < String >) : Provider< DashboardTab > Sets the tab\u2019s authentication capabilities/services by the multibound AccessAnnotationEntry Constructors \u00b6 DashboardTabProvider [jvm] fun DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, dashboard_slug: String , accessAnnotation: KClass <out Annotation >? = null, capabilities: Set < String > = setOf(), services: Set < String > = setOf()) Functions \u00b6 Name Summary get [jvm] open override fun get (): DashboardTab Properties \u00b6 Name Summary accessAnnotation [jvm] val accessAnnotation : KClass <out Annotation >? = null accessAnnotationEntries [jvm] @Inject lateinit var accessAnnotationEntries : List <AccessAnnotationEntry> capabilities [jvm] val capabilities : Set < String > category [jvm] val category : String dashboard_slug [jvm] val dashboard_slug : String name [jvm] val name : String services [jvm] val services : Set < String > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"DashboardTabProvider - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/#dashboardtabprovider","text":"[jvm]\\ class DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String , dashboard_slug: String , accessAnnotation: KClass <out Annotation >?, capabilities: Set < String >, services: Set < String >) : Provider< DashboardTab > Sets the tab\u2019s authentication capabilities/services by the multibound AccessAnnotationEntry","title":"DashboardTabProvider"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/#constructors","text":"DashboardTabProvider [jvm] fun DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, dashboard_slug: String , accessAnnotation: KClass <out Annotation >? = null, capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/#functions","text":"Name Summary get [jvm] open override fun get (): DashboardTab","title":"Functions"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/#properties","text":"Name Summary accessAnnotation [jvm] val accessAnnotation : KClass <out Annotation >? = null accessAnnotationEntries [jvm] @Inject lateinit var accessAnnotationEntries : List <AccessAnnotationEntry> capabilities [jvm] val capabilities : Set < String > category [jvm] val category : String dashboard_slug [jvm] val dashboard_slug : String name [jvm] val name : String services [jvm] val services : Set < String > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/-dashboard-tab-provider/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / DashboardTabProvider DashboardTabProvider \u00b6 [jvm]\\ fun DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, dashboard_slug: String , accessAnnotation: KClass <out Annotation >? = null, capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"DashboardTabProvider - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/-dashboard-tab-provider/#dashboardtabprovider","text":"[jvm]\\ fun DashboardTabProvider (slug: String , url_path_prefix: String , name: String , category: String = \u201cAdmin\u201d, dashboard_slug: String , accessAnnotation: KClass <out Annotation >? = null, capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"DashboardTabProvider"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/access-annotation-entries/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / accessAnnotationEntries accessAnnotationEntries \u00b6 [jvm]\\ @Inject lateinit var accessAnnotationEntries : List <AccessAnnotationEntry>","title":"accessAnnotationEntries - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/access-annotation-entries/#accessannotationentries","text":"[jvm]\\ @Inject lateinit var accessAnnotationEntries : List <AccessAnnotationEntry>","title":"accessAnnotationEntries"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/access-annotation/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / accessAnnotation accessAnnotation \u00b6 [jvm]\\ val accessAnnotation : KClass <out Annotation >? = null","title":"accessAnnotation - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/access-annotation/#accessannotation","text":"[jvm]\\ val accessAnnotation : KClass <out Annotation >? = null","title":"accessAnnotation"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/capabilities/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / capabilities capabilities \u00b6 [jvm]\\ val capabilities : Set < String >","title":"capabilities - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/capabilities/#capabilities","text":"[jvm]\\ val capabilities : Set < String >","title":"capabilities"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/category/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / category category \u00b6 [jvm]\\ val category : String","title":"category - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/category/#category","text":"[jvm]\\ val category : String","title":"category"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/dashboard_slug/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / dashboard_slug dashboard_slug \u00b6 [jvm]\\ val dashboard_slug : String","title":"dashboard_slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/dashboard_slug/#dashboard_slug","text":"[jvm]\\ val dashboard_slug : String","title":"dashboard_slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/get/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / get get \u00b6 [jvm]\\ open override fun get (): DashboardTab","title":"get - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/get/#get","text":"[jvm]\\ open override fun get (): DashboardTab","title":"get"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/name/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/services/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / services services \u00b6 [jvm]\\ val services : Set < String >","title":"services - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/services/#services","text":"[jvm]\\ val services : Set < String >","title":"services"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/slug/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / slug slug \u00b6 [jvm]\\ val slug : String","title":"slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/slug/#slug","text":"[jvm]\\ val slug : String","title":"slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/url_path_prefix/","text":"// misk-admin / misk.web.dashboard / DashboardTabProvider / url_path_prefix url_path_prefix \u00b6 [jvm]\\ val url_path_prefix : String","title":"url_path_prefix - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-tab-provider/url_path_prefix/#url_path_prefix","text":"[jvm]\\ val url_path_prefix : String","title":"url_path_prefix"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/","text":"// misk-admin / misk.web.dashboard / DashboardTheme DashboardTheme \u00b6 [jvm]\\ data class DashboardTheme (dashboard_slug: String , theme: MiskWebTheme ) Per dashboard customization of the navbar theme Constructors \u00b6 DashboardTheme [jvm] fun DashboardTheme (dashboard_slug: String , theme: MiskWebTheme ) Properties \u00b6 Name Summary dashboard_slug [jvm] val dashboard_slug : String theme [jvm] val theme : MiskWebTheme","title":"DashboardTheme - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/#dashboardtheme","text":"[jvm]\\ data class DashboardTheme (dashboard_slug: String , theme: MiskWebTheme ) Per dashboard customization of the navbar theme","title":"DashboardTheme"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/#constructors","text":"DashboardTheme [jvm] fun DashboardTheme (dashboard_slug: String , theme: MiskWebTheme )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/#properties","text":"Name Summary dashboard_slug [jvm] val dashboard_slug : String theme [jvm] val theme : MiskWebTheme","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/-dashboard-theme/","text":"// misk-admin / misk.web.dashboard / DashboardTheme / DashboardTheme DashboardTheme \u00b6 [jvm]\\ fun DashboardTheme (dashboard_slug: String , theme: MiskWebTheme )","title":"DashboardTheme - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/-dashboard-theme/#dashboardtheme","text":"[jvm]\\ fun DashboardTheme (dashboard_slug: String , theme: MiskWebTheme )","title":"DashboardTheme"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/dashboard_slug/","text":"// misk-admin / misk.web.dashboard / DashboardTheme / dashboard_slug dashboard_slug \u00b6 [jvm]\\ val dashboard_slug : String","title":"dashboard_slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/dashboard_slug/#dashboard_slug","text":"[jvm]\\ val dashboard_slug : String","title":"dashboard_slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/theme/","text":"// misk-admin / misk.web.dashboard / DashboardTheme / theme theme \u00b6 [jvm]\\ val theme : MiskWebTheme","title":"theme - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-dashboard-theme/theme/#theme","text":"[jvm]\\ val theme : MiskWebTheme","title":"theme"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/","text":"// misk-admin / misk.web.dashboard / EnvironmentToColorLookup EnvironmentToColorLookup \u00b6 [jvm]\\ data class EnvironmentToColorLookup (default: String , DEVELOPMENT: String , TESTING: String , STAGING: String , PRODUCTION: String ) Properties \u00b6 Name Summary default [jvm] val default : String DEVELOPMENT [jvm] val DEVELOPMENT : String PRODUCTION [jvm] val PRODUCTION : String STAGING [jvm] val STAGING : String TESTING [jvm] val TESTING : String","title":"EnvironmentToColorLookup - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/#environmenttocolorlookup","text":"[jvm]\\ data class EnvironmentToColorLookup (default: String , DEVELOPMENT: String , TESTING: String , STAGING: String , PRODUCTION: String )","title":"EnvironmentToColorLookup"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/#properties","text":"Name Summary default [jvm] val default : String DEVELOPMENT [jvm] val DEVELOPMENT : String PRODUCTION [jvm] val PRODUCTION : String STAGING [jvm] val STAGING : String TESTING [jvm] val TESTING : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-d-e-v-e-l-o-p-m-e-n-t/","text":"// misk-admin / misk.web.dashboard / EnvironmentToColorLookup / DEVELOPMENT DEVELOPMENT \u00b6 [jvm]\\ val DEVELOPMENT : String","title":"DEVELOPMENT - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-d-e-v-e-l-o-p-m-e-n-t/#development","text":"[jvm]\\ val DEVELOPMENT : String","title":"DEVELOPMENT"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-environment-to-color-lookup/","text":"// misk-admin / misk.web.dashboard / EnvironmentToColorLookup / EnvironmentToColorLookup EnvironmentToColorLookup \u00b6 [jvm]\\ fun EnvironmentToColorLookup (default: String , DEVELOPMENT: String , TESTING: String , STAGING: String , PRODUCTION: String )","title":"EnvironmentToColorLookup - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-environment-to-color-lookup/#environmenttocolorlookup","text":"[jvm]\\ fun EnvironmentToColorLookup (default: String , DEVELOPMENT: String , TESTING: String , STAGING: String , PRODUCTION: String )","title":"EnvironmentToColorLookup"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-p-r-o-d-u-c-t-i-o-n/","text":"// misk-admin / misk.web.dashboard / EnvironmentToColorLookup / PRODUCTION PRODUCTION \u00b6 [jvm]\\ val PRODUCTION : String","title":"PRODUCTION - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-p-r-o-d-u-c-t-i-o-n/#production","text":"[jvm]\\ val PRODUCTION : String","title":"PRODUCTION"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-s-t-a-g-i-n-g/","text":"// misk-admin / misk.web.dashboard / EnvironmentToColorLookup / STAGING STAGING \u00b6 [jvm]\\ val STAGING : String","title":"STAGING - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-s-t-a-g-i-n-g/#staging","text":"[jvm]\\ val STAGING : String","title":"STAGING"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-t-e-s-t-i-n-g/","text":"// misk-admin / misk.web.dashboard / EnvironmentToColorLookup / TESTING TESTING \u00b6 [jvm]\\ val TESTING : String","title":"TESTING - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/-t-e-s-t-i-n-g/#testing","text":"[jvm]\\ val TESTING : String","title":"TESTING"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/default/","text":"// misk-admin / misk.web.dashboard / EnvironmentToColorLookup / default default \u00b6 [jvm]\\ val default : String","title":"default - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-environment-to-color-lookup/default/#default","text":"[jvm]\\ val default : String","title":"default"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/","text":"// misk-admin / misk.web.dashboard / MiskWebColor MiskWebColor \u00b6 [jvm]\\ enum MiskWebColor : Enum < MiskWebColor > Matches the Misk-Web Color enum in @misk/core/src/utilities/css.ts Entries \u00b6 PLATINUM [jvm] PLATINUM (\u201c#cecece\u201d) SILVER [jvm] SILVER (\u201c#9da2a6\u201d) CADET [jvm] CADET (\u201c#29333a\u201d) WHITE [jvm] WHITE (\u201cwhite\u201d) ACCENT [jvm] ACCENT (\u201c#eceef1\u201d) GRAY [jvm] GRAY (\u201c#7a7e82\u201d) TEXT [jvm] TEXT (\u201c#3e4348\u201d) CHARCOAL [jvm] CHARCOAL (\u201c#1b2126\u201d) ROSE [jvm] ROSE (\u201c#c14f70\u201d) PLUM [jvm] PLUM (\u201c#a1499c\u201d) PURPLE [jvm] PURPLE (\u201c#7250a1\u201d) INDIGO [jvm] INDIGO (\u201c#5174d1\u201d) BLUE [jvm] BLUE (\u201c#49a4d5\u201d) TEAL [jvm] TEAL (\u201c#00c1ae\u201d) GREEN [jvm] GREEN (\u201c#0bb634\u201d) LIME [jvm] LIME (\u201c#77ba1b\u201d) YELLOW [jvm] YELLOW (\u201c#edb312\u201d) ORANGE [jvm] ORANGE (\u201c#f86932\u201d) RED [jvm] RED (\u201c#df3320\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"MiskWebColor - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/#miskwebcolor","text":"[jvm]\\ enum MiskWebColor : Enum < MiskWebColor > Matches the Misk-Web Color enum in @misk/core/src/utilities/css.ts","title":"MiskWebColor"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/#entries","text":"PLATINUM [jvm] PLATINUM (\u201c#cecece\u201d) SILVER [jvm] SILVER (\u201c#9da2a6\u201d) CADET [jvm] CADET (\u201c#29333a\u201d) WHITE [jvm] WHITE (\u201cwhite\u201d) ACCENT [jvm] ACCENT (\u201c#eceef1\u201d) GRAY [jvm] GRAY (\u201c#7a7e82\u201d) TEXT [jvm] TEXT (\u201c#3e4348\u201d) CHARCOAL [jvm] CHARCOAL (\u201c#1b2126\u201d) ROSE [jvm] ROSE (\u201c#c14f70\u201d) PLUM [jvm] PLUM (\u201c#a1499c\u201d) PURPLE [jvm] PURPLE (\u201c#7250a1\u201d) INDIGO [jvm] INDIGO (\u201c#5174d1\u201d) BLUE [jvm] BLUE (\u201c#49a4d5\u201d) TEAL [jvm] TEAL (\u201c#00c1ae\u201d) GREEN [jvm] GREEN (\u201c#0bb634\u201d) LIME [jvm] LIME (\u201c#77ba1b\u201d) YELLOW [jvm] YELLOW (\u201c#edb312\u201d) ORANGE [jvm] ORANGE (\u201c#f86932\u201d) RED [jvm] RED (\u201c#df3320\u201d)","title":"Entries"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/hex-color/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / hexColor hexColor \u00b6 [jvm]\\ val hexColor : String","title":"hexColor - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/hex-color/#hexcolor","text":"[jvm]\\ val hexColor : String","title":"hexColor"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-a-c-c-e-n-t/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / ACCENT ACCENT \u00b6 [jvm]\\ ACCENT (\u201c#eceef1\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"ACCENT - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-a-c-c-e-n-t/#accent","text":"[jvm]\\ ACCENT (\u201c#eceef1\u201d)","title":"ACCENT"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-a-c-c-e-n-t/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-b-l-u-e/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / BLUE BLUE \u00b6 [jvm]\\ BLUE (\u201c#49a4d5\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"BLUE - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-b-l-u-e/#blue","text":"[jvm]\\ BLUE (\u201c#49a4d5\u201d)","title":"BLUE"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-b-l-u-e/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-c-a-d-e-t/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / CADET CADET \u00b6 [jvm]\\ CADET (\u201c#29333a\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"CADET - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-c-a-d-e-t/#cadet","text":"[jvm]\\ CADET (\u201c#29333a\u201d)","title":"CADET"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-c-a-d-e-t/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-c-h-a-r-c-o-a-l/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / CHARCOAL CHARCOAL \u00b6 [jvm]\\ CHARCOAL (\u201c#1b2126\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"CHARCOAL - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-c-h-a-r-c-o-a-l/#charcoal","text":"[jvm]\\ CHARCOAL (\u201c#1b2126\u201d)","title":"CHARCOAL"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-c-h-a-r-c-o-a-l/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-g-r-a-y/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / GRAY GRAY \u00b6 [jvm]\\ GRAY (\u201c#7a7e82\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"GRAY - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-g-r-a-y/#gray","text":"[jvm]\\ GRAY (\u201c#7a7e82\u201d)","title":"GRAY"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-g-r-a-y/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-g-r-e-e-n/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / GREEN GREEN \u00b6 [jvm]\\ GREEN (\u201c#0bb634\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"GREEN - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-g-r-e-e-n/#green","text":"[jvm]\\ GREEN (\u201c#0bb634\u201d)","title":"GREEN"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-g-r-e-e-n/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-i-n-d-i-g-o/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / INDIGO INDIGO \u00b6 [jvm]\\ INDIGO (\u201c#5174d1\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"INDIGO - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-i-n-d-i-g-o/#indigo","text":"[jvm]\\ INDIGO (\u201c#5174d1\u201d)","title":"INDIGO"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-i-n-d-i-g-o/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-l-i-m-e/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / LIME LIME \u00b6 [jvm]\\ LIME (\u201c#77ba1b\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"LIME - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-l-i-m-e/#lime","text":"[jvm]\\ LIME (\u201c#77ba1b\u201d)","title":"LIME"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-l-i-m-e/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-o-r-a-n-g-e/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / ORANGE ORANGE \u00b6 [jvm]\\ ORANGE (\u201c#f86932\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"ORANGE - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-o-r-a-n-g-e/#orange","text":"[jvm]\\ ORANGE (\u201c#f86932\u201d)","title":"ORANGE"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-o-r-a-n-g-e/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-l-a-t-i-n-u-m/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / PLATINUM PLATINUM \u00b6 [jvm]\\ PLATINUM (\u201c#cecece\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PLATINUM - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-l-a-t-i-n-u-m/#platinum","text":"[jvm]\\ PLATINUM (\u201c#cecece\u201d)","title":"PLATINUM"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-l-a-t-i-n-u-m/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-l-u-m/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / PLUM PLUM \u00b6 [jvm]\\ PLUM (\u201c#a1499c\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PLUM - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-l-u-m/#plum","text":"[jvm]\\ PLUM (\u201c#a1499c\u201d)","title":"PLUM"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-l-u-m/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-u-r-p-l-e/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / PURPLE PURPLE \u00b6 [jvm]\\ PURPLE (\u201c#7250a1\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PURPLE - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-u-r-p-l-e/#purple","text":"[jvm]\\ PURPLE (\u201c#7250a1\u201d)","title":"PURPLE"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-p-u-r-p-l-e/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-r-e-d/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / RED RED \u00b6 [jvm]\\ RED (\u201c#df3320\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"RED - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-r-e-d/#red","text":"[jvm]\\ RED (\u201c#df3320\u201d)","title":"RED"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-r-e-d/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-r-o-s-e/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / ROSE ROSE \u00b6 [jvm]\\ ROSE (\u201c#c14f70\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"ROSE - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-r-o-s-e/#rose","text":"[jvm]\\ ROSE (\u201c#c14f70\u201d)","title":"ROSE"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-r-o-s-e/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-s-i-l-v-e-r/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / SILVER SILVER \u00b6 [jvm]\\ SILVER (\u201c#9da2a6\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"SILVER - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-s-i-l-v-e-r/#silver","text":"[jvm]\\ SILVER (\u201c#9da2a6\u201d)","title":"SILVER"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-s-i-l-v-e-r/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-t-e-a-l/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / TEAL TEAL \u00b6 [jvm]\\ TEAL (\u201c#00c1ae\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"TEAL - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-t-e-a-l/#teal","text":"[jvm]\\ TEAL (\u201c#00c1ae\u201d)","title":"TEAL"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-t-e-a-l/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-t-e-x-t/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / TEXT TEXT \u00b6 [jvm]\\ TEXT (\u201c#3e4348\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"TEXT - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-t-e-x-t/#text","text":"[jvm]\\ TEXT (\u201c#3e4348\u201d)","title":"TEXT"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-t-e-x-t/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-w-h-i-t-e/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / WHITE WHITE \u00b6 [jvm]\\ WHITE (\u201cwhite\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"WHITE - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-w-h-i-t-e/#white","text":"[jvm]\\ WHITE (\u201cwhite\u201d)","title":"WHITE"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-w-h-i-t-e/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-y-e-l-l-o-w/","text":"// misk-admin / misk.web.dashboard / MiskWebColor / YELLOW YELLOW \u00b6 [jvm]\\ YELLOW (\u201c#edb312\u201d) Properties \u00b6 Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"YELLOW - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-y-e-l-l-o-w/#yellow","text":"[jvm]\\ YELLOW (\u201c#edb312\u201d)","title":"YELLOW"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-color/-y-e-l-l-o-w/#properties","text":"Name Summary hexColor [jvm] val hexColor : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme MiskWebTheme \u00b6 [jvm]\\ data class MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String ) Matches the Misk-Web Theme interface in @misk/core/src/utilities/theme.ts Constructors \u00b6 MiskWebTheme [jvm] fun MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary bannerLinkHover [jvm] val bannerLinkHover : String bannerText [jvm] val bannerText : String button [jvm] val button : String buttonHover [jvm] val buttonHover : String categoryText [jvm] val categoryText : String environmentToColor [jvm] val environmentToColor : EnvironmentToColorLookup navbarBackground [jvm] val navbarBackground : String navbarLinkHover [jvm] val navbarLinkHover : String navbarText [jvm] val navbarText : String","title":"MiskWebTheme - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/#miskwebtheme","text":"[jvm]\\ data class MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String ) Matches the Misk-Web Theme interface in @misk/core/src/utilities/theme.ts","title":"MiskWebTheme"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/#constructors","text":"MiskWebTheme [jvm] fun MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/#properties","text":"Name Summary bannerLinkHover [jvm] val bannerLinkHover : String bannerText [jvm] val bannerText : String button [jvm] val button : String buttonHover [jvm] val buttonHover : String categoryText [jvm] val categoryText : String environmentToColor [jvm] val environmentToColor : EnvironmentToColorLookup navbarBackground [jvm] val navbarBackground : String navbarLinkHover [jvm] val navbarLinkHover : String navbarText [jvm] val navbarText : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/-misk-web-theme/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / MiskWebTheme MiskWebTheme \u00b6 [jvm]\\ fun MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String )","title":"MiskWebTheme - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/-misk-web-theme/#miskwebtheme","text":"[jvm]\\ fun MiskWebTheme (bannerLinkHover: String , bannerText: String , button: String , buttonHover: String , categoryText: String , environmentToColor: EnvironmentToColorLookup , navbarBackground: String , navbarLinkHover: String , navbarText: String )","title":"MiskWebTheme"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/banner-link-hover/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / bannerLinkHover bannerLinkHover \u00b6 [jvm]\\ val bannerLinkHover : String","title":"bannerLinkHover - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/banner-link-hover/#bannerlinkhover","text":"[jvm]\\ val bannerLinkHover : String","title":"bannerLinkHover"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/banner-text/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / bannerText bannerText \u00b6 [jvm]\\ val bannerText : String","title":"bannerText - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/banner-text/#bannertext","text":"[jvm]\\ val bannerText : String","title":"bannerText"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/button-hover/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / buttonHover buttonHover \u00b6 [jvm]\\ val buttonHover : String","title":"buttonHover - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/button-hover/#buttonhover","text":"[jvm]\\ val buttonHover : String","title":"buttonHover"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/button/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / button button \u00b6 [jvm]\\ val button : String","title":"button - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/button/#button","text":"[jvm]\\ val button : String","title":"button"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/category-text/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / categoryText categoryText \u00b6 [jvm]\\ val categoryText : String","title":"categoryText - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/category-text/#categorytext","text":"[jvm]\\ val categoryText : String","title":"categoryText"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/environment-to-color/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / environmentToColor environmentToColor \u00b6 [jvm]\\ val environmentToColor : EnvironmentToColorLookup","title":"environmentToColor - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/environment-to-color/#environmenttocolor","text":"[jvm]\\ val environmentToColor : EnvironmentToColorLookup","title":"environmentToColor"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/navbar-background/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / navbarBackground navbarBackground \u00b6 [jvm]\\ val navbarBackground : String","title":"navbarBackground - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/navbar-background/#navbarbackground","text":"[jvm]\\ val navbarBackground : String","title":"navbarBackground"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/navbar-link-hover/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / navbarLinkHover navbarLinkHover \u00b6 [jvm]\\ val navbarLinkHover : String","title":"navbarLinkHover - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/navbar-link-hover/#navbarlinkhover","text":"[jvm]\\ val navbarLinkHover : String","title":"navbarLinkHover"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/navbar-text/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / navbarText navbarText \u00b6 [jvm]\\ val navbarText : String","title":"navbarText - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/navbar-text/#navbartext","text":"[jvm]\\ val navbarText : String","title":"navbarText"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/-companion/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary DEFAULT_THEME [jvm] val DEFAULT_THEME : MiskWebTheme","title":"Companion - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/-companion/#properties","text":"Name Summary DEFAULT_THEME [jvm] val DEFAULT_THEME : MiskWebTheme","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/-companion/-d-e-f-a-u-l-t_-t-h-e-m-e/","text":"// misk-admin / misk.web.dashboard / MiskWebTheme / Companion / DEFAULT_THEME DEFAULT_THEME \u00b6 [jvm]\\ val DEFAULT_THEME : MiskWebTheme","title":"DEFAULT_THEME - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-misk-web-theme/-companion/-d-e-f-a-u-l-t_-t-h-e-m-e/#default_theme","text":"[jvm]\\ val DEFAULT_THEME : MiskWebTheme","title":"DEFAULT_THEME"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/","text":"// misk-admin / misk.web.dashboard / WebTab WebTab \u00b6 [jvm]\\ abstract class WebTab (slug: String , url_path_prefix: String , capabilities: Set < String >, services: Set < String >) : ValidWebEntry Properties \u00b6 Name Summary capabilities [jvm] val capabilities : Set < String > services [jvm] val services : Set < String > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String Inheritors \u00b6 Name DashboardTab","title":"WebTab - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/#webtab","text":"[jvm]\\ abstract class WebTab (slug: String , url_path_prefix: String , capabilities: Set < String >, services: Set < String >) : ValidWebEntry","title":"WebTab"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/#properties","text":"Name Summary capabilities [jvm] val capabilities : Set < String > services [jvm] val services : Set < String > slug [jvm] val slug : String url_path_prefix [jvm] val url_path_prefix : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/#inheritors","text":"Name DashboardTab","title":"Inheritors"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/-web-tab/","text":"// misk-admin / misk.web.dashboard / WebTab / WebTab WebTab \u00b6 [jvm]\\ fun WebTab (slug: String , url_path_prefix: String , capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"WebTab - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/-web-tab/#webtab","text":"[jvm]\\ fun WebTab (slug: String , url_path_prefix: String , capabilities: Set < String > = setOf(), services: Set < String > = setOf())","title":"WebTab"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/capabilities/","text":"// misk-admin / misk.web.dashboard / WebTab / capabilities capabilities \u00b6 [jvm]\\ val capabilities : Set < String >","title":"capabilities - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/capabilities/#capabilities","text":"[jvm]\\ val capabilities : Set < String >","title":"capabilities"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/services/","text":"// misk-admin / misk.web.dashboard / WebTab / services services \u00b6 [jvm]\\ val services : Set < String >","title":"services - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab/services/#services","text":"[jvm]\\ val services : Set < String >","title":"services"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/","text":"// misk-admin / misk.web.dashboard / WebTabResourceModule WebTabResourceModule \u00b6 [jvm]\\ class WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String , resourcePath: String ) : KAbstractModule Declare how to serve the resources for a WebTab (JS, HTML, CSS\u2026) In Development environment, requests are proxied through to a local running build server. In all other environments, resource requests are served from the classpath. Constructors \u00b6 WebTabResourceModule [jvm] fun WebTabResourceModule (deployment: Deployment, slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d) WebTabResourceModule [jvm] fun WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder resourcePath [jvm] val resourcePath : String JVM path for non-Development environment static resources (includes classpath:/ prefix) slug [jvm] val slug : String A unique slug to identify the tab namespace, it must match the tab\u2019s corresponding DashboardTab multibinding url_path_prefix [jvm] val url_path_prefix : String URL namespace used to determine where to route requests with that url prefix By Misk-Web convention, the prefix for tabs is /_tab/{slug}/ to prevent namespace collisions with dashboard urls such as /_admin/ or /app/ since path routing is by url prefix. web_proxy_url [jvm] val web_proxy_url : String a fully qualified url for the development build server (includes http:// prefix)","title":"WebTabResourceModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/#webtabresourcemodule","text":"[jvm]\\ class WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String , resourcePath: String ) : KAbstractModule Declare how to serve the resources for a WebTab (JS, HTML, CSS\u2026) In Development environment, requests are proxied through to a local running build server. In all other environments, resource requests are served from the classpath.","title":"WebTabResourceModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/#constructors","text":"WebTabResourceModule [jvm] fun WebTabResourceModule (deployment: Deployment, slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d) WebTabResourceModule [jvm] fun WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d)","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/#properties","text":"Name Summary binder [jvm] val binder : Binder resourcePath [jvm] val resourcePath : String JVM path for non-Development environment static resources (includes classpath:/ prefix) slug [jvm] val slug : String A unique slug to identify the tab namespace, it must match the tab\u2019s corresponding DashboardTab multibinding url_path_prefix [jvm] val url_path_prefix : String URL namespace used to determine where to route requests with that url prefix By Misk-Web convention, the prefix for tabs is /_tab/{slug}/ to prevent namespace collisions with dashboard urls such as /_admin/ or /app/ since path routing is by url prefix. web_proxy_url [jvm] val web_proxy_url : String a fully qualified url for the development build server (includes http:// prefix)","title":"Properties"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/-web-tab-resource-module/","text":"// misk-admin / misk.web.dashboard / WebTabResourceModule / WebTabResourceModule WebTabResourceModule \u00b6 [jvm]\\ fun WebTabResourceModule (deployment: Deployment, slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d) fun WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d)","title":"WebTabResourceModule - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/-web-tab-resource-module/#webtabresourcemodule","text":"[jvm]\\ fun WebTabResourceModule (deployment: Deployment, slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d) fun WebTabResourceModule (isDevelopment: Boolean , slug: String , web_proxy_url: String , url_path_prefix: String = \u201c/_tab/\u201d, resourcePath: String = \u201cclasspath:/web/_tab/\u201d)","title":"WebTabResourceModule"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/resource-path/","text":"// misk-admin / misk.web.dashboard / WebTabResourceModule / resourcePath resourcePath \u00b6 [jvm]\\ val resourcePath : String","title":"resourcePath - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/resource-path/#resourcepath","text":"[jvm]\\ val resourcePath : String","title":"resourcePath"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/slug/","text":"// misk-admin / misk.web.dashboard / WebTabResourceModule / slug slug \u00b6 [jvm]\\ val slug : String","title":"slug - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/slug/#slug","text":"[jvm]\\ val slug : String","title":"slug"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/url_path_prefix/","text":"// misk-admin / misk.web.dashboard / WebTabResourceModule / url_path_prefix url_path_prefix \u00b6 [jvm]\\ val url_path_prefix : String","title":"url_path_prefix - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/url_path_prefix/#url_path_prefix","text":"[jvm]\\ val url_path_prefix : String","title":"url_path_prefix"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/web_proxy_url/","text":"// misk-admin / misk.web.dashboard / WebTabResourceModule / web_proxy_url web_proxy_url \u00b6 [jvm]\\ val web_proxy_url : String","title":"web_proxy_url - Misk"},{"location":"0.x/misk-admin/misk.web.dashboard/-web-tab-resource-module/web_proxy_url/#web_proxy_url","text":"[jvm]\\ val web_proxy_url : String","title":"web_proxy_url"},{"location":"0.x/misk-admin/misk.web.metadata/","text":"// misk-admin / misk.web.metadata Package misk.web.metadata \u00b6 Types \u00b6 Name Summary DashboardMetadataAction [jvm] @Singleton class DashboardMetadataAction @Injectconstructor : WebAction Serve metadata related to a Misk-Web Dashboard ServiceMetadataAction [jvm] @Singleton class ServiceMetadataAction @Injectconstructor(optionalBinder: ServiceMetadataAction.OptionalBinder ) : WebAction Service Metadata used for front end dashboards including App Name and Misk.Deployment name","title":"Package misk.web.metadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/#package-miskwebmetadata","text":"","title":"Package misk.web.metadata"},{"location":"0.x/misk-admin/misk.web.metadata/#types","text":"Name Summary DashboardMetadataAction [jvm] @Singleton class DashboardMetadataAction @Injectconstructor : WebAction Serve metadata related to a Misk-Web Dashboard ServiceMetadataAction [jvm] @Singleton class ServiceMetadataAction @Injectconstructor(optionalBinder: ServiceMetadataAction.OptionalBinder ) : WebAction Service Metadata used for front end dashboards including App Name and Misk.Deployment name","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction DashboardMetadataAction \u00b6 [jvm]\\ @Singleton class DashboardMetadataAction @Injectconstructor : WebAction Serve metadata related to a Misk-Web Dashboard Multiple dashboards with Misk-Web tabs can be bound by binding tabs to a different Dashboard Annotation. For example, all tabs used in the Misk Admin Dashboard are bound with the AdminDashboard annotation; tabs used in a service front end app, like Backfila, would be bound with a \u201cBackfilaApp\u201d annotation. Dashboard related metadata is multibound with the slug that corresponds to a Dashboard Annotation. DashboardMetadataAction returns only the metadata for the requested dashboard. Constructors \u00b6 DashboardMetadataAction [jvm] @Inject fun DashboardMetadataAction () Types \u00b6 Name Summary DashboardMetadata [jvm] data class DashboardMetadata (home_url: String , navbar_items: List < String >, navbar_status: String , tabs: List < DashboardTab >, theme: MiskWebTheme ?) Response [jvm] data class Response (dashboardMetadata: DashboardMetadataAction.DashboardMetadata ) Functions \u00b6 Name Summary getAll [jvm] fun getAll (dashboard_slug: String ): DashboardMetadataAction.Response Properties \u00b6 Name Summary callerProvider [jvm] @Inject lateinit var callerProvider : @ JvmSuppressWildcards ActionScoped<MiskCaller?>","title":"DashboardMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/#dashboardmetadataaction","text":"[jvm]\\ @Singleton class DashboardMetadataAction @Injectconstructor : WebAction Serve metadata related to a Misk-Web Dashboard Multiple dashboards with Misk-Web tabs can be bound by binding tabs to a different Dashboard Annotation. For example, all tabs used in the Misk Admin Dashboard are bound with the AdminDashboard annotation; tabs used in a service front end app, like Backfila, would be bound with a \u201cBackfilaApp\u201d annotation. Dashboard related metadata is multibound with the slug that corresponds to a Dashboard Annotation. DashboardMetadataAction returns only the metadata for the requested dashboard.","title":"DashboardMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/#constructors","text":"DashboardMetadataAction [jvm] @Inject fun DashboardMetadataAction ()","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/#types","text":"Name Summary DashboardMetadata [jvm] data class DashboardMetadata (home_url: String , navbar_items: List < String >, navbar_status: String , tabs: List < DashboardTab >, theme: MiskWebTheme ?) Response [jvm] data class Response (dashboardMetadata: DashboardMetadataAction.DashboardMetadata )","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/#functions","text":"Name Summary getAll [jvm] fun getAll (dashboard_slug: String ): DashboardMetadataAction.Response","title":"Functions"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/#properties","text":"Name Summary callerProvider [jvm] @Inject lateinit var callerProvider : @ JvmSuppressWildcards ActionScoped<MiskCaller?>","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata-action/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadataAction DashboardMetadataAction \u00b6 [jvm]\\ @Inject fun DashboardMetadataAction ()","title":"DashboardMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata-action/#dashboardmetadataaction","text":"[jvm]\\ @Inject fun DashboardMetadataAction ()","title":"DashboardMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/caller-provider/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / callerProvider callerProvider \u00b6 [jvm]\\ @Inject lateinit var callerProvider : @ JvmSuppressWildcards ActionScoped<MiskCaller?>","title":"callerProvider - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/caller-provider/#callerprovider","text":"[jvm]\\ @Inject lateinit var callerProvider : @ JvmSuppressWildcards ActionScoped<MiskCaller?>","title":"callerProvider"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/get-all/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / getAll getAll \u00b6 [jvm]\\ fun getAll (dashboard_slug: String ): DashboardMetadataAction.Response","title":"getAll - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/get-all/#getall","text":"[jvm]\\ fun getAll (dashboard_slug: String ): DashboardMetadataAction.Response","title":"getAll"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadata DashboardMetadata \u00b6 [jvm]\\ data class DashboardMetadata (home_url: String , navbar_items: List < String >, navbar_status: String , tabs: List < DashboardTab >, theme: MiskWebTheme ?) Properties \u00b6 Name Summary home_url [jvm] val home_url : String navbar_items [jvm] val navbar_items : List < String > navbar_status [jvm] val navbar_status : String tabs [jvm] val tabs : List < DashboardTab > theme [jvm] val theme : MiskWebTheme ? = null If null, uses default theme that ships with Misk-Web","title":"DashboardMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/#dashboardmetadata","text":"[jvm]\\ data class DashboardMetadata (home_url: String , navbar_items: List < String >, navbar_status: String , tabs: List < DashboardTab >, theme: MiskWebTheme ?)","title":"DashboardMetadata"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/#properties","text":"Name Summary home_url [jvm] val home_url : String navbar_items [jvm] val navbar_items : List < String > navbar_status [jvm] val navbar_status : String tabs [jvm] val tabs : List < DashboardTab > theme [jvm] val theme : MiskWebTheme ? = null If null, uses default theme that ships with Misk-Web","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/-dashboard-metadata/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadata / DashboardMetadata DashboardMetadata \u00b6 [jvm]\\ fun DashboardMetadata (home_url: String = \u201c\u201d, navbar_items: List < String > = listOf(), navbar_status: String = \u201c\u201d, tabs: List < DashboardTab > = listOf(), theme: MiskWebTheme ? = null)","title":"DashboardMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/-dashboard-metadata/#dashboardmetadata","text":"[jvm]\\ fun DashboardMetadata (home_url: String = \u201c\u201d, navbar_items: List < String > = listOf(), navbar_status: String = \u201c\u201d, tabs: List < DashboardTab > = listOf(), theme: MiskWebTheme ? = null)","title":"DashboardMetadata"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/home_url/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadata / home_url home_url \u00b6 [jvm]\\ val home_url : String","title":"home_url - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/home_url/#home_url","text":"[jvm]\\ val home_url : String","title":"home_url"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/navbar_items/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadata / navbar_items navbar_items \u00b6 [jvm]\\ val navbar_items : List < String >","title":"navbar_items - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/navbar_items/#navbar_items","text":"[jvm]\\ val navbar_items : List < String >","title":"navbar_items"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/navbar_status/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadata / navbar_status navbar_status \u00b6 [jvm]\\ val navbar_status : String","title":"navbar_status - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/navbar_status/#navbar_status","text":"[jvm]\\ val navbar_status : String","title":"navbar_status"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/tabs/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadata / tabs tabs \u00b6 [jvm]\\ val tabs : List < DashboardTab >","title":"tabs - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/tabs/#tabs","text":"[jvm]\\ val tabs : List < DashboardTab >","title":"tabs"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/theme/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / DashboardMetadata / theme theme \u00b6 [jvm]\\ val theme : MiskWebTheme ? = null If null, uses default theme that ships with Misk-Web","title":"theme - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-dashboard-metadata/theme/#theme","text":"[jvm]\\ val theme : MiskWebTheme ? = null If null, uses default theme that ships with Misk-Web","title":"theme"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-response/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / Response Response \u00b6 [jvm]\\ data class Response (dashboardMetadata: DashboardMetadataAction.DashboardMetadata ) Properties \u00b6 Name Summary dashboardMetadata [jvm] val dashboardMetadata : DashboardMetadataAction.DashboardMetadata","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-response/#response","text":"[jvm]\\ data class Response (dashboardMetadata: DashboardMetadataAction.DashboardMetadata )","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-response/#properties","text":"Name Summary dashboardMetadata [jvm] val dashboardMetadata : DashboardMetadataAction.DashboardMetadata","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-response/-response/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / Response / Response Response \u00b6 [jvm]\\ fun Response (dashboardMetadata: DashboardMetadataAction.DashboardMetadata = DashboardMetadata())","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-response/-response/#response","text":"[jvm]\\ fun Response (dashboardMetadata: DashboardMetadataAction.DashboardMetadata = DashboardMetadata())","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-response/dashboard-metadata/","text":"// misk-admin / misk.web.metadata / DashboardMetadataAction / Response / dashboardMetadata dashboardMetadata \u00b6 [jvm]\\ val dashboardMetadata : DashboardMetadataAction.DashboardMetadata","title":"dashboardMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-dashboard-metadata-action/-response/dashboard-metadata/#dashboardmetadata","text":"[jvm]\\ val dashboardMetadata : DashboardMetadataAction.DashboardMetadata","title":"dashboardMetadata"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction ServiceMetadataAction \u00b6 [jvm]\\ @Singleton class ServiceMetadataAction @Injectconstructor(optionalBinder: ServiceMetadataAction.OptionalBinder ) : WebAction Service Metadata used for front end dashboards including App Name and Misk.Deployment name Constructors \u00b6 ServiceMetadataAction [jvm] @Inject fun ServiceMetadataAction (optionalBinder: ServiceMetadataAction.OptionalBinder ) Types \u00b6 Name Summary OptionalBinder [jvm] @Singleton class OptionalBinder @Injectconstructor(appName: String , deployment: Deployment) https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor Response [jvm] data class Response (serviceMetadata: ServiceMetadataAction.ServiceMetadata ) ServiceMetadata [jvm] data class ServiceMetadata (app_name: String , environment: String ) Functions \u00b6 Name Summary getAll [jvm] fun getAll (): ServiceMetadataAction.Response","title":"ServiceMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/#servicemetadataaction","text":"[jvm]\\ @Singleton class ServiceMetadataAction @Injectconstructor(optionalBinder: ServiceMetadataAction.OptionalBinder ) : WebAction Service Metadata used for front end dashboards including App Name and Misk.Deployment name","title":"ServiceMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/#constructors","text":"ServiceMetadataAction [jvm] @Inject fun ServiceMetadataAction (optionalBinder: ServiceMetadataAction.OptionalBinder )","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/#types","text":"Name Summary OptionalBinder [jvm] @Singleton class OptionalBinder @Injectconstructor(appName: String , deployment: Deployment) https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor Response [jvm] data class Response (serviceMetadata: ServiceMetadataAction.ServiceMetadata ) ServiceMetadata [jvm] data class ServiceMetadata (app_name: String , environment: String )","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/#functions","text":"Name Summary getAll [jvm] fun getAll (): ServiceMetadataAction.Response","title":"Functions"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata-action/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / ServiceMetadataAction ServiceMetadataAction \u00b6 [jvm]\\ @Inject fun ServiceMetadataAction (optionalBinder: ServiceMetadataAction.OptionalBinder )","title":"ServiceMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata-action/#servicemetadataaction","text":"[jvm]\\ @Inject fun ServiceMetadataAction (optionalBinder: ServiceMetadataAction.OptionalBinder )","title":"ServiceMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/get-all/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / getAll getAll \u00b6 [jvm]\\ fun getAll (): ServiceMetadataAction.Response","title":"getAll - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/get-all/#getall","text":"[jvm]\\ fun getAll (): ServiceMetadataAction.Response","title":"getAll"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / OptionalBinder OptionalBinder \u00b6 [jvm]\\ @Singleton class OptionalBinder @Injectconstructor(appName: String , deployment: Deployment) https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor Constructors \u00b6 OptionalBinder [jvm] @Inject fun OptionalBinder (appName: String , deployment: Deployment) Properties \u00b6 Name Summary appName [jvm] val appName : String serviceMetadata [jvm] @Inject(optional = true) var serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"OptionalBinder - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/#optionalbinder","text":"[jvm]\\ @Singleton class OptionalBinder @Injectconstructor(appName: String , deployment: Deployment) https://github.com/google/guice/wiki/FrequentlyAskedQuestions#how-can-i-inject-optional-parameters-into-a-constructor","title":"OptionalBinder"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/#constructors","text":"OptionalBinder [jvm] @Inject fun OptionalBinder (appName: String , deployment: Deployment)","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/#properties","text":"Name Summary appName [jvm] val appName : String serviceMetadata [jvm] @Inject(optional = true) var serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/-optional-binder/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / OptionalBinder / OptionalBinder OptionalBinder \u00b6 [jvm]\\ @Inject fun OptionalBinder (appName: String , deployment: Deployment)","title":"OptionalBinder - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/-optional-binder/#optionalbinder","text":"[jvm]\\ @Inject fun OptionalBinder (appName: String , deployment: Deployment)","title":"OptionalBinder"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/app-name/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / OptionalBinder / appName appName \u00b6 [jvm]\\ val appName : String","title":"appName - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/app-name/#appname","text":"[jvm]\\ val appName : String","title":"appName"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/service-metadata/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / OptionalBinder / serviceMetadata serviceMetadata \u00b6 [jvm]\\ @Inject(optional = true) var serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"serviceMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-optional-binder/service-metadata/#servicemetadata","text":"[jvm]\\ @Inject(optional = true) var serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"serviceMetadata"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-response/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / Response Response \u00b6 [jvm]\\ data class Response (serviceMetadata: ServiceMetadataAction.ServiceMetadata ) Properties \u00b6 Name Summary serviceMetadata [jvm] val serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-response/#response","text":"[jvm]\\ data class Response (serviceMetadata: ServiceMetadataAction.ServiceMetadata )","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-response/#properties","text":"Name Summary serviceMetadata [jvm] val serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-response/-response/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / Response / Response Response \u00b6 [jvm]\\ fun Response (serviceMetadata: ServiceMetadataAction.ServiceMetadata )","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-response/-response/#response","text":"[jvm]\\ fun Response (serviceMetadata: ServiceMetadataAction.ServiceMetadata )","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-response/service-metadata/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / Response / serviceMetadata serviceMetadata \u00b6 [jvm]\\ val serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"serviceMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-response/service-metadata/#servicemetadata","text":"[jvm]\\ val serviceMetadata : ServiceMetadataAction.ServiceMetadata","title":"serviceMetadata"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / ServiceMetadata ServiceMetadata \u00b6 [jvm]\\ data class ServiceMetadata (app_name: String , environment: String ) Properties \u00b6 Name Summary app_name [jvm] val app_name : String environment [jvm] val environment : String","title":"ServiceMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/#servicemetadata","text":"[jvm]\\ data class ServiceMetadata (app_name: String , environment: String )","title":"ServiceMetadata"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/#properties","text":"Name Summary app_name [jvm] val app_name : String environment [jvm] val environment : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/-service-metadata/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / ServiceMetadata / ServiceMetadata ServiceMetadata \u00b6 [jvm]\\ fun ServiceMetadata (app_name: String , environment: String )","title":"ServiceMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/-service-metadata/#servicemetadata","text":"[jvm]\\ fun ServiceMetadata (app_name: String , environment: String )","title":"ServiceMetadata"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/app_name/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / ServiceMetadata / app_name app_name \u00b6 [jvm]\\ val app_name : String","title":"app_name - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/app_name/#app_name","text":"[jvm]\\ val app_name : String","title":"app_name"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/environment/","text":"// misk-admin / misk.web.metadata / ServiceMetadataAction / ServiceMetadata / environment environment \u00b6 [jvm]\\ val environment : String","title":"environment - Misk"},{"location":"0.x/misk-admin/misk.web.metadata/-service-metadata-action/-service-metadata/environment/#environment","text":"[jvm]\\ val environment : String","title":"environment"},{"location":"0.x/misk-admin/misk.web.metadata.config/","text":"// misk-admin / misk.web.metadata.config Package misk.web.metadata.config \u00b6 Types \u00b6 Name Summary ConfigMetadataAction [jvm] @Singleton class ConfigMetadataAction @Injectconstructor(appName: String , deployment: Deployment, config: Config) : WebAction","title":"Package misk.web.metadata.config - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/#package-miskwebmetadataconfig","text":"","title":"Package misk.web.metadata.config"},{"location":"0.x/misk-admin/misk.web.metadata.config/#types","text":"Name Summary ConfigMetadataAction [jvm] @Singleton class ConfigMetadataAction @Injectconstructor(appName: String , deployment: Deployment, config: Config) : WebAction","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction ConfigMetadataAction \u00b6 [jvm]\\ @Singleton class ConfigMetadataAction @Injectconstructor(appName: String , deployment: Deployment, config: Config) : WebAction Types \u00b6 Name Summary Companion [jvm] object Companion Response [jvm] data class Response (resources: Map < String , String ?>) Functions \u00b6 Name Summary getAll [jvm] fun getAll (): ConfigMetadataAction.Response Properties \u00b6 Name Summary appName [jvm] val appName : String config [jvm] val config : Config deployment [jvm] val deployment : Deployment resources [jvm] val resources : Map < String , String ?>","title":"ConfigMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/#configmetadataaction","text":"[jvm]\\ @Singleton class ConfigMetadataAction @Injectconstructor(appName: String , deployment: Deployment, config: Config) : WebAction","title":"ConfigMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/#types","text":"Name Summary Companion [jvm] object Companion Response [jvm] data class Response (resources: Map < String , String ?>)","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/#functions","text":"Name Summary getAll [jvm] fun getAll (): ConfigMetadataAction.Response","title":"Functions"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/#properties","text":"Name Summary appName [jvm] val appName : String config [jvm] val config : Config deployment [jvm] val deployment : Deployment resources [jvm] val resources : Map < String , String ?>","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-config-metadata-action/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / ConfigMetadataAction ConfigMetadataAction \u00b6 [jvm]\\ @Inject fun ConfigMetadataAction (appName: String , deployment: Deployment, config: Config)","title":"ConfigMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-config-metadata-action/#configmetadataaction","text":"[jvm]\\ @Inject fun ConfigMetadataAction (appName: String , deployment: Deployment, config: Config)","title":"ConfigMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/app-name/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / appName appName \u00b6 [jvm]\\ val appName : String","title":"appName - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/app-name/#appname","text":"[jvm]\\ val appName : String","title":"appName"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/config/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / config config \u00b6 [jvm]\\ val config : Config","title":"config - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/config/#config","text":"[jvm]\\ val config : Config","title":"config"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/deployment/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / deployment deployment \u00b6 [jvm]\\ val deployment : Deployment","title":"deployment - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/deployment/#deployment","text":"[jvm]\\ val deployment : Deployment","title":"deployment"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/get-all/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / getAll getAll \u00b6 [jvm]\\ fun getAll (): ConfigMetadataAction.Response","title":"getAll - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/get-all/#getall","text":"[jvm]\\ fun getAll (): ConfigMetadataAction.Response","title":"getAll"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/resources/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / resources resources \u00b6 [jvm]\\ val resources : Map < String , String ?>","title":"resources - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/resources/#resources","text":"[jvm]\\ val resources : Map < String , String ?>","title":"resources"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-companion/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary generateConfigResources [jvm] fun generateConfigResources (appName: String , deployment: Deployment, config: Config): Map < String , String ?> redact [jvm] fun redact (output: String , regex: Regex ): String fun redact (mapOfOutputs: Map < String , String ?>, regex: Regex ): Map < String , String ?>","title":"Companion - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-companion/#functions","text":"Name Summary generateConfigResources [jvm] fun generateConfigResources (appName: String , deployment: Deployment, config: Config): Map < String , String ?> redact [jvm] fun redact (output: String , regex: Regex ): String fun redact (mapOfOutputs: Map < String , String ?>, regex: Regex ): Map < String , String ?>","title":"Functions"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-companion/generate-config-resources/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / Companion / generateConfigResources generateConfigResources \u00b6 [jvm]\\ fun generateConfigResources (appName: String , deployment: Deployment, config: Config): Map < String , String ?>","title":"generateConfigResources - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-companion/generate-config-resources/#generateconfigresources","text":"[jvm]\\ fun generateConfigResources (appName: String , deployment: Deployment, config: Config): Map < String , String ?>","title":"generateConfigResources"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-companion/redact/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / Companion / redact redact \u00b6 [jvm]\\ fun redact (mapOfOutputs: Map < String , String ?>, regex: Regex ): Map < String , String ?> fun redact (output: String , regex: Regex ): String","title":"redact - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-companion/redact/#redact","text":"[jvm]\\ fun redact (mapOfOutputs: Map < String , String ?>, regex: Regex ): Map < String , String ?> fun redact (output: String , regex: Regex ): String","title":"redact"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-response/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / Response Response \u00b6 [jvm]\\ data class Response (resources: Map < String , String ?>) Properties \u00b6 Name Summary resources [jvm] val resources : Map < String , String ?>","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-response/#response","text":"[jvm]\\ data class Response (resources: Map < String , String ?>)","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-response/#properties","text":"Name Summary resources [jvm] val resources : Map < String , String ?>","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-response/-response/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / Response / Response Response \u00b6 [jvm]\\ fun Response (resources: Map < String , String ?>)","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-response/-response/#response","text":"[jvm]\\ fun Response (resources: Map < String , String ?>)","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-response/resources/","text":"// misk-admin / misk.web.metadata.config / ConfigMetadataAction / Response / resources resources \u00b6 [jvm]\\ val resources : Map < String , String ?>","title":"resources - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.config/-config-metadata-action/-response/resources/#resources","text":"[jvm]\\ val resources : Map < String , String ?>","title":"resources"},{"location":"0.x/misk-admin/misk.web.metadata.database/","text":"// misk-admin / misk.web.metadata.database Package misk.web.metadata.database \u00b6 Types \u00b6 Name Summary DatabaseQueryFunctionMetadata [jvm] interface DatabaseQueryFunctionMetadata DatabaseQueryMetadata [jvm] data class DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String >, allowedServices: Set < String >, accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) Metadata front end model for Database Query Misk-Web Tab DatabaseQueryMetadataAction [jvm] @Singleton class DatabaseQueryMetadataAction @Injectconstructor(metadata: List < DatabaseQueryMetadata >) : WebAction Display available queries and their types NoAdminDashboardDatabaseAccess [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class NoAdminDashboardDatabaseAccess","title":"Package misk.web.metadata.database - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/#package-miskwebmetadatadatabase","text":"","title":"Package misk.web.metadata.database"},{"location":"0.x/misk-admin/misk.web.metadata.database/#types","text":"Name Summary DatabaseQueryFunctionMetadata [jvm] interface DatabaseQueryFunctionMetadata DatabaseQueryMetadata [jvm] data class DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String >, allowedServices: Set < String >, accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) Metadata front end model for Database Query Misk-Web Tab DatabaseQueryMetadataAction [jvm] @Singleton class DatabaseQueryMetadataAction @Injectconstructor(metadata: List < DatabaseQueryMetadata >) : WebAction Display available queries and their types NoAdminDashboardDatabaseAccess [jvm] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class NoAdminDashboardDatabaseAccess","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryFunctionMetadata DatabaseQueryFunctionMetadata \u00b6 [jvm]\\ interface DatabaseQueryFunctionMetadata Properties \u00b6 Name Summary name [jvm] abstract val name : String Function simple name parametersTypeName [jvm] abstract val parametersTypeName : String String Type that identifies the parameters signature for the function Inheritors \u00b6 Name ConstraintMetadata OrderMetadata SelectMetadata","title":"DatabaseQueryFunctionMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/#databasequeryfunctionmetadata","text":"[jvm]\\ interface DatabaseQueryFunctionMetadata","title":"DatabaseQueryFunctionMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/#properties","text":"Name Summary name [jvm] abstract val name : String Function simple name parametersTypeName [jvm] abstract val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/#inheritors","text":"Name ConstraintMetadata OrderMetadata SelectMetadata","title":"Inheritors"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryFunctionMetadata / name name \u00b6 [jvm]\\ abstract val name : String Function simple name","title":"name - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/name/#name","text":"[jvm]\\ abstract val name : String Function simple name","title":"name"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/parameters-type-name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryFunctionMetadata / parametersTypeName parametersTypeName \u00b6 [jvm]\\ abstract val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-function-metadata/parameters-type-name/#parameterstypename","text":"[jvm]\\ abstract val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata DatabaseQueryMetadata \u00b6 [jvm]\\ data class DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String >, allowedServices: Set < String >, accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) Metadata front end model for Database Query Misk-Web Tab Constructors \u00b6 DatabaseQueryMetadata [jvm] fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: KClass <out Annotation >? = null, table: String , entityClass: KClass < >, entitySchema: Map < String , KType >, queryClass: KClass < >?, constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) DatabaseQueryMetadata [jvm] fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) Types \u00b6 Name Summary Companion [jvm] object Companion ConstraintMetadata [jvm] data class ConstraintMetadata (name: String , parametersTypeName: String , path: String , operator: String ) : DatabaseQueryFunctionMetadata OrderMetadata [jvm] data class OrderMetadata (name: String , parametersTypeName: String , path: String , ascending: Boolean ) : DatabaseQueryFunctionMetadata SelectMetadata [jvm] data class SelectMetadata (name: String , parametersTypeName: String , paths: List < String >) : DatabaseQueryFunctionMetadata Properties \u00b6 Name Summary accessAnnotation [jvm] val accessAnnotation : String ? allowedCapabilities [jvm] val allowedCapabilities : Set < String > allowedServices [jvm] val allowedServices : Set < String > constraints [jvm] val constraints : List < DatabaseQueryMetadata.ConstraintMetadata > entityClass [jvm] val entityClass : String DbTable entity class entitySchema [jvm] val entitySchema : Map < String , String > Describe the DbEntity with types orders [jvm] val orders : List < DatabaseQueryMetadata.OrderMetadata > queryClass [jvm] val queryClass : String Query class queryWebActionPath [jvm] val queryWebActionPath : String selects [jvm] val selects : List < DatabaseQueryMetadata.SelectMetadata > table [jvm] val table : String SQL table name types [jvm] val types : Map < String , MiskWebFormBuilder.Type> Contains all Types across all queries","title":"DatabaseQueryMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/#databasequerymetadata","text":"[jvm]\\ data class DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String >, allowedServices: Set < String >, accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) Metadata front end model for Database Query Misk-Web Tab","title":"DatabaseQueryMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/#constructors","text":"DatabaseQueryMetadata [jvm] fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: KClass <out Annotation >? = null, table: String , entityClass: KClass < >, entitySchema: Map < String , KType >, queryClass: KClass < >?, constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) DatabaseQueryMetadata [jvm] fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>)","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/#types","text":"Name Summary Companion [jvm] object Companion ConstraintMetadata [jvm] data class ConstraintMetadata (name: String , parametersTypeName: String , path: String , operator: String ) : DatabaseQueryFunctionMetadata OrderMetadata [jvm] data class OrderMetadata (name: String , parametersTypeName: String , path: String , ascending: Boolean ) : DatabaseQueryFunctionMetadata SelectMetadata [jvm] data class SelectMetadata (name: String , parametersTypeName: String , paths: List < String >) : DatabaseQueryFunctionMetadata","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/#properties","text":"Name Summary accessAnnotation [jvm] val accessAnnotation : String ? allowedCapabilities [jvm] val allowedCapabilities : Set < String > allowedServices [jvm] val allowedServices : Set < String > constraints [jvm] val constraints : List < DatabaseQueryMetadata.ConstraintMetadata > entityClass [jvm] val entityClass : String DbTable entity class entitySchema [jvm] val entitySchema : Map < String , String > Describe the DbEntity with types orders [jvm] val orders : List < DatabaseQueryMetadata.OrderMetadata > queryClass [jvm] val queryClass : String Query class queryWebActionPath [jvm] val queryWebActionPath : String selects [jvm] val selects : List < DatabaseQueryMetadata.SelectMetadata > table [jvm] val table : String SQL table name types [jvm] val types : Map < String , MiskWebFormBuilder.Type> Contains all Types across all queries","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-database-query-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / DatabaseQueryMetadata DatabaseQueryMetadata \u00b6 [jvm]\\ fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: KClass <out Annotation >? = null, table: String , entityClass: KClass < >, entitySchema: Map < String , KType >, queryClass: KClass < >?, constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>)","title":"DatabaseQueryMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-database-query-metadata/#databasequerymetadata","text":"[jvm]\\ fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: KClass <out Annotation >? = null, table: String , entityClass: KClass < >, entitySchema: Map < String , KType >, queryClass: KClass < >?, constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>) fun DatabaseQueryMetadata (queryWebActionPath: String , allowedCapabilities: Set < String > = setOf(), allowedServices: Set < String > = setOf(), accessAnnotation: String ?, table: String , entityClass: String , entitySchema: Map < String , String >, queryClass: String , constraints: List < DatabaseQueryMetadata.ConstraintMetadata >, orders: List < DatabaseQueryMetadata.OrderMetadata >, selects: List < DatabaseQueryMetadata.SelectMetadata >, types: Map < String , MiskWebFormBuilder.Type>)","title":"DatabaseQueryMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/access-annotation/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / accessAnnotation accessAnnotation \u00b6 [jvm]\\ val accessAnnotation : String ?","title":"accessAnnotation - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/access-annotation/#accessannotation","text":"[jvm]\\ val accessAnnotation : String ?","title":"accessAnnotation"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/allowed-capabilities/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / allowedCapabilities allowedCapabilities \u00b6 [jvm]\\ val allowedCapabilities : Set < String >","title":"allowedCapabilities - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/allowed-capabilities/#allowedcapabilities","text":"[jvm]\\ val allowedCapabilities : Set < String >","title":"allowedCapabilities"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/allowed-services/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / allowedServices allowedServices \u00b6 [jvm]\\ val allowedServices : Set < String >","title":"allowedServices - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/allowed-services/#allowedservices","text":"[jvm]\\ val allowedServices : Set < String >","title":"allowedServices"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/constraints/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / constraints constraints \u00b6 [jvm]\\ val constraints : List < DatabaseQueryMetadata.ConstraintMetadata >","title":"constraints - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/constraints/#constraints","text":"[jvm]\\ val constraints : List < DatabaseQueryMetadata.ConstraintMetadata >","title":"constraints"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/entity-class/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / entityClass entityClass \u00b6 [jvm]\\ val entityClass : String DbTable entity class","title":"entityClass - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/entity-class/#entityclass","text":"[jvm]\\ val entityClass : String DbTable entity class","title":"entityClass"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/entity-schema/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / entitySchema entitySchema \u00b6 [jvm]\\ val entitySchema : Map < String , String > Describe the DbEntity with types","title":"entitySchema - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/entity-schema/#entityschema","text":"[jvm]\\ val entitySchema : Map < String , String > Describe the DbEntity with types","title":"entitySchema"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/orders/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / orders orders \u00b6 [jvm]\\ val orders : List < DatabaseQueryMetadata.OrderMetadata >","title":"orders - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/orders/#orders","text":"[jvm]\\ val orders : List < DatabaseQueryMetadata.OrderMetadata >","title":"orders"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/query-class/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / queryClass queryClass \u00b6 [jvm]\\ val queryClass : String Query class","title":"queryClass - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/query-class/#queryclass","text":"[jvm]\\ val queryClass : String Query class","title":"queryClass"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/query-web-action-path/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / queryWebActionPath queryWebActionPath \u00b6 [jvm]\\ val queryWebActionPath : String","title":"queryWebActionPath - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/query-web-action-path/#querywebactionpath","text":"[jvm]\\ val queryWebActionPath : String","title":"queryWebActionPath"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/selects/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / selects selects \u00b6 [jvm]\\ val selects : List < DatabaseQueryMetadata.SelectMetadata >","title":"selects - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/selects/#selects","text":"[jvm]\\ val selects : List < DatabaseQueryMetadata.SelectMetadata >","title":"selects"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/table/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / table table \u00b6 [jvm]\\ val table : String SQL table name","title":"table - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/table/#table","text":"[jvm]\\ val table : String SQL table name","title":"table"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/types/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / types types \u00b6 [jvm]\\ val types : Map < String , MiskWebFormBuilder.Type> Contains all Types across all queries","title":"types - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/types/#types","text":"[jvm]\\ val types : Map < String , MiskWebFormBuilder.Type> Contains all Types across all queries","title":"types"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-companion/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary DYNAMIC_QUERY_KCLASS_SUFFIX [jvm] const val DYNAMIC_QUERY_KCLASS_SUFFIX : String","title":"Companion - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-companion/#properties","text":"Name Summary DYNAMIC_QUERY_KCLASS_SUFFIX [jvm] const val DYNAMIC_QUERY_KCLASS_SUFFIX : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-companion/-d-y-n-a-m-i-c_-q-u-e-r-y_-k-c-l-a-s-s_-s-u-f-f-i-x/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / Companion / DYNAMIC_QUERY_KCLASS_SUFFIX DYNAMIC_QUERY_KCLASS_SUFFIX \u00b6 [jvm]\\ const val DYNAMIC_QUERY_KCLASS_SUFFIX : String","title":"DYNAMIC_QUERY_KCLASS_SUFFIX - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-companion/-d-y-n-a-m-i-c_-q-u-e-r-y_-k-c-l-a-s-s_-s-u-f-f-i-x/#dynamic_query_kclass_suffix","text":"[jvm]\\ const val DYNAMIC_QUERY_KCLASS_SUFFIX : String","title":"DYNAMIC_QUERY_KCLASS_SUFFIX"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / ConstraintMetadata ConstraintMetadata \u00b6 [jvm]\\ data class ConstraintMetadata (name: String , parametersTypeName: String , path: String , operator: String ) : DatabaseQueryFunctionMetadata Properties \u00b6 Name Summary name [jvm] open override val name : String Function simple name operator [jvm] val operator : String parametersTypeName [jvm] open override val parametersTypeName : String String Type that identifies the parameters signature for the function path [jvm] val path : String","title":"ConstraintMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/#constraintmetadata","text":"[jvm]\\ data class ConstraintMetadata (name: String , parametersTypeName: String , path: String , operator: String ) : DatabaseQueryFunctionMetadata","title":"ConstraintMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/#properties","text":"Name Summary name [jvm] open override val name : String Function simple name operator [jvm] val operator : String parametersTypeName [jvm] open override val parametersTypeName : String String Type that identifies the parameters signature for the function path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/-constraint-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / ConstraintMetadata / ConstraintMetadata ConstraintMetadata \u00b6 [jvm]\\ fun ConstraintMetadata (name: String , parametersTypeName: String , path: String , operator: String )","title":"ConstraintMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/-constraint-metadata/#constraintmetadata","text":"[jvm]\\ fun ConstraintMetadata (name: String , parametersTypeName: String , path: String , operator: String )","title":"ConstraintMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / ConstraintMetadata / name name \u00b6 [jvm]\\ open override val name : String Function simple name","title":"name - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/name/#name","text":"[jvm]\\ open override val name : String Function simple name","title":"name"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/operator/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / ConstraintMetadata / operator operator \u00b6 [jvm]\\ val operator : String","title":"operator - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/operator/#operator","text":"[jvm]\\ val operator : String","title":"operator"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/parameters-type-name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / ConstraintMetadata / parametersTypeName parametersTypeName \u00b6 [jvm]\\ open override val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/parameters-type-name/#parameterstypename","text":"[jvm]\\ open override val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/path/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / ConstraintMetadata / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-constraint-metadata/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / OrderMetadata OrderMetadata \u00b6 [jvm]\\ data class OrderMetadata (name: String , parametersTypeName: String , path: String , ascending: Boolean ) : DatabaseQueryFunctionMetadata Properties \u00b6 Name Summary ascending [jvm] val ascending : Boolean name [jvm] open override val name : String Function simple name parametersTypeName [jvm] open override val parametersTypeName : String String Type that identifies the parameters signature for the function path [jvm] val path : String","title":"OrderMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/#ordermetadata","text":"[jvm]\\ data class OrderMetadata (name: String , parametersTypeName: String , path: String , ascending: Boolean ) : DatabaseQueryFunctionMetadata","title":"OrderMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/#properties","text":"Name Summary ascending [jvm] val ascending : Boolean name [jvm] open override val name : String Function simple name parametersTypeName [jvm] open override val parametersTypeName : String String Type that identifies the parameters signature for the function path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/-order-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / OrderMetadata / OrderMetadata OrderMetadata \u00b6 [jvm]\\ fun OrderMetadata (name: String , parametersTypeName: String , path: String , ascending: Boolean )","title":"OrderMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/-order-metadata/#ordermetadata","text":"[jvm]\\ fun OrderMetadata (name: String , parametersTypeName: String , path: String , ascending: Boolean )","title":"OrderMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/ascending/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / OrderMetadata / ascending ascending \u00b6 [jvm]\\ val ascending : Boolean","title":"ascending - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/ascending/#ascending","text":"[jvm]\\ val ascending : Boolean","title":"ascending"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / OrderMetadata / name name \u00b6 [jvm]\\ open override val name : String Function simple name","title":"name - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/name/#name","text":"[jvm]\\ open override val name : String Function simple name","title":"name"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/parameters-type-name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / OrderMetadata / parametersTypeName parametersTypeName \u00b6 [jvm]\\ open override val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/parameters-type-name/#parameterstypename","text":"[jvm]\\ open override val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/path/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / OrderMetadata / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-order-metadata/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / SelectMetadata SelectMetadata \u00b6 [jvm]\\ data class SelectMetadata (name: String , parametersTypeName: String , paths: List < String >) : DatabaseQueryFunctionMetadata Properties \u00b6 Name Summary name [jvm] open override val name : String Function simple name parametersTypeName [jvm] open override val parametersTypeName : String String Type that identifies the parameters signature for the function paths [jvm] val paths : List < String >","title":"SelectMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/#selectmetadata","text":"[jvm]\\ data class SelectMetadata (name: String , parametersTypeName: String , paths: List < String >) : DatabaseQueryFunctionMetadata","title":"SelectMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/#properties","text":"Name Summary name [jvm] open override val name : String Function simple name parametersTypeName [jvm] open override val parametersTypeName : String String Type that identifies the parameters signature for the function paths [jvm] val paths : List < String >","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/-select-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / SelectMetadata / SelectMetadata SelectMetadata \u00b6 [jvm]\\ fun SelectMetadata (name: String , parametersTypeName: String , paths: List < String >)","title":"SelectMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/-select-metadata/#selectmetadata","text":"[jvm]\\ fun SelectMetadata (name: String , parametersTypeName: String , paths: List < String >)","title":"SelectMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / SelectMetadata / name name \u00b6 [jvm]\\ open override val name : String Function simple name","title":"name - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/name/#name","text":"[jvm]\\ open override val name : String Function simple name","title":"name"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/parameters-type-name/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / SelectMetadata / parametersTypeName parametersTypeName \u00b6 [jvm]\\ open override val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/parameters-type-name/#parameterstypename","text":"[jvm]\\ open override val parametersTypeName : String String Type that identifies the parameters signature for the function","title":"parametersTypeName"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/paths/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadata / SelectMetadata / paths paths \u00b6 [jvm]\\ val paths : List < String >","title":"paths - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata/-select-metadata/paths/#paths","text":"[jvm]\\ val paths : List < String >","title":"paths"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadataAction DatabaseQueryMetadataAction \u00b6 [jvm]\\ @Singleton class DatabaseQueryMetadataAction @Injectconstructor(metadata: List < DatabaseQueryMetadata >) : WebAction Display available queries and their types Constructors \u00b6 DatabaseQueryMetadataAction [jvm] @Inject fun DatabaseQueryMetadataAction (metadata: List < DatabaseQueryMetadata >) Types \u00b6 Name Summary Response [jvm] data class Response (databaseQueryMetadata: List < DatabaseQueryMetadata >) Functions \u00b6 Name Summary getAll [jvm] fun getAll (): DatabaseQueryMetadataAction.Response Properties \u00b6 Name Summary metadata [jvm] val metadata : List < DatabaseQueryMetadata >","title":"DatabaseQueryMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/#databasequerymetadataaction","text":"[jvm]\\ @Singleton class DatabaseQueryMetadataAction @Injectconstructor(metadata: List < DatabaseQueryMetadata >) : WebAction Display available queries and their types","title":"DatabaseQueryMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/#constructors","text":"DatabaseQueryMetadataAction [jvm] @Inject fun DatabaseQueryMetadataAction (metadata: List < DatabaseQueryMetadata >)","title":"Constructors"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/#types","text":"Name Summary Response [jvm] data class Response (databaseQueryMetadata: List < DatabaseQueryMetadata >)","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/#functions","text":"Name Summary getAll [jvm] fun getAll (): DatabaseQueryMetadataAction.Response","title":"Functions"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/#properties","text":"Name Summary metadata [jvm] val metadata : List < DatabaseQueryMetadata >","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-database-query-metadata-action/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadataAction / DatabaseQueryMetadataAction DatabaseQueryMetadataAction \u00b6 [jvm]\\ @Inject fun DatabaseQueryMetadataAction (metadata: List < DatabaseQueryMetadata >)","title":"DatabaseQueryMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-database-query-metadata-action/#databasequerymetadataaction","text":"[jvm]\\ @Inject fun DatabaseQueryMetadataAction (metadata: List < DatabaseQueryMetadata >)","title":"DatabaseQueryMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/get-all/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadataAction / getAll getAll \u00b6 [jvm]\\ fun getAll (): DatabaseQueryMetadataAction.Response","title":"getAll - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/get-all/#getall","text":"[jvm]\\ fun getAll (): DatabaseQueryMetadataAction.Response","title":"getAll"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadataAction / metadata metadata \u00b6 [jvm]\\ val metadata : List < DatabaseQueryMetadata >","title":"metadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/metadata/#metadata","text":"[jvm]\\ val metadata : List < DatabaseQueryMetadata >","title":"metadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-response/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadataAction / Response Response \u00b6 [jvm]\\ data class Response (databaseQueryMetadata: List < DatabaseQueryMetadata >) Properties \u00b6 Name Summary databaseQueryMetadata [jvm] val databaseQueryMetadata : List < DatabaseQueryMetadata >","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-response/#response","text":"[jvm]\\ data class Response (databaseQueryMetadata: List < DatabaseQueryMetadata >)","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-response/#properties","text":"Name Summary databaseQueryMetadata [jvm] val databaseQueryMetadata : List < DatabaseQueryMetadata >","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-response/-response/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadataAction / Response / Response Response \u00b6 [jvm]\\ fun Response (databaseQueryMetadata: List < DatabaseQueryMetadata >)","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-response/-response/#response","text":"[jvm]\\ fun Response (databaseQueryMetadata: List < DatabaseQueryMetadata >)","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-response/database-query-metadata/","text":"// misk-admin / misk.web.metadata.database / DatabaseQueryMetadataAction / Response / databaseQueryMetadata databaseQueryMetadata \u00b6 [jvm]\\ val databaseQueryMetadata : List < DatabaseQueryMetadata >","title":"databaseQueryMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-database-query-metadata-action/-response/database-query-metadata/#databasequerymetadata","text":"[jvm]\\ val databaseQueryMetadata : List < DatabaseQueryMetadata >","title":"databaseQueryMetadata"},{"location":"0.x/misk-admin/misk.web.metadata.database/-no-admin-dashboard-database-access/","text":"// misk-admin / misk.web.metadata.database / NoAdminDashboardDatabaseAccess NoAdminDashboardDatabaseAccess \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class NoAdminDashboardDatabaseAccess","title":"NoAdminDashboardDatabaseAccess - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-no-admin-dashboard-database-access/#noadmindashboarddatabaseaccess","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class NoAdminDashboardDatabaseAccess","title":"NoAdminDashboardDatabaseAccess"},{"location":"0.x/misk-admin/misk.web.metadata.database/-no-admin-dashboard-database-access/-no-admin-dashboard-database-access/","text":"// misk-admin / misk.web.metadata.database / NoAdminDashboardDatabaseAccess / NoAdminDashboardDatabaseAccess NoAdminDashboardDatabaseAccess \u00b6 [jvm]\\ fun NoAdminDashboardDatabaseAccess ()","title":"NoAdminDashboardDatabaseAccess - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.database/-no-admin-dashboard-database-access/-no-admin-dashboard-database-access/#noadmindashboarddatabaseaccess","text":"[jvm]\\ fun NoAdminDashboardDatabaseAccess ()","title":"NoAdminDashboardDatabaseAccess"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/","text":"// misk-admin / misk.web.metadata.webaction Package misk.web.metadata.webaction \u00b6 Types \u00b6 Name Summary WebActionMetadataAction [jvm] @Singleton class WebActionMetadataAction @Injectconstructor(webActionMetadataList: WebActionMetadataList) : WebAction","title":"Package misk.web.metadata.webaction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/#package-miskwebmetadatawebaction","text":"","title":"Package misk.web.metadata.webaction"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/#types","text":"Name Summary WebActionMetadataAction [jvm] @Singleton class WebActionMetadataAction @Injectconstructor(webActionMetadataList: WebActionMetadataList) : WebAction","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/","text":"// misk-admin / misk.web.metadata.webaction / WebActionMetadataAction WebActionMetadataAction \u00b6 [jvm]\\ @Singleton class WebActionMetadataAction @Injectconstructor(webActionMetadataList: WebActionMetadataList) : WebAction Types \u00b6 Name Summary Response [jvm] data class Response (webActionMetadata: List <WebActionMetadata>) Functions \u00b6 Name Summary getAll [jvm] fun getAll (): WebActionMetadataAction.Response Properties \u00b6 Name Summary webActionMetadataList [jvm] val webActionMetadataList : WebActionMetadataList","title":"WebActionMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/#webactionmetadataaction","text":"[jvm]\\ @Singleton class WebActionMetadataAction @Injectconstructor(webActionMetadataList: WebActionMetadataList) : WebAction","title":"WebActionMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/#types","text":"Name Summary Response [jvm] data class Response (webActionMetadata: List <WebActionMetadata>)","title":"Types"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/#functions","text":"Name Summary getAll [jvm] fun getAll (): WebActionMetadataAction.Response","title":"Functions"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/#properties","text":"Name Summary webActionMetadataList [jvm] val webActionMetadataList : WebActionMetadataList","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-web-action-metadata-action/","text":"// misk-admin / misk.web.metadata.webaction / WebActionMetadataAction / WebActionMetadataAction WebActionMetadataAction \u00b6 [jvm]\\ @Inject fun WebActionMetadataAction (webActionMetadataList: WebActionMetadataList)","title":"WebActionMetadataAction - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-web-action-metadata-action/#webactionmetadataaction","text":"[jvm]\\ @Inject fun WebActionMetadataAction (webActionMetadataList: WebActionMetadataList)","title":"WebActionMetadataAction"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/get-all/","text":"// misk-admin / misk.web.metadata.webaction / WebActionMetadataAction / getAll getAll \u00b6 [jvm]\\ fun getAll (): WebActionMetadataAction.Response","title":"getAll - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/get-all/#getall","text":"[jvm]\\ fun getAll (): WebActionMetadataAction.Response","title":"getAll"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/web-action-metadata-list/","text":"// misk-admin / misk.web.metadata.webaction / WebActionMetadataAction / webActionMetadataList webActionMetadataList \u00b6 [jvm]\\ val webActionMetadataList : WebActionMetadataList","title":"webActionMetadataList - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/web-action-metadata-list/#webactionmetadatalist","text":"[jvm]\\ val webActionMetadataList : WebActionMetadataList","title":"webActionMetadataList"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-response/","text":"// misk-admin / misk.web.metadata.webaction / WebActionMetadataAction / Response Response \u00b6 [jvm]\\ data class Response (webActionMetadata: List <WebActionMetadata>) Properties \u00b6 Name Summary webActionMetadata [jvm] val webActionMetadata : List <WebActionMetadata>","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-response/#response","text":"[jvm]\\ data class Response (webActionMetadata: List <WebActionMetadata>)","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-response/#properties","text":"Name Summary webActionMetadata [jvm] val webActionMetadata : List <WebActionMetadata>","title":"Properties"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-response/-response/","text":"// misk-admin / misk.web.metadata.webaction / WebActionMetadataAction / Response / Response Response \u00b6 [jvm]\\ fun Response (webActionMetadata: List <WebActionMetadata>)","title":"Response - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-response/-response/#response","text":"[jvm]\\ fun Response (webActionMetadata: List <WebActionMetadata>)","title":"Response"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-response/web-action-metadata/","text":"// misk-admin / misk.web.metadata.webaction / WebActionMetadataAction / Response / webActionMetadata webActionMetadata \u00b6 [jvm]\\ val webActionMetadata : List <WebActionMetadata>","title":"webActionMetadata - Misk"},{"location":"0.x/misk-admin/misk.web.metadata.webaction/-web-action-metadata-action/-response/web-action-metadata/#webactionmetadata","text":"[jvm]\\ val webActionMetadata : List <WebActionMetadata>","title":"webActionMetadata"},{"location":"0.x/misk-aws/misk.cloud.aws/","text":"// misk-aws / misk.cloud.aws Package misk.cloud.aws \u00b6 Types \u00b6 Name Summary AwsAccountId [jvm] data class AwsAccountId (value: String ) AwsAccountId is the id of the account in which the service is running AwsEnvironmentModule [jvm] class AwsEnvironmentModule : KAbstractModule AwsEnvironmentModule pulls region and account information from installed env vars AwsRegion [jvm] data class AwsRegion (name: String ) AwsRegion is the region in which the service is running FakeAwsEnvironmentModule [jvm] class FakeAwsEnvironmentModule : KAbstractModule FakeAwsEnvironmentModule pulls region and account information from an in memory map. Functions \u00b6 Name Summary toMiskAwsAccountId [jvm] fun AwsAccountId. toMiskAwsAccountId (): AwsAccountId toMiskAwsRegion [jvm] fun AwsRegion. toMiskAwsRegion (): AwsRegion","title":"Package misk.cloud.aws - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/#package-miskcloudaws","text":"","title":"Package misk.cloud.aws"},{"location":"0.x/misk-aws/misk.cloud.aws/#types","text":"Name Summary AwsAccountId [jvm] data class AwsAccountId (value: String ) AwsAccountId is the id of the account in which the service is running AwsEnvironmentModule [jvm] class AwsEnvironmentModule : KAbstractModule AwsEnvironmentModule pulls region and account information from installed env vars AwsRegion [jvm] data class AwsRegion (name: String ) AwsRegion is the region in which the service is running FakeAwsEnvironmentModule [jvm] class FakeAwsEnvironmentModule : KAbstractModule FakeAwsEnvironmentModule pulls region and account information from an in memory map.","title":"Types"},{"location":"0.x/misk-aws/misk.cloud.aws/#functions","text":"Name Summary toMiskAwsAccountId [jvm] fun AwsAccountId. toMiskAwsAccountId (): AwsAccountId toMiskAwsRegion [jvm] fun AwsRegion. toMiskAwsRegion (): AwsRegion","title":"Functions"},{"location":"0.x/misk-aws/misk.cloud.aws/to-misk-aws-account-id/","text":"// misk-aws / misk.cloud.aws / toMiskAwsAccountId toMiskAwsAccountId \u00b6 [jvm]\\ fun AwsAccountId. toMiskAwsAccountId (): AwsAccountId","title":"toMiskAwsAccountId - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/to-misk-aws-account-id/#tomiskawsaccountid","text":"[jvm]\\ fun AwsAccountId. toMiskAwsAccountId (): AwsAccountId","title":"toMiskAwsAccountId"},{"location":"0.x/misk-aws/misk.cloud.aws/to-misk-aws-region/","text":"// misk-aws / misk.cloud.aws / toMiskAwsRegion toMiskAwsRegion \u00b6 [jvm]\\ fun AwsRegion. toMiskAwsRegion (): AwsRegion","title":"toMiskAwsRegion - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/to-misk-aws-region/#tomiskawsregion","text":"[jvm]\\ fun AwsRegion. toMiskAwsRegion (): AwsRegion","title":"toMiskAwsRegion"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/","text":"// misk-aws / misk.cloud.aws / AwsAccountId AwsAccountId \u00b6 [jvm]\\ data class AwsAccountId (value: String ) AwsAccountId is the id of the account in which the service is running Constructors \u00b6 AwsAccountId [jvm] fun AwsAccountId (value: String ) Properties \u00b6 Name Summary value [jvm] val value : String","title":"AwsAccountId - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/#awsaccountid","text":"[jvm]\\ data class AwsAccountId (value: String ) AwsAccountId is the id of the account in which the service is running","title":"AwsAccountId"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/#constructors","text":"AwsAccountId [jvm] fun AwsAccountId (value: String )","title":"Constructors"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/#properties","text":"Name Summary value [jvm] val value : String","title":"Properties"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/-aws-account-id/","text":"// misk-aws / misk.cloud.aws / AwsAccountId / AwsAccountId AwsAccountId \u00b6 [jvm]\\ fun AwsAccountId (value: String )","title":"AwsAccountId - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/-aws-account-id/#awsaccountid","text":"[jvm]\\ fun AwsAccountId (value: String )","title":"AwsAccountId"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/value/","text":"// misk-aws / misk.cloud.aws / AwsAccountId / value value \u00b6 [jvm]\\ val value : String","title":"value - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-account-id/value/#value","text":"[jvm]\\ val value : String","title":"value"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/","text":"// misk-aws / misk.cloud.aws / AwsEnvironmentModule AwsEnvironmentModule \u00b6 [jvm]\\ class AwsEnvironmentModule : KAbstractModule AwsEnvironmentModule pulls region and account information from installed env vars Constructors \u00b6 AwsEnvironmentModule [jvm] fun AwsEnvironmentModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) awsAccountId [jvm] @Provides fun awsAccountId (envVarLoader: EnvVarLoader): AwsAccountId awsRegion [jvm] @Provides fun awsRegion (envVarLoader: EnvVarLoader): AwsRegion bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AwsEnvironmentModule - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/#awsenvironmentmodule","text":"[jvm]\\ class AwsEnvironmentModule : KAbstractModule AwsEnvironmentModule pulls region and account information from installed env vars","title":"AwsEnvironmentModule"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/#constructors","text":"AwsEnvironmentModule [jvm] fun AwsEnvironmentModule ()","title":"Constructors"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) awsAccountId [jvm] @Provides fun awsAccountId (envVarLoader: EnvVarLoader): AwsAccountId awsRegion [jvm] @Provides fun awsRegion (envVarLoader: EnvVarLoader): AwsRegion bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/-aws-environment-module/","text":"// misk-aws / misk.cloud.aws / AwsEnvironmentModule / AwsEnvironmentModule AwsEnvironmentModule \u00b6 [jvm]\\ fun AwsEnvironmentModule ()","title":"AwsEnvironmentModule - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/-aws-environment-module/#awsenvironmentmodule","text":"[jvm]\\ fun AwsEnvironmentModule ()","title":"AwsEnvironmentModule"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/aws-account-id/","text":"// misk-aws / misk.cloud.aws / AwsEnvironmentModule / awsAccountId awsAccountId \u00b6 [jvm]\\ @Provides fun awsAccountId (envVarLoader: EnvVarLoader): AwsAccountId","title":"awsAccountId - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/aws-account-id/#awsaccountid","text":"[jvm]\\ @Provides fun awsAccountId (envVarLoader: EnvVarLoader): AwsAccountId","title":"awsAccountId"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/aws-region/","text":"// misk-aws / misk.cloud.aws / AwsEnvironmentModule / awsRegion awsRegion \u00b6 [jvm]\\ @Provides fun awsRegion (envVarLoader: EnvVarLoader): AwsRegion","title":"awsRegion - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-environment-module/aws-region/#awsregion","text":"[jvm]\\ @Provides fun awsRegion (envVarLoader: EnvVarLoader): AwsRegion","title":"awsRegion"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/","text":"// misk-aws / misk.cloud.aws / AwsRegion AwsRegion \u00b6 [jvm]\\ data class AwsRegion (name: String ) AwsRegion is the region in which the service is running Constructors \u00b6 AwsRegion [jvm] fun AwsRegion (name: String ) Properties \u00b6 Name Summary name [jvm] val name : String","title":"AwsRegion - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/#awsregion","text":"[jvm]\\ data class AwsRegion (name: String ) AwsRegion is the region in which the service is running","title":"AwsRegion"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/#constructors","text":"AwsRegion [jvm] fun AwsRegion (name: String )","title":"Constructors"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/#properties","text":"Name Summary name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/-aws-region/","text":"// misk-aws / misk.cloud.aws / AwsRegion / AwsRegion AwsRegion \u00b6 [jvm]\\ fun AwsRegion (name: String )","title":"AwsRegion - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/-aws-region/#awsregion","text":"[jvm]\\ fun AwsRegion (name: String )","title":"AwsRegion"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/name/","text":"// misk-aws / misk.cloud.aws / AwsRegion / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-aws-region/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-aws/misk.cloud.aws/-fake-aws-environment-module/","text":"// misk-aws / misk.cloud.aws / FakeAwsEnvironmentModule FakeAwsEnvironmentModule \u00b6 [jvm]\\ class FakeAwsEnvironmentModule : KAbstractModule FakeAwsEnvironmentModule pulls region and account information from an in memory map. Constructors \u00b6 FakeAwsEnvironmentModule [jvm] fun FakeAwsEnvironmentModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeAwsEnvironmentModule - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-fake-aws-environment-module/#fakeawsenvironmentmodule","text":"[jvm]\\ class FakeAwsEnvironmentModule : KAbstractModule FakeAwsEnvironmentModule pulls region and account information from an in memory map.","title":"FakeAwsEnvironmentModule"},{"location":"0.x/misk-aws/misk.cloud.aws/-fake-aws-environment-module/#constructors","text":"FakeAwsEnvironmentModule [jvm] fun FakeAwsEnvironmentModule ()","title":"Constructors"},{"location":"0.x/misk-aws/misk.cloud.aws/-fake-aws-environment-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws/misk.cloud.aws/-fake-aws-environment-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws/misk.cloud.aws/-fake-aws-environment-module/-fake-aws-environment-module/","text":"// misk-aws / misk.cloud.aws / FakeAwsEnvironmentModule / FakeAwsEnvironmentModule FakeAwsEnvironmentModule \u00b6 [jvm]\\ fun FakeAwsEnvironmentModule ()","title":"FakeAwsEnvironmentModule - Misk"},{"location":"0.x/misk-aws/misk.cloud.aws/-fake-aws-environment-module/-fake-aws-environment-module/#fakeawsenvironmentmodule","text":"[jvm]\\ fun FakeAwsEnvironmentModule ()","title":"FakeAwsEnvironmentModule"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/","text":"// misk-aws / misk.jobqueue.sqs Package misk.jobqueue.sqs \u00b6 Types \u00b6 Name Summary AwsSqsJobHandlerModule [jvm] class AwsSqsJobHandlerModule < T : JobHandler> : KAbstractModule Install this module to register a handler for an SQS queue, and if specified, registers its corresponding retry queue. AwsSqsJobQueueConfig [jvm] class AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig >, message_batch_size: Int , task_queue: RepeatedTaskQueueConfig?, queue_attribute_importer_frequency_ms: Long , sqs_sending_socket_timeout_ms: Int , sqs_sending_connect_timeout_ms: Int , sqs_sending_request_timeout_ms: Int ) : Config AwsSqsJobQueueConfig is the configuration for job queueing backed by Amazon\u2019s Simple Queuing Service AwsSqsJobQueueModule [jvm] open class AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig ) : KAbstractModule AwsSqsJobQueueModule installs job queue support provided by SQS. AwsSqsQueueConfig [jvm] data class AwsSqsQueueConfig (region: String ?, account_id: String ?, sqs_queue_name: String ?) An AwsSqsQueueConfig tells misk about a queue, potentially in another region and/or another account. If the queue is in another account, it will require an IAM policy enabling cross account access DeadLetterQueueProvider [jvm] interface DeadLetterQueueProvider Interface for a provider of dead-letter queue names. DefaultDeadLetterQueueProvider [jvm] @Singleton class DefaultDeadLetterQueueProvider @Injectconstructor : DeadLetterQueueProvider Default provider of dead-letter QueueName. Returns the name of the main queue suffixed with \u201c_dlq\u201d. FlaggedBufferedSqsClient [jvm] class FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags) : AmazonSQS Temporary shim for buffered and unbuffered AmazonSQS implementations, for feature-flagged rollout of buffered SQS operations across cash cloud apps. StaticDeadLetterQueueProvider [jvm] class StaticDeadLetterQueueProvider (queue: String ) : DeadLetterQueueProvider Provider of dead-letter QueueName that always returns the same value, no matter the supplied queue. Functions \u00b6 Name Summary withNoPrefetching [jvm] fun QueueBufferConfig. withNoPrefetching (): QueueBufferConfig Modify a QueueBufferConfig to disable all receive pre-fetching settings. Properties \u00b6 Name Summary isRetryQueue [jvm] val QueueName. isRetryQueue : Boolean parentQueue [jvm] val QueueName. parentQueue : QueueName retryQueue [jvm] val QueueName. retryQueue : QueueName","title":"Package misk.jobqueue.sqs - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/#package-miskjobqueuesqs","text":"","title":"Package misk.jobqueue.sqs"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/#types","text":"Name Summary AwsSqsJobHandlerModule [jvm] class AwsSqsJobHandlerModule < T : JobHandler> : KAbstractModule Install this module to register a handler for an SQS queue, and if specified, registers its corresponding retry queue. AwsSqsJobQueueConfig [jvm] class AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig >, message_batch_size: Int , task_queue: RepeatedTaskQueueConfig?, queue_attribute_importer_frequency_ms: Long , sqs_sending_socket_timeout_ms: Int , sqs_sending_connect_timeout_ms: Int , sqs_sending_request_timeout_ms: Int ) : Config AwsSqsJobQueueConfig is the configuration for job queueing backed by Amazon\u2019s Simple Queuing Service AwsSqsJobQueueModule [jvm] open class AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig ) : KAbstractModule AwsSqsJobQueueModule installs job queue support provided by SQS. AwsSqsQueueConfig [jvm] data class AwsSqsQueueConfig (region: String ?, account_id: String ?, sqs_queue_name: String ?) An AwsSqsQueueConfig tells misk about a queue, potentially in another region and/or another account. If the queue is in another account, it will require an IAM policy enabling cross account access DeadLetterQueueProvider [jvm] interface DeadLetterQueueProvider Interface for a provider of dead-letter queue names. DefaultDeadLetterQueueProvider [jvm] @Singleton class DefaultDeadLetterQueueProvider @Injectconstructor : DeadLetterQueueProvider Default provider of dead-letter QueueName. Returns the name of the main queue suffixed with \u201c_dlq\u201d. FlaggedBufferedSqsClient [jvm] class FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags) : AmazonSQS Temporary shim for buffered and unbuffered AmazonSQS implementations, for feature-flagged rollout of buffered SQS operations across cash cloud apps. StaticDeadLetterQueueProvider [jvm] class StaticDeadLetterQueueProvider (queue: String ) : DeadLetterQueueProvider Provider of dead-letter QueueName that always returns the same value, no matter the supplied queue.","title":"Types"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/#functions","text":"Name Summary withNoPrefetching [jvm] fun QueueBufferConfig. withNoPrefetching (): QueueBufferConfig Modify a QueueBufferConfig to disable all receive pre-fetching settings.","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/#properties","text":"Name Summary isRetryQueue [jvm] val QueueName. isRetryQueue : Boolean parentQueue [jvm] val QueueName. parentQueue : QueueName retryQueue [jvm] val QueueName. retryQueue : QueueName","title":"Properties"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/is-retry-queue/","text":"// misk-aws / misk.jobqueue.sqs / isRetryQueue isRetryQueue \u00b6 [jvm]\\ val QueueName. isRetryQueue : Boolean","title":"isRetryQueue - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/is-retry-queue/#isretryqueue","text":"[jvm]\\ val QueueName. isRetryQueue : Boolean","title":"isRetryQueue"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/parent-queue/","text":"// misk-aws / misk.jobqueue.sqs / parentQueue parentQueue \u00b6 [jvm]\\ val QueueName. parentQueue : QueueName","title":"parentQueue - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/parent-queue/#parentqueue","text":"[jvm]\\ val QueueName. parentQueue : QueueName","title":"parentQueue"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/retry-queue/","text":"// misk-aws / misk.jobqueue.sqs / retryQueue retryQueue \u00b6 [jvm]\\ val QueueName. retryQueue : QueueName","title":"retryQueue - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/retry-queue/#retryqueue","text":"[jvm]\\ val QueueName. retryQueue : QueueName","title":"retryQueue"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/with-no-prefetching/","text":"// misk-aws / misk.jobqueue.sqs / withNoPrefetching withNoPrefetching \u00b6 [jvm]\\ fun QueueBufferConfig. withNoPrefetching (): QueueBufferConfig Modify a QueueBufferConfig to disable all receive pre-fetching settings.","title":"withNoPrefetching - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/with-no-prefetching/#withnoprefetching","text":"[jvm]\\ fun QueueBufferConfig. withNoPrefetching (): QueueBufferConfig Modify a QueueBufferConfig to disable all receive pre-fetching settings.","title":"withNoPrefetching"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobHandlerModule AwsSqsJobHandlerModule \u00b6 [jvm]\\ class AwsSqsJobHandlerModule < T : JobHandler> : KAbstractModule Install this module to register a handler for an SQS queue, and if specified, registers its corresponding retry queue. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AwsSqsJobHandlerModule - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/#awssqsjobhandlermodule","text":"[jvm]\\ class AwsSqsJobHandlerModule < T : JobHandler> : KAbstractModule Install this module to register a handler for an SQS queue, and if specified, registers its corresponding retry queue.","title":"AwsSqsJobHandlerModule"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/-companion/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobHandlerModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] @ JvmOverloads inline fun < T : JobHandler> create (queueName: QueueName, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > @ JvmStatic @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > [jvm] @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > Returns a module that registers a handler for an SQS queue.","title":"Companion - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/-companion/#functions","text":"Name Summary create [jvm] @ JvmOverloads inline fun < T : JobHandler> create (queueName: QueueName, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > @ JvmStatic @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > [jvm] @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > Returns a module that registers a handler for an SQS queue.","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/-companion/create/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobHandlerModule / Companion / create create \u00b6 [jvm]\\ @ JvmOverloads inline fun < T : JobHandler> create (queueName: QueueName, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > @ JvmStatic @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > [jvm]\\ @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > Returns a module that registers a handler for an SQS queue.","title":"create - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-handler-module/-companion/create/#create","text":"[jvm]\\ @ JvmOverloads inline fun < T : JobHandler> create (queueName: QueueName, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > @ JvmStatic @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > [jvm]\\ @ JvmOverloads fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >, installRetryQueue: Boolean = true, dependsOn: List <Key<out Service>> = emptyList()): AwsSqsJobHandlerModule < T > Returns a module that registers a handler for an SQS queue.","title":"create"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig AwsSqsJobQueueConfig \u00b6 [jvm]\\ class AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig >, message_batch_size: Int , task_queue: RepeatedTaskQueueConfig?, queue_attribute_importer_frequency_ms: Long , sqs_sending_socket_timeout_ms: Int , sqs_sending_connect_timeout_ms: Int , sqs_sending_request_timeout_ms: Int ) : Config AwsSqsJobQueueConfig is the configuration for job queueing backed by Amazon\u2019s Simple Queuing Service Constructors \u00b6 AwsSqsJobQueueConfig [jvm] fun AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig > = mapOf(), message_batch_size: Int = 10, task_queue: RepeatedTaskQueueConfig? = null, queue_attribute_importer_frequency_ms: Long = 1000, sqs_sending_socket_timeout_ms: Int = 5000, sqs_sending_connect_timeout_ms: Int = 1000, sqs_sending_request_timeout_ms: Int = 5000) Properties \u00b6 Name Summary external_queues [jvm] val external_queues : Map < String , AwsSqsQueueConfig > External queues is a set of externally owned SQS queues accessed by this service, mapping an internal queue name to the (account ID, region, name) of the queue in the external account queue_attribute_importer_frequency_ms [jvm] val queue_attribute_importer_frequency_ms : Long = 1000 Frequency used to import Queue Attributes in milliseconds. sqs_sending_connect_timeout_ms [jvm] val sqs_sending_connect_timeout_ms : Int = 1000 Connect timeout to reach SQS with for sending . sqs_sending_request_timeout_ms [jvm] val sqs_sending_request_timeout_ms : Int = 5000 Request timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS. sqs_sending_socket_timeout_ms [jvm] val sqs_sending_socket_timeout_ms : Int = 5000 Socket timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS. task_queue [jvm] val task_queue : RepeatedTaskQueueConfig? = null Task queue configuration, which should have a num_parallel_tasks equal or greater than the number of consumed queues. If undefined, an unbounded number of parallel tasks will be used.","title":"AwsSqsJobQueueConfig - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/#awssqsjobqueueconfig","text":"[jvm]\\ class AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig >, message_batch_size: Int , task_queue: RepeatedTaskQueueConfig?, queue_attribute_importer_frequency_ms: Long , sqs_sending_socket_timeout_ms: Int , sqs_sending_connect_timeout_ms: Int , sqs_sending_request_timeout_ms: Int ) : Config AwsSqsJobQueueConfig is the configuration for job queueing backed by Amazon\u2019s Simple Queuing Service","title":"AwsSqsJobQueueConfig"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/#constructors","text":"AwsSqsJobQueueConfig [jvm] fun AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig > = mapOf(), message_batch_size: Int = 10, task_queue: RepeatedTaskQueueConfig? = null, queue_attribute_importer_frequency_ms: Long = 1000, sqs_sending_socket_timeout_ms: Int = 5000, sqs_sending_connect_timeout_ms: Int = 1000, sqs_sending_request_timeout_ms: Int = 5000)","title":"Constructors"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/#properties","text":"Name Summary external_queues [jvm] val external_queues : Map < String , AwsSqsQueueConfig > External queues is a set of externally owned SQS queues accessed by this service, mapping an internal queue name to the (account ID, region, name) of the queue in the external account queue_attribute_importer_frequency_ms [jvm] val queue_attribute_importer_frequency_ms : Long = 1000 Frequency used to import Queue Attributes in milliseconds. sqs_sending_connect_timeout_ms [jvm] val sqs_sending_connect_timeout_ms : Int = 1000 Connect timeout to reach SQS with for sending . sqs_sending_request_timeout_ms [jvm] val sqs_sending_request_timeout_ms : Int = 5000 Request timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS. sqs_sending_socket_timeout_ms [jvm] val sqs_sending_socket_timeout_ms : Int = 5000 Socket timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS. task_queue [jvm] val task_queue : RepeatedTaskQueueConfig? = null Task queue configuration, which should have a num_parallel_tasks equal or greater than the number of consumed queues. If undefined, an unbounded number of parallel tasks will be used.","title":"Properties"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/-aws-sqs-job-queue-config/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig / AwsSqsJobQueueConfig AwsSqsJobQueueConfig \u00b6 [jvm]\\ fun AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig > = mapOf(), message_batch_size: Int = 10, task_queue: RepeatedTaskQueueConfig? = null, queue_attribute_importer_frequency_ms: Long = 1000, sqs_sending_socket_timeout_ms: Int = 5000, sqs_sending_connect_timeout_ms: Int = 1000, sqs_sending_request_timeout_ms: Int = 5000)","title":"AwsSqsJobQueueConfig - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/-aws-sqs-job-queue-config/#awssqsjobqueueconfig","text":"[jvm]\\ fun AwsSqsJobQueueConfig (external_queues: Map < String , AwsSqsQueueConfig > = mapOf(), message_batch_size: Int = 10, task_queue: RepeatedTaskQueueConfig? = null, queue_attribute_importer_frequency_ms: Long = 1000, sqs_sending_socket_timeout_ms: Int = 5000, sqs_sending_connect_timeout_ms: Int = 1000, sqs_sending_request_timeout_ms: Int = 5000)","title":"AwsSqsJobQueueConfig"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/external_queues/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig / external_queues external_queues \u00b6 [jvm]\\ val external_queues : Map < String , AwsSqsQueueConfig > External queues is a set of externally owned SQS queues accessed by this service, mapping an internal queue name to the (account ID, region, name) of the queue in the external account","title":"external_queues - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/external_queues/#external_queues","text":"[jvm]\\ val external_queues : Map < String , AwsSqsQueueConfig > External queues is a set of externally owned SQS queues accessed by this service, mapping an internal queue name to the (account ID, region, name) of the queue in the external account","title":"external_queues"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/queue_attribute_importer_frequency_ms/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig / queue_attribute_importer_frequency_ms queue_attribute_importer_frequency_ms \u00b6 [jvm]\\ val queue_attribute_importer_frequency_ms : Long = 1000 Frequency used to import Queue Attributes in milliseconds.","title":"queue_attribute_importer_frequency_ms - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/queue_attribute_importer_frequency_ms/#queue_attribute_importer_frequency_ms","text":"[jvm]\\ val queue_attribute_importer_frequency_ms : Long = 1000 Frequency used to import Queue Attributes in milliseconds.","title":"queue_attribute_importer_frequency_ms"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/sqs_sending_connect_timeout_ms/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig / sqs_sending_connect_timeout_ms sqs_sending_connect_timeout_ms \u00b6 [jvm]\\ val sqs_sending_connect_timeout_ms : Int = 1000 Connect timeout to reach SQS with for sending .","title":"sqs_sending_connect_timeout_ms - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/sqs_sending_connect_timeout_ms/#sqs_sending_connect_timeout_ms","text":"[jvm]\\ val sqs_sending_connect_timeout_ms : Int = 1000 Connect timeout to reach SQS with for sending .","title":"sqs_sending_connect_timeout_ms"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/sqs_sending_request_timeout_ms/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig / sqs_sending_request_timeout_ms sqs_sending_request_timeout_ms \u00b6 [jvm]\\ val sqs_sending_request_timeout_ms : Int = 5000 Request timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS.","title":"sqs_sending_request_timeout_ms - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/sqs_sending_request_timeout_ms/#sqs_sending_request_timeout_ms","text":"[jvm]\\ val sqs_sending_request_timeout_ms : Int = 5000 Request timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS.","title":"sqs_sending_request_timeout_ms"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/sqs_sending_socket_timeout_ms/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig / sqs_sending_socket_timeout_ms sqs_sending_socket_timeout_ms \u00b6 [jvm]\\ val sqs_sending_socket_timeout_ms : Int = 5000 Socket timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS.","title":"sqs_sending_socket_timeout_ms - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/sqs_sending_socket_timeout_ms/#sqs_sending_socket_timeout_ms","text":"[jvm]\\ val sqs_sending_socket_timeout_ms : Int = 5000 Socket timeout to reach SQS with for sending , not including retries. We only apply this for sending because receiving uses long-polling, which explicitly leverages a longer request time. We use the default retry strategy with SQS, which retries 3 times. As a result, your app could potentially spend 3 x this timeout talking to SQS.","title":"sqs_sending_socket_timeout_ms"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/task_queue/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueConfig / task_queue task_queue \u00b6 [jvm]\\ val task_queue : RepeatedTaskQueueConfig? = null Task queue configuration, which should have a num_parallel_tasks equal or greater than the number of consumed queues. If undefined, an unbounded number of parallel tasks will be used.","title":"task_queue - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-config/task_queue/#task_queue","text":"[jvm]\\ val task_queue : RepeatedTaskQueueConfig? = null Task queue configuration, which should have a num_parallel_tasks equal or greater than the number of consumed queues. If undefined, an unbounded number of parallel tasks will be used.","title":"task_queue"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueModule AwsSqsJobQueueModule \u00b6 [jvm]\\ open class AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig ) : KAbstractModule AwsSqsJobQueueModule installs job queue support provided by SQS. Constructors \u00b6 AwsSqsJobQueueModule [jvm] fun AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun < BuilderT : AwsClientBuilder< BuilderT , ClientT >, ClientT > configureClient (builder: BuilderT ) consumerRepeatedTaskQueue [jvm] @Provides fun consumerRepeatedTaskQueue (queueFactory: RepeatedTaskQueueFactory, config: AwsSqsJobQueueConfig ): RepeatedTaskQueue convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideSQSClient [jvm] @Provides fun provideSQSClient (appName: String , region: AwsRegion , credentials: AWSCredentialsProvider, features: FeatureFlags): AmazonSQS provideSQSClientForReceiving [jvm] @Provides fun provideSQSClientForReceiving (region: AwsRegion , credentials: AWSCredentialsProvider): AmazonSQS requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AwsSqsJobQueueModule - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/#awssqsjobqueuemodule","text":"[jvm]\\ open class AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig ) : KAbstractModule AwsSqsJobQueueModule installs job queue support provided by SQS.","title":"AwsSqsJobQueueModule"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/#constructors","text":"AwsSqsJobQueueModule [jvm] fun AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig )","title":"Constructors"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun < BuilderT : AwsClientBuilder< BuilderT , ClientT >, ClientT > configureClient (builder: BuilderT ) consumerRepeatedTaskQueue [jvm] @Provides fun consumerRepeatedTaskQueue (queueFactory: RepeatedTaskQueueFactory, config: AwsSqsJobQueueConfig ): RepeatedTaskQueue convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideSQSClient [jvm] @Provides fun provideSQSClient (appName: String , region: AwsRegion , credentials: AWSCredentialsProvider, features: FeatureFlags): AmazonSQS provideSQSClientForReceiving [jvm] @Provides fun provideSQSClientForReceiving (region: AwsRegion , credentials: AWSCredentialsProvider): AmazonSQS requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/-aws-sqs-job-queue-module/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueModule / AwsSqsJobQueueModule AwsSqsJobQueueModule \u00b6 [jvm]\\ fun AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig )","title":"AwsSqsJobQueueModule - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/-aws-sqs-job-queue-module/#awssqsjobqueuemodule","text":"[jvm]\\ fun AwsSqsJobQueueModule (config: AwsSqsJobQueueConfig )","title":"AwsSqsJobQueueModule"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/configure-client/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueModule / configureClient configureClient \u00b6 [jvm]\\ open fun < BuilderT : AwsClientBuilder< BuilderT , ClientT >, ClientT > configureClient (builder: BuilderT )","title":"configureClient - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/configure-client/#configureclient","text":"[jvm]\\ open fun < BuilderT : AwsClientBuilder< BuilderT , ClientT >, ClientT > configureClient (builder: BuilderT )","title":"configureClient"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/consumer-repeated-task-queue/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueModule / consumerRepeatedTaskQueue consumerRepeatedTaskQueue \u00b6 [jvm]\\ @Provides fun consumerRepeatedTaskQueue (queueFactory: RepeatedTaskQueueFactory, config: AwsSqsJobQueueConfig ): RepeatedTaskQueue","title":"consumerRepeatedTaskQueue - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/consumer-repeated-task-queue/#consumerrepeatedtaskqueue","text":"[jvm]\\ @Provides fun consumerRepeatedTaskQueue (queueFactory: RepeatedTaskQueueFactory, config: AwsSqsJobQueueConfig ): RepeatedTaskQueue","title":"consumerRepeatedTaskQueue"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/provide-s-q-s-client-for-receiving/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueModule / provideSQSClientForReceiving provideSQSClientForReceiving \u00b6 [jvm]\\ @Provides fun provideSQSClientForReceiving (region: AwsRegion , credentials: AWSCredentialsProvider): AmazonSQS","title":"provideSQSClientForReceiving - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/provide-s-q-s-client-for-receiving/#providesqsclientforreceiving","text":"[jvm]\\ @Provides fun provideSQSClientForReceiving (region: AwsRegion , credentials: AWSCredentialsProvider): AmazonSQS","title":"provideSQSClientForReceiving"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/provide-s-q-s-client/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueModule / provideSQSClient provideSQSClient \u00b6 [jvm]\\ @Provides fun provideSQSClient (appName: String , region: AwsRegion , credentials: AWSCredentialsProvider, features: FeatureFlags): AmazonSQS","title":"provideSQSClient - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/provide-s-q-s-client/#providesqsclient","text":"[jvm]\\ @Provides fun provideSQSClient (appName: String , region: AwsRegion , credentials: AWSCredentialsProvider, features: FeatureFlags): AmazonSQS","title":"provideSQSClient"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/-companion/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsJobQueueModule / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-job-queue-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsQueueConfig AwsSqsQueueConfig \u00b6 [jvm]\\ data class AwsSqsQueueConfig (region: String ?, account_id: String ?, sqs_queue_name: String ?) An AwsSqsQueueConfig tells misk about a queue, potentially in another region and/or another account. If the queue is in another account, it will require an IAM policy enabling cross account access Constructors \u00b6 AwsSqsQueueConfig [jvm] fun AwsSqsQueueConfig (region: String ? = null, account_id: String ? = null, sqs_queue_name: String ? = null) Properties \u00b6 Name Summary account_id [jvm] val account_id : String ? = null region [jvm] val region : String ? = null sqs_queue_name [jvm] val sqs_queue_name : String ? = null","title":"AwsSqsQueueConfig - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/#awssqsqueueconfig","text":"[jvm]\\ data class AwsSqsQueueConfig (region: String ?, account_id: String ?, sqs_queue_name: String ?) An AwsSqsQueueConfig tells misk about a queue, potentially in another region and/or another account. If the queue is in another account, it will require an IAM policy enabling cross account access","title":"AwsSqsQueueConfig"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/#constructors","text":"AwsSqsQueueConfig [jvm] fun AwsSqsQueueConfig (region: String ? = null, account_id: String ? = null, sqs_queue_name: String ? = null)","title":"Constructors"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/#properties","text":"Name Summary account_id [jvm] val account_id : String ? = null region [jvm] val region : String ? = null sqs_queue_name [jvm] val sqs_queue_name : String ? = null","title":"Properties"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/-aws-sqs-queue-config/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsQueueConfig / AwsSqsQueueConfig AwsSqsQueueConfig \u00b6 [jvm]\\ fun AwsSqsQueueConfig (region: String ? = null, account_id: String ? = null, sqs_queue_name: String ? = null)","title":"AwsSqsQueueConfig - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/-aws-sqs-queue-config/#awssqsqueueconfig","text":"[jvm]\\ fun AwsSqsQueueConfig (region: String ? = null, account_id: String ? = null, sqs_queue_name: String ? = null)","title":"AwsSqsQueueConfig"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/account_id/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsQueueConfig / account_id account_id \u00b6 [jvm]\\ val account_id : String ? = null","title":"account_id - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/account_id/#account_id","text":"[jvm]\\ val account_id : String ? = null","title":"account_id"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/region/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsQueueConfig / region region \u00b6 [jvm]\\ val region : String ? = null","title":"region - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/region/#region","text":"[jvm]\\ val region : String ? = null","title":"region"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/sqs_queue_name/","text":"// misk-aws / misk.jobqueue.sqs / AwsSqsQueueConfig / sqs_queue_name sqs_queue_name \u00b6 [jvm]\\ val sqs_queue_name : String ? = null","title":"sqs_queue_name - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-aws-sqs-queue-config/sqs_queue_name/#sqs_queue_name","text":"[jvm]\\ val sqs_queue_name : String ? = null","title":"sqs_queue_name"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-dead-letter-queue-provider/","text":"// misk-aws / misk.jobqueue.sqs / DeadLetterQueueProvider DeadLetterQueueProvider \u00b6 [jvm]\\ interface DeadLetterQueueProvider Interface for a provider of dead-letter queue names. Returns the name of the appropriate dead-letter QueueName for a given QueueName. Functions \u00b6 Name Summary deadLetterQueueFor [jvm] abstract fun deadLetterQueueFor (queue: QueueName): QueueName Inheritors \u00b6 Name DefaultDeadLetterQueueProvider StaticDeadLetterQueueProvider","title":"DeadLetterQueueProvider - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-dead-letter-queue-provider/#deadletterqueueprovider","text":"[jvm]\\ interface DeadLetterQueueProvider Interface for a provider of dead-letter queue names. Returns the name of the appropriate dead-letter QueueName for a given QueueName.","title":"DeadLetterQueueProvider"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-dead-letter-queue-provider/#functions","text":"Name Summary deadLetterQueueFor [jvm] abstract fun deadLetterQueueFor (queue: QueueName): QueueName","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-dead-letter-queue-provider/#inheritors","text":"Name DefaultDeadLetterQueueProvider StaticDeadLetterQueueProvider","title":"Inheritors"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-dead-letter-queue-provider/dead-letter-queue-for/","text":"// misk-aws / misk.jobqueue.sqs / DeadLetterQueueProvider / deadLetterQueueFor deadLetterQueueFor \u00b6 [jvm]\\ abstract fun deadLetterQueueFor (queue: QueueName): QueueName","title":"deadLetterQueueFor - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-dead-letter-queue-provider/dead-letter-queue-for/#deadletterqueuefor","text":"[jvm]\\ abstract fun deadLetterQueueFor (queue: QueueName): QueueName","title":"deadLetterQueueFor"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/","text":"// misk-aws / misk.jobqueue.sqs / DefaultDeadLetterQueueProvider DefaultDeadLetterQueueProvider \u00b6 [jvm]\\ @Singleton class DefaultDeadLetterQueueProvider @Injectconstructor : DeadLetterQueueProvider Default provider of dead-letter QueueName. Returns the name of the main queue suffixed with \u201c_dlq\u201d. Constructors \u00b6 DefaultDeadLetterQueueProvider [jvm] @Inject fun DefaultDeadLetterQueueProvider () Functions \u00b6 Name Summary deadLetterQueueFor [jvm] open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"DefaultDeadLetterQueueProvider - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/#defaultdeadletterqueueprovider","text":"[jvm]\\ @Singleton class DefaultDeadLetterQueueProvider @Injectconstructor : DeadLetterQueueProvider Default provider of dead-letter QueueName. Returns the name of the main queue suffixed with \u201c_dlq\u201d.","title":"DefaultDeadLetterQueueProvider"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/#constructors","text":"DefaultDeadLetterQueueProvider [jvm] @Inject fun DefaultDeadLetterQueueProvider ()","title":"Constructors"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/#functions","text":"Name Summary deadLetterQueueFor [jvm] open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/-default-dead-letter-queue-provider/","text":"// misk-aws / misk.jobqueue.sqs / DefaultDeadLetterQueueProvider / DefaultDeadLetterQueueProvider DefaultDeadLetterQueueProvider \u00b6 [jvm]\\ @Inject fun DefaultDeadLetterQueueProvider ()","title":"DefaultDeadLetterQueueProvider - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/-default-dead-letter-queue-provider/#defaultdeadletterqueueprovider","text":"[jvm]\\ @Inject fun DefaultDeadLetterQueueProvider ()","title":"DefaultDeadLetterQueueProvider"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/dead-letter-queue-for/","text":"// misk-aws / misk.jobqueue.sqs / DefaultDeadLetterQueueProvider / deadLetterQueueFor deadLetterQueueFor \u00b6 [jvm]\\ open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"deadLetterQueueFor - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-default-dead-letter-queue-provider/dead-letter-queue-for/#deadletterqueuefor","text":"[jvm]\\ open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"deadLetterQueueFor"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/","text":"// misk-aws / misk.jobqueue.sqs / FlaggedBufferedSqsClient FlaggedBufferedSqsClient \u00b6 [jvm]\\ class FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags) : AmazonSQS Temporary shim for buffered and unbuffered AmazonSQS implementations, for feature-flagged rollout of buffered SQS operations across cash cloud apps. Flag allows gates functionality on a per-service basis. Calls to sendMessage and deleteMessage will be routed to either buffered or unbuffered clients depending on the state of the feature flag for this service. All other operations are delegated to the unbufferd implementation. Once usage of the buffered client is proven safe, this shim should be deleted and substituted with AmazonSQSBufferedAsyncClient. Flag: https://app.launchdarkly.com/cash/production/features/jobqueue-buffered-sqs-client/targeting Constructors \u00b6 FlaggedBufferedSqsClient [jvm] fun FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addPermission [jvm] open override fun addPermission (p0: AddPermissionRequest): AddPermissionResult open override fun addPermission (p0: String , p1: String , p2: MutableList < String >, p3: MutableList < String >): AddPermissionResult changeMessageVisibility [jvm] open override fun changeMessageVisibility (p0: ChangeMessageVisibilityRequest): ChangeMessageVisibilityResult open override fun changeMessageVisibility (p0: String , p1: String , p2: Int ): ChangeMessageVisibilityResult changeMessageVisibilityBatch [jvm] open override fun changeMessageVisibilityBatch (p0: ChangeMessageVisibilityBatchRequest): ChangeMessageVisibilityBatchResult open override fun changeMessageVisibilityBatch (p0: String , p1: MutableList <ChangeMessageVisibilityBatchRequestEntry>): ChangeMessageVisibilityBatchResult createQueue [jvm] open override fun createQueue (p0: CreateQueueRequest): CreateQueueResult open override fun createQueue (p0: String ): CreateQueueResult deleteMessage [jvm] open override fun deleteMessage (deleteMessageRequest: DeleteMessageRequest): DeleteMessageResult open override fun deleteMessage (queueUrl: String , receiptHandle: String ): DeleteMessageResult deleteMessageBatch [jvm] open override fun deleteMessageBatch (p0: DeleteMessageBatchRequest): DeleteMessageBatchResult open override fun deleteMessageBatch (p0: String , p1: MutableList <DeleteMessageBatchRequestEntry>): DeleteMessageBatchResult deleteQueue [jvm] open override fun deleteQueue (p0: DeleteQueueRequest): DeleteQueueResult open override fun deleteQueue (p0: String ): DeleteQueueResult getCachedResponseMetadata [jvm] open override fun getCachedResponseMetadata (p0: AmazonWebServiceRequest): ResponseMetadata getQueueAttributes [jvm] open override fun getQueueAttributes (p0: GetQueueAttributesRequest): GetQueueAttributesResult open override fun getQueueAttributes (p0: String , p1: MutableList < String >): GetQueueAttributesResult getQueueUrl [jvm] open override fun getQueueUrl (p0: GetQueueUrlRequest): GetQueueUrlResult open override fun getQueueUrl (p0: String ): GetQueueUrlResult listDeadLetterSourceQueues [jvm] open override fun listDeadLetterSourceQueues (p0: ListDeadLetterSourceQueuesRequest): ListDeadLetterSourceQueuesResult listQueues [jvm] open override fun listQueues (): ListQueuesResult open override fun listQueues (p0: ListQueuesRequest): ListQueuesResult open override fun listQueues (p0: String ): ListQueuesResult listQueueTags [jvm] open override fun listQueueTags (p0: ListQueueTagsRequest): ListQueueTagsResult open override fun listQueueTags (p0: String ): ListQueueTagsResult purgeQueue [jvm] open override fun purgeQueue (p0: PurgeQueueRequest): PurgeQueueResult receiveMessage [jvm] open override fun receiveMessage (p0: ReceiveMessageRequest): ReceiveMessageResult open override fun receiveMessage (p0: String ): ReceiveMessageResult removePermission [jvm] open override fun removePermission (p0: RemovePermissionRequest): RemovePermissionResult open override fun removePermission (p0: String , p1: String ): RemovePermissionResult sendMessage [jvm] open override fun sendMessage (sendMessageRequest: SendMessageRequest): SendMessageResult open override fun sendMessage (queueUrl: String , messageBody: String ): SendMessageResult sendMessageBatch [jvm] open override fun sendMessageBatch (p0: SendMessageBatchRequest): SendMessageBatchResult open override fun sendMessageBatch (p0: String , p1: MutableList <SendMessageBatchRequestEntry>): SendMessageBatchResult setQueueAttributes [jvm] open override fun setQueueAttributes (p0: SetQueueAttributesRequest): SetQueueAttributesResult open override fun setQueueAttributes (p0: String , p1: MutableMap < String , String >): SetQueueAttributesResult shutdown [jvm] open override fun shutdown () tagQueue [jvm] open override fun tagQueue (p0: TagQueueRequest): TagQueueResult open override fun tagQueue (p0: String , p1: MutableMap < String , String >): TagQueueResult untagQueue [jvm] open override fun untagQueue (p0: UntagQueueRequest): UntagQueueResult open override fun untagQueue (p0: String , p1: MutableList < String >): UntagQueueResult","title":"FlaggedBufferedSqsClient - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/#flaggedbufferedsqsclient","text":"[jvm]\\ class FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags) : AmazonSQS Temporary shim for buffered and unbuffered AmazonSQS implementations, for feature-flagged rollout of buffered SQS operations across cash cloud apps. Flag allows gates functionality on a per-service basis. Calls to sendMessage and deleteMessage will be routed to either buffered or unbuffered clients depending on the state of the feature flag for this service. All other operations are delegated to the unbufferd implementation. Once usage of the buffered client is proven safe, this shim should be deleted and substituted with AmazonSQSBufferedAsyncClient. Flag: https://app.launchdarkly.com/cash/production/features/jobqueue-buffered-sqs-client/targeting","title":"FlaggedBufferedSqsClient"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/#constructors","text":"FlaggedBufferedSqsClient [jvm] fun FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags)","title":"Constructors"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/#functions","text":"Name Summary addPermission [jvm] open override fun addPermission (p0: AddPermissionRequest): AddPermissionResult open override fun addPermission (p0: String , p1: String , p2: MutableList < String >, p3: MutableList < String >): AddPermissionResult changeMessageVisibility [jvm] open override fun changeMessageVisibility (p0: ChangeMessageVisibilityRequest): ChangeMessageVisibilityResult open override fun changeMessageVisibility (p0: String , p1: String , p2: Int ): ChangeMessageVisibilityResult changeMessageVisibilityBatch [jvm] open override fun changeMessageVisibilityBatch (p0: ChangeMessageVisibilityBatchRequest): ChangeMessageVisibilityBatchResult open override fun changeMessageVisibilityBatch (p0: String , p1: MutableList <ChangeMessageVisibilityBatchRequestEntry>): ChangeMessageVisibilityBatchResult createQueue [jvm] open override fun createQueue (p0: CreateQueueRequest): CreateQueueResult open override fun createQueue (p0: String ): CreateQueueResult deleteMessage [jvm] open override fun deleteMessage (deleteMessageRequest: DeleteMessageRequest): DeleteMessageResult open override fun deleteMessage (queueUrl: String , receiptHandle: String ): DeleteMessageResult deleteMessageBatch [jvm] open override fun deleteMessageBatch (p0: DeleteMessageBatchRequest): DeleteMessageBatchResult open override fun deleteMessageBatch (p0: String , p1: MutableList <DeleteMessageBatchRequestEntry>): DeleteMessageBatchResult deleteQueue [jvm] open override fun deleteQueue (p0: DeleteQueueRequest): DeleteQueueResult open override fun deleteQueue (p0: String ): DeleteQueueResult getCachedResponseMetadata [jvm] open override fun getCachedResponseMetadata (p0: AmazonWebServiceRequest): ResponseMetadata getQueueAttributes [jvm] open override fun getQueueAttributes (p0: GetQueueAttributesRequest): GetQueueAttributesResult open override fun getQueueAttributes (p0: String , p1: MutableList < String >): GetQueueAttributesResult getQueueUrl [jvm] open override fun getQueueUrl (p0: GetQueueUrlRequest): GetQueueUrlResult open override fun getQueueUrl (p0: String ): GetQueueUrlResult listDeadLetterSourceQueues [jvm] open override fun listDeadLetterSourceQueues (p0: ListDeadLetterSourceQueuesRequest): ListDeadLetterSourceQueuesResult listQueues [jvm] open override fun listQueues (): ListQueuesResult open override fun listQueues (p0: ListQueuesRequest): ListQueuesResult open override fun listQueues (p0: String ): ListQueuesResult listQueueTags [jvm] open override fun listQueueTags (p0: ListQueueTagsRequest): ListQueueTagsResult open override fun listQueueTags (p0: String ): ListQueueTagsResult purgeQueue [jvm] open override fun purgeQueue (p0: PurgeQueueRequest): PurgeQueueResult receiveMessage [jvm] open override fun receiveMessage (p0: ReceiveMessageRequest): ReceiveMessageResult open override fun receiveMessage (p0: String ): ReceiveMessageResult removePermission [jvm] open override fun removePermission (p0: RemovePermissionRequest): RemovePermissionResult open override fun removePermission (p0: String , p1: String ): RemovePermissionResult sendMessage [jvm] open override fun sendMessage (sendMessageRequest: SendMessageRequest): SendMessageResult open override fun sendMessage (queueUrl: String , messageBody: String ): SendMessageResult sendMessageBatch [jvm] open override fun sendMessageBatch (p0: SendMessageBatchRequest): SendMessageBatchResult open override fun sendMessageBatch (p0: String , p1: MutableList <SendMessageBatchRequestEntry>): SendMessageBatchResult setQueueAttributes [jvm] open override fun setQueueAttributes (p0: SetQueueAttributesRequest): SetQueueAttributesResult open override fun setQueueAttributes (p0: String , p1: MutableMap < String , String >): SetQueueAttributesResult shutdown [jvm] open override fun shutdown () tagQueue [jvm] open override fun tagQueue (p0: TagQueueRequest): TagQueueResult open override fun tagQueue (p0: String , p1: MutableMap < String , String >): TagQueueResult untagQueue [jvm] open override fun untagQueue (p0: UntagQueueRequest): UntagQueueResult open override fun untagQueue (p0: String , p1: MutableList < String >): UntagQueueResult","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/-flagged-buffered-sqs-client/","text":"// misk-aws / misk.jobqueue.sqs / FlaggedBufferedSqsClient / FlaggedBufferedSqsClient FlaggedBufferedSqsClient \u00b6 [jvm]\\ fun FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags)","title":"FlaggedBufferedSqsClient - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/-flagged-buffered-sqs-client/#flaggedbufferedsqsclient","text":"[jvm]\\ fun FlaggedBufferedSqsClient (unbufferedSqs: AmazonSQS, bufferedSqs: AmazonSQS, appName: String , featureFlags: FeatureFlags)","title":"FlaggedBufferedSqsClient"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/delete-message/","text":"// misk-aws / misk.jobqueue.sqs / FlaggedBufferedSqsClient / deleteMessage deleteMessage \u00b6 [jvm]\\ open override fun deleteMessage (deleteMessageRequest: DeleteMessageRequest): DeleteMessageResult open override fun deleteMessage (queueUrl: String , receiptHandle: String ): DeleteMessageResult","title":"deleteMessage - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/delete-message/#deletemessage","text":"[jvm]\\ open override fun deleteMessage (deleteMessageRequest: DeleteMessageRequest): DeleteMessageResult open override fun deleteMessage (queueUrl: String , receiptHandle: String ): DeleteMessageResult","title":"deleteMessage"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/send-message/","text":"// misk-aws / misk.jobqueue.sqs / FlaggedBufferedSqsClient / sendMessage sendMessage \u00b6 [jvm]\\ open override fun sendMessage (sendMessageRequest: SendMessageRequest): SendMessageResult open override fun sendMessage (queueUrl: String , messageBody: String ): SendMessageResult","title":"sendMessage - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/send-message/#sendmessage","text":"[jvm]\\ open override fun sendMessage (sendMessageRequest: SendMessageRequest): SendMessageResult open override fun sendMessage (queueUrl: String , messageBody: String ): SendMessageResult","title":"sendMessage"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/shutdown/","text":"// misk-aws / misk.jobqueue.sqs / FlaggedBufferedSqsClient / shutdown shutdown \u00b6 [jvm]\\ open override fun shutdown ()","title":"shutdown - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/shutdown/#shutdown","text":"[jvm]\\ open override fun shutdown ()","title":"shutdown"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/-companion/","text":"// misk-aws / misk.jobqueue.sqs / FlaggedBufferedSqsClient / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary FEATURE [jvm] val FEATURE : Feature","title":"Companion - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/-companion/#properties","text":"Name Summary FEATURE [jvm] val FEATURE : Feature","title":"Properties"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/-companion/-f-e-a-t-u-r-e/","text":"// misk-aws / misk.jobqueue.sqs / FlaggedBufferedSqsClient / Companion / FEATURE FEATURE \u00b6 [jvm]\\ val FEATURE : Feature","title":"FEATURE - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-flagged-buffered-sqs-client/-companion/-f-e-a-t-u-r-e/#feature","text":"[jvm]\\ val FEATURE : Feature","title":"FEATURE"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/","text":"// misk-aws / misk.jobqueue.sqs / StaticDeadLetterQueueProvider StaticDeadLetterQueueProvider \u00b6 [jvm]\\ class StaticDeadLetterQueueProvider (queue: String ) : DeadLetterQueueProvider Provider of dead-letter QueueName that always returns the same value, no matter the supplied queue. For apps with queues that share a single dead-letter queue. Constructors \u00b6 StaticDeadLetterQueueProvider [jvm] fun StaticDeadLetterQueueProvider (queue: String ) Functions \u00b6 Name Summary deadLetterQueueFor [jvm] open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"StaticDeadLetterQueueProvider - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/#staticdeadletterqueueprovider","text":"[jvm]\\ class StaticDeadLetterQueueProvider (queue: String ) : DeadLetterQueueProvider Provider of dead-letter QueueName that always returns the same value, no matter the supplied queue. For apps with queues that share a single dead-letter queue.","title":"StaticDeadLetterQueueProvider"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/#constructors","text":"StaticDeadLetterQueueProvider [jvm] fun StaticDeadLetterQueueProvider (queue: String )","title":"Constructors"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/#functions","text":"Name Summary deadLetterQueueFor [jvm] open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"Functions"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/-static-dead-letter-queue-provider/","text":"// misk-aws / misk.jobqueue.sqs / StaticDeadLetterQueueProvider / StaticDeadLetterQueueProvider StaticDeadLetterQueueProvider \u00b6 [jvm]\\ fun StaticDeadLetterQueueProvider (queue: String )","title":"StaticDeadLetterQueueProvider - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/-static-dead-letter-queue-provider/#staticdeadletterqueueprovider","text":"[jvm]\\ fun StaticDeadLetterQueueProvider (queue: String )","title":"StaticDeadLetterQueueProvider"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/dead-letter-queue-for/","text":"// misk-aws / misk.jobqueue.sqs / StaticDeadLetterQueueProvider / deadLetterQueueFor deadLetterQueueFor \u00b6 [jvm]\\ open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"deadLetterQueueFor - Misk"},{"location":"0.x/misk-aws/misk.jobqueue.sqs/-static-dead-letter-queue-provider/dead-letter-queue-for/#deadletterqueuefor","text":"[jvm]\\ open override fun deadLetterQueueFor (queue: QueueName): QueueName","title":"deadLetterQueueFor"},{"location":"0.x/misk-aws/misk.s3/","text":"// misk-aws / misk.s3 Package misk.s3 \u00b6 Types \u00b6 Name Summary RealS3Module [jvm] open class RealS3Module : KAbstractModule","title":"Package misk.s3 - Misk"},{"location":"0.x/misk-aws/misk.s3/#package-misks3","text":"","title":"Package misk.s3"},{"location":"0.x/misk-aws/misk.s3/#types","text":"Name Summary RealS3Module [jvm] open class RealS3Module : KAbstractModule","title":"Types"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/","text":"// misk-aws / misk.s3 / RealS3Module RealS3Module \u00b6 [jvm]\\ open class RealS3Module : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun configureClient (builder: AmazonS3ClientBuilder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideS3 [jvm] @Provides @Singleton fun provideS3 (awsRegion: AwsRegion , awsCredentialsProvider: AWSCredentialsProvider): AmazonS3 requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RealS3Module - Misk"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/#reals3module","text":"[jvm]\\ open class RealS3Module : KAbstractModule","title":"RealS3Module"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun configureClient (builder: AmazonS3ClientBuilder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideS3 [jvm] @Provides @Singleton fun provideS3 (awsRegion: AwsRegion , awsCredentialsProvider: AWSCredentialsProvider): AmazonS3 requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/-real-s3-module/","text":"// misk-aws / misk.s3 / RealS3Module / RealS3Module RealS3Module \u00b6 [jvm]\\ fun RealS3Module ()","title":"RealS3Module - Misk"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/-real-s3-module/#reals3module","text":"[jvm]\\ fun RealS3Module ()","title":"RealS3Module"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/configure-client/","text":"// misk-aws / misk.s3 / RealS3Module / configureClient configureClient \u00b6 [jvm]\\ open fun configureClient (builder: AmazonS3ClientBuilder)","title":"configureClient - Misk"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/configure-client/#configureclient","text":"[jvm]\\ open fun configureClient (builder: AmazonS3ClientBuilder)","title":"configureClient"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/provide-s3/","text":"// misk-aws / misk.s3 / RealS3Module / provideS3 provideS3 \u00b6 [jvm]\\ @Provides @Singleton fun provideS3 (awsRegion: AwsRegion , awsCredentialsProvider: AWSCredentialsProvider): AmazonS3","title":"provideS3 - Misk"},{"location":"0.x/misk-aws/misk.s3/-real-s3-module/provide-s3/#provides3","text":"[jvm]\\ @Provides @Singleton fun provideS3 (awsRegion: AwsRegion , awsCredentialsProvider: AWSCredentialsProvider): AmazonS3","title":"provideS3"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/","text":"// misk-aws-dynamodb / misk.dynamodb Package misk.dynamodb \u00b6 Types \u00b6 Name Summary DynamoDbHealthCheck [jvm] @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: AmazonDynamoDB, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck DynamoDbService [jvm] interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb. DyTimestampedEntity [jvm] interface DyTimestampedEntity Interface for a timestamped entity. DyVersionedEntity [jvm] interface DyVersionedEntity This version field is used for optimistic locking. RealDynamoDbModule [jvm] open class RealDynamoDbModule (clientConfig: ClientConfiguration, requiredTableTypes: KClass <*>) : KAbstractModule Install this module to have access to an AmazonDynamoDB client. This can be used to create a DynamoDbMapper for querying of a DynamoDb table. RequiredDynamoDbTable [jvm] data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up.","title":"Package misk.dynamodb - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/#package-miskdynamodb","text":"","title":"Package misk.dynamodb"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/#types","text":"Name Summary DynamoDbHealthCheck [jvm] @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: AmazonDynamoDB, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck DynamoDbService [jvm] interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb. DyTimestampedEntity [jvm] interface DyTimestampedEntity Interface for a timestamped entity. DyVersionedEntity [jvm] interface DyVersionedEntity This version field is used for optimistic locking. RealDynamoDbModule [jvm] open class RealDynamoDbModule (clientConfig: ClientConfiguration, requiredTableTypes: KClass <*>) : KAbstractModule Install this module to have access to an AmazonDynamoDB client. This can be used to create a DynamoDbMapper for querying of a DynamoDb table. RequiredDynamoDbTable [jvm] data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up.","title":"Types"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-timestamped-entity/","text":"// misk-aws-dynamodb / misk.dynamodb / DyTimestampedEntity DyTimestampedEntity \u00b6 [jvm]\\ interface DyTimestampedEntity Interface for a timestamped entity. Properties \u00b6 Name Summary created_at [jvm] abstract var created_at : Date Use the below annotations on the implementations. This will automatically set field to be when the entity is created. This will save the Date as a Long (epoch milliseconds). updated_at [jvm] abstract var updated_at : Date Use the below annotations on the implementations. This will automatically set field every time entity is saved. This will save the Date as a Long (epoch milliseconds).","title":"DyTimestampedEntity - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-timestamped-entity/#dytimestampedentity","text":"[jvm]\\ interface DyTimestampedEntity Interface for a timestamped entity.","title":"DyTimestampedEntity"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-timestamped-entity/#properties","text":"Name Summary created_at [jvm] abstract var created_at : Date Use the below annotations on the implementations. This will automatically set field to be when the entity is created. This will save the Date as a Long (epoch milliseconds). updated_at [jvm] abstract var updated_at : Date Use the below annotations on the implementations. This will automatically set field every time entity is saved. This will save the Date as a Long (epoch milliseconds).","title":"Properties"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-timestamped-entity/created_at/","text":"// misk-aws-dynamodb / misk.dynamodb / DyTimestampedEntity / created_at created_at \u00b6 [jvm]\\ abstract var created_at : Date Use the below annotations on the implementations. This will automatically set field to be when the entity is created. This will save the Date as a Long (epoch milliseconds).","title":"created_at - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-timestamped-entity/created_at/#created_at","text":"[jvm]\\ abstract var created_at : Date Use the below annotations on the implementations. This will automatically set field to be when the entity is created. This will save the Date as a Long (epoch milliseconds).","title":"created_at"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-timestamped-entity/updated_at/","text":"// misk-aws-dynamodb / misk.dynamodb / DyTimestampedEntity / updated_at updated_at \u00b6 [jvm]\\ abstract var updated_at : Date Use the below annotations on the implementations. This will automatically set field every time entity is saved. This will save the Date as a Long (epoch milliseconds).","title":"updated_at - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-timestamped-entity/updated_at/#updated_at","text":"[jvm]\\ abstract var updated_at : Date Use the below annotations on the implementations. This will automatically set field every time entity is saved. This will save the Date as a Long (epoch milliseconds).","title":"updated_at"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-versioned-entity/","text":"// misk-aws-dynamodb / misk.dynamodb / DyVersionedEntity DyVersionedEntity \u00b6 [jvm]\\ interface DyVersionedEntity This version field is used for optimistic locking. Properties \u00b6 Name Summary version [jvm] abstract var version : Long This version field can be used to do optimistic locking on updates. Note that the DynamoDbMapper will need to be in save mode DynamoDBMapperConfig.SaveBehavior.CLOBBER","title":"DyVersionedEntity - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-versioned-entity/#dyversionedentity","text":"[jvm]\\ interface DyVersionedEntity This version field is used for optimistic locking.","title":"DyVersionedEntity"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-versioned-entity/#properties","text":"Name Summary version [jvm] abstract var version : Long This version field can be used to do optimistic locking on updates. Note that the DynamoDbMapper will need to be in save mode DynamoDBMapperConfig.SaveBehavior.CLOBBER","title":"Properties"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-versioned-entity/version/","text":"// misk-aws-dynamodb / misk.dynamodb / DyVersionedEntity / version version \u00b6 [jvm]\\ abstract var version : Long This version field can be used to do optimistic locking on updates. Note that the DynamoDbMapper will need to be in save mode DynamoDBMapperConfig.SaveBehavior.CLOBBER","title":"version - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dy-versioned-entity/version/#version","text":"[jvm]\\ abstract var version : Long This version field can be used to do optimistic locking on updates. Note that the DynamoDbMapper will need to be in save mode DynamoDBMapperConfig.SaveBehavior.CLOBBER","title":"version"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/","text":"// misk-aws-dynamodb / misk.dynamodb / DynamoDbHealthCheck DynamoDbHealthCheck \u00b6 [jvm]\\ @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: AmazonDynamoDB, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary status [jvm] open override fun status (): HealthStatus","title":"DynamoDbHealthCheck - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/#dynamodbhealthcheck","text":"[jvm]\\ @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: AmazonDynamoDB, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck","title":"DynamoDbHealthCheck"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/#functions","text":"Name Summary status [jvm] open override fun status (): HealthStatus","title":"Functions"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/-dynamo-db-health-check/","text":"// misk-aws-dynamodb / misk.dynamodb / DynamoDbHealthCheck / DynamoDbHealthCheck DynamoDbHealthCheck \u00b6 [jvm]\\ @Inject fun DynamoDbHealthCheck (dynamoDb: AmazonDynamoDB, requiredTables: List < RequiredDynamoDbTable >)","title":"DynamoDbHealthCheck - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/-dynamo-db-health-check/#dynamodbhealthcheck","text":"[jvm]\\ @Inject fun DynamoDbHealthCheck (dynamoDb: AmazonDynamoDB, requiredTables: List < RequiredDynamoDbTable >)","title":"DynamoDbHealthCheck"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/status/","text":"// misk-aws-dynamodb / misk.dynamodb / DynamoDbHealthCheck / status status \u00b6 [jvm]\\ open override fun status (): HealthStatus","title":"status - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/status/#status","text":"[jvm]\\ open override fun status (): HealthStatus","title":"status"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/-companion/","text":"// misk-aws-dynamodb / misk.dynamodb / DynamoDbHealthCheck / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary logger [jvm] val logger : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/-companion/#properties","text":"Name Summary logger [jvm] val logger : KLogger","title":"Properties"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/-companion/logger/","text":"// misk-aws-dynamodb / misk.dynamodb / DynamoDbHealthCheck / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-health-check/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-service/","text":"// misk-aws-dynamodb / misk.dynamodb / DynamoDbService DynamoDbService \u00b6 [jvm]\\ interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb. Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"DynamoDbService - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-service/#dynamodbservice","text":"[jvm]\\ interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb.","title":"DynamoDbService"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-dynamo-db-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/","text":"// misk-aws-dynamodb / misk.dynamodb / RealDynamoDbModule RealDynamoDbModule \u00b6 [jvm]\\ open class RealDynamoDbModule (clientConfig: ClientConfiguration, requiredTableTypes: KClass <*>) : KAbstractModule Install this module to have access to an AmazonDynamoDB client. This can be used to create a DynamoDbMapper for querying of a DynamoDb table. Parameters \u00b6 jvm requiredTableTypes a list of mapper classes annotated DynamoDBTable. Constructors \u00b6 RealDynamoDbModule [jvm] fun RealDynamoDbModule (clientConfig: ClientConfiguration = ClientConfiguration(), vararg requiredTableTypes: KClass <*>) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun configureClient (builder: AmazonDynamoDBClientBuilder) configureStreamsClient [jvm] open fun configureStreamsClient (builder: AmazonDynamoDBStreamsClientBuilder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable > providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDB providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDBStreams requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RealDynamoDbModule - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/#realdynamodbmodule","text":"[jvm]\\ open class RealDynamoDbModule (clientConfig: ClientConfiguration, requiredTableTypes: KClass <*>) : KAbstractModule Install this module to have access to an AmazonDynamoDB client. This can be used to create a DynamoDbMapper for querying of a DynamoDb table.","title":"RealDynamoDbModule"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/#parameters","text":"jvm requiredTableTypes a list of mapper classes annotated DynamoDBTable.","title":"Parameters"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/#constructors","text":"RealDynamoDbModule [jvm] fun RealDynamoDbModule (clientConfig: ClientConfiguration = ClientConfiguration(), vararg requiredTableTypes: KClass <*>)","title":"Constructors"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun configureClient (builder: AmazonDynamoDBClientBuilder) configureStreamsClient [jvm] open fun configureStreamsClient (builder: AmazonDynamoDBStreamsClientBuilder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable > providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDB providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDBStreams requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/-real-dynamo-db-module/","text":"// misk-aws-dynamodb / misk.dynamodb / RealDynamoDbModule / RealDynamoDbModule RealDynamoDbModule \u00b6 [jvm]\\ fun RealDynamoDbModule (clientConfig: ClientConfiguration = ClientConfiguration(), vararg requiredTableTypes: KClass <*>) Parameters \u00b6 jvm requiredTableTypes a list of mapper classes annotated DynamoDBTable.","title":"RealDynamoDbModule - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/-real-dynamo-db-module/#realdynamodbmodule","text":"[jvm]\\ fun RealDynamoDbModule (clientConfig: ClientConfiguration = ClientConfiguration(), vararg requiredTableTypes: KClass <*>)","title":"RealDynamoDbModule"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/-real-dynamo-db-module/#parameters","text":"jvm requiredTableTypes a list of mapper classes annotated DynamoDBTable.","title":"Parameters"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/configure-client/","text":"// misk-aws-dynamodb / misk.dynamodb / RealDynamoDbModule / configureClient configureClient \u00b6 [jvm]\\ open fun configureClient (builder: AmazonDynamoDBClientBuilder)","title":"configureClient - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/configure-client/#configureclient","text":"[jvm]\\ open fun configureClient (builder: AmazonDynamoDBClientBuilder)","title":"configureClient"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/configure-streams-client/","text":"// misk-aws-dynamodb / misk.dynamodb / RealDynamoDbModule / configureStreamsClient configureStreamsClient \u00b6 [jvm]\\ open fun configureStreamsClient (builder: AmazonDynamoDBStreamsClientBuilder)","title":"configureStreamsClient - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/configure-streams-client/#configurestreamsclient","text":"[jvm]\\ open fun configureStreamsClient (builder: AmazonDynamoDBStreamsClientBuilder)","title":"configureStreamsClient"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/provide-required-tables/","text":"// misk-aws-dynamodb / misk.dynamodb / RealDynamoDbModule / provideRequiredTables provideRequiredTables \u00b6 [jvm]\\ @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable >","title":"provideRequiredTables - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/provide-required-tables/#providerequiredtables","text":"[jvm]\\ @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable >","title":"provideRequiredTables"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/provides-amazon-dynamo-d-b-streams/","text":"// misk-aws-dynamodb / misk.dynamodb / RealDynamoDbModule / providesAmazonDynamoDBStreams providesAmazonDynamoDBStreams \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDBStreams","title":"providesAmazonDynamoDBStreams - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/provides-amazon-dynamo-d-b-streams/#providesamazondynamodbstreams","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDBStreams","title":"providesAmazonDynamoDBStreams"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/provides-amazon-dynamo-d-b/","text":"// misk-aws-dynamodb / misk.dynamodb / RealDynamoDbModule / providesAmazonDynamoDB providesAmazonDynamoDB \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDB","title":"providesAmazonDynamoDB - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-real-dynamo-db-module/provides-amazon-dynamo-d-b/#providesamazondynamodb","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (awsRegion: AwsRegion, awsCredentialsProvider: AWSCredentialsProvider): AmazonDynamoDB","title":"providesAmazonDynamoDB"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/","text":"// misk-aws-dynamodb / misk.dynamodb / RequiredDynamoDbTable RequiredDynamoDbTable \u00b6 [jvm]\\ data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up. The table name is sometimes prefixed with the service name, like \u201curlshortener.urls\u201d. Constructors \u00b6 RequiredDynamoDbTable [jvm] fun RequiredDynamoDbTable (name: String ) Properties \u00b6 Name Summary name [jvm] val name : String","title":"RequiredDynamoDbTable - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/#requireddynamodbtable","text":"[jvm]\\ data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up. The table name is sometimes prefixed with the service name, like \u201curlshortener.urls\u201d.","title":"RequiredDynamoDbTable"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/#constructors","text":"RequiredDynamoDbTable [jvm] fun RequiredDynamoDbTable (name: String )","title":"Constructors"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/#properties","text":"Name Summary name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/-required-dynamo-db-table/","text":"// misk-aws-dynamodb / misk.dynamodb / RequiredDynamoDbTable / RequiredDynamoDbTable RequiredDynamoDbTable \u00b6 [jvm]\\ fun RequiredDynamoDbTable (name: String )","title":"RequiredDynamoDbTable - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/-required-dynamo-db-table/#requireddynamodbtable","text":"[jvm]\\ fun RequiredDynamoDbTable (name: String )","title":"RequiredDynamoDbTable"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/name/","text":"// misk-aws-dynamodb / misk.dynamodb / RequiredDynamoDbTable / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-aws-dynamodb/misk.dynamodb/-required-dynamo-db-table/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing Package misk.aws.dynamodb.testing \u00b6 Types \u00b6 Name Summary DockerDynamoDbModule [jvm] class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. DynamoDbTable [jvm] data class DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. InProcessDynamoDbModule [jvm] class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. TestDynamoDb [jvm] class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule.","title":"Package misk.aws.dynamodb.testing - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/#package-miskawsdynamodbtesting","text":"","title":"Package misk.aws.dynamodb.testing"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/#types","text":"Name Summary DockerDynamoDbModule [jvm] class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. DynamoDbTable [jvm] data class DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. InProcessDynamoDbModule [jvm] class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. TestDynamoDb [jvm] class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule.","title":"Types"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DockerDynamoDbModule DockerDynamoDbModule \u00b6 [jvm]\\ class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. Note that this may not be used alongside InProcessDynamoDbModule . DynamoDB may execute in Docker or in-process, but never both. Constructors \u00b6 DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (vararg tables: KClass <*>) DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (tables: List < DynamoDbTable >) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams providesTestDynamoDb [jvm] @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"DockerDynamoDbModule - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/#dockerdynamodbmodule","text":"[jvm]\\ class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. Note that this may not be used alongside InProcessDynamoDbModule . DynamoDB may execute in Docker or in-process, but never both.","title":"DockerDynamoDbModule"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/#constructors","text":"DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (vararg tables: KClass <*>) DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (tables: List < DynamoDbTable >)","title":"Constructors"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams providesTestDynamoDb [jvm] @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/-docker-dynamo-db-module/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DockerDynamoDbModule / DockerDynamoDbModule DockerDynamoDbModule \u00b6 [jvm]\\ fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) fun DockerDynamoDbModule (vararg tables: KClass <*>) fun DockerDynamoDbModule (tables: List < DynamoDbTable >)","title":"DockerDynamoDbModule - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/-docker-dynamo-db-module/#dockerdynamodbmodule","text":"[jvm]\\ fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) fun DockerDynamoDbModule (vararg tables: KClass <*>) fun DockerDynamoDbModule (tables: List < DynamoDbTable >)","title":"DockerDynamoDbModule"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provide-required-tables/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DockerDynamoDbModule / provideRequiredTables provideRequiredTables \u00b6 [jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provide-required-tables/#providerequiredtables","text":"[jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b-streams/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DockerDynamoDbModule / providesAmazonDynamoDBStreams providesAmazonDynamoDBStreams \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams","title":"providesAmazonDynamoDBStreams - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b-streams/#providesamazondynamodbstreams","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams","title":"providesAmazonDynamoDBStreams"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DockerDynamoDbModule / providesAmazonDynamoDB providesAmazonDynamoDB \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB","title":"providesAmazonDynamoDB - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b/#providesamazondynamodb","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB","title":"providesAmazonDynamoDB"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provides-test-dynamo-db/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DockerDynamoDbModule / providesTestDynamoDb providesTestDynamoDb \u00b6 [jvm]\\ @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb","title":"providesTestDynamoDb - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-docker-dynamo-db-module/provides-test-dynamo-db/#providestestdynamodb","text":"[jvm]\\ @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb","title":"providesTestDynamoDb"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DynamoDbTable DynamoDbTable \u00b6 [jvm]\\ data class DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. Use configureTable to customize the table creation request for testing, such as to configure the secondary indexes required by ProjectionType.ALL. Constructors \u00b6 DynamoDbTable [jvm] fun DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest = { it }) Properties \u00b6 Name Summary configureTable [jvm] val configureTable : (CreateTableRequest) -> CreateTableRequest tableClass [jvm] val tableClass : KClass <*> tableName [jvm] val tableName : String","title":"DynamoDbTable - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/#dynamodbtable","text":"[jvm]\\ data class DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. Use configureTable to customize the table creation request for testing, such as to configure the secondary indexes required by ProjectionType.ALL.","title":"DynamoDbTable"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/#constructors","text":"DynamoDbTable [jvm] fun DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest = { it })","title":"Constructors"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/#properties","text":"Name Summary configureTable [jvm] val configureTable : (CreateTableRequest) -> CreateTableRequest tableClass [jvm] val tableClass : KClass <*> tableName [jvm] val tableName : String","title":"Properties"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/-dynamo-db-table/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DynamoDbTable / DynamoDbTable DynamoDbTable \u00b6 [jvm]\\ fun DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest = { it })","title":"DynamoDbTable - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/-dynamo-db-table/#dynamodbtable","text":"[jvm]\\ fun DynamoDbTable (tableClass: KClass <*>, configureTable: (CreateTableRequest) -> CreateTableRequest = { it })","title":"DynamoDbTable"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/configure-table/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DynamoDbTable / configureTable configureTable \u00b6 [jvm]\\ val configureTable : (CreateTableRequest) -> CreateTableRequest","title":"configureTable - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/configure-table/#configuretable","text":"[jvm]\\ val configureTable : (CreateTableRequest) -> CreateTableRequest","title":"configureTable"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/table-class/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DynamoDbTable / tableClass tableClass \u00b6 [jvm]\\ val tableClass : KClass <*>","title":"tableClass - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/table-class/#tableclass","text":"[jvm]\\ val tableClass : KClass <*>","title":"tableClass"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/table-name/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / DynamoDbTable / tableName tableName \u00b6 [jvm]\\ val tableName : String","title":"tableName - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-dynamo-db-table/table-name/#tablename","text":"[jvm]\\ val tableName : String","title":"tableName"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / InProcessDynamoDbModule InProcessDynamoDbModule \u00b6 [jvm]\\ class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. Note that this may not be used alongside DockerDynamoDbModule and @MiskExternalDependency DockerDynamoDb. DynamoDB may execute in Docker or in-process, but never both. Constructors \u00b6 InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (vararg tables: KClass <*>) InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (tables: List < DynamoDbTable >) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams providesDynamoDbServiceWrapper [jvm] @Provides @Singleton fun providesDynamoDbServiceWrapper (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"InProcessDynamoDbModule - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/#inprocessdynamodbmodule","text":"[jvm]\\ class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. Note that this may not be used alongside DockerDynamoDbModule and @MiskExternalDependency DockerDynamoDb. DynamoDB may execute in Docker or in-process, but never both.","title":"InProcessDynamoDbModule"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/#constructors","text":"InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (vararg tables: KClass <*>) InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (tables: List < DynamoDbTable >)","title":"Constructors"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams providesDynamoDbServiceWrapper [jvm] @Provides @Singleton fun providesDynamoDbServiceWrapper (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/-in-process-dynamo-db-module/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / InProcessDynamoDbModule / InProcessDynamoDbModule InProcessDynamoDbModule \u00b6 [jvm]\\ fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) fun InProcessDynamoDbModule (vararg tables: KClass <*>) fun InProcessDynamoDbModule (tables: List < DynamoDbTable >)","title":"InProcessDynamoDbModule - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/-in-process-dynamo-db-module/#inprocessdynamodbmodule","text":"[jvm]\\ fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) fun InProcessDynamoDbModule (vararg tables: KClass <*>) fun InProcessDynamoDbModule (tables: List < DynamoDbTable >)","title":"InProcessDynamoDbModule"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provide-required-tables/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / InProcessDynamoDbModule / provideRequiredTables provideRequiredTables \u00b6 [jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provide-required-tables/#providerequiredtables","text":"[jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b-streams/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / InProcessDynamoDbModule / providesAmazonDynamoDBStreams providesAmazonDynamoDBStreams \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams","title":"providesAmazonDynamoDBStreams - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b-streams/#providesamazondynamodbstreams","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): AmazonDynamoDBStreams","title":"providesAmazonDynamoDBStreams"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / InProcessDynamoDbModule / providesAmazonDynamoDB providesAmazonDynamoDB \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB","title":"providesAmazonDynamoDB - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b/#providesamazondynamodb","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): AmazonDynamoDB","title":"providesAmazonDynamoDB"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provides-dynamo-db-service-wrapper/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / InProcessDynamoDbModule / providesDynamoDbServiceWrapper providesDynamoDbServiceWrapper \u00b6 [jvm]\\ @Provides @Singleton fun providesDynamoDbServiceWrapper (): TestDynamoDb","title":"providesDynamoDbServiceWrapper - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-in-process-dynamo-db-module/provides-dynamo-db-service-wrapper/#providesdynamodbservicewrapper","text":"[jvm]\\ @Provides @Singleton fun providesDynamoDbServiceWrapper (): TestDynamoDb","title":"providesDynamoDbServiceWrapper"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / TestDynamoDb TestDynamoDb \u00b6 [jvm]\\ class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule. Constructors \u00b6 TestDynamoDb [jvm] @Inject fun TestDynamoDb (service: TestDynamoDbService) Functions \u00b6 Name Summary addListener [jvm] open override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] open override fun awaitRunning () open fun awaitRunning (p0: Duration ) open override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] open override fun awaitTerminated () open fun awaitTerminated (p0: Duration ) open override fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] open override fun failureCause (): Throwable isRunning [jvm] open override fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue open override fun startAsync (): Service state [jvm] open override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue open override fun stopAsync (): Service Properties \u00b6 Name Summary service [jvm] val service : TestDynamoDbService","title":"TestDynamoDb - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/#testdynamodb","text":"[jvm]\\ class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule.","title":"TestDynamoDb"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/#constructors","text":"TestDynamoDb [jvm] @Inject fun TestDynamoDb (service: TestDynamoDbService)","title":"Constructors"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/#functions","text":"Name Summary addListener [jvm] open override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] open override fun awaitRunning () open fun awaitRunning (p0: Duration ) open override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] open override fun awaitTerminated () open fun awaitTerminated (p0: Duration ) open override fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] open override fun failureCause (): Throwable isRunning [jvm] open override fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue open override fun startAsync (): Service state [jvm] open override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue open override fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/#properties","text":"Name Summary service [jvm] val service : TestDynamoDbService","title":"Properties"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/-test-dynamo-db/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / TestDynamoDb / TestDynamoDb TestDynamoDb \u00b6 [jvm]\\ @Inject fun TestDynamoDb (service: TestDynamoDbService)","title":"TestDynamoDb - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/-test-dynamo-db/#testdynamodb","text":"[jvm]\\ @Inject fun TestDynamoDb (service: TestDynamoDbService)","title":"TestDynamoDb"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/service/","text":"// misk-aws-dynamodb-testing / misk.aws.dynamodb.testing / TestDynamoDb / service service \u00b6 [jvm]\\ val service : TestDynamoDbService","title":"service - Misk"},{"location":"0.x/misk-aws-dynamodb-testing/misk.aws.dynamodb.testing/-test-dynamo-db/service/#service","text":"[jvm]\\ val service : TestDynamoDbService","title":"service"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb Package misk.aws2.dynamodb \u00b6 Types \u00b6 Name Summary DynamoDbHealthCheck [jvm] @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: DynamoDbClient, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck DynamoDbService [jvm] interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb. RealDynamoDbModule [jvm] open class RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration, requiredTables: List < RequiredDynamoDbTable >, endpointOverride: URI ?) : KAbstractModule Install this module to have access to a DynamoDbClient. RequiredDynamoDbTable [jvm] data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up.","title":"Package misk.aws2.dynamodb - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/#package-miskaws2dynamodb","text":"","title":"Package misk.aws2.dynamodb"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/#types","text":"Name Summary DynamoDbHealthCheck [jvm] @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: DynamoDbClient, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck DynamoDbService [jvm] interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb. RealDynamoDbModule [jvm] open class RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration, requiredTables: List < RequiredDynamoDbTable >, endpointOverride: URI ?) : KAbstractModule Install this module to have access to a DynamoDbClient. RequiredDynamoDbTable [jvm] data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up.","title":"Types"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / DynamoDbHealthCheck DynamoDbHealthCheck \u00b6 [jvm]\\ @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: DynamoDbClient, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary status [jvm] open override fun status (): HealthStatus","title":"DynamoDbHealthCheck - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/#dynamodbhealthcheck","text":"[jvm]\\ @Singleton class DynamoDbHealthCheck @Injectconstructor(dynamoDb: DynamoDbClient, requiredTables: List < RequiredDynamoDbTable >) : HealthCheck","title":"DynamoDbHealthCheck"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/#functions","text":"Name Summary status [jvm] open override fun status (): HealthStatus","title":"Functions"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/-dynamo-db-health-check/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / DynamoDbHealthCheck / DynamoDbHealthCheck DynamoDbHealthCheck \u00b6 [jvm]\\ @Inject fun DynamoDbHealthCheck (dynamoDb: DynamoDbClient, requiredTables: List < RequiredDynamoDbTable >)","title":"DynamoDbHealthCheck - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/-dynamo-db-health-check/#dynamodbhealthcheck","text":"[jvm]\\ @Inject fun DynamoDbHealthCheck (dynamoDb: DynamoDbClient, requiredTables: List < RequiredDynamoDbTable >)","title":"DynamoDbHealthCheck"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/status/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / DynamoDbHealthCheck / status status \u00b6 [jvm]\\ open override fun status (): HealthStatus","title":"status - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/status/#status","text":"[jvm]\\ open override fun status (): HealthStatus","title":"status"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/-companion/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / DynamoDbHealthCheck / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary logger [jvm] val logger : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/-companion/#properties","text":"Name Summary logger [jvm] val logger : KLogger","title":"Properties"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/-companion/logger/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / DynamoDbHealthCheck / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-health-check/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-service/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / DynamoDbService DynamoDbService \u00b6 [jvm]\\ interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb. Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"DynamoDbService - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-service/#dynamodbservice","text":"[jvm]\\ interface DynamoDbService : Service Service that\u2019s running when DynamoDb is usable. Configure your service to depend on this service if it needs DynamoDb.","title":"DynamoDbService"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-dynamo-db-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RealDynamoDbModule RealDynamoDbModule \u00b6 [jvm]\\ open class RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration, requiredTables: List < RequiredDynamoDbTable >, endpointOverride: URI ?) : KAbstractModule Install this module to have access to a DynamoDbClient. Constructors \u00b6 RealDynamoDbModule [jvm] fun RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration = ClientOverrideConfiguration.builder().build(), requiredTables: List < RequiredDynamoDbTable > = listOf(), endpointOverride: URI ? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun configureClient (builder: DynamoDbClientBuilder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable > providesDynamoDbClient [jvm] @Provides @Singleton fun providesDynamoDbClient (awsRegion: AwsRegion, awsCredentialsProvider: AwsCredentialsProvider): DynamoDbClient requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RealDynamoDbModule - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/#realdynamodbmodule","text":"[jvm]\\ open class RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration, requiredTables: List < RequiredDynamoDbTable >, endpointOverride: URI ?) : KAbstractModule Install this module to have access to a DynamoDbClient.","title":"RealDynamoDbModule"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/#constructors","text":"RealDynamoDbModule [jvm] fun RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration = ClientOverrideConfiguration.builder().build(), requiredTables: List < RequiredDynamoDbTable > = listOf(), endpointOverride: URI ? = null)","title":"Constructors"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureClient [jvm] open fun configureClient (builder: DynamoDbClientBuilder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable > providesDynamoDbClient [jvm] @Provides @Singleton fun providesDynamoDbClient (awsRegion: AwsRegion, awsCredentialsProvider: AwsCredentialsProvider): DynamoDbClient requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/-real-dynamo-db-module/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RealDynamoDbModule / RealDynamoDbModule RealDynamoDbModule \u00b6 [jvm]\\ fun RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration = ClientOverrideConfiguration.builder().build(), requiredTables: List < RequiredDynamoDbTable > = listOf(), endpointOverride: URI ? = null)","title":"RealDynamoDbModule - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/-real-dynamo-db-module/#realdynamodbmodule","text":"[jvm]\\ fun RealDynamoDbModule (clientOverrideConfig: ClientOverrideConfiguration = ClientOverrideConfiguration.builder().build(), requiredTables: List < RequiredDynamoDbTable > = listOf(), endpointOverride: URI ? = null)","title":"RealDynamoDbModule"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/configure-client/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RealDynamoDbModule / configureClient configureClient \u00b6 [jvm]\\ open fun configureClient (builder: DynamoDbClientBuilder)","title":"configureClient - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/configure-client/#configureclient","text":"[jvm]\\ open fun configureClient (builder: DynamoDbClientBuilder)","title":"configureClient"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/provide-required-tables/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RealDynamoDbModule / provideRequiredTables provideRequiredTables \u00b6 [jvm]\\ @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable >","title":"provideRequiredTables - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/provide-required-tables/#providerequiredtables","text":"[jvm]\\ @Provides @Singleton fun provideRequiredTables (): List < RequiredDynamoDbTable >","title":"provideRequiredTables"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/provides-dynamo-db-client/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RealDynamoDbModule / providesDynamoDbClient providesDynamoDbClient \u00b6 [jvm]\\ @Provides @Singleton fun providesDynamoDbClient (awsRegion: AwsRegion, awsCredentialsProvider: AwsCredentialsProvider): DynamoDbClient","title":"providesDynamoDbClient - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-real-dynamo-db-module/provides-dynamo-db-client/#providesdynamodbclient","text":"[jvm]\\ @Provides @Singleton fun providesDynamoDbClient (awsRegion: AwsRegion, awsCredentialsProvider: AwsCredentialsProvider): DynamoDbClient","title":"providesDynamoDbClient"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RequiredDynamoDbTable RequiredDynamoDbTable \u00b6 [jvm]\\ data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up. The table name is sometimes prefixed with the service name, like \u201curlshortener.urls\u201d. Constructors \u00b6 RequiredDynamoDbTable [jvm] fun RequiredDynamoDbTable (name: String ) Properties \u00b6 Name Summary name [jvm] val name : String","title":"RequiredDynamoDbTable - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/#requireddynamodbtable","text":"[jvm]\\ data class RequiredDynamoDbTable (name: String ) A table that must be available in the DynamoDB instance. If this table doesn\u2019t exist, the service will not start up. The table name is sometimes prefixed with the service name, like \u201curlshortener.urls\u201d.","title":"RequiredDynamoDbTable"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/#constructors","text":"RequiredDynamoDbTable [jvm] fun RequiredDynamoDbTable (name: String )","title":"Constructors"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/#properties","text":"Name Summary name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/-required-dynamo-db-table/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RequiredDynamoDbTable / RequiredDynamoDbTable RequiredDynamoDbTable \u00b6 [jvm]\\ fun RequiredDynamoDbTable (name: String )","title":"RequiredDynamoDbTable - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/-required-dynamo-db-table/#requireddynamodbtable","text":"[jvm]\\ fun RequiredDynamoDbTable (name: String )","title":"RequiredDynamoDbTable"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/name/","text":"// misk-aws2-dynamodb / misk.aws2.dynamodb / RequiredDynamoDbTable / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-aws2-dynamodb/misk.aws2.dynamodb/-required-dynamo-db-table/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing Package misk.aws2.dynamodb.testing \u00b6 Types \u00b6 Name Summary DockerDynamoDbModule [jvm] class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. DynamoDbTable [jvm] data class DynamoDbTable @ JvmOverloads constructor(tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. InProcessDynamoDbModule [jvm] class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. TestDynamoDb [jvm] class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule.","title":"Package misk.aws2.dynamodb.testing - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/#package-miskaws2dynamodbtesting","text":"","title":"Package misk.aws2.dynamodb.testing"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/#types","text":"Name Summary DockerDynamoDbModule [jvm] class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. DynamoDbTable [jvm] data class DynamoDbTable @ JvmOverloads constructor(tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. InProcessDynamoDbModule [jvm] class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. TestDynamoDb [jvm] class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule.","title":"Types"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DockerDynamoDbModule DockerDynamoDbModule \u00b6 [jvm]\\ class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. Note that this may not be used alongside LocalDynamoDbModule. DynamoDB may execute in Docker or in-process, but never both. Constructors \u00b6 DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (tables: List < DynamoDbTable >) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient providesTestDynamoDb [jvm] @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"DockerDynamoDbModule - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/#dockerdynamodbmodule","text":"[jvm]\\ class DockerDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Spins up a docker container for testing. It clears the table content before each test starts. Note that this may not be used alongside LocalDynamoDbModule. DynamoDB may execute in Docker or in-process, but never both.","title":"DockerDynamoDbModule"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/#constructors","text":"DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) DockerDynamoDbModule [jvm] fun DockerDynamoDbModule (tables: List < DynamoDbTable >)","title":"Constructors"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient providesTestDynamoDb [jvm] @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/-docker-dynamo-db-module/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DockerDynamoDbModule / DockerDynamoDbModule DockerDynamoDbModule \u00b6 [jvm]\\ fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) fun DockerDynamoDbModule (tables: List < DynamoDbTable >)","title":"DockerDynamoDbModule - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/-docker-dynamo-db-module/#dockerdynamodbmodule","text":"[jvm]\\ fun DockerDynamoDbModule (vararg tables: DynamoDbTable ) fun DockerDynamoDbModule (tables: List < DynamoDbTable >)","title":"DockerDynamoDbModule"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provide-required-tables/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DockerDynamoDbModule / provideRequiredTables provideRequiredTables \u00b6 [jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provide-required-tables/#providerequiredtables","text":"[jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b-streams/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DockerDynamoDbModule / providesAmazonDynamoDBStreams providesAmazonDynamoDBStreams \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient","title":"providesAmazonDynamoDBStreams - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b-streams/#providesamazondynamodbstreams","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient","title":"providesAmazonDynamoDBStreams"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DockerDynamoDbModule / providesAmazonDynamoDB providesAmazonDynamoDB \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient","title":"providesAmazonDynamoDB - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provides-amazon-dynamo-d-b/#providesamazondynamodb","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient","title":"providesAmazonDynamoDB"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provides-test-dynamo-db/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DockerDynamoDbModule / providesTestDynamoDb providesTestDynamoDb \u00b6 [jvm]\\ @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb","title":"providesTestDynamoDb - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-docker-dynamo-db-module/provides-test-dynamo-db/#providestestdynamodb","text":"[jvm]\\ @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb","title":"providesTestDynamoDb"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DynamoDbTable DynamoDbTable \u00b6 [jvm]\\ data class DynamoDbTable @ JvmOverloads constructor(tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. Use configureTable to customize the table creation request for testing, such as to configure the secondary indexes required by ProjectionType.ALL. Constructors \u00b6 DynamoDbTable [jvm] @ JvmOverloads fun DynamoDbTable (tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder = { it }) Properties \u00b6 Name Summary configureTable [jvm] val configureTable : (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder tableClass [jvm] val tableClass : KClass <*> tableName [jvm] val tableName : String","title":"DynamoDbTable - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/#dynamodbtable","text":"[jvm]\\ data class DynamoDbTable @ JvmOverloads constructor(tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder) Use this with DockerDynamoDbModule or InProcessDynamoDbModule to configure your DynamoDB tables for each test execution. Use configureTable to customize the table creation request for testing, such as to configure the secondary indexes required by ProjectionType.ALL.","title":"DynamoDbTable"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/#constructors","text":"DynamoDbTable [jvm] @ JvmOverloads fun DynamoDbTable (tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder = { it })","title":"Constructors"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/#properties","text":"Name Summary configureTable [jvm] val configureTable : (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder tableClass [jvm] val tableClass : KClass <*> tableName [jvm] val tableName : String","title":"Properties"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/-dynamo-db-table/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DynamoDbTable / DynamoDbTable DynamoDbTable \u00b6 [jvm]\\ @ JvmOverloads fun DynamoDbTable (tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder = { it })","title":"DynamoDbTable - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/-dynamo-db-table/#dynamodbtable","text":"[jvm]\\ @ JvmOverloads fun DynamoDbTable (tableName: String , tableClass: KClass <*>, configureTable: (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder = { it })","title":"DynamoDbTable"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/configure-table/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DynamoDbTable / configureTable configureTable \u00b6 [jvm]\\ val configureTable : (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder","title":"configureTable - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/configure-table/#configuretable","text":"[jvm]\\ val configureTable : (CreateTableEnhancedRequest.Builder) -> CreateTableEnhancedRequest.Builder","title":"configureTable"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/table-class/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DynamoDbTable / tableClass tableClass \u00b6 [jvm]\\ val tableClass : KClass <*>","title":"tableClass - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/table-class/#tableclass","text":"[jvm]\\ val tableClass : KClass <*>","title":"tableClass"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/table-name/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / DynamoDbTable / tableName tableName \u00b6 [jvm]\\ val tableName : String","title":"tableName - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-dynamo-db-table/table-name/#tablename","text":"[jvm]\\ val tableName : String","title":"tableName"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / InProcessDynamoDbModule InProcessDynamoDbModule \u00b6 [jvm]\\ class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. Note that this may not be used alongside DockerDynamoDbModule and @MiskExternalDependency DockerDynamoDb. DynamoDB may execute in Docker or in-process, but never both. Constructors \u00b6 InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (tables: List < DynamoDbTable >) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient providesTestDynamoDb [jvm] @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"InProcessDynamoDbModule - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/#inprocessdynamodbmodule","text":"[jvm]\\ class InProcessDynamoDbModule (tables: List < DynamoDbTable >) : KAbstractModule Executes a DynamoDB service in-process per test. It clears the table content before each test starts. Note that this may not be used alongside DockerDynamoDbModule and @MiskExternalDependency DockerDynamoDb. DynamoDB may execute in Docker or in-process, but never both.","title":"InProcessDynamoDbModule"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/#constructors","text":"InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) InProcessDynamoDbModule [jvm] fun InProcessDynamoDbModule (tables: List < DynamoDbTable >)","title":"Constructors"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideRequiredTables [jvm] @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable> providesAmazonDynamoDB [jvm] @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient providesAmazonDynamoDBStreams [jvm] @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient providesTestDynamoDb [jvm] @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/-in-process-dynamo-db-module/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / InProcessDynamoDbModule / InProcessDynamoDbModule InProcessDynamoDbModule \u00b6 [jvm]\\ fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) fun InProcessDynamoDbModule (tables: List < DynamoDbTable >)","title":"InProcessDynamoDbModule - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/-in-process-dynamo-db-module/#inprocessdynamodbmodule","text":"[jvm]\\ fun InProcessDynamoDbModule (vararg tables: DynamoDbTable ) fun InProcessDynamoDbModule (tables: List < DynamoDbTable >)","title":"InProcessDynamoDbModule"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provide-required-tables/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / InProcessDynamoDbModule / provideRequiredTables provideRequiredTables \u00b6 [jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provide-required-tables/#providerequiredtables","text":"[jvm]\\ @Provides @Singleton fun provideRequiredTables (): List <RequiredDynamoDbTable>","title":"provideRequiredTables"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b-streams/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / InProcessDynamoDbModule / providesAmazonDynamoDBStreams providesAmazonDynamoDBStreams \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient","title":"providesAmazonDynamoDBStreams - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b-streams/#providesamazondynamodbstreams","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDBStreams (testDynamoDb: TestDynamoDb ): DynamoDbStreamsClient","title":"providesAmazonDynamoDBStreams"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / InProcessDynamoDbModule / providesAmazonDynamoDB providesAmazonDynamoDB \u00b6 [jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient","title":"providesAmazonDynamoDB - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provides-amazon-dynamo-d-b/#providesamazondynamodb","text":"[jvm]\\ @Provides @Singleton fun providesAmazonDynamoDB (testDynamoDb: TestDynamoDb ): DynamoDbClient","title":"providesAmazonDynamoDB"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provides-test-dynamo-db/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / InProcessDynamoDbModule / providesTestDynamoDb providesTestDynamoDb \u00b6 [jvm]\\ @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb","title":"providesTestDynamoDb - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-in-process-dynamo-db-module/provides-test-dynamo-db/#providestestdynamodb","text":"[jvm]\\ @Provides @Singleton fun providesTestDynamoDb (): TestDynamoDb","title":"providesTestDynamoDb"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / TestDynamoDb TestDynamoDb \u00b6 [jvm]\\ class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule. Constructors \u00b6 TestDynamoDb [jvm] @Inject fun TestDynamoDb (service: TestDynamoDbService) Functions \u00b6 Name Summary addListener [jvm] open override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] open override fun awaitRunning () open fun awaitRunning (p0: Duration ) open override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] open override fun awaitTerminated () open fun awaitTerminated (p0: Duration ) open override fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] open override fun failureCause (): Throwable isRunning [jvm] open override fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue open override fun startAsync (): Service state [jvm] open override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue open override fun stopAsync (): Service Properties \u00b6 Name Summary service [jvm] val service : TestDynamoDbService","title":"TestDynamoDb - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/#testdynamodb","text":"[jvm]\\ class TestDynamoDb @Injectconstructor(service: TestDynamoDbService) : Service Thin wrapper to make TestDynamoDbService, which is not a @Singleton, compatible with ServiceModule.","title":"TestDynamoDb"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/#constructors","text":"TestDynamoDb [jvm] @Inject fun TestDynamoDb (service: TestDynamoDbService)","title":"Constructors"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/#functions","text":"Name Summary addListener [jvm] open override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] open override fun awaitRunning () open fun awaitRunning (p0: Duration ) open override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] open override fun awaitTerminated () open fun awaitTerminated (p0: Duration ) open override fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] open override fun failureCause (): Throwable isRunning [jvm] open override fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue open override fun startAsync (): Service state [jvm] open override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue open override fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/#properties","text":"Name Summary service [jvm] val service : TestDynamoDbService","title":"Properties"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/-test-dynamo-db/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / TestDynamoDb / TestDynamoDb TestDynamoDb \u00b6 [jvm]\\ @Inject fun TestDynamoDb (service: TestDynamoDbService)","title":"TestDynamoDb - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/-test-dynamo-db/#testdynamodb","text":"[jvm]\\ @Inject fun TestDynamoDb (service: TestDynamoDbService)","title":"TestDynamoDb"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/service/","text":"// misk-aws2-dynamodb-testing / misk.aws2.dynamodb.testing / TestDynamoDb / service service \u00b6 [jvm]\\ val service : TestDynamoDbService","title":"service - Misk"},{"location":"0.x/misk-aws2-dynamodb-testing/misk.aws2.dynamodb.testing/-test-dynamo-db/service/#service","text":"[jvm]\\ val service : TestDynamoDbService","title":"service"},{"location":"0.x/misk-clustering/misk.clustering/","text":"// misk-clustering / misk.clustering Package misk.clustering \u00b6 Types \u00b6 Name Summary Cluster [jvm] interface Cluster A Cluster provides access to cluster membership for a service, allowing instances of a service to monitor the state of its peers ClusterHashRing [jvm] class ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction, vnodesCount: Int ) : ClusterResourceMapper A ClusterHashRing maps resources to cluster members based on a consistent hash ClusterResourceMapper [jvm] interface ClusterResourceMapper A ClusterResourceMapper maps string based resource IDs onto members of a cluster for the purposes of resource ownership. The default ClusterResourceMapper is a ClusterHashRing which performs a consistent hash across the cluster member, but Cluster s can supply their own mappings if there is a mechanism specific to that cluster (or to supply a fake) ClusterService [jvm] interface ClusterService : Service Marker interface for the service that produces a Cluster . ClusterWatch [jvm] typealias ClusterWatch = ( Cluster.Changes ) -> Unit A ClusterWatch is a callback function triggered when cluster membership changes DefaultCluster [jvm] @Singleton class DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper ) : AbstractExecutionThreadService, Cluster , ClusterService A DefaultCluster is the default implementation of the Cluster , which relies on an outside source such as a cluster watcher to inform it as members become ready or not ready. The DefaultCluster handles computing the actual cluster changes, and managing application watches that need to be triggered as the cluster changes. NoMembersAvailableException [jvm] class NoMembersAvailableException (resourceId: String ) : Exception Thrown if the cluster does not have any members available.","title":"Package misk.clustering - Misk"},{"location":"0.x/misk-clustering/misk.clustering/#package-miskclustering","text":"","title":"Package misk.clustering"},{"location":"0.x/misk-clustering/misk.clustering/#types","text":"Name Summary Cluster [jvm] interface Cluster A Cluster provides access to cluster membership for a service, allowing instances of a service to monitor the state of its peers ClusterHashRing [jvm] class ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction, vnodesCount: Int ) : ClusterResourceMapper A ClusterHashRing maps resources to cluster members based on a consistent hash ClusterResourceMapper [jvm] interface ClusterResourceMapper A ClusterResourceMapper maps string based resource IDs onto members of a cluster for the purposes of resource ownership. The default ClusterResourceMapper is a ClusterHashRing which performs a consistent hash across the cluster member, but Cluster s can supply their own mappings if there is a mechanism specific to that cluster (or to supply a fake) ClusterService [jvm] interface ClusterService : Service Marker interface for the service that produces a Cluster . ClusterWatch [jvm] typealias ClusterWatch = ( Cluster.Changes ) -> Unit A ClusterWatch is a callback function triggered when cluster membership changes DefaultCluster [jvm] @Singleton class DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper ) : AbstractExecutionThreadService, Cluster , ClusterService A DefaultCluster is the default implementation of the Cluster , which relies on an outside source such as a cluster watcher to inform it as members become ready or not ready. The DefaultCluster handles computing the actual cluster changes, and managing application watches that need to be triggered as the cluster changes. NoMembersAvailableException [jvm] class NoMembersAvailableException (resourceId: String ) : Exception Thrown if the cluster does not have any members available.","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/","text":"// misk-clustering / misk.clustering / Cluster Cluster \u00b6 [jvm]\\ interface Cluster A Cluster provides access to cluster membership for a service, allowing instances of a service to monitor the state of its peers Types \u00b6 Name Summary Changes [jvm] data class Changes (snapshot: Cluster.Snapshot , added: Set < Cluster.Member >, removed: Set < Cluster.Member >) Member [jvm] data class Member (name: String , ipAddress: String ) Snapshot [jvm] data class Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean , resourceMapper: ClusterResourceMapper ) Snapshot is a consistent moment-in-time view of the cluster state Functions \u00b6 Name Summary newResourceMapper [jvm] open fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper watch [jvm] abstract fun watch (watch: ClusterWatch ) Registers interest in cluster changes Properties \u00b6 Name Summary snapshot [jvm] abstract val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state Inheritors \u00b6 Name DefaultCluster FakeCluster","title":"Cluster - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/#cluster","text":"[jvm]\\ interface Cluster A Cluster provides access to cluster membership for a service, allowing instances of a service to monitor the state of its peers","title":"Cluster"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/#types","text":"Name Summary Changes [jvm] data class Changes (snapshot: Cluster.Snapshot , added: Set < Cluster.Member >, removed: Set < Cluster.Member >) Member [jvm] data class Member (name: String , ipAddress: String ) Snapshot [jvm] data class Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean , resourceMapper: ClusterResourceMapper ) Snapshot is a consistent moment-in-time view of the cluster state","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/#functions","text":"Name Summary newResourceMapper [jvm] open fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper watch [jvm] abstract fun watch (watch: ClusterWatch ) Registers interest in cluster changes","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/#properties","text":"Name Summary snapshot [jvm] abstract val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/#inheritors","text":"Name DefaultCluster FakeCluster","title":"Inheritors"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/new-resource-mapper/","text":"// misk-clustering / misk.clustering / Cluster / newResourceMapper newResourceMapper \u00b6 [jvm]\\ open fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper Return \u00b6 A new ClusterResourceMapper for the given set of ready members","title":"newResourceMapper - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/new-resource-mapper/#newresourcemapper","text":"[jvm]\\ open fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper","title":"newResourceMapper"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/new-resource-mapper/#return","text":"A new ClusterResourceMapper for the given set of ready members","title":"Return"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/snapshot/","text":"// misk-clustering / misk.clustering / Cluster / snapshot snapshot \u00b6 [jvm]\\ abstract val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"snapshot - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/snapshot/#snapshot","text":"[jvm]\\ abstract val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"snapshot"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/watch/","text":"// misk-clustering / misk.clustering / Cluster / watch watch \u00b6 [jvm]\\ abstract fun watch (watch: ClusterWatch ) Registers interest in cluster changes","title":"watch - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/watch/#watch","text":"[jvm]\\ abstract fun watch (watch: ClusterWatch ) Registers interest in cluster changes","title":"watch"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/","text":"// misk-clustering / misk.clustering / Cluster / Changes Changes \u00b6 [jvm]\\ data class Changes (snapshot: Cluster.Snapshot , added: Set < Cluster.Member >, removed: Set < Cluster.Member >) Properties \u00b6 Name Summary added [jvm] val added : Set < Cluster.Member > hasDiffs [jvm] val hasDiffs : Boolean removed [jvm] val removed : Set < Cluster.Member > snapshot [jvm] val snapshot : Cluster.Snapshot","title":"Changes - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/#changes","text":"[jvm]\\ data class Changes (snapshot: Cluster.Snapshot , added: Set < Cluster.Member >, removed: Set < Cluster.Member >)","title":"Changes"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/#properties","text":"Name Summary added [jvm] val added : Set < Cluster.Member > hasDiffs [jvm] val hasDiffs : Boolean removed [jvm] val removed : Set < Cluster.Member > snapshot [jvm] val snapshot : Cluster.Snapshot","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/-changes/","text":"// misk-clustering / misk.clustering / Cluster / Changes / Changes Changes \u00b6 [jvm]\\ fun Changes (snapshot: Cluster.Snapshot , added: Set < Cluster.Member > = setOf(), removed: Set < Cluster.Member > = setOf())","title":"Changes - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/-changes/#changes","text":"[jvm]\\ fun Changes (snapshot: Cluster.Snapshot , added: Set < Cluster.Member > = setOf(), removed: Set < Cluster.Member > = setOf())","title":"Changes"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/added/","text":"// misk-clustering / misk.clustering / Cluster / Changes / added added \u00b6 [jvm]\\ val added : Set < Cluster.Member >","title":"added - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/added/#added","text":"[jvm]\\ val added : Set < Cluster.Member >","title":"added"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/has-diffs/","text":"// misk-clustering / misk.clustering / Cluster / Changes / hasDiffs hasDiffs \u00b6 [jvm]\\ val hasDiffs : Boolean","title":"hasDiffs - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/has-diffs/#hasdiffs","text":"[jvm]\\ val hasDiffs : Boolean","title":"hasDiffs"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/removed/","text":"// misk-clustering / misk.clustering / Cluster / Changes / removed removed \u00b6 [jvm]\\ val removed : Set < Cluster.Member >","title":"removed - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/removed/#removed","text":"[jvm]\\ val removed : Set < Cluster.Member >","title":"removed"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/snapshot/","text":"// misk-clustering / misk.clustering / Cluster / Changes / snapshot snapshot \u00b6 [jvm]\\ val snapshot : Cluster.Snapshot","title":"snapshot - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-changes/snapshot/#snapshot","text":"[jvm]\\ val snapshot : Cluster.Snapshot","title":"snapshot"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/","text":"// misk-clustering / misk.clustering / Cluster / Member Member \u00b6 [jvm]\\ data class Member (name: String , ipAddress: String ) Properties \u00b6 Name Summary ipAddress [jvm] val ipAddress : String name [jvm] val name : String","title":"Member - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/#member","text":"[jvm]\\ data class Member (name: String , ipAddress: String )","title":"Member"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/#properties","text":"Name Summary ipAddress [jvm] val ipAddress : String name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/-member/","text":"// misk-clustering / misk.clustering / Cluster / Member / Member Member \u00b6 [jvm]\\ fun Member (name: String , ipAddress: String )","title":"Member - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/-member/#member","text":"[jvm]\\ fun Member (name: String , ipAddress: String )","title":"Member"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/ip-address/","text":"// misk-clustering / misk.clustering / Cluster / Member / ipAddress ipAddress \u00b6 [jvm]\\ val ipAddress : String","title":"ipAddress - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/ip-address/#ipaddress","text":"[jvm]\\ val ipAddress : String","title":"ipAddress"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/name/","text":"// misk-clustering / misk.clustering / Cluster / Member / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-member/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/","text":"// misk-clustering / misk.clustering / Cluster / Snapshot Snapshot \u00b6 [jvm]\\ data class Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean , resourceMapper: ClusterResourceMapper ) Snapshot is a consistent moment-in-time view of the cluster state Constructors \u00b6 Snapshot [jvm] fun Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean = readyMembers.any { it.name == self.name }, resourceMapper: ClusterResourceMapper ) Properties \u00b6 Name Summary readyMembers [jvm] val readyMembers : Set < Cluster.Member > All of the members of the cluster that are up and reporting as ready to handle traffic readyPeers [jvm] val readyPeers : Set < Cluster.Member > The of the ready peers; basically all of the ready cluster members except sel resourceMapper [jvm] val resourceMapper : ClusterResourceMapper A ClusterResourceMapper built from the ready members of this cluster self [jvm] val self : Cluster.Member The member representing this instance of the service selfReady [jvm] val selfReady : Boolean true if the current service instance is ready as perceived by the cluster manager","title":"Snapshot - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/#snapshot","text":"[jvm]\\ data class Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean , resourceMapper: ClusterResourceMapper ) Snapshot is a consistent moment-in-time view of the cluster state","title":"Snapshot"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/#constructors","text":"Snapshot [jvm] fun Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean = readyMembers.any { it.name == self.name }, resourceMapper: ClusterResourceMapper )","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/#properties","text":"Name Summary readyMembers [jvm] val readyMembers : Set < Cluster.Member > All of the members of the cluster that are up and reporting as ready to handle traffic readyPeers [jvm] val readyPeers : Set < Cluster.Member > The of the ready peers; basically all of the ready cluster members except sel resourceMapper [jvm] val resourceMapper : ClusterResourceMapper A ClusterResourceMapper built from the ready members of this cluster self [jvm] val self : Cluster.Member The member representing this instance of the service selfReady [jvm] val selfReady : Boolean true if the current service instance is ready as perceived by the cluster manager","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/-snapshot/","text":"// misk-clustering / misk.clustering / Cluster / Snapshot / Snapshot Snapshot \u00b6 [jvm]\\ fun Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean = readyMembers.any { it.name == self.name }, resourceMapper: ClusterResourceMapper )","title":"Snapshot - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/-snapshot/#snapshot","text":"[jvm]\\ fun Snapshot (self: Cluster.Member , readyMembers: Set < Cluster.Member >, selfReady: Boolean = readyMembers.any { it.name == self.name }, resourceMapper: ClusterResourceMapper )","title":"Snapshot"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/ready-members/","text":"// misk-clustering / misk.clustering / Cluster / Snapshot / readyMembers readyMembers \u00b6 [jvm]\\ val readyMembers : Set < Cluster.Member > All of the members of the cluster that are up and reporting as ready to handle traffic","title":"readyMembers - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/ready-members/#readymembers","text":"[jvm]\\ val readyMembers : Set < Cluster.Member > All of the members of the cluster that are up and reporting as ready to handle traffic","title":"readyMembers"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/ready-peers/","text":"// misk-clustering / misk.clustering / Cluster / Snapshot / readyPeers readyPeers \u00b6 [jvm]\\ val readyPeers : Set < Cluster.Member > The of the ready peers; basically all of the ready cluster members except sel","title":"readyPeers - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/ready-peers/#readypeers","text":"[jvm]\\ val readyPeers : Set < Cluster.Member > The of the ready peers; basically all of the ready cluster members except sel","title":"readyPeers"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/resource-mapper/","text":"// misk-clustering / misk.clustering / Cluster / Snapshot / resourceMapper resourceMapper \u00b6 [jvm]\\ val resourceMapper : ClusterResourceMapper A ClusterResourceMapper built from the ready members of this cluster","title":"resourceMapper - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/resource-mapper/#resourcemapper","text":"[jvm]\\ val resourceMapper : ClusterResourceMapper A ClusterResourceMapper built from the ready members of this cluster","title":"resourceMapper"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/self-ready/","text":"// misk-clustering / misk.clustering / Cluster / Snapshot / selfReady selfReady \u00b6 [jvm]\\ val selfReady : Boolean true if the current service instance is ready as perceived by the cluster manager","title":"selfReady - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/self-ready/#selfready","text":"[jvm]\\ val selfReady : Boolean true if the current service instance is ready as perceived by the cluster manager","title":"selfReady"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/self/","text":"// misk-clustering / misk.clustering / Cluster / Snapshot / self self \u00b6 [jvm]\\ val self : Cluster.Member The member representing this instance of the service","title":"self - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster/-snapshot/self/#self","text":"[jvm]\\ val self : Cluster.Member The member representing this instance of the service","title":"self"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/","text":"// misk-clustering / misk.clustering / ClusterHashRing ClusterHashRing \u00b6 [jvm]\\ class ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction, vnodesCount: Int ) : ClusterResourceMapper A ClusterHashRing maps resources to cluster members based on a consistent hash Constructors \u00b6 ClusterHashRing [jvm] fun ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction = Hashing.murmur3_32(), vnodesCount: Int = 16) Functions \u00b6 Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean get [jvm] open operator override fun get (resourceId: String ): Cluster.Member hashCode [jvm] open override fun hashCode (): Int","title":"ClusterHashRing - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/#clusterhashring","text":"[jvm]\\ class ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction, vnodesCount: Int ) : ClusterResourceMapper A ClusterHashRing maps resources to cluster members based on a consistent hash","title":"ClusterHashRing"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/#constructors","text":"ClusterHashRing [jvm] fun ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction = Hashing.murmur3_32(), vnodesCount: Int = 16)","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/#functions","text":"Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean get [jvm] open operator override fun get (resourceId: String ): Cluster.Member hashCode [jvm] open override fun hashCode (): Int","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/-cluster-hash-ring/","text":"// misk-clustering / misk.clustering / ClusterHashRing / ClusterHashRing ClusterHashRing \u00b6 [jvm]\\ fun ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction = Hashing.murmur3_32(), vnodesCount: Int = 16)","title":"ClusterHashRing - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/-cluster-hash-ring/#clusterhashring","text":"[jvm]\\ fun ClusterHashRing (members: Collection < Cluster.Member >, hashFn: HashFunction = Hashing.murmur3_32(), vnodesCount: Int = 16)","title":"ClusterHashRing"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/equals/","text":"// misk-clustering / misk.clustering / ClusterHashRing / equals equals \u00b6 [jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/equals/#equals","text":"[jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/get/","text":"// misk-clustering / misk.clustering / ClusterHashRing / get get \u00b6 [jvm]\\ open operator override fun get (resourceId: String ): Cluster.Member Return \u00b6 The Cluster.Member that should own the given resource id","title":"get - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/get/#get","text":"[jvm]\\ open operator override fun get (resourceId: String ): Cluster.Member","title":"get"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/get/#return","text":"The Cluster.Member that should own the given resource id","title":"Return"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/hash-code/","text":"// misk-clustering / misk.clustering / ClusterHashRing / hashCode hashCode \u00b6 [jvm]\\ open override fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-hash-ring/hash-code/#hashcode","text":"[jvm]\\ open override fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/","text":"// misk-clustering / misk.clustering / ClusterResourceMapper ClusterResourceMapper \u00b6 [jvm]\\ interface ClusterResourceMapper A ClusterResourceMapper maps string based resource IDs onto members of a cluster for the purposes of resource ownership. The default ClusterResourceMapper is a ClusterHashRing which performs a consistent hash across the cluster member, but Cluster s can supply their own mappings if there is a mechanism specific to that cluster (or to supply a fake) Functions \u00b6 Name Summary get [jvm] abstract operator fun get (resourceId: String ): Cluster.Member Inheritors \u00b6 Name ClusterHashRing ExplicitClusterResourceMapper","title":"ClusterResourceMapper - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/#clusterresourcemapper","text":"[jvm]\\ interface ClusterResourceMapper A ClusterResourceMapper maps string based resource IDs onto members of a cluster for the purposes of resource ownership. The default ClusterResourceMapper is a ClusterHashRing which performs a consistent hash across the cluster member, but Cluster s can supply their own mappings if there is a mechanism specific to that cluster (or to supply a fake)","title":"ClusterResourceMapper"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/#functions","text":"Name Summary get [jvm] abstract operator fun get (resourceId: String ): Cluster.Member","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/#inheritors","text":"Name ClusterHashRing ExplicitClusterResourceMapper","title":"Inheritors"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/get/","text":"// misk-clustering / misk.clustering / ClusterResourceMapper / get get \u00b6 [jvm]\\ abstract operator fun get (resourceId: String ): Cluster.Member Return \u00b6 The Cluster.Member that should own the given resource id Throws \u00b6 misk.clustering.NoMembersAvailableException if there are no members in the cluster","title":"get - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/get/#get","text":"[jvm]\\ abstract operator fun get (resourceId: String ): Cluster.Member","title":"get"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/get/#return","text":"The Cluster.Member that should own the given resource id","title":"Return"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-resource-mapper/get/#throws","text":"misk.clustering.NoMembersAvailableException if there are no members in the cluster","title":"Throws"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-service/","text":"// misk-clustering / misk.clustering / ClusterService ClusterService \u00b6 [jvm]\\ interface ClusterService : Service Marker interface for the service that produces a Cluster . Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service Inheritors \u00b6 Name DefaultCluster FakeCluster","title":"ClusterService - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-service/#clusterservice","text":"[jvm]\\ interface ClusterService : Service Marker interface for the service that produces a Cluster .","title":"ClusterService"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering/-cluster-service/#inheritors","text":"Name DefaultCluster FakeCluster","title":"Inheritors"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/","text":"// misk-clustering / misk.clustering / DefaultCluster DefaultCluster \u00b6 [jvm]\\ @Singleton class DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper ) : AbstractExecutionThreadService, Cluster , ClusterService A DefaultCluster is the default implementation of the Cluster , which relies on an outside source such as a cluster watcher to inform it as members become ready or not ready. The DefaultCluster handles computing the actual cluster changes, and managing application watches that need to be triggered as the cluster changes. Constructors \u00b6 DefaultCluster [jvm] fun DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper = { ClusterHashRing(it) }) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) clusterChanged [jvm] fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf()) Triggers a change to the cluster in response members becoming ready or not ready executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean newResourceMapper [jvm] open override fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper serviceName [jvm] open fun serviceName (): String shutDown [jvm] open fun shutDown () startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service syncPoint [jvm] fun syncPoint (callback: () -> Unit ) Triggers a callback once all of the actions on the queue have been processed. Useful for writing deterministic tests toString [jvm] open override fun toString (): String watch [jvm] open override fun watch (watch: ClusterWatch ) Adds a new cluster watch Properties \u00b6 Name Summary snapshot [jvm] open override val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"DefaultCluster - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/#defaultcluster","text":"[jvm]\\ @Singleton class DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper ) : AbstractExecutionThreadService, Cluster , ClusterService A DefaultCluster is the default implementation of the Cluster , which relies on an outside source such as a cluster watcher to inform it as members become ready or not ready. The DefaultCluster handles computing the actual cluster changes, and managing application watches that need to be triggered as the cluster changes.","title":"DefaultCluster"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/#constructors","text":"DefaultCluster [jvm] fun DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper = { ClusterHashRing(it) })","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) clusterChanged [jvm] fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf()) Triggers a change to the cluster in response members becoming ready or not ready executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean newResourceMapper [jvm] open override fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper serviceName [jvm] open fun serviceName (): String shutDown [jvm] open fun shutDown () startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service syncPoint [jvm] fun syncPoint (callback: () -> Unit ) Triggers a callback once all of the actions on the queue have been processed. Useful for writing deterministic tests toString [jvm] open override fun toString (): String watch [jvm] open override fun watch (watch: ClusterWatch ) Adds a new cluster watch","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/#properties","text":"Name Summary snapshot [jvm] open override val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/-default-cluster/","text":"// misk-clustering / misk.clustering / DefaultCluster / DefaultCluster DefaultCluster \u00b6 [jvm]\\ fun DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper = { ClusterHashRing(it) })","title":"DefaultCluster - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/-default-cluster/#defaultcluster","text":"[jvm]\\ fun DefaultCluster (self: Cluster.Member , newResourceMapperFn: (members: Set < Cluster.Member >) -> ClusterResourceMapper = { ClusterHashRing(it) })","title":"DefaultCluster"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/cluster-changed/","text":"// misk-clustering / misk.clustering / DefaultCluster / clusterChanged clusterChanged \u00b6 [jvm]\\ fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf()) Triggers a change to the cluster in response members becoming ready or not ready","title":"clusterChanged - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/cluster-changed/#clusterchanged","text":"[jvm]\\ fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf()) Triggers a change to the cluster in response members becoming ready or not ready","title":"clusterChanged"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/new-resource-mapper/","text":"// misk-clustering / misk.clustering / DefaultCluster / newResourceMapper newResourceMapper \u00b6 [jvm]\\ open override fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper Return \u00b6 A new ClusterResourceMapper for the given set of ready members","title":"newResourceMapper - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/new-resource-mapper/#newresourcemapper","text":"[jvm]\\ open override fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper","title":"newResourceMapper"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/new-resource-mapper/#return","text":"A new ClusterResourceMapper for the given set of ready members","title":"Return"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/snapshot/","text":"// misk-clustering / misk.clustering / DefaultCluster / snapshot snapshot \u00b6 [jvm]\\ open override val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"snapshot - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/snapshot/#snapshot","text":"[jvm]\\ open override val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"snapshot"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/sync-point/","text":"// misk-clustering / misk.clustering / DefaultCluster / syncPoint syncPoint \u00b6 [jvm]\\ fun syncPoint (callback: () -> Unit ) Triggers a callback once all of the actions on the queue have been processed. Useful for writing deterministic tests","title":"syncPoint - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/sync-point/#syncpoint","text":"[jvm]\\ fun syncPoint (callback: () -> Unit ) Triggers a callback once all of the actions on the queue have been processed. Useful for writing deterministic tests","title":"syncPoint"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/watch/","text":"// misk-clustering / misk.clustering / DefaultCluster / watch watch \u00b6 [jvm]\\ open override fun watch (watch: ClusterWatch ) Adds a new cluster watch","title":"watch - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/watch/#watch","text":"[jvm]\\ open override fun watch (watch: ClusterWatch ) Adds a new cluster watch","title":"watch"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/-companion/","text":"// misk-clustering / misk.clustering / DefaultCluster / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary log [jvm] val log : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/-companion/#properties","text":"Name Summary log [jvm] val log : KLogger","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/-companion/log/","text":"// misk-clustering / misk.clustering / DefaultCluster / Companion / log log \u00b6 [jvm]\\ val log : KLogger","title":"log - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-default-cluster/-companion/log/#log","text":"[jvm]\\ val log : KLogger","title":"log"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/","text":"// misk-clustering / misk.clustering / NoMembersAvailableException NoMembersAvailableException \u00b6 [jvm]\\ class NoMembersAvailableException (resourceId: String ) : Exception Thrown if the cluster does not have any members available. Constructors \u00b6 NoMembersAvailableException [jvm] fun NoMembersAvailableException (resourceId: String ) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? resourceId [jvm] val resourceId : String","title":"NoMembersAvailableException - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/#nomembersavailableexception","text":"[jvm]\\ class NoMembersAvailableException (resourceId: String ) : Exception Thrown if the cluster does not have any members available.","title":"NoMembersAvailableException"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/#constructors","text":"NoMembersAvailableException [jvm] fun NoMembersAvailableException (resourceId: String )","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? resourceId [jvm] val resourceId : String","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/-no-members-available-exception/","text":"// misk-clustering / misk.clustering / NoMembersAvailableException / NoMembersAvailableException NoMembersAvailableException \u00b6 [jvm]\\ fun NoMembersAvailableException (resourceId: String )","title":"NoMembersAvailableException - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/-no-members-available-exception/#nomembersavailableexception","text":"[jvm]\\ fun NoMembersAvailableException (resourceId: String )","title":"NoMembersAvailableException"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/resource-id/","text":"// misk-clustering / misk.clustering / NoMembersAvailableException / resourceId resourceId \u00b6 [jvm]\\ val resourceId : String","title":"resourceId - Misk"},{"location":"0.x/misk-clustering/misk.clustering/-no-members-available-exception/resource-id/#resourceid","text":"[jvm]\\ val resourceId : String","title":"resourceId"},{"location":"0.x/misk-clustering/misk.clustering.fake/","text":"// misk-clustering / misk.clustering.fake Package misk.clustering.fake \u00b6 Types \u00b6 Name Summary ExplicitClusterResourceMapper [jvm] class ExplicitClusterResourceMapper : ClusterResourceMapper An ExplicitClusterResourceMapper is a ClusterResourceMapper where the mapping is explicit managed. FakeCluster [jvm] @Singleton class FakeCluster : ClusterService , Cluster A FakeCluster is a Cluster that is a fake. It delegates entirely to DefaultCluster , but allows us to keep DefaultCluster internal and make it clear that FakeCluster is only intended to be used for fakes. FakeClusterModule [jvm] class FakeClusterModule : KAbstractModule FakeClusterModule installs fake implementations of the clustering primitives for use in tests","title":"Package misk.clustering.fake - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/#package-miskclusteringfake","text":"","title":"Package misk.clustering.fake"},{"location":"0.x/misk-clustering/misk.clustering.fake/#types","text":"Name Summary ExplicitClusterResourceMapper [jvm] class ExplicitClusterResourceMapper : ClusterResourceMapper An ExplicitClusterResourceMapper is a ClusterResourceMapper where the mapping is explicit managed. FakeCluster [jvm] @Singleton class FakeCluster : ClusterService , Cluster A FakeCluster is a Cluster that is a fake. It delegates entirely to DefaultCluster , but allows us to keep DefaultCluster internal and make it clear that FakeCluster is only intended to be used for fakes. FakeClusterModule [jvm] class FakeClusterModule : KAbstractModule FakeClusterModule installs fake implementations of the clustering primitives for use in tests","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/","text":"// misk-clustering / misk.clustering.fake / ExplicitClusterResourceMapper ExplicitClusterResourceMapper \u00b6 [jvm]\\ class ExplicitClusterResourceMapper : ClusterResourceMapper An ExplicitClusterResourceMapper is a ClusterResourceMapper where the mapping is explicit managed. Constructors \u00b6 ExplicitClusterResourceMapper [jvm] fun ExplicitClusterResourceMapper () Functions \u00b6 Name Summary addMapping [jvm] fun addMapping (resourceId: String , member: Cluster.Member ) clearDefaultMapping [jvm] fun clearDefaultMapping () get [jvm] open operator override fun get (resourceId: String ): Cluster.Member removeMapping [jvm] fun removeMapping (resourceId: String ) setDefaultMapping [jvm] fun setDefaultMapping (member: Cluster.Member )","title":"ExplicitClusterResourceMapper - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/#explicitclusterresourcemapper","text":"[jvm]\\ class ExplicitClusterResourceMapper : ClusterResourceMapper An ExplicitClusterResourceMapper is a ClusterResourceMapper where the mapping is explicit managed.","title":"ExplicitClusterResourceMapper"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/#constructors","text":"ExplicitClusterResourceMapper [jvm] fun ExplicitClusterResourceMapper ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/#functions","text":"Name Summary addMapping [jvm] fun addMapping (resourceId: String , member: Cluster.Member ) clearDefaultMapping [jvm] fun clearDefaultMapping () get [jvm] open operator override fun get (resourceId: String ): Cluster.Member removeMapping [jvm] fun removeMapping (resourceId: String ) setDefaultMapping [jvm] fun setDefaultMapping (member: Cluster.Member )","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/-explicit-cluster-resource-mapper/","text":"// misk-clustering / misk.clustering.fake / ExplicitClusterResourceMapper / ExplicitClusterResourceMapper ExplicitClusterResourceMapper \u00b6 [jvm]\\ fun ExplicitClusterResourceMapper ()","title":"ExplicitClusterResourceMapper - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/-explicit-cluster-resource-mapper/#explicitclusterresourcemapper","text":"[jvm]\\ fun ExplicitClusterResourceMapper ()","title":"ExplicitClusterResourceMapper"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/add-mapping/","text":"// misk-clustering / misk.clustering.fake / ExplicitClusterResourceMapper / addMapping addMapping \u00b6 [jvm]\\ fun addMapping (resourceId: String , member: Cluster.Member )","title":"addMapping - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/add-mapping/#addmapping","text":"[jvm]\\ fun addMapping (resourceId: String , member: Cluster.Member )","title":"addMapping"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/clear-default-mapping/","text":"// misk-clustering / misk.clustering.fake / ExplicitClusterResourceMapper / clearDefaultMapping clearDefaultMapping \u00b6 [jvm]\\ fun clearDefaultMapping ()","title":"clearDefaultMapping - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/clear-default-mapping/#cleardefaultmapping","text":"[jvm]\\ fun clearDefaultMapping ()","title":"clearDefaultMapping"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/get/","text":"// misk-clustering / misk.clustering.fake / ExplicitClusterResourceMapper / get get \u00b6 [jvm]\\ open operator override fun get (resourceId: String ): Cluster.Member Return \u00b6 The Cluster.Member that should own the given resource id Throws \u00b6 misk.clustering.NoMembersAvailableException if there are no members in the cluster","title":"get - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/get/#get","text":"[jvm]\\ open operator override fun get (resourceId: String ): Cluster.Member","title":"get"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/get/#return","text":"The Cluster.Member that should own the given resource id","title":"Return"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/get/#throws","text":"misk.clustering.NoMembersAvailableException if there are no members in the cluster","title":"Throws"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/remove-mapping/","text":"// misk-clustering / misk.clustering.fake / ExplicitClusterResourceMapper / removeMapping removeMapping \u00b6 [jvm]\\ fun removeMapping (resourceId: String )","title":"removeMapping - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/remove-mapping/#removemapping","text":"[jvm]\\ fun removeMapping (resourceId: String )","title":"removeMapping"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/set-default-mapping/","text":"// misk-clustering / misk.clustering.fake / ExplicitClusterResourceMapper / setDefaultMapping setDefaultMapping \u00b6 [jvm]\\ fun setDefaultMapping (member: Cluster.Member )","title":"setDefaultMapping - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-explicit-cluster-resource-mapper/set-default-mapping/#setdefaultmapping","text":"[jvm]\\ fun setDefaultMapping (member: Cluster.Member )","title":"setDefaultMapping"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/","text":"// misk-clustering / misk.clustering.fake / FakeCluster FakeCluster \u00b6 [jvm]\\ @Singleton class FakeCluster : ClusterService , Cluster A FakeCluster is a Cluster that is a fake. It delegates entirely to DefaultCluster , but allows us to keep DefaultCluster internal and make it clear that FakeCluster is only intended to be used for fakes. NB(mmihic): I\u2019d prefer for this to be in the misk-testing module, but it can\u2019t since it relies on DefaultCluster and we want to leave DefaultCluster internal Constructors \u00b6 FakeCluster [jvm] fun FakeCluster (resourceMapper: ExplicitClusterResourceMapper ) FakeCluster [jvm] @Inject fun FakeCluster () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] open override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] open override fun awaitRunning () open fun awaitRunning (p0: Duration ) open override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] open override fun awaitTerminated () open fun awaitTerminated (p0: Duration ) open override fun awaitTerminated (p0: Long , p1: TimeUnit ) clusterChanged [jvm] fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf()) failureCause [jvm] open override fun failureCause (): Throwable isRunning [jvm] open override fun isRunning (): Boolean newResourceMapper [jvm] open override fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper startAsync [jvm] @CanIgnoreReturnValue open override fun startAsync (): Service state [jvm] open override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue open override fun stopAsync (): Service watch [jvm] open override fun watch (watch: ClusterWatch ) Registers interest in cluster changes Properties \u00b6 Name Summary resourceMapper [jvm] val resourceMapper : ExplicitClusterResourceMapper snapshot [jvm] open override val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"FakeCluster - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/#fakecluster","text":"[jvm]\\ @Singleton class FakeCluster : ClusterService , Cluster A FakeCluster is a Cluster that is a fake. It delegates entirely to DefaultCluster , but allows us to keep DefaultCluster internal and make it clear that FakeCluster is only intended to be used for fakes. NB(mmihic): I\u2019d prefer for this to be in the misk-testing module, but it can\u2019t since it relies on DefaultCluster and we want to leave DefaultCluster internal","title":"FakeCluster"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/#constructors","text":"FakeCluster [jvm] fun FakeCluster (resourceMapper: ExplicitClusterResourceMapper ) FakeCluster [jvm] @Inject fun FakeCluster ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/#functions","text":"Name Summary addListener [jvm] open override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] open override fun awaitRunning () open fun awaitRunning (p0: Duration ) open override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] open override fun awaitTerminated () open fun awaitTerminated (p0: Duration ) open override fun awaitTerminated (p0: Long , p1: TimeUnit ) clusterChanged [jvm] fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf()) failureCause [jvm] open override fun failureCause (): Throwable isRunning [jvm] open override fun isRunning (): Boolean newResourceMapper [jvm] open override fun newResourceMapper (readyMembers: Set < Cluster.Member >): ClusterResourceMapper startAsync [jvm] @CanIgnoreReturnValue open override fun startAsync (): Service state [jvm] open override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue open override fun stopAsync (): Service watch [jvm] open override fun watch (watch: ClusterWatch ) Registers interest in cluster changes","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/#properties","text":"Name Summary resourceMapper [jvm] val resourceMapper : ExplicitClusterResourceMapper snapshot [jvm] open override val snapshot : Cluster.Snapshot The current moment-in-time view of the cluster state","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-fake-cluster/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / FakeCluster FakeCluster \u00b6 [jvm]\\ fun FakeCluster (resourceMapper: ExplicitClusterResourceMapper ) @Inject fun FakeCluster ()","title":"FakeCluster - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-fake-cluster/#fakecluster","text":"[jvm]\\ fun FakeCluster (resourceMapper: ExplicitClusterResourceMapper ) @Inject fun FakeCluster ()","title":"FakeCluster"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/cluster-changed/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / clusterChanged clusterChanged \u00b6 [jvm]\\ fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf())","title":"clusterChanged - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/cluster-changed/#clusterchanged","text":"[jvm]\\ fun clusterChanged (membersBecomingReady: Set < Cluster.Member > = setOf(), membersBecomingNotReady: Set < Cluster.Member > = setOf())","title":"clusterChanged"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/resource-mapper/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / resourceMapper resourceMapper \u00b6 [jvm]\\ val resourceMapper : ExplicitClusterResourceMapper","title":"resourceMapper - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/resource-mapper/#resourcemapper","text":"[jvm]\\ val resourceMapper : ExplicitClusterResourceMapper","title":"resourceMapper"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/watch/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / watch watch \u00b6 [jvm]\\ open override fun watch (watch: ClusterWatch ) Registers interest in cluster changes","title":"watch - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/watch/#watch","text":"[jvm]\\ open override fun watch (watch: ClusterWatch ) Registers interest in cluster changes","title":"watch"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary self [jvm] @ JvmStatic val self : Cluster.Member SELF_IP [jvm] const val SELF_IP : String SELF_NAME [jvm] const val SELF_NAME : String","title":"Companion - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/#properties","text":"Name Summary self [jvm] @ JvmStatic val self : Cluster.Member SELF_IP [jvm] const val SELF_IP : String SELF_NAME [jvm] const val SELF_NAME : String","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/-s-e-l-f_-i-p/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / Companion / SELF_IP SELF_IP \u00b6 [jvm]\\ const val SELF_IP : String","title":"SELF_IP - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/-s-e-l-f_-i-p/#self_ip","text":"[jvm]\\ const val SELF_IP : String","title":"SELF_IP"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/-s-e-l-f_-n-a-m-e/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / Companion / SELF_NAME SELF_NAME \u00b6 [jvm]\\ const val SELF_NAME : String","title":"SELF_NAME - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/-s-e-l-f_-n-a-m-e/#self_name","text":"[jvm]\\ const val SELF_NAME : String","title":"SELF_NAME"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/self/","text":"// misk-clustering / misk.clustering.fake / FakeCluster / Companion / self self \u00b6 [jvm]\\ @ JvmStatic val self : Cluster.Member","title":"self - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster/-companion/self/#self","text":"[jvm]\\ @ JvmStatic val self : Cluster.Member","title":"self"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster-module/","text":"// misk-clustering / misk.clustering.fake / FakeClusterModule FakeClusterModule \u00b6 [jvm]\\ class FakeClusterModule : KAbstractModule FakeClusterModule installs fake implementations of the clustering primitives for use in tests Constructors \u00b6 FakeClusterModule [jvm] fun FakeClusterModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeClusterModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster-module/#fakeclustermodule","text":"[jvm]\\ class FakeClusterModule : KAbstractModule FakeClusterModule installs fake implementations of the clustering primitives for use in tests","title":"FakeClusterModule"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster-module/#constructors","text":"FakeClusterModule [jvm] fun FakeClusterModule ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster-module/-fake-cluster-module/","text":"// misk-clustering / misk.clustering.fake / FakeClusterModule / FakeClusterModule FakeClusterModule \u00b6 [jvm]\\ fun FakeClusterModule ()","title":"FakeClusterModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake/-fake-cluster-module/-fake-cluster-module/#fakeclustermodule","text":"[jvm]\\ fun FakeClusterModule ()","title":"FakeClusterModule"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/","text":"// misk-clustering / misk.clustering.fake.lease Package misk.clustering.fake.lease \u00b6 Types \u00b6 Name Summary FakeLeaseManager [jvm] @Singleton class FakeLeaseManager @Injectconstructor : FakeLeaseManager A FakeLeaseManager provides explicit control over leases for the purposes of testing. By default a lease is considered held, but it can be explicitly marked as not held if desired FakeLeaseModule [jvm] class FakeLeaseModule : KAbstractModule FakeLeaseModule installs support for leasing using fakes","title":"Package misk.clustering.fake.lease - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/#package-miskclusteringfakelease","text":"","title":"Package misk.clustering.fake.lease"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/#types","text":"Name Summary FakeLeaseManager [jvm] @Singleton class FakeLeaseManager @Injectconstructor : FakeLeaseManager A FakeLeaseManager provides explicit control over leases for the purposes of testing. By default a lease is considered held, but it can be explicitly marked as not held if desired FakeLeaseModule [jvm] class FakeLeaseModule : KAbstractModule FakeLeaseModule installs support for leasing using fakes","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-manager/","text":"// misk-clustering / misk.clustering.fake.lease / FakeLeaseManager FakeLeaseManager \u00b6 [jvm]\\ @Singleton class FakeLeaseManager @Injectconstructor : FakeLeaseManager A FakeLeaseManager provides explicit control over leases for the purposes of testing. By default a lease is considered held, but it can be explicitly marked as not held if desired Constructors \u00b6 FakeLeaseManager [jvm] @Inject fun FakeLeaseManager () Functions \u00b6 Name Summary isLeaseHeld [jvm] fun isLeaseHeld (name: String ): Boolean markLeaseHeld [jvm] fun markLeaseHeld (name: String ) markLeaseHeldElsewhere [jvm] fun markLeaseHeldElsewhere (name: String ) requestLease [jvm] open override fun requestLease (name: String ): Lease","title":"FakeLeaseManager - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-manager/#fakeleasemanager","text":"[jvm]\\ @Singleton class FakeLeaseManager @Injectconstructor : FakeLeaseManager A FakeLeaseManager provides explicit control over leases for the purposes of testing. By default a lease is considered held, but it can be explicitly marked as not held if desired","title":"FakeLeaseManager"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-manager/#constructors","text":"FakeLeaseManager [jvm] @Inject fun FakeLeaseManager ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-manager/#functions","text":"Name Summary isLeaseHeld [jvm] fun isLeaseHeld (name: String ): Boolean markLeaseHeld [jvm] fun markLeaseHeld (name: String ) markLeaseHeldElsewhere [jvm] fun markLeaseHeldElsewhere (name: String ) requestLease [jvm] open override fun requestLease (name: String ): Lease","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-manager/-fake-lease-manager/","text":"// misk-clustering / misk.clustering.fake.lease / FakeLeaseManager / FakeLeaseManager FakeLeaseManager \u00b6 [jvm]\\ @Inject fun FakeLeaseManager ()","title":"FakeLeaseManager - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-manager/-fake-lease-manager/#fakeleasemanager","text":"[jvm]\\ @Inject fun FakeLeaseManager ()","title":"FakeLeaseManager"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-module/","text":"// misk-clustering / misk.clustering.fake.lease / FakeLeaseModule FakeLeaseModule \u00b6 [jvm]\\ class FakeLeaseModule : KAbstractModule FakeLeaseModule installs support for leasing using fakes Constructors \u00b6 FakeLeaseModule [jvm] fun FakeLeaseModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeLeaseModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-module/#fakeleasemodule","text":"[jvm]\\ class FakeLeaseModule : KAbstractModule FakeLeaseModule installs support for leasing using fakes","title":"FakeLeaseModule"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-module/#constructors","text":"FakeLeaseModule [jvm] fun FakeLeaseModule ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-module/-fake-lease-module/","text":"// misk-clustering / misk.clustering.fake.lease / FakeLeaseModule / FakeLeaseModule FakeLeaseModule \u00b6 [jvm]\\ fun FakeLeaseModule ()","title":"FakeLeaseModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.fake.lease/-fake-lease-module/-fake-lease-module/#fakeleasemodule","text":"[jvm]\\ fun FakeLeaseModule ()","title":"FakeLeaseModule"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/","text":"// misk-clustering / misk.clustering.kubernetes Package misk.clustering.kubernetes \u00b6 Types \u00b6 Name Summary KubernetesClusterModule [jvm] class KubernetesClusterModule (config: KubernetesConfig ) : KAbstractModule KubernetesClusterModule installs cluster support based on Kubernetes KubernetesConfig [jvm] data class KubernetesConfig (my_pod_namespace: String , my_pod_name: String , my_pod_ip: String , clustering_pod_label_selector: String ?, kubernetes_watch_read_timeout: Long , kubernetes_read_timeout: Long , kubernetes_connect_timeout: Long ) : Config","title":"Package misk.clustering.kubernetes - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/#package-miskclusteringkubernetes","text":"","title":"Package misk.clustering.kubernetes"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/#types","text":"Name Summary KubernetesClusterModule [jvm] class KubernetesClusterModule (config: KubernetesConfig ) : KAbstractModule KubernetesClusterModule installs cluster support based on Kubernetes KubernetesConfig [jvm] data class KubernetesConfig (my_pod_namespace: String , my_pod_name: String , my_pod_ip: String , clustering_pod_label_selector: String ?, kubernetes_watch_read_timeout: Long , kubernetes_read_timeout: Long , kubernetes_connect_timeout: Long ) : Config","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-cluster-module/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesClusterModule KubernetesClusterModule \u00b6 [jvm]\\ class KubernetesClusterModule (config: KubernetesConfig ) : KAbstractModule KubernetesClusterModule installs cluster support based on Kubernetes Constructors \u00b6 KubernetesClusterModule [jvm] fun KubernetesClusterModule (config: KubernetesConfig ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"KubernetesClusterModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-cluster-module/#kubernetesclustermodule","text":"[jvm]\\ class KubernetesClusterModule (config: KubernetesConfig ) : KAbstractModule KubernetesClusterModule installs cluster support based on Kubernetes","title":"KubernetesClusterModule"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-cluster-module/#constructors","text":"KubernetesClusterModule [jvm] fun KubernetesClusterModule (config: KubernetesConfig )","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-cluster-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-cluster-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-cluster-module/-kubernetes-cluster-module/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesClusterModule / KubernetesClusterModule KubernetesClusterModule \u00b6 [jvm]\\ fun KubernetesClusterModule (config: KubernetesConfig )","title":"KubernetesClusterModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-cluster-module/-kubernetes-cluster-module/#kubernetesclustermodule","text":"[jvm]\\ fun KubernetesClusterModule (config: KubernetesConfig )","title":"KubernetesClusterModule"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig KubernetesConfig \u00b6 [jvm]\\ data class KubernetesConfig (my_pod_namespace: String , my_pod_name: String , my_pod_ip: String , clustering_pod_label_selector: String ?, kubernetes_watch_read_timeout: Long , kubernetes_read_timeout: Long , kubernetes_connect_timeout: Long ) : Config Constructors \u00b6 KubernetesConfig [jvm] fun KubernetesConfig (my_pod_namespace: String = System.getenv(\u201cMY_POD_NAMESPACE\u201d) ?: \u201c<invalid-namespace>\u201c, my_pod_name: String = System.getenv(\u201cMY_POD_NAME\u201d) ?: \u201c<invalid-pod-name>\u201c, my_pod_ip: String = System.getenv(\u201cMY_POD_IP\u201d) ?: \u201c<invalid-pod-ip>\u201c, clustering_pod_label_selector: String ? = null, kubernetes_watch_read_timeout: Long = 60, kubernetes_read_timeout: Long = 15, kubernetes_connect_timeout: Long = 5) Properties \u00b6 Name Summary clustering_pod_label_selector [jvm] val clustering_pod_label_selector : String ? = null Optional Kubernetes label selector to filter which pods in the namespace are considered to be in the same cluster. If omitted, all healthy pods in the namespace are included in the cluster. Ex: \u201capp = helloserver\u201d. kubernetes_connect_timeout [jvm] val kubernetes_connect_timeout : Long = 5 kubernetes_read_timeout [jvm] val kubernetes_read_timeout : Long = 15 kubernetes_watch_read_timeout [jvm] val kubernetes_watch_read_timeout : Long = 60 my_pod_ip [jvm] val my_pod_ip : String my_pod_name [jvm] val my_pod_name : String my_pod_namespace [jvm] val my_pod_namespace : String","title":"KubernetesConfig - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/#kubernetesconfig","text":"[jvm]\\ data class KubernetesConfig (my_pod_namespace: String , my_pod_name: String , my_pod_ip: String , clustering_pod_label_selector: String ?, kubernetes_watch_read_timeout: Long , kubernetes_read_timeout: Long , kubernetes_connect_timeout: Long ) : Config","title":"KubernetesConfig"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/#constructors","text":"KubernetesConfig [jvm] fun KubernetesConfig (my_pod_namespace: String = System.getenv(\u201cMY_POD_NAMESPACE\u201d) ?: \u201c<invalid-namespace>\u201c, my_pod_name: String = System.getenv(\u201cMY_POD_NAME\u201d) ?: \u201c<invalid-pod-name>\u201c, my_pod_ip: String = System.getenv(\u201cMY_POD_IP\u201d) ?: \u201c<invalid-pod-ip>\u201c, clustering_pod_label_selector: String ? = null, kubernetes_watch_read_timeout: Long = 60, kubernetes_read_timeout: Long = 15, kubernetes_connect_timeout: Long = 5)","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/#properties","text":"Name Summary clustering_pod_label_selector [jvm] val clustering_pod_label_selector : String ? = null Optional Kubernetes label selector to filter which pods in the namespace are considered to be in the same cluster. If omitted, all healthy pods in the namespace are included in the cluster. Ex: \u201capp = helloserver\u201d. kubernetes_connect_timeout [jvm] val kubernetes_connect_timeout : Long = 5 kubernetes_read_timeout [jvm] val kubernetes_read_timeout : Long = 15 kubernetes_watch_read_timeout [jvm] val kubernetes_watch_read_timeout : Long = 60 my_pod_ip [jvm] val my_pod_ip : String my_pod_name [jvm] val my_pod_name : String my_pod_namespace [jvm] val my_pod_namespace : String","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/-kubernetes-config/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / KubernetesConfig KubernetesConfig \u00b6 [jvm]\\ fun KubernetesConfig (my_pod_namespace: String = System.getenv(\u201cMY_POD_NAMESPACE\u201d) ?: \u201c<invalid-namespace>\u201c, my_pod_name: String = System.getenv(\u201cMY_POD_NAME\u201d) ?: \u201c<invalid-pod-name>\u201c, my_pod_ip: String = System.getenv(\u201cMY_POD_IP\u201d) ?: \u201c<invalid-pod-ip>\u201c, clustering_pod_label_selector: String ? = null, kubernetes_watch_read_timeout: Long = 60, kubernetes_read_timeout: Long = 15, kubernetes_connect_timeout: Long = 5)","title":"KubernetesConfig - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/-kubernetes-config/#kubernetesconfig","text":"[jvm]\\ fun KubernetesConfig (my_pod_namespace: String = System.getenv(\u201cMY_POD_NAMESPACE\u201d) ?: \u201c<invalid-namespace>\u201c, my_pod_name: String = System.getenv(\u201cMY_POD_NAME\u201d) ?: \u201c<invalid-pod-name>\u201c, my_pod_ip: String = System.getenv(\u201cMY_POD_IP\u201d) ?: \u201c<invalid-pod-ip>\u201c, clustering_pod_label_selector: String ? = null, kubernetes_watch_read_timeout: Long = 60, kubernetes_read_timeout: Long = 15, kubernetes_connect_timeout: Long = 5)","title":"KubernetesConfig"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/clustering_pod_label_selector/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / clustering_pod_label_selector clustering_pod_label_selector \u00b6 [jvm]\\ val clustering_pod_label_selector : String ? = null","title":"clustering_pod_label_selector - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/clustering_pod_label_selector/#clustering_pod_label_selector","text":"[jvm]\\ val clustering_pod_label_selector : String ? = null","title":"clustering_pod_label_selector"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/kubernetes_connect_timeout/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / kubernetes_connect_timeout kubernetes_connect_timeout \u00b6 [jvm]\\ val kubernetes_connect_timeout : Long = 5","title":"kubernetes_connect_timeout - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/kubernetes_connect_timeout/#kubernetes_connect_timeout","text":"[jvm]\\ val kubernetes_connect_timeout : Long = 5","title":"kubernetes_connect_timeout"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/kubernetes_read_timeout/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / kubernetes_read_timeout kubernetes_read_timeout \u00b6 [jvm]\\ val kubernetes_read_timeout : Long = 15","title":"kubernetes_read_timeout - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/kubernetes_read_timeout/#kubernetes_read_timeout","text":"[jvm]\\ val kubernetes_read_timeout : Long = 15","title":"kubernetes_read_timeout"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/kubernetes_watch_read_timeout/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / kubernetes_watch_read_timeout kubernetes_watch_read_timeout \u00b6 [jvm]\\ val kubernetes_watch_read_timeout : Long = 60","title":"kubernetes_watch_read_timeout - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/kubernetes_watch_read_timeout/#kubernetes_watch_read_timeout","text":"[jvm]\\ val kubernetes_watch_read_timeout : Long = 60","title":"kubernetes_watch_read_timeout"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/my_pod_ip/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / my_pod_ip my_pod_ip \u00b6 [jvm]\\ val my_pod_ip : String","title":"my_pod_ip - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/my_pod_ip/#my_pod_ip","text":"[jvm]\\ val my_pod_ip : String","title":"my_pod_ip"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/my_pod_name/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / my_pod_name my_pod_name \u00b6 [jvm]\\ val my_pod_name : String","title":"my_pod_name - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/my_pod_name/#my_pod_name","text":"[jvm]\\ val my_pod_name : String","title":"my_pod_name"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/my_pod_namespace/","text":"// misk-clustering / misk.clustering.kubernetes / KubernetesConfig / my_pod_namespace my_pod_namespace \u00b6 [jvm]\\ val my_pod_namespace : String","title":"my_pod_namespace - Misk"},{"location":"0.x/misk-clustering/misk.clustering.kubernetes/-kubernetes-config/my_pod_namespace/#my_pod_namespace","text":"[jvm]\\ val my_pod_namespace : String","title":"my_pod_namespace"},{"location":"0.x/misk-clustering/misk.clustering.weights/","text":"// misk-clustering / misk.clustering.weights Package misk.clustering.weights \u00b6 Types \u00b6 Name Summary ActiveClusterWeight [jvm] class ActiveClusterWeight : ClusterWeightProvider A static ClusterWeightProvider that always returns 100 ActiveClusterWeightModule [jvm] class ActiveClusterWeightModule : KAbstractModule Provides an ActiveClusterWeight ClusterWeightProvider [jvm] interface ClusterWeightProvider Provides the current weight assigned to the cluster. ClusterWeightService [jvm] interface ClusterWeightService : Service A marker interface for the Service that produces the ClusterWeightProvider . FakeClusterWeight [jvm] class FakeClusterWeight : ClusterWeightProvider A ClusterWeightProvider for testing FakeClusterWeightModule [jvm] class FakeClusterWeightModule : KAbstractModule Provides a FakeClusterWeight for testing","title":"Package misk.clustering.weights - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/#package-miskclusteringweights","text":"","title":"Package misk.clustering.weights"},{"location":"0.x/misk-clustering/misk.clustering.weights/#types","text":"Name Summary ActiveClusterWeight [jvm] class ActiveClusterWeight : ClusterWeightProvider A static ClusterWeightProvider that always returns 100 ActiveClusterWeightModule [jvm] class ActiveClusterWeightModule : KAbstractModule Provides an ActiveClusterWeight ClusterWeightProvider [jvm] interface ClusterWeightProvider Provides the current weight assigned to the cluster. ClusterWeightService [jvm] interface ClusterWeightService : Service A marker interface for the Service that produces the ClusterWeightProvider . FakeClusterWeight [jvm] class FakeClusterWeight : ClusterWeightProvider A ClusterWeightProvider for testing FakeClusterWeightModule [jvm] class FakeClusterWeightModule : KAbstractModule Provides a FakeClusterWeight for testing","title":"Types"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/","text":"// misk-clustering / misk.clustering.weights / ActiveClusterWeight ActiveClusterWeight \u00b6 [jvm]\\ class ActiveClusterWeight : ClusterWeightProvider A static ClusterWeightProvider that always returns 100 Constructors \u00b6 ActiveClusterWeight [jvm] fun ActiveClusterWeight () Functions \u00b6 Name Summary get [jvm] open override fun get (): Int","title":"ActiveClusterWeight - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/#activeclusterweight","text":"[jvm]\\ class ActiveClusterWeight : ClusterWeightProvider A static ClusterWeightProvider that always returns 100","title":"ActiveClusterWeight"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/#constructors","text":"ActiveClusterWeight [jvm] fun ActiveClusterWeight ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/#functions","text":"Name Summary get [jvm] open override fun get (): Int","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/-active-cluster-weight/","text":"// misk-clustering / misk.clustering.weights / ActiveClusterWeight / ActiveClusterWeight ActiveClusterWeight \u00b6 [jvm]\\ fun ActiveClusterWeight ()","title":"ActiveClusterWeight - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/-active-cluster-weight/#activeclusterweight","text":"[jvm]\\ fun ActiveClusterWeight ()","title":"ActiveClusterWeight"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/get/","text":"// misk-clustering / misk.clustering.weights / ActiveClusterWeight / get get \u00b6 [jvm]\\ open override fun get (): Int","title":"get - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight/get/#get","text":"[jvm]\\ open override fun get (): Int","title":"get"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight-module/","text":"// misk-clustering / misk.clustering.weights / ActiveClusterWeightModule ActiveClusterWeightModule \u00b6 [jvm]\\ class ActiveClusterWeightModule : KAbstractModule Provides an ActiveClusterWeight Constructors \u00b6 ActiveClusterWeightModule [jvm] fun ActiveClusterWeightModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ActiveClusterWeightModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight-module/#activeclusterweightmodule","text":"[jvm]\\ class ActiveClusterWeightModule : KAbstractModule Provides an ActiveClusterWeight","title":"ActiveClusterWeightModule"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight-module/#constructors","text":"ActiveClusterWeightModule [jvm] fun ActiveClusterWeightModule ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight-module/-active-cluster-weight-module/","text":"// misk-clustering / misk.clustering.weights / ActiveClusterWeightModule / ActiveClusterWeightModule ActiveClusterWeightModule \u00b6 [jvm]\\ fun ActiveClusterWeightModule ()","title":"ActiveClusterWeightModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-active-cluster-weight-module/-active-cluster-weight-module/#activeclusterweightmodule","text":"[jvm]\\ fun ActiveClusterWeightModule ()","title":"ActiveClusterWeightModule"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-provider/","text":"// misk-clustering / misk.clustering.weights / ClusterWeightProvider ClusterWeightProvider \u00b6 [jvm]\\ interface ClusterWeightProvider Provides the current weight assigned to the cluster. A weight value is between 0 and 100 to indicate how much traffic a cluster should handle. Typically an active-passive setup has 1 active cluster with 100 and 1 passive cluster with 0. If your application does not require dynamic cluster weights, you can install the ActiveClusterWeightModule If your application does require dynamic cluster weights, you need must provide your own impl and ClusterWeightService for others to depend on. Functions \u00b6 Name Summary get [jvm] abstract fun get (): Int Inheritors \u00b6 Name ActiveClusterWeight FakeClusterWeight","title":"ClusterWeightProvider - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-provider/#clusterweightprovider","text":"[jvm]\\ interface ClusterWeightProvider Provides the current weight assigned to the cluster. A weight value is between 0 and 100 to indicate how much traffic a cluster should handle. Typically an active-passive setup has 1 active cluster with 100 and 1 passive cluster with 0. If your application does not require dynamic cluster weights, you can install the ActiveClusterWeightModule If your application does require dynamic cluster weights, you need must provide your own impl and ClusterWeightService for others to depend on.","title":"ClusterWeightProvider"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-provider/#functions","text":"Name Summary get [jvm] abstract fun get (): Int","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-provider/#inheritors","text":"Name ActiveClusterWeight FakeClusterWeight","title":"Inheritors"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-provider/get/","text":"// misk-clustering / misk.clustering.weights / ClusterWeightProvider / get get \u00b6 [jvm]\\ abstract fun get (): Int","title":"get - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-provider/get/#get","text":"[jvm]\\ abstract fun get (): Int","title":"get"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-service/","text":"// misk-clustering / misk.clustering.weights / ClusterWeightService ClusterWeightService \u00b6 [jvm]\\ interface ClusterWeightService : Service A marker interface for the Service that produces the ClusterWeightProvider . Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"ClusterWeightService - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-service/#clusterweightservice","text":"[jvm]\\ interface ClusterWeightService : Service A marker interface for the Service that produces the ClusterWeightProvider .","title":"ClusterWeightService"},{"location":"0.x/misk-clustering/misk.clustering.weights/-cluster-weight-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/","text":"// misk-clustering / misk.clustering.weights / FakeClusterWeight FakeClusterWeight \u00b6 [jvm]\\ class FakeClusterWeight : ClusterWeightProvider A ClusterWeightProvider for testing Constructors \u00b6 FakeClusterWeight [jvm] fun FakeClusterWeight () Functions \u00b6 Name Summary get [jvm] open override fun get (): Int setClusterWeight [jvm] fun setClusterWeight (weight: Int )","title":"FakeClusterWeight - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/#fakeclusterweight","text":"[jvm]\\ class FakeClusterWeight : ClusterWeightProvider A ClusterWeightProvider for testing","title":"FakeClusterWeight"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/#constructors","text":"FakeClusterWeight [jvm] fun FakeClusterWeight ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/#functions","text":"Name Summary get [jvm] open override fun get (): Int setClusterWeight [jvm] fun setClusterWeight (weight: Int )","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/-fake-cluster-weight/","text":"// misk-clustering / misk.clustering.weights / FakeClusterWeight / FakeClusterWeight FakeClusterWeight \u00b6 [jvm]\\ fun FakeClusterWeight ()","title":"FakeClusterWeight - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/-fake-cluster-weight/#fakeclusterweight","text":"[jvm]\\ fun FakeClusterWeight ()","title":"FakeClusterWeight"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/get/","text":"// misk-clustering / misk.clustering.weights / FakeClusterWeight / get get \u00b6 [jvm]\\ open override fun get (): Int","title":"get - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/get/#get","text":"[jvm]\\ open override fun get (): Int","title":"get"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/set-cluster-weight/","text":"// misk-clustering / misk.clustering.weights / FakeClusterWeight / setClusterWeight setClusterWeight \u00b6 [jvm]\\ fun setClusterWeight (weight: Int )","title":"setClusterWeight - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight/set-cluster-weight/#setclusterweight","text":"[jvm]\\ fun setClusterWeight (weight: Int )","title":"setClusterWeight"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight-module/","text":"// misk-clustering / misk.clustering.weights / FakeClusterWeightModule FakeClusterWeightModule \u00b6 [jvm]\\ class FakeClusterWeightModule : KAbstractModule Provides a FakeClusterWeight for testing Constructors \u00b6 FakeClusterWeightModule [jvm] fun FakeClusterWeightModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeClusterWeightModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight-module/#fakeclusterweightmodule","text":"[jvm]\\ class FakeClusterWeightModule : KAbstractModule Provides a FakeClusterWeight for testing","title":"FakeClusterWeightModule"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight-module/#constructors","text":"FakeClusterWeightModule [jvm] fun FakeClusterWeightModule ()","title":"Constructors"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight-module/-fake-cluster-weight-module/","text":"// misk-clustering / misk.clustering.weights / FakeClusterWeightModule / FakeClusterWeightModule FakeClusterWeightModule \u00b6 [jvm]\\ fun FakeClusterWeightModule ()","title":"FakeClusterWeightModule - Misk"},{"location":"0.x/misk-clustering/misk.clustering.weights/-fake-cluster-weight-module/-fake-cluster-weight-module/#fakeclusterweightmodule","text":"[jvm]\\ fun FakeClusterWeightModule ()","title":"FakeClusterWeightModule"},{"location":"0.x/misk-core/misk.backoff/","text":"// misk-core / misk.backoff Package misk.backoff \u00b6 Types \u00b6 Name Summary Backoff [jvm] interface Backoff Calculates how long to backoff on a retry. Backoff s are stateful and not thread-safe DontRetryException [jvm] class DontRetryException (message: String ) : Exception ExponentialBackoff [jvm] class ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration ) : Backoff Performs exponential backoff with optional jitter. Durations are supplied as functions, so that they can change dynamically as the system is running (e.g. in response to changes in dynamic flags) FlatBackoff [jvm] class FlatBackoff (duration: Duration ) : Backoff Functions \u00b6 Name Summary retry [jvm] fun < A > retry (upTo: Int , withBackoff: Backoff , f: (retryCount: Int ) -> A ): A Retries the provided function up to a certain number of times, applying the given backoff between each retry. The retry function is provided with current retry count, in case this is relevant","title":"Package misk.backoff - Misk"},{"location":"0.x/misk-core/misk.backoff/#package-miskbackoff","text":"","title":"Package misk.backoff"},{"location":"0.x/misk-core/misk.backoff/#types","text":"Name Summary Backoff [jvm] interface Backoff Calculates how long to backoff on a retry. Backoff s are stateful and not thread-safe DontRetryException [jvm] class DontRetryException (message: String ) : Exception ExponentialBackoff [jvm] class ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration ) : Backoff Performs exponential backoff with optional jitter. Durations are supplied as functions, so that they can change dynamically as the system is running (e.g. in response to changes in dynamic flags) FlatBackoff [jvm] class FlatBackoff (duration: Duration ) : Backoff","title":"Types"},{"location":"0.x/misk-core/misk.backoff/#functions","text":"Name Summary retry [jvm] fun < A > retry (upTo: Int , withBackoff: Backoff , f: (retryCount: Int ) -> A ): A Retries the provided function up to a certain number of times, applying the given backoff between each retry. The retry function is provided with current retry count, in case this is relevant","title":"Functions"},{"location":"0.x/misk-core/misk.backoff/retry/","text":"// misk-core / misk.backoff / retry retry \u00b6 [jvm]\\ fun < A > retry (upTo: Int , withBackoff: Backoff , f: (retryCount: Int ) -> A ): A Retries the provided function up to a certain number of times, applying the given backoff between each retry. The retry function is provided with current retry count, in case this is relevant","title":"retry - Misk"},{"location":"0.x/misk-core/misk.backoff/retry/#retry","text":"[jvm]\\ fun < A > retry (upTo: Int , withBackoff: Backoff , f: (retryCount: Int ) -> A ): A Retries the provided function up to a certain number of times, applying the given backoff between each retry. The retry function is provided with current retry count, in case this is relevant","title":"retry"},{"location":"0.x/misk-core/misk.backoff/-backoff/","text":"// misk-core / misk.backoff / Backoff Backoff \u00b6 [jvm]\\ interface Backoff Calculates how long to backoff on a retry. Backoff s are stateful and not thread-safe Functions \u00b6 Name Summary nextRetry [jvm] abstract fun nextRetry (): Duration reset [jvm] abstract fun reset () Resets the backoff, typically when a request has succeeded Inheritors \u00b6 Name ExponentialBackoff FlatBackoff","title":"Backoff - Misk"},{"location":"0.x/misk-core/misk.backoff/-backoff/#backoff","text":"[jvm]\\ interface Backoff Calculates how long to backoff on a retry. Backoff s are stateful and not thread-safe","title":"Backoff"},{"location":"0.x/misk-core/misk.backoff/-backoff/#functions","text":"Name Summary nextRetry [jvm] abstract fun nextRetry (): Duration reset [jvm] abstract fun reset () Resets the backoff, typically when a request has succeeded","title":"Functions"},{"location":"0.x/misk-core/misk.backoff/-backoff/#inheritors","text":"Name ExponentialBackoff FlatBackoff","title":"Inheritors"},{"location":"0.x/misk-core/misk.backoff/-backoff/next-retry/","text":"// misk-core / misk.backoff / Backoff / nextRetry nextRetry \u00b6 [jvm]\\ abstract fun nextRetry (): Duration Return \u00b6 Determines the amount of time to wait before the next retry.","title":"nextRetry - Misk"},{"location":"0.x/misk-core/misk.backoff/-backoff/next-retry/#nextretry","text":"[jvm]\\ abstract fun nextRetry (): Duration","title":"nextRetry"},{"location":"0.x/misk-core/misk.backoff/-backoff/next-retry/#return","text":"Determines the amount of time to wait before the next retry.","title":"Return"},{"location":"0.x/misk-core/misk.backoff/-backoff/reset/","text":"// misk-core / misk.backoff / Backoff / reset reset \u00b6 [jvm]\\ abstract fun reset () Resets the backoff, typically when a request has succeeded","title":"reset - Misk"},{"location":"0.x/misk-core/misk.backoff/-backoff/reset/#reset","text":"[jvm]\\ abstract fun reset () Resets the backoff, typically when a request has succeeded","title":"reset"},{"location":"0.x/misk-core/misk.backoff/-dont-retry-exception/","text":"// misk-core / misk.backoff / DontRetryException DontRetryException \u00b6 [jvm]\\ class DontRetryException (message: String ) : Exception Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"DontRetryException - Misk"},{"location":"0.x/misk-core/misk.backoff/-dont-retry-exception/#dontretryexception","text":"[jvm]\\ class DontRetryException (message: String ) : Exception","title":"DontRetryException"},{"location":"0.x/misk-core/misk.backoff/-dont-retry-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-core/misk.backoff/-dont-retry-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-core/misk.backoff/-dont-retry-exception/-dont-retry-exception/","text":"// misk-core / misk.backoff / DontRetryException / DontRetryException DontRetryException \u00b6 [jvm]\\ fun DontRetryException (message: String )","title":"DontRetryException - Misk"},{"location":"0.x/misk-core/misk.backoff/-dont-retry-exception/-dont-retry-exception/#dontretryexception","text":"[jvm]\\ fun DontRetryException (message: String )","title":"DontRetryException"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/","text":"// misk-core / misk.backoff / ExponentialBackoff ExponentialBackoff \u00b6 [jvm]\\ class ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration ) : Backoff Performs exponential backoff with optional jitter. Durations are supplied as functions, so that they can change dynamically as the system is running (e.g. in response to changes in dynamic flags) Constructors \u00b6 ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration ) Creates a new unjittered ExponentialBackoff using a function for the base and max retry delays. ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration , jitter: Duration ) Creates a new ExponentialBackoff from fixed delays and jitter amounts ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration ) Creates a new ExponentialBackoff from fixed delays, without jitter ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration ) Functions \u00b6 Name Summary nextRetry [jvm] open override fun nextRetry (): Duration reset [jvm] open override fun reset () Resets the backoff, typically when a request has succeeded","title":"ExponentialBackoff - Misk"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/#exponentialbackoff","text":"[jvm]\\ class ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration ) : Backoff Performs exponential backoff with optional jitter. Durations are supplied as functions, so that they can change dynamically as the system is running (e.g. in response to changes in dynamic flags)","title":"ExponentialBackoff"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/#constructors","text":"ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration ) Creates a new unjittered ExponentialBackoff using a function for the base and max retry delays. ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration , jitter: Duration ) Creates a new ExponentialBackoff from fixed delays and jitter amounts ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration ) Creates a new ExponentialBackoff from fixed delays, without jitter ExponentialBackoff [jvm] fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration )","title":"Constructors"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/#functions","text":"Name Summary nextRetry [jvm] open override fun nextRetry (): Duration reset [jvm] open override fun reset () Resets the backoff, typically when a request has succeeded","title":"Functions"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/-exponential-backoff/","text":"// misk-core / misk.backoff / ExponentialBackoff / ExponentialBackoff ExponentialBackoff \u00b6 [jvm]\\ fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration ) Creates a new unjittered ExponentialBackoff using a function for the base and max retry delays. Parameters \u00b6 jvm baseDelay The Supplier for the base delay maxDelay The Supplier for maximum amount of time to wait between retries [jvm]\\ fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration , jitter: Duration ) Creates a new ExponentialBackoff from fixed delays and jitter amounts Parameters \u00b6 jvm baseDelay The base retry delay maxDelay The max amount of time to delay jitter The amount of jitter to introduce [jvm]\\ fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration ) Creates a new ExponentialBackoff from fixed delays, without jitter Parameters \u00b6 jvm baseDelay The base retry delay maxDelay The max amount of time to delay [jvm]\\ fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration )","title":"ExponentialBackoff - Misk"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/-exponential-backoff/#exponentialbackoff","text":"[jvm]\\ fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration ) Creates a new unjittered ExponentialBackoff using a function for the base and max retry delays.","title":"ExponentialBackoff"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/-exponential-backoff/#parameters","text":"jvm baseDelay The Supplier for the base delay maxDelay The Supplier for maximum amount of time to wait between retries [jvm]\\ fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration , jitter: Duration ) Creates a new ExponentialBackoff from fixed delays and jitter amounts","title":"Parameters"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/-exponential-backoff/#parameters_1","text":"jvm baseDelay The base retry delay maxDelay The max amount of time to delay jitter The amount of jitter to introduce [jvm]\\ fun ExponentialBackoff (baseDelay: Duration , maxDelay: Duration ) Creates a new ExponentialBackoff from fixed delays, without jitter","title":"Parameters"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/-exponential-backoff/#parameters_2","text":"jvm baseDelay The base retry delay maxDelay The max amount of time to delay [jvm]\\ fun ExponentialBackoff (baseDelay: () -> Duration , maxDelay: () -> Duration , jitter: () -> Duration )","title":"Parameters"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/next-retry/","text":"// misk-core / misk.backoff / ExponentialBackoff / nextRetry nextRetry \u00b6 [jvm]\\ open override fun nextRetry (): Duration Return \u00b6 Determines the amount of time to wait before the next retry.","title":"nextRetry - Misk"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/next-retry/#nextretry","text":"[jvm]\\ open override fun nextRetry (): Duration","title":"nextRetry"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/next-retry/#return","text":"Determines the amount of time to wait before the next retry.","title":"Return"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/reset/","text":"// misk-core / misk.backoff / ExponentialBackoff / reset reset \u00b6 [jvm]\\ open override fun reset () Resets the backoff, typically when a request has succeeded","title":"reset - Misk"},{"location":"0.x/misk-core/misk.backoff/-exponential-backoff/reset/#reset","text":"[jvm]\\ open override fun reset () Resets the backoff, typically when a request has succeeded","title":"reset"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/","text":"// misk-core / misk.backoff / FlatBackoff FlatBackoff \u00b6 [jvm]\\ class FlatBackoff (duration: Duration ) : Backoff Functions \u00b6 Name Summary nextRetry [jvm] open override fun nextRetry (): Duration reset [jvm] open override fun reset () Resets the backoff, typically when a request has succeeded Properties \u00b6 Name Summary duration [jvm] val duration : Duration","title":"FlatBackoff - Misk"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/#flatbackoff","text":"[jvm]\\ class FlatBackoff (duration: Duration ) : Backoff","title":"FlatBackoff"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/#functions","text":"Name Summary nextRetry [jvm] open override fun nextRetry (): Duration reset [jvm] open override fun reset () Resets the backoff, typically when a request has succeeded","title":"Functions"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/#properties","text":"Name Summary duration [jvm] val duration : Duration","title":"Properties"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/-flat-backoff/","text":"// misk-core / misk.backoff / FlatBackoff / FlatBackoff FlatBackoff \u00b6 [jvm]\\ fun FlatBackoff (duration: Duration = Duration.ofMillis(0))","title":"FlatBackoff - Misk"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/-flat-backoff/#flatbackoff","text":"[jvm]\\ fun FlatBackoff (duration: Duration = Duration.ofMillis(0))","title":"FlatBackoff"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/duration/","text":"// misk-core / misk.backoff / FlatBackoff / duration duration \u00b6 [jvm]\\ val duration : Duration","title":"duration - Misk"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/duration/#duration","text":"[jvm]\\ val duration : Duration","title":"duration"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/next-retry/","text":"// misk-core / misk.backoff / FlatBackoff / nextRetry nextRetry \u00b6 [jvm]\\ open override fun nextRetry (): Duration Return \u00b6 Determines the amount of time to wait before the next retry.","title":"nextRetry - Misk"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/next-retry/#nextretry","text":"[jvm]\\ open override fun nextRetry (): Duration","title":"nextRetry"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/next-retry/#return","text":"Determines the amount of time to wait before the next retry.","title":"Return"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/reset/","text":"// misk-core / misk.backoff / FlatBackoff / reset reset \u00b6 [jvm]\\ open override fun reset () Resets the backoff, typically when a request has succeeded","title":"reset - Misk"},{"location":"0.x/misk-core/misk.backoff/-flat-backoff/reset/#reset","text":"[jvm]\\ open override fun reset () Resets the backoff, typically when a request has succeeded","title":"reset"},{"location":"0.x/misk-core/misk.concurrent/","text":"// misk-core / misk.concurrent Package misk.concurrent \u00b6 Types \u00b6 Name Summary ExecutorServiceFactory [jvm] interface ExecutorServiceFactory Inject this rather than using the Executors factory class to create thread pools. Executors created with this factory will automatically be shut down when the service or test completes. Sleeper [jvm] interface Sleeper Abstraction for Thread.sleep() that allows for testing.","title":"Package misk.concurrent - Misk"},{"location":"0.x/misk-core/misk.concurrent/#package-miskconcurrent","text":"","title":"Package misk.concurrent"},{"location":"0.x/misk-core/misk.concurrent/#types","text":"Name Summary ExecutorServiceFactory [jvm] interface ExecutorServiceFactory Inject this rather than using the Executors factory class to create thread pools. Executors created with this factory will automatically be shut down when the service or test completes. Sleeper [jvm] interface Sleeper Abstraction for Thread.sleep() that allows for testing.","title":"Types"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/","text":"// misk-core / misk.concurrent / ExecutorServiceFactory ExecutorServiceFactory \u00b6 [jvm]\\ interface ExecutorServiceFactory Inject this rather than using the Executors factory class to create thread pools. Executors created with this factory will automatically be shut down when the service or test completes. For all functions, nameFormat a string in the format specified by ThreadFactoryBuilder.setNameFormat, like \u201crpc-pool-%d\u201d. If the string has a single %d placeholder it will be assigned sequentially. Omit the placeholder if only one thread will be required. Functions \u00b6 Name Summary fixed [jvm] abstract fun fixed (nameFormat: String , threadCount: Int ): ExecutorService Returns an executor service that uses Executors.newFixedThreadPool . scheduled [jvm] abstract fun scheduled (nameFormat: String , threadCount: Int ): ScheduledExecutorService Returns an executor service that uses Executors.newScheduledThreadPool . single [jvm] abstract fun single (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newSingleThreadExecutor . unbounded [jvm] abstract fun unbounded (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newCachedThreadPool .","title":"ExecutorServiceFactory - Misk"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/#executorservicefactory","text":"[jvm]\\ interface ExecutorServiceFactory Inject this rather than using the Executors factory class to create thread pools. Executors created with this factory will automatically be shut down when the service or test completes. For all functions, nameFormat a string in the format specified by ThreadFactoryBuilder.setNameFormat, like \u201crpc-pool-%d\u201d. If the string has a single %d placeholder it will be assigned sequentially. Omit the placeholder if only one thread will be required.","title":"ExecutorServiceFactory"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/#functions","text":"Name Summary fixed [jvm] abstract fun fixed (nameFormat: String , threadCount: Int ): ExecutorService Returns an executor service that uses Executors.newFixedThreadPool . scheduled [jvm] abstract fun scheduled (nameFormat: String , threadCount: Int ): ScheduledExecutorService Returns an executor service that uses Executors.newScheduledThreadPool . single [jvm] abstract fun single (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newSingleThreadExecutor . unbounded [jvm] abstract fun unbounded (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newCachedThreadPool .","title":"Functions"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/fixed/","text":"// misk-core / misk.concurrent / ExecutorServiceFactory / fixed fixed \u00b6 [jvm]\\ abstract fun fixed (nameFormat: String , threadCount: Int ): ExecutorService Returns an executor service that uses Executors.newFixedThreadPool .","title":"fixed - Misk"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/fixed/#fixed","text":"[jvm]\\ abstract fun fixed (nameFormat: String , threadCount: Int ): ExecutorService Returns an executor service that uses Executors.newFixedThreadPool .","title":"fixed"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/scheduled/","text":"// misk-core / misk.concurrent / ExecutorServiceFactory / scheduled scheduled \u00b6 [jvm]\\ abstract fun scheduled (nameFormat: String , threadCount: Int ): ScheduledExecutorService Returns an executor service that uses Executors.newScheduledThreadPool .","title":"scheduled - Misk"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/scheduled/#scheduled","text":"[jvm]\\ abstract fun scheduled (nameFormat: String , threadCount: Int ): ScheduledExecutorService Returns an executor service that uses Executors.newScheduledThreadPool .","title":"scheduled"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/single/","text":"// misk-core / misk.concurrent / ExecutorServiceFactory / single single \u00b6 [jvm]\\ abstract fun single (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newSingleThreadExecutor .","title":"single - Misk"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/single/#single","text":"[jvm]\\ abstract fun single (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newSingleThreadExecutor .","title":"single"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/unbounded/","text":"// misk-core / misk.concurrent / ExecutorServiceFactory / unbounded unbounded \u00b6 [jvm]\\ abstract fun unbounded (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newCachedThreadPool .","title":"unbounded - Misk"},{"location":"0.x/misk-core/misk.concurrent/-executor-service-factory/unbounded/#unbounded","text":"[jvm]\\ abstract fun unbounded (nameFormat: String ): ExecutorService Returns an executor service that uses Executors.newCachedThreadPool .","title":"unbounded"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/","text":"// misk-core / misk.concurrent / Sleeper Sleeper \u00b6 [jvm]\\ interface Sleeper Abstraction for Thread.sleep() that allows for testing. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary sleep [jvm] abstract fun sleep (duration: Duration )","title":"Sleeper - Misk"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/#sleeper","text":"[jvm]\\ interface Sleeper Abstraction for Thread.sleep() that allows for testing.","title":"Sleeper"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/#functions","text":"Name Summary sleep [jvm] abstract fun sleep (duration: Duration )","title":"Functions"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/sleep/","text":"// misk-core / misk.concurrent / Sleeper / sleep sleep \u00b6 [jvm]\\ abstract fun sleep (duration: Duration )","title":"sleep - Misk"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/sleep/#sleep","text":"[jvm]\\ abstract fun sleep (duration: Duration )","title":"sleep"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/-companion/","text":"// misk-core / misk.concurrent / Sleeper / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary DEFAULT [jvm] val DEFAULT : Sleeper","title":"Companion - Misk"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/-companion/#properties","text":"Name Summary DEFAULT [jvm] val DEFAULT : Sleeper","title":"Properties"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/-companion/-d-e-f-a-u-l-t/","text":"// misk-core / misk.concurrent / Sleeper / Companion / DEFAULT DEFAULT \u00b6 [jvm]\\ val DEFAULT : Sleeper","title":"DEFAULT - Misk"},{"location":"0.x/misk-core/misk.concurrent/-sleeper/-companion/-d-e-f-a-u-l-t/#default","text":"[jvm]\\ val DEFAULT : Sleeper","title":"DEFAULT"},{"location":"0.x/misk-core/misk.config/","text":"// misk-core / misk.config Package misk.config \u00b6 Types \u00b6 Name Summary Config [jvm] interface Config : Config","title":"Package misk.config - Misk"},{"location":"0.x/misk-core/misk.config/#package-miskconfig","text":"","title":"Package misk.config"},{"location":"0.x/misk-core/misk.config/#types","text":"Name Summary Config [jvm] interface Config : Config","title":"Types"},{"location":"0.x/misk-core/misk.config/-config/","text":"// misk-core / misk.config / Config Config \u00b6 [jvm]\\ interface Config : Config","title":"Config - Misk"},{"location":"0.x/misk-core/misk.config/-config/#config","text":"[jvm]\\ interface Config : Config","title":"Config"},{"location":"0.x/misk-core/misk.healthchecks/","text":"// misk-core / misk.healthchecks Package misk.healthchecks \u00b6 Types \u00b6 Name Summary HealthCheck [jvm] interface HealthCheck Allows users to define custom health checks. An app with a failing HealthCheck will fail the readiness check in ReadinessCheckAction, indicating that the app should not accept traffic. HealthStatus [jvm] data class HealthStatus (isHealthy: Boolean , messages: List < String >)","title":"Package misk.healthchecks - Misk"},{"location":"0.x/misk-core/misk.healthchecks/#package-miskhealthchecks","text":"","title":"Package misk.healthchecks"},{"location":"0.x/misk-core/misk.healthchecks/#types","text":"Name Summary HealthCheck [jvm] interface HealthCheck Allows users to define custom health checks. An app with a failing HealthCheck will fail the readiness check in ReadinessCheckAction, indicating that the app should not accept traffic. HealthStatus [jvm] data class HealthStatus (isHealthy: Boolean , messages: List < String >)","title":"Types"},{"location":"0.x/misk-core/misk.healthchecks/-health-check/","text":"// misk-core / misk.healthchecks / HealthCheck HealthCheck \u00b6 [jvm]\\ interface HealthCheck Allows users to define custom health checks. An app with a failing HealthCheck will fail the readiness check in ReadinessCheckAction, indicating that the app should not accept traffic. Functions \u00b6 Name Summary status [jvm] abstract fun status (): HealthStatus Computes whether a component of an application is healthy. For example, an implementing class can check database connectivity.","title":"HealthCheck - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-check/#healthcheck","text":"[jvm]\\ interface HealthCheck Allows users to define custom health checks. An app with a failing HealthCheck will fail the readiness check in ReadinessCheckAction, indicating that the app should not accept traffic.","title":"HealthCheck"},{"location":"0.x/misk-core/misk.healthchecks/-health-check/#functions","text":"Name Summary status [jvm] abstract fun status (): HealthStatus Computes whether a component of an application is healthy. For example, an implementing class can check database connectivity.","title":"Functions"},{"location":"0.x/misk-core/misk.healthchecks/-health-check/status/","text":"// misk-core / misk.healthchecks / HealthCheck / status status \u00b6 [jvm]\\ abstract fun status (): HealthStatus Computes whether a component of an application is healthy. For example, an implementing class can check database connectivity.","title":"status - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-check/status/#status","text":"[jvm]\\ abstract fun status (): HealthStatus Computes whether a component of an application is healthy. For example, an implementing class can check database connectivity.","title":"status"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/","text":"// misk-core / misk.healthchecks / HealthStatus HealthStatus \u00b6 [jvm]\\ data class HealthStatus (isHealthy: Boolean , messages: List < String >) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary isHealthy [jvm] val isHealthy : Boolean messages [jvm] val messages : List < String >","title":"HealthStatus - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/#healthstatus","text":"[jvm]\\ data class HealthStatus (isHealthy: Boolean , messages: List < String >)","title":"HealthStatus"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/#properties","text":"Name Summary isHealthy [jvm] val isHealthy : Boolean messages [jvm] val messages : List < String >","title":"Properties"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-health-status/","text":"// misk-core / misk.healthchecks / HealthStatus / HealthStatus HealthStatus \u00b6 [jvm]\\ fun HealthStatus (isHealthy: Boolean , messages: List < String >)","title":"HealthStatus - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-health-status/#healthstatus","text":"[jvm]\\ fun HealthStatus (isHealthy: Boolean , messages: List < String >)","title":"HealthStatus"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/is-healthy/","text":"// misk-core / misk.healthchecks / HealthStatus / isHealthy isHealthy \u00b6 [jvm]\\ val isHealthy : Boolean","title":"isHealthy - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/is-healthy/#ishealthy","text":"[jvm]\\ val isHealthy : Boolean","title":"isHealthy"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/messages/","text":"// misk-core / misk.healthchecks / HealthStatus / messages messages \u00b6 [jvm]\\ val messages : List < String >","title":"messages - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/messages/#messages","text":"[jvm]\\ val messages : List < String >","title":"messages"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-companion/","text":"// misk-core / misk.healthchecks / HealthStatus / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary healthy [jvm] fun healthy (vararg messages: String ): HealthStatus unhealthy [jvm] fun unhealthy (vararg messages: String ): HealthStatus","title":"Companion - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-companion/#functions","text":"Name Summary healthy [jvm] fun healthy (vararg messages: String ): HealthStatus unhealthy [jvm] fun unhealthy (vararg messages: String ): HealthStatus","title":"Functions"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-companion/healthy/","text":"// misk-core / misk.healthchecks / HealthStatus / Companion / healthy healthy \u00b6 [jvm]\\ fun healthy (vararg messages: String ): HealthStatus","title":"healthy - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-companion/healthy/#healthy","text":"[jvm]\\ fun healthy (vararg messages: String ): HealthStatus","title":"healthy"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-companion/unhealthy/","text":"// misk-core / misk.healthchecks / HealthStatus / Companion / unhealthy unhealthy \u00b6 [jvm]\\ fun unhealthy (vararg messages: String ): HealthStatus","title":"unhealthy - Misk"},{"location":"0.x/misk-core/misk.healthchecks/-health-status/-companion/unhealthy/#unhealthy","text":"[jvm]\\ fun unhealthy (vararg messages: String ): HealthStatus","title":"unhealthy"},{"location":"0.x/misk-core/misk.logging/","text":"// misk-core / misk.logging Package misk.logging \u00b6 Types \u00b6 Name Summary SampledLogger [jvm] class SampledLogger (underlyingLogger: KLogger, sampler: Sampler ) : KLogger Functions \u00b6 Name Summary sampled [jvm] fun KLogger. sampled (sampler: Sampler ): KLogger Returns a logger that samples logs. This logger MUST be instantiated statically, in a companion object or as a Singleton.","title":"Package misk.logging - Misk"},{"location":"0.x/misk-core/misk.logging/#package-misklogging","text":"","title":"Package misk.logging"},{"location":"0.x/misk-core/misk.logging/#types","text":"Name Summary SampledLogger [jvm] class SampledLogger (underlyingLogger: KLogger, sampler: Sampler ) : KLogger","title":"Types"},{"location":"0.x/misk-core/misk.logging/#functions","text":"Name Summary sampled [jvm] fun KLogger. sampled (sampler: Sampler ): KLogger Returns a logger that samples logs. This logger MUST be instantiated statically, in a companion object or as a Singleton.","title":"Functions"},{"location":"0.x/misk-core/misk.logging/sampled/","text":"// misk-core / misk.logging / sampled sampled \u00b6 [jvm]\\ fun KLogger. sampled (sampler: Sampler ): KLogger Returns a logger that samples logs. This logger MUST be instantiated statically, in a companion object or as a Singleton. To get a rate limited logger: val logger = getLogger ().sampled(RateLimitingSampler(RATE_PER_SECOND)) To get a probabilistic sampler val logger = getLogger ().sampled(PercentSampler(PERCENTAGE_TO_ALLOW))","title":"sampled - Misk"},{"location":"0.x/misk-core/misk.logging/sampled/#sampled","text":"[jvm]\\ fun KLogger. sampled (sampler: Sampler ): KLogger Returns a logger that samples logs. This logger MUST be instantiated statically, in a companion object or as a Singleton. To get a rate limited logger: val logger = getLogger ().sampled(RateLimitingSampler(RATE_PER_SECOND)) To get a probabilistic sampler val logger = getLogger ().sampled(PercentSampler(PERCENTAGE_TO_ALLOW))","title":"sampled"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/","text":"// misk-core / misk.logging / SampledLogger SampledLogger \u00b6 [jvm]\\ class SampledLogger (underlyingLogger: KLogger, sampler: Sampler ) : KLogger Functions \u00b6 Name Summary catching [jvm] open override fun < T : Throwable > catching (throwable: T ) debug [jvm] open override fun debug (msg: () -> Any ?) open override fun debug (msg: String ?) open override fun debug (format: String ?, arg: Any ?) open override fun debug (format: String ?, vararg arguments: Any ?) open override fun debug (msg: String ?, t: Throwable ?) open override fun debug (t: Throwable ?, msg: () -> Any ?) open override fun debug (marker: Marker?, msg: () -> Any ?) open override fun debug (marker: Marker?, msg: String ?) open override fun debug (format: String ?, arg1: Any ?, arg2: Any ?) open override fun debug (marker: Marker?, format: String ?, arg: Any ?) open override fun debug (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun debug (marker: Marker?, msg: String ?, t: Throwable ?) open override fun debug (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun debug (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) entry [jvm] open override fun entry (vararg argArray: Any ?) error [jvm] open override fun error (msg: () -> Any ?) open override fun error (msg: String ?) open override fun error (format: String ?, arg: Any ?) open override fun error (format: String ?, vararg arguments: Any ?) open override fun error (msg: String ?, t: Throwable ?) open override fun error (t: Throwable ?, msg: () -> Any ?) open override fun error (marker: Marker?, msg: () -> Any ?) open override fun error (marker: Marker?, msg: String ?) open override fun error (format: String ?, arg1: Any ?, arg2: Any ?) open override fun error (marker: Marker?, format: String ?, arg: Any ?) open override fun error (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun error (marker: Marker?, msg: String ?, t: Throwable ?) open override fun error (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun error (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) exit [jvm] open override fun exit () open override fun < T > exit (result: T ): T getName [jvm] open override fun getName (): String info [jvm] open override fun info (msg: () -> Any ?) open override fun info (msg: String ?) open override fun info (format: String ?, arg: Any ?) open override fun info (format: String ?, vararg arguments: Any ?) open override fun info (msg: String ?, t: Throwable ?) open override fun info (t: Throwable ?, msg: () -> Any ?) open override fun info (marker: Marker?, msg: () -> Any ?) open override fun info (marker: Marker?, msg: String ?) open override fun info (format: String ?, arg1: Any ?, arg2: Any ?) open override fun info (marker: Marker?, format: String ?, arg: Any ?) open override fun info (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun info (marker: Marker?, msg: String ?, t: Throwable ?) open override fun info (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun info (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) isDebugEnabled [jvm] open override fun isDebugEnabled (): Boolean open override fun isDebugEnabled (marker: Marker?): Boolean isErrorEnabled [jvm] open override fun isErrorEnabled (): Boolean open override fun isErrorEnabled (marker: Marker?): Boolean isInfoEnabled [jvm] open override fun isInfoEnabled (): Boolean open override fun isInfoEnabled (marker: Marker?): Boolean isTraceEnabled [jvm] open override fun isTraceEnabled (): Boolean open override fun isTraceEnabled (marker: Marker?): Boolean isWarnEnabled [jvm] open override fun isWarnEnabled (): Boolean open override fun isWarnEnabled (marker: Marker?): Boolean throwing [jvm] open override fun < T : Throwable > throwing (throwable: T ): T trace [jvm] open override fun trace (msg: () -> Any ?) open override fun trace (msg: String ?) open override fun trace (format: String ?, arg: Any ?) open override fun trace (format: String ?, vararg arguments: Any ?) open override fun trace (msg: String ?, t: Throwable ?) open override fun trace (t: Throwable ?, msg: () -> Any ?) open override fun trace (marker: Marker?, msg: () -> Any ?) open override fun trace (marker: Marker?, msg: String ?) open override fun trace (format: String ?, arg1: Any ?, arg2: Any ?) open override fun trace (marker: Marker?, format: String ?, arg: Any ?) open override fun trace (marker: Marker?, format: String ?, vararg argArray: Any ?) open override fun trace (marker: Marker?, msg: String ?, t: Throwable ?) open override fun trace (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun trace (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) warn [jvm] open override fun warn (msg: () -> Any ?) open override fun warn (msg: String ?) open override fun warn (format: String ?, arg: Any ?) open override fun warn (format: String ?, vararg arguments: Any ?) open override fun warn (msg: String ?, t: Throwable ?) open override fun warn (t: Throwable ?, msg: () -> Any ?) open override fun warn (marker: Marker?, msg: () -> Any ?) open override fun warn (marker: Marker?, msg: String ?) open override fun warn (format: String ?, arg1: Any ?, arg2: Any ?) open override fun warn (marker: Marker?, format: String ?, arg: Any ?) open override fun warn (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun warn (marker: Marker?, msg: String ?, t: Throwable ?) open override fun warn (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun warn (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) Properties \u00b6 Name Summary underlyingLogger [jvm] open override val underlyingLogger : KLogger","title":"SampledLogger - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/#sampledlogger","text":"[jvm]\\ class SampledLogger (underlyingLogger: KLogger, sampler: Sampler ) : KLogger","title":"SampledLogger"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/#functions","text":"Name Summary catching [jvm] open override fun < T : Throwable > catching (throwable: T ) debug [jvm] open override fun debug (msg: () -> Any ?) open override fun debug (msg: String ?) open override fun debug (format: String ?, arg: Any ?) open override fun debug (format: String ?, vararg arguments: Any ?) open override fun debug (msg: String ?, t: Throwable ?) open override fun debug (t: Throwable ?, msg: () -> Any ?) open override fun debug (marker: Marker?, msg: () -> Any ?) open override fun debug (marker: Marker?, msg: String ?) open override fun debug (format: String ?, arg1: Any ?, arg2: Any ?) open override fun debug (marker: Marker?, format: String ?, arg: Any ?) open override fun debug (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun debug (marker: Marker?, msg: String ?, t: Throwable ?) open override fun debug (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun debug (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) entry [jvm] open override fun entry (vararg argArray: Any ?) error [jvm] open override fun error (msg: () -> Any ?) open override fun error (msg: String ?) open override fun error (format: String ?, arg: Any ?) open override fun error (format: String ?, vararg arguments: Any ?) open override fun error (msg: String ?, t: Throwable ?) open override fun error (t: Throwable ?, msg: () -> Any ?) open override fun error (marker: Marker?, msg: () -> Any ?) open override fun error (marker: Marker?, msg: String ?) open override fun error (format: String ?, arg1: Any ?, arg2: Any ?) open override fun error (marker: Marker?, format: String ?, arg: Any ?) open override fun error (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun error (marker: Marker?, msg: String ?, t: Throwable ?) open override fun error (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun error (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) exit [jvm] open override fun exit () open override fun < T > exit (result: T ): T getName [jvm] open override fun getName (): String info [jvm] open override fun info (msg: () -> Any ?) open override fun info (msg: String ?) open override fun info (format: String ?, arg: Any ?) open override fun info (format: String ?, vararg arguments: Any ?) open override fun info (msg: String ?, t: Throwable ?) open override fun info (t: Throwable ?, msg: () -> Any ?) open override fun info (marker: Marker?, msg: () -> Any ?) open override fun info (marker: Marker?, msg: String ?) open override fun info (format: String ?, arg1: Any ?, arg2: Any ?) open override fun info (marker: Marker?, format: String ?, arg: Any ?) open override fun info (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun info (marker: Marker?, msg: String ?, t: Throwable ?) open override fun info (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun info (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) isDebugEnabled [jvm] open override fun isDebugEnabled (): Boolean open override fun isDebugEnabled (marker: Marker?): Boolean isErrorEnabled [jvm] open override fun isErrorEnabled (): Boolean open override fun isErrorEnabled (marker: Marker?): Boolean isInfoEnabled [jvm] open override fun isInfoEnabled (): Boolean open override fun isInfoEnabled (marker: Marker?): Boolean isTraceEnabled [jvm] open override fun isTraceEnabled (): Boolean open override fun isTraceEnabled (marker: Marker?): Boolean isWarnEnabled [jvm] open override fun isWarnEnabled (): Boolean open override fun isWarnEnabled (marker: Marker?): Boolean throwing [jvm] open override fun < T : Throwable > throwing (throwable: T ): T trace [jvm] open override fun trace (msg: () -> Any ?) open override fun trace (msg: String ?) open override fun trace (format: String ?, arg: Any ?) open override fun trace (format: String ?, vararg arguments: Any ?) open override fun trace (msg: String ?, t: Throwable ?) open override fun trace (t: Throwable ?, msg: () -> Any ?) open override fun trace (marker: Marker?, msg: () -> Any ?) open override fun trace (marker: Marker?, msg: String ?) open override fun trace (format: String ?, arg1: Any ?, arg2: Any ?) open override fun trace (marker: Marker?, format: String ?, arg: Any ?) open override fun trace (marker: Marker?, format: String ?, vararg argArray: Any ?) open override fun trace (marker: Marker?, msg: String ?, t: Throwable ?) open override fun trace (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun trace (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) warn [jvm] open override fun warn (msg: () -> Any ?) open override fun warn (msg: String ?) open override fun warn (format: String ?, arg: Any ?) open override fun warn (format: String ?, vararg arguments: Any ?) open override fun warn (msg: String ?, t: Throwable ?) open override fun warn (t: Throwable ?, msg: () -> Any ?) open override fun warn (marker: Marker?, msg: () -> Any ?) open override fun warn (marker: Marker?, msg: String ?) open override fun warn (format: String ?, arg1: Any ?, arg2: Any ?) open override fun warn (marker: Marker?, format: String ?, arg: Any ?) open override fun warn (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun warn (marker: Marker?, msg: String ?, t: Throwable ?) open override fun warn (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun warn (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?)","title":"Functions"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/#properties","text":"Name Summary underlyingLogger [jvm] open override val underlyingLogger : KLogger","title":"Properties"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/-sampled-logger/","text":"// misk-core / misk.logging / SampledLogger / SampledLogger SampledLogger \u00b6 [jvm]\\ fun SampledLogger (underlyingLogger: KLogger, sampler: Sampler )","title":"SampledLogger - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/-sampled-logger/#sampledlogger","text":"[jvm]\\ fun SampledLogger (underlyingLogger: KLogger, sampler: Sampler )","title":"SampledLogger"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/catching/","text":"// misk-core / misk.logging / SampledLogger / catching catching \u00b6 [jvm]\\ open override fun < T : Throwable > catching (throwable: T )","title":"catching - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/catching/#catching","text":"[jvm]\\ open override fun < T : Throwable > catching (throwable: T )","title":"catching"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/debug/","text":"// misk-core / misk.logging / SampledLogger / debug debug \u00b6 [jvm]\\ open override fun debug (msg: () -> Any ?) open override fun debug (t: Throwable ?, msg: () -> Any ?) open override fun debug (marker: Marker?, msg: () -> Any ?) open override fun debug (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun debug (msg: String ?) open override fun debug (format: String ?, arg: Any ?) open override fun debug (format: String ?, arg1: Any ?, arg2: Any ?) open override fun debug (format: String ?, vararg arguments: Any ?) open override fun debug (msg: String ?, t: Throwable ?) open override fun debug (marker: Marker?, msg: String ?) open override fun debug (marker: Marker?, format: String ?, arg: Any ?) open override fun debug (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun debug (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun debug (marker: Marker?, msg: String ?, t: Throwable ?)","title":"debug - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/debug/#debug","text":"[jvm]\\ open override fun debug (msg: () -> Any ?) open override fun debug (t: Throwable ?, msg: () -> Any ?) open override fun debug (marker: Marker?, msg: () -> Any ?) open override fun debug (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun debug (msg: String ?) open override fun debug (format: String ?, arg: Any ?) open override fun debug (format: String ?, arg1: Any ?, arg2: Any ?) open override fun debug (format: String ?, vararg arguments: Any ?) open override fun debug (msg: String ?, t: Throwable ?) open override fun debug (marker: Marker?, msg: String ?) open override fun debug (marker: Marker?, format: String ?, arg: Any ?) open override fun debug (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun debug (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun debug (marker: Marker?, msg: String ?, t: Throwable ?)","title":"debug"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/entry/","text":"// misk-core / misk.logging / SampledLogger / entry entry \u00b6 [jvm]\\ open override fun entry (vararg argArray: Any ?)","title":"entry - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/entry/#entry","text":"[jvm]\\ open override fun entry (vararg argArray: Any ?)","title":"entry"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/error/","text":"// misk-core / misk.logging / SampledLogger / error error \u00b6 [jvm]\\ open override fun error (msg: () -> Any ?) open override fun error (t: Throwable ?, msg: () -> Any ?) open override fun error (marker: Marker?, msg: () -> Any ?) open override fun error (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun error (msg: String ?) open override fun error (format: String ?, arg: Any ?) open override fun error (format: String ?, arg1: Any ?, arg2: Any ?) open override fun error (format: String ?, vararg arguments: Any ?) open override fun error (msg: String ?, t: Throwable ?) open override fun error (marker: Marker?, msg: String ?) open override fun error (marker: Marker?, format: String ?, arg: Any ?) open override fun error (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun error (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun error (marker: Marker?, msg: String ?, t: Throwable ?)","title":"error - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/error/#error","text":"[jvm]\\ open override fun error (msg: () -> Any ?) open override fun error (t: Throwable ?, msg: () -> Any ?) open override fun error (marker: Marker?, msg: () -> Any ?) open override fun error (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun error (msg: String ?) open override fun error (format: String ?, arg: Any ?) open override fun error (format: String ?, arg1: Any ?, arg2: Any ?) open override fun error (format: String ?, vararg arguments: Any ?) open override fun error (msg: String ?, t: Throwable ?) open override fun error (marker: Marker?, msg: String ?) open override fun error (marker: Marker?, format: String ?, arg: Any ?) open override fun error (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun error (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun error (marker: Marker?, msg: String ?, t: Throwable ?)","title":"error"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/exit/","text":"// misk-core / misk.logging / SampledLogger / exit exit \u00b6 [jvm]\\ open override fun exit () open override fun < T > exit (result: T ): T","title":"exit - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/exit/#exit","text":"[jvm]\\ open override fun exit () open override fun < T > exit (result: T ): T","title":"exit"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/get-name/","text":"// misk-core / misk.logging / SampledLogger / getName getName \u00b6 [jvm]\\ open override fun getName (): String","title":"getName - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/get-name/#getname","text":"[jvm]\\ open override fun getName (): String","title":"getName"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/info/","text":"// misk-core / misk.logging / SampledLogger / info info \u00b6 [jvm]\\ open override fun info (msg: () -> Any ?) open override fun info (t: Throwable ?, msg: () -> Any ?) open override fun info (marker: Marker?, msg: () -> Any ?) open override fun info (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun info (msg: String ?) open override fun info (format: String ?, arg: Any ?) open override fun info (format: String ?, arg1: Any ?, arg2: Any ?) open override fun info (format: String ?, vararg arguments: Any ?) open override fun info (msg: String ?, t: Throwable ?) open override fun info (marker: Marker?, msg: String ?) open override fun info (marker: Marker?, format: String ?, arg: Any ?) open override fun info (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun info (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun info (marker: Marker?, msg: String ?, t: Throwable ?)","title":"info - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/info/#info","text":"[jvm]\\ open override fun info (msg: () -> Any ?) open override fun info (t: Throwable ?, msg: () -> Any ?) open override fun info (marker: Marker?, msg: () -> Any ?) open override fun info (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun info (msg: String ?) open override fun info (format: String ?, arg: Any ?) open override fun info (format: String ?, arg1: Any ?, arg2: Any ?) open override fun info (format: String ?, vararg arguments: Any ?) open override fun info (msg: String ?, t: Throwable ?) open override fun info (marker: Marker?, msg: String ?) open override fun info (marker: Marker?, format: String ?, arg: Any ?) open override fun info (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun info (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun info (marker: Marker?, msg: String ?, t: Throwable ?)","title":"info"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-debug-enabled/","text":"// misk-core / misk.logging / SampledLogger / isDebugEnabled isDebugEnabled \u00b6 [jvm]\\ open override fun isDebugEnabled (): Boolean open override fun isDebugEnabled (marker: Marker?): Boolean","title":"isDebugEnabled - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-debug-enabled/#isdebugenabled","text":"[jvm]\\ open override fun isDebugEnabled (): Boolean open override fun isDebugEnabled (marker: Marker?): Boolean","title":"isDebugEnabled"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-error-enabled/","text":"// misk-core / misk.logging / SampledLogger / isErrorEnabled isErrorEnabled \u00b6 [jvm]\\ open override fun isErrorEnabled (): Boolean open override fun isErrorEnabled (marker: Marker?): Boolean","title":"isErrorEnabled - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-error-enabled/#iserrorenabled","text":"[jvm]\\ open override fun isErrorEnabled (): Boolean open override fun isErrorEnabled (marker: Marker?): Boolean","title":"isErrorEnabled"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-info-enabled/","text":"// misk-core / misk.logging / SampledLogger / isInfoEnabled isInfoEnabled \u00b6 [jvm]\\ open override fun isInfoEnabled (): Boolean open override fun isInfoEnabled (marker: Marker?): Boolean","title":"isInfoEnabled - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-info-enabled/#isinfoenabled","text":"[jvm]\\ open override fun isInfoEnabled (): Boolean open override fun isInfoEnabled (marker: Marker?): Boolean","title":"isInfoEnabled"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-trace-enabled/","text":"// misk-core / misk.logging / SampledLogger / isTraceEnabled isTraceEnabled \u00b6 [jvm]\\ open override fun isTraceEnabled (): Boolean open override fun isTraceEnabled (marker: Marker?): Boolean","title":"isTraceEnabled - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-trace-enabled/#istraceenabled","text":"[jvm]\\ open override fun isTraceEnabled (): Boolean open override fun isTraceEnabled (marker: Marker?): Boolean","title":"isTraceEnabled"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-warn-enabled/","text":"// misk-core / misk.logging / SampledLogger / isWarnEnabled isWarnEnabled \u00b6 [jvm]\\ open override fun isWarnEnabled (): Boolean open override fun isWarnEnabled (marker: Marker?): Boolean","title":"isWarnEnabled - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/is-warn-enabled/#iswarnenabled","text":"[jvm]\\ open override fun isWarnEnabled (): Boolean open override fun isWarnEnabled (marker: Marker?): Boolean","title":"isWarnEnabled"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/throwing/","text":"// misk-core / misk.logging / SampledLogger / throwing throwing \u00b6 [jvm]\\ open override fun < T : Throwable > throwing (throwable: T ): T","title":"throwing - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/throwing/#throwing","text":"[jvm]\\ open override fun < T : Throwable > throwing (throwable: T ): T","title":"throwing"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/trace/","text":"// misk-core / misk.logging / SampledLogger / trace trace \u00b6 [jvm]\\ open override fun trace (msg: () -> Any ?) open override fun trace (t: Throwable ?, msg: () -> Any ?) open override fun trace (marker: Marker?, msg: () -> Any ?) open override fun trace (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun trace (msg: String ?) open override fun trace (format: String ?, arg: Any ?) open override fun trace (format: String ?, arg1: Any ?, arg2: Any ?) open override fun trace (format: String ?, vararg arguments: Any ?) open override fun trace (msg: String ?, t: Throwable ?) open override fun trace (marker: Marker?, msg: String ?) open override fun trace (marker: Marker?, format: String ?, arg: Any ?) open override fun trace (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun trace (marker: Marker?, format: String ?, vararg argArray: Any ?) open override fun trace (marker: Marker?, msg: String ?, t: Throwable ?)","title":"trace - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/trace/#trace","text":"[jvm]\\ open override fun trace (msg: () -> Any ?) open override fun trace (t: Throwable ?, msg: () -> Any ?) open override fun trace (marker: Marker?, msg: () -> Any ?) open override fun trace (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun trace (msg: String ?) open override fun trace (format: String ?, arg: Any ?) open override fun trace (format: String ?, arg1: Any ?, arg2: Any ?) open override fun trace (format: String ?, vararg arguments: Any ?) open override fun trace (msg: String ?, t: Throwable ?) open override fun trace (marker: Marker?, msg: String ?) open override fun trace (marker: Marker?, format: String ?, arg: Any ?) open override fun trace (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun trace (marker: Marker?, format: String ?, vararg argArray: Any ?) open override fun trace (marker: Marker?, msg: String ?, t: Throwable ?)","title":"trace"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/underlying-logger/","text":"// misk-core / misk.logging / SampledLogger / underlyingLogger underlyingLogger \u00b6 [jvm]\\ open override val underlyingLogger : KLogger","title":"underlyingLogger - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/underlying-logger/#underlyinglogger","text":"[jvm]\\ open override val underlyingLogger : KLogger","title":"underlyingLogger"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/warn/","text":"// misk-core / misk.logging / SampledLogger / warn warn \u00b6 [jvm]\\ open override fun warn (msg: () -> Any ?) open override fun warn (t: Throwable ?, msg: () -> Any ?) open override fun warn (marker: Marker?, msg: () -> Any ?) open override fun warn (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun warn (msg: String ?) open override fun warn (format: String ?, arg: Any ?) open override fun warn (format: String ?, vararg arguments: Any ?) open override fun warn (format: String ?, arg1: Any ?, arg2: Any ?) open override fun warn (msg: String ?, t: Throwable ?) open override fun warn (marker: Marker?, msg: String ?) open override fun warn (marker: Marker?, format: String ?, arg: Any ?) open override fun warn (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun warn (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun warn (marker: Marker?, msg: String ?, t: Throwable ?)","title":"warn - Misk"},{"location":"0.x/misk-core/misk.logging/-sampled-logger/warn/#warn","text":"[jvm]\\ open override fun warn (msg: () -> Any ?) open override fun warn (t: Throwable ?, msg: () -> Any ?) open override fun warn (marker: Marker?, msg: () -> Any ?) open override fun warn (marker: Marker?, t: Throwable ?, msg: () -> Any ?) open override fun warn (msg: String ?) open override fun warn (format: String ?, arg: Any ?) open override fun warn (format: String ?, vararg arguments: Any ?) open override fun warn (format: String ?, arg1: Any ?, arg2: Any ?) open override fun warn (msg: String ?, t: Throwable ?) open override fun warn (marker: Marker?, msg: String ?) open override fun warn (marker: Marker?, format: String ?, arg: Any ?) open override fun warn (marker: Marker?, format: String ?, arg1: Any ?, arg2: Any ?) open override fun warn (marker: Marker?, format: String ?, vararg arguments: Any ?) open override fun warn (marker: Marker?, msg: String ?, t: Throwable ?)","title":"warn"},{"location":"0.x/misk-core/misk.random/","text":"// misk-core / misk.random Package misk.random \u00b6 Types \u00b6 Name Summary Random [jvm] @Singleton open class Random @Injectconstructor : Random Abstraction for Java\u2019s Random that allows for testing. ThreadLocalRandom [jvm] @Singleton open class ThreadLocalRandom @Injectconstructor Abstraction for Java\u2019s ThreadLocalRandom that allows for testing.","title":"Package misk.random - Misk"},{"location":"0.x/misk-core/misk.random/#package-miskrandom","text":"","title":"Package misk.random"},{"location":"0.x/misk-core/misk.random/#types","text":"Name Summary Random [jvm] @Singleton open class Random @Injectconstructor : Random Abstraction for Java\u2019s Random that allows for testing. ThreadLocalRandom [jvm] @Singleton open class ThreadLocalRandom @Injectconstructor Abstraction for Java\u2019s ThreadLocalRandom that allows for testing.","title":"Types"},{"location":"0.x/misk-core/misk.random/-random/","text":"// misk-core / misk.random / Random Random \u00b6 [jvm]\\ @Singleton open class Random @Injectconstructor : Random Abstraction for Java\u2019s Random that allows for testing. Constructors \u00b6 Random [jvm] @Inject fun Random () Functions \u00b6 Name Summary doubles [jvm] open fun doubles (): DoubleStream open fun doubles (p0: Long ): DoubleStream open fun doubles (p0: Double , p1: Double ): DoubleStream open fun doubles (p0: Long , p1: Double , p2: Double ): DoubleStream internalNextDouble [jvm] fun internalNextDouble (p0: Double , p1: Double ): Double internalNextInt [jvm] fun internalNextInt (p0: Int , p1: Int ): Int internalNextLong [jvm] fun internalNextLong (p0: Long , p1: Long ): Long ints [jvm] open fun ints (): IntStream open fun ints (p0: Long ): IntStream open fun ints (p0: Int , p1: Int ): IntStream open fun ints (p0: Long , p1: Int , p2: Int ): IntStream longs [jvm] open fun longs (): LongStream open fun longs (p0: Long ): LongStream open fun longs (p0: Long , p1: Long ): LongStream open fun longs (p0: Long , p1: Long , p2: Long ): LongStream next [jvm] open fun next (p0: Int ): Int nextBoolean [jvm] open fun nextBoolean (): Boolean nextBytes [jvm] open fun nextBytes (p0: ByteArray ) nextDouble [jvm] open fun nextDouble (): Double nextFloat [jvm] open fun nextFloat (): Float nextGaussian [jvm] open fun nextGaussian (): Double nextInt [jvm] open fun nextInt (): Int open fun nextInt (p0: Int ): Int nextLong [jvm] open fun nextLong (): Long setSeed [jvm] open fun setSeed (p0: Long )","title":"Random - Misk"},{"location":"0.x/misk-core/misk.random/-random/#random","text":"[jvm]\\ @Singleton open class Random @Injectconstructor : Random Abstraction for Java\u2019s Random that allows for testing.","title":"Random"},{"location":"0.x/misk-core/misk.random/-random/#constructors","text":"Random [jvm] @Inject fun Random ()","title":"Constructors"},{"location":"0.x/misk-core/misk.random/-random/#functions","text":"Name Summary doubles [jvm] open fun doubles (): DoubleStream open fun doubles (p0: Long ): DoubleStream open fun doubles (p0: Double , p1: Double ): DoubleStream open fun doubles (p0: Long , p1: Double , p2: Double ): DoubleStream internalNextDouble [jvm] fun internalNextDouble (p0: Double , p1: Double ): Double internalNextInt [jvm] fun internalNextInt (p0: Int , p1: Int ): Int internalNextLong [jvm] fun internalNextLong (p0: Long , p1: Long ): Long ints [jvm] open fun ints (): IntStream open fun ints (p0: Long ): IntStream open fun ints (p0: Int , p1: Int ): IntStream open fun ints (p0: Long , p1: Int , p2: Int ): IntStream longs [jvm] open fun longs (): LongStream open fun longs (p0: Long ): LongStream open fun longs (p0: Long , p1: Long ): LongStream open fun longs (p0: Long , p1: Long , p2: Long ): LongStream next [jvm] open fun next (p0: Int ): Int nextBoolean [jvm] open fun nextBoolean (): Boolean nextBytes [jvm] open fun nextBytes (p0: ByteArray ) nextDouble [jvm] open fun nextDouble (): Double nextFloat [jvm] open fun nextFloat (): Float nextGaussian [jvm] open fun nextGaussian (): Double nextInt [jvm] open fun nextInt (): Int open fun nextInt (p0: Int ): Int nextLong [jvm] open fun nextLong (): Long setSeed [jvm] open fun setSeed (p0: Long )","title":"Functions"},{"location":"0.x/misk-core/misk.random/-random/-random/","text":"// misk-core / misk.random / Random / Random Random \u00b6 [jvm]\\ @Inject fun Random ()","title":"Random - Misk"},{"location":"0.x/misk-core/misk.random/-random/-random/#random","text":"[jvm]\\ @Inject fun Random ()","title":"Random"},{"location":"0.x/misk-core/misk.random/-thread-local-random/","text":"// misk-core / misk.random / ThreadLocalRandom ThreadLocalRandom \u00b6 [jvm]\\ @Singleton open class ThreadLocalRandom @Injectconstructor Abstraction for Java\u2019s ThreadLocalRandom that allows for testing. Constructors \u00b6 ThreadLocalRandom [jvm] @Inject fun ThreadLocalRandom () Functions \u00b6 Name Summary current [jvm] open fun current (): Random","title":"ThreadLocalRandom - Misk"},{"location":"0.x/misk-core/misk.random/-thread-local-random/#threadlocalrandom","text":"[jvm]\\ @Singleton open class ThreadLocalRandom @Injectconstructor Abstraction for Java\u2019s ThreadLocalRandom that allows for testing.","title":"ThreadLocalRandom"},{"location":"0.x/misk-core/misk.random/-thread-local-random/#constructors","text":"ThreadLocalRandom [jvm] @Inject fun ThreadLocalRandom ()","title":"Constructors"},{"location":"0.x/misk-core/misk.random/-thread-local-random/#functions","text":"Name Summary current [jvm] open fun current (): Random","title":"Functions"},{"location":"0.x/misk-core/misk.random/-thread-local-random/-thread-local-random/","text":"// misk-core / misk.random / ThreadLocalRandom / ThreadLocalRandom ThreadLocalRandom \u00b6 [jvm]\\ @Inject fun ThreadLocalRandom ()","title":"ThreadLocalRandom - Misk"},{"location":"0.x/misk-core/misk.random/-thread-local-random/-thread-local-random/#threadlocalrandom","text":"[jvm]\\ @Inject fun ThreadLocalRandom ()","title":"ThreadLocalRandom"},{"location":"0.x/misk-core/misk.random/-thread-local-random/current/","text":"// misk-core / misk.random / ThreadLocalRandom / current current \u00b6 [jvm]\\ open fun current (): Random","title":"current - Misk"},{"location":"0.x/misk-core/misk.random/-thread-local-random/current/#current","text":"[jvm]\\ open fun current (): Random","title":"current"},{"location":"0.x/misk-core/misk.resources/","text":"// misk-core / misk.resources Package misk.resources \u00b6 Types \u00b6 Name Summary FakeFilesModule [jvm] class FakeFilesModule (fakeFiles: Map < String , String >) : KAbstractModule Adds the provided fake files to the map used by FilesystemLoaderBackend. ForFakeFiles [jvm] @Qualifier annotation class ForFakeFiles ResourceLoader [jvm] @Singleton class ResourceLoader @Injectconstructor(backends: Map < String , ResourceLoader.Backend>) ResourceLoader is a testable API for loading resources from the classpath, from the filesystem, from memory, or from another Backend source. ResourceLoaderModule [jvm] class ResourceLoaderModule : KAbstractModule TestingResourceLoaderModule [jvm] class TestingResourceLoaderModule : KAbstractModule Can be used instead of ResourceLoaderModule in tests to load filesystem: resources using FakeFilesystemLoaderBackend","title":"Package misk.resources - Misk"},{"location":"0.x/misk-core/misk.resources/#package-miskresources","text":"","title":"Package misk.resources"},{"location":"0.x/misk-core/misk.resources/#types","text":"Name Summary FakeFilesModule [jvm] class FakeFilesModule (fakeFiles: Map < String , String >) : KAbstractModule Adds the provided fake files to the map used by FilesystemLoaderBackend. ForFakeFiles [jvm] @Qualifier annotation class ForFakeFiles ResourceLoader [jvm] @Singleton class ResourceLoader @Injectconstructor(backends: Map < String , ResourceLoader.Backend>) ResourceLoader is a testable API for loading resources from the classpath, from the filesystem, from memory, or from another Backend source. ResourceLoaderModule [jvm] class ResourceLoaderModule : KAbstractModule TestingResourceLoaderModule [jvm] class TestingResourceLoaderModule : KAbstractModule Can be used instead of ResourceLoaderModule in tests to load filesystem: resources using FakeFilesystemLoaderBackend","title":"Types"},{"location":"0.x/misk-core/misk.resources/-fake-files-module/","text":"// misk-core / misk.resources / FakeFilesModule FakeFilesModule \u00b6 [jvm]\\ class FakeFilesModule (fakeFiles: Map < String , String >) : KAbstractModule Adds the provided fake files to the map used by FilesystemLoaderBackend. Constructors \u00b6 FakeFilesModule [jvm] fun FakeFilesModule (fakeFiles: Map < String , String >) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeFilesModule - Misk"},{"location":"0.x/misk-core/misk.resources/-fake-files-module/#fakefilesmodule","text":"[jvm]\\ class FakeFilesModule (fakeFiles: Map < String , String >) : KAbstractModule Adds the provided fake files to the map used by FilesystemLoaderBackend.","title":"FakeFilesModule"},{"location":"0.x/misk-core/misk.resources/-fake-files-module/#constructors","text":"FakeFilesModule [jvm] fun FakeFilesModule (fakeFiles: Map < String , String >)","title":"Constructors"},{"location":"0.x/misk-core/misk.resources/-fake-files-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-core/misk.resources/-fake-files-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-core/misk.resources/-fake-files-module/-fake-files-module/","text":"// misk-core / misk.resources / FakeFilesModule / FakeFilesModule FakeFilesModule \u00b6 [jvm]\\ fun FakeFilesModule (fakeFiles: Map < String , String >)","title":"FakeFilesModule - Misk"},{"location":"0.x/misk-core/misk.resources/-fake-files-module/-fake-files-module/#fakefilesmodule","text":"[jvm]\\ fun FakeFilesModule (fakeFiles: Map < String , String >)","title":"FakeFilesModule"},{"location":"0.x/misk-core/misk.resources/-for-fake-files/","text":"// misk-core / misk.resources / ForFakeFiles ForFakeFiles \u00b6 [jvm]\\ @Qualifier annotation class ForFakeFiles","title":"ForFakeFiles - Misk"},{"location":"0.x/misk-core/misk.resources/-for-fake-files/#forfakefiles","text":"[jvm]\\ @Qualifier annotation class ForFakeFiles","title":"ForFakeFiles"},{"location":"0.x/misk-core/misk.resources/-for-fake-files/-for-fake-files/","text":"// misk-core / misk.resources / ForFakeFiles / ForFakeFiles ForFakeFiles \u00b6 [jvm]\\ fun ForFakeFiles ()","title":"ForFakeFiles - Misk"},{"location":"0.x/misk-core/misk.resources/-for-fake-files/-for-fake-files/#forfakefiles","text":"[jvm]\\ fun ForFakeFiles ()","title":"ForFakeFiles"},{"location":"0.x/misk-core/misk.resources/-resource-loader/","text":"// misk-core / misk.resources / ResourceLoader ResourceLoader \u00b6 [jvm]\\ @Singleton class ResourceLoader @Injectconstructor(backends: Map < String , ResourceLoader.Backend>) ResourceLoader is a testable API for loading resources from the classpath, from the filesystem, from memory, or from another Backend source. Resource addresses have a scheme name, a colon, and an absolute filesystem-like path: classpath:/migrations/v1.sql. Schemes identify backends classpath: or memory:. Paths start with a slash and have any number of segments. Classpath resources use the scheme classpath:. The backend reads data from the src/main/resources of the project\u2019s modules and the contents of all library .jar files. Classpath resources are read-only. Filesystem resources use the scheme filesystem:. The backend reads data from the host machine\u2019s local filesystem. It is read-only and does not support list . Memory resources use the scheme memory:. The backend starts empty and is populated by calls to put . Other backends are permitted. They should be registered with a MapBinder with the backend scheme like classpath: as the key. Constructors \u00b6 ResourceLoader [jvm] @Inject fun ResourceLoader (backends: Map < String , ResourceLoader.Backend>) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary copyTo [jvm] fun copyTo (root: String , dir: Path ) Copies all resources with root as a prefix to the directory dir . exists [jvm] fun exists (address: String ): Boolean Returns true if a resource at address exists. list [jvm] fun list (address: String ): List < String > Returns the full path of the resources that are immediate children of address. open [jvm] fun open (address: String ): BufferedSource? Return a buffered source for address, or null if no such resource exists. put [jvm] fun put (address: String , utf8: String ) Writes a resource as UTF-8. Throws if the backend is readonly. [jvm] fun put (address: String , data: ByteString) Writes a resource. Throws if the backend is readonly. requireUtf8 [jvm] fun requireUtf8 (address: String ): String Like utf8 , but throws IllegalStateException if the resource is missing. utf8 [jvm] fun utf8 (address: String ): String ? Return the contents of address as a string, or null if no such resource exists. Note that this method decodes the resource on every use. It is the caller\u2019s responsibility to cache the result if it is to be loaded frequently. walk [jvm] fun walk (address: String ): List < String >","title":"ResourceLoader - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/#resourceloader","text":"[jvm]\\ @Singleton class ResourceLoader @Injectconstructor(backends: Map < String , ResourceLoader.Backend>) ResourceLoader is a testable API for loading resources from the classpath, from the filesystem, from memory, or from another Backend source. Resource addresses have a scheme name, a colon, and an absolute filesystem-like path: classpath:/migrations/v1.sql. Schemes identify backends classpath: or memory:. Paths start with a slash and have any number of segments. Classpath resources use the scheme classpath:. The backend reads data from the src/main/resources of the project\u2019s modules and the contents of all library .jar files. Classpath resources are read-only. Filesystem resources use the scheme filesystem:. The backend reads data from the host machine\u2019s local filesystem. It is read-only and does not support list . Memory resources use the scheme memory:. The backend starts empty and is populated by calls to put . Other backends are permitted. They should be registered with a MapBinder with the backend scheme like classpath: as the key.","title":"ResourceLoader"},{"location":"0.x/misk-core/misk.resources/-resource-loader/#constructors","text":"ResourceLoader [jvm] @Inject fun ResourceLoader (backends: Map < String , ResourceLoader.Backend>)","title":"Constructors"},{"location":"0.x/misk-core/misk.resources/-resource-loader/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-core/misk.resources/-resource-loader/#functions","text":"Name Summary copyTo [jvm] fun copyTo (root: String , dir: Path ) Copies all resources with root as a prefix to the directory dir . exists [jvm] fun exists (address: String ): Boolean Returns true if a resource at address exists. list [jvm] fun list (address: String ): List < String > Returns the full path of the resources that are immediate children of address. open [jvm] fun open (address: String ): BufferedSource? Return a buffered source for address, or null if no such resource exists. put [jvm] fun put (address: String , utf8: String ) Writes a resource as UTF-8. Throws if the backend is readonly. [jvm] fun put (address: String , data: ByteString) Writes a resource. Throws if the backend is readonly. requireUtf8 [jvm] fun requireUtf8 (address: String ): String Like utf8 , but throws IllegalStateException if the resource is missing. utf8 [jvm] fun utf8 (address: String ): String ? Return the contents of address as a string, or null if no such resource exists. Note that this method decodes the resource on every use. It is the caller\u2019s responsibility to cache the result if it is to be loaded frequently. walk [jvm] fun walk (address: String ): List < String >","title":"Functions"},{"location":"0.x/misk-core/misk.resources/-resource-loader/-resource-loader/","text":"// misk-core / misk.resources / ResourceLoader / ResourceLoader ResourceLoader \u00b6 [jvm]\\ @Inject fun ResourceLoader (backends: Map < String , ResourceLoader.Backend>)","title":"ResourceLoader - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/-resource-loader/#resourceloader","text":"[jvm]\\ @Inject fun ResourceLoader (backends: Map < String , ResourceLoader.Backend>)","title":"ResourceLoader"},{"location":"0.x/misk-core/misk.resources/-resource-loader/copy-to/","text":"// misk-core / misk.resources / ResourceLoader / copyTo copyTo \u00b6 [jvm]\\ fun copyTo (root: String , dir: Path ) Copies all resources with root as a prefix to the directory dir .","title":"copyTo - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/copy-to/#copyto","text":"[jvm]\\ fun copyTo (root: String , dir: Path ) Copies all resources with root as a prefix to the directory dir .","title":"copyTo"},{"location":"0.x/misk-core/misk.resources/-resource-loader/exists/","text":"// misk-core / misk.resources / ResourceLoader / exists exists \u00b6 [jvm]\\ fun exists (address: String ): Boolean Returns true if a resource at address exists.","title":"exists - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/exists/#exists","text":"[jvm]\\ fun exists (address: String ): Boolean Returns true if a resource at address exists.","title":"exists"},{"location":"0.x/misk-core/misk.resources/-resource-loader/list/","text":"// misk-core / misk.resources / ResourceLoader / list list \u00b6 [jvm]\\ fun list (address: String ): List < String > Returns the full path of the resources that are immediate children of address.","title":"list - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/list/#list","text":"[jvm]\\ fun list (address: String ): List < String > Returns the full path of the resources that are immediate children of address.","title":"list"},{"location":"0.x/misk-core/misk.resources/-resource-loader/open/","text":"// misk-core / misk.resources / ResourceLoader / open open \u00b6 [jvm]\\ fun open (address: String ): BufferedSource? Return a buffered source for address, or null if no such resource exists.","title":"open - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/open/#open","text":"[jvm]\\ fun open (address: String ): BufferedSource? Return a buffered source for address, or null if no such resource exists.","title":"open"},{"location":"0.x/misk-core/misk.resources/-resource-loader/put/","text":"// misk-core / misk.resources / ResourceLoader / put put \u00b6 [jvm]\\ fun put (address: String , utf8: String ) Writes a resource as UTF-8. Throws if the backend is readonly. [jvm]\\ fun put (address: String , data: ByteString) Writes a resource. Throws if the backend is readonly.","title":"put - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/put/#put","text":"[jvm]\\ fun put (address: String , utf8: String ) Writes a resource as UTF-8. Throws if the backend is readonly. [jvm]\\ fun put (address: String , data: ByteString) Writes a resource. Throws if the backend is readonly.","title":"put"},{"location":"0.x/misk-core/misk.resources/-resource-loader/require-utf8/","text":"// misk-core / misk.resources / ResourceLoader / requireUtf8 requireUtf8 \u00b6 [jvm]\\ fun requireUtf8 (address: String ): String Like utf8 , but throws IllegalStateException if the resource is missing.","title":"requireUtf8 - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/require-utf8/#requireutf8","text":"[jvm]\\ fun requireUtf8 (address: String ): String Like utf8 , but throws IllegalStateException if the resource is missing.","title":"requireUtf8"},{"location":"0.x/misk-core/misk.resources/-resource-loader/utf8/","text":"// misk-core / misk.resources / ResourceLoader / utf8 utf8 \u00b6 [jvm]\\ fun utf8 (address: String ): String ? Return the contents of address as a string, or null if no such resource exists. Note that this method decodes the resource on every use. It is the caller\u2019s responsibility to cache the result if it is to be loaded frequently.","title":"utf8 - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/utf8/#utf8","text":"[jvm]\\ fun utf8 (address: String ): String ? Return the contents of address as a string, or null if no such resource exists. Note that this method decodes the resource on every use. It is the caller\u2019s responsibility to cache the result if it is to be loaded frequently.","title":"utf8"},{"location":"0.x/misk-core/misk.resources/-resource-loader/walk/","text":"// misk-core / misk.resources / ResourceLoader / walk walk \u00b6 [jvm]\\ fun walk (address: String ): List < String >","title":"walk - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/walk/#walk","text":"[jvm]\\ fun walk (address: String ): List < String >","title":"walk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/-companion/","text":"// misk-core / misk.resources / ResourceLoader / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary SYSTEM [jvm] val SYSTEM : ResourceLoader","title":"Companion - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-core/misk.resources/-resource-loader/-companion/#properties","text":"Name Summary SYSTEM [jvm] val SYSTEM : ResourceLoader","title":"Properties"},{"location":"0.x/misk-core/misk.resources/-resource-loader/-companion/-s-y-s-t-e-m/","text":"// misk-core / misk.resources / ResourceLoader / Companion / SYSTEM SYSTEM \u00b6 [jvm]\\ val SYSTEM : ResourceLoader","title":"SYSTEM - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader/-companion/-s-y-s-t-e-m/#system","text":"[jvm]\\ val SYSTEM : ResourceLoader","title":"SYSTEM"},{"location":"0.x/misk-core/misk.resources/-resource-loader-module/","text":"// misk-core / misk.resources / ResourceLoaderModule ResourceLoaderModule \u00b6 [jvm]\\ class ResourceLoaderModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ResourceLoaderModule - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader-module/#resourceloadermodule","text":"[jvm]\\ class ResourceLoaderModule : KAbstractModule","title":"ResourceLoaderModule"},{"location":"0.x/misk-core/misk.resources/-resource-loader-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-core/misk.resources/-resource-loader-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-core/misk.resources/-resource-loader-module/-resource-loader-module/","text":"// misk-core / misk.resources / ResourceLoaderModule / ResourceLoaderModule ResourceLoaderModule \u00b6 [jvm]\\ fun ResourceLoaderModule ()","title":"ResourceLoaderModule - Misk"},{"location":"0.x/misk-core/misk.resources/-resource-loader-module/-resource-loader-module/#resourceloadermodule","text":"[jvm]\\ fun ResourceLoaderModule ()","title":"ResourceLoaderModule"},{"location":"0.x/misk-core/misk.resources/-testing-resource-loader-module/","text":"// misk-core / misk.resources / TestingResourceLoaderModule TestingResourceLoaderModule \u00b6 [jvm]\\ class TestingResourceLoaderModule : KAbstractModule Can be used instead of ResourceLoaderModule in tests to load filesystem: resources using FakeFilesystemLoaderBackend Constructors \u00b6 TestingResourceLoaderModule [jvm] fun TestingResourceLoaderModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"TestingResourceLoaderModule - Misk"},{"location":"0.x/misk-core/misk.resources/-testing-resource-loader-module/#testingresourceloadermodule","text":"[jvm]\\ class TestingResourceLoaderModule : KAbstractModule Can be used instead of ResourceLoaderModule in tests to load filesystem: resources using FakeFilesystemLoaderBackend","title":"TestingResourceLoaderModule"},{"location":"0.x/misk-core/misk.resources/-testing-resource-loader-module/#constructors","text":"TestingResourceLoaderModule [jvm] fun TestingResourceLoaderModule ()","title":"Constructors"},{"location":"0.x/misk-core/misk.resources/-testing-resource-loader-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-core/misk.resources/-testing-resource-loader-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-core/misk.resources/-testing-resource-loader-module/-testing-resource-loader-module/","text":"// misk-core / misk.resources / TestingResourceLoaderModule / TestingResourceLoaderModule TestingResourceLoaderModule \u00b6 [jvm]\\ fun TestingResourceLoaderModule ()","title":"TestingResourceLoaderModule - Misk"},{"location":"0.x/misk-core/misk.resources/-testing-resource-loader-module/-testing-resource-loader-module/#testingresourceloadermodule","text":"[jvm]\\ fun TestingResourceLoaderModule ()","title":"TestingResourceLoaderModule"},{"location":"0.x/misk-core/misk.retries/","text":"// misk-core / misk.retries Package misk.retries \u00b6 Functions \u00b6 Name Summary doNotRetry [jvm] inline fun < T : Exception > doNotRetry (): RetryPolicy< Throwable > Returns a RetryPolicy that will throw the error that triggered the retry if it is type T . Otherwise, it voices no objection to retrying. retryWithHooks [jvm] suspend fun < T > retryWithHooks (policy: RetryPolicy< Throwable >, beforeRetryHook: () -> Unit , op: () -> T ): T This is a retry helper function with some hooks.","title":"Package misk.retries - Misk"},{"location":"0.x/misk-core/misk.retries/#package-miskretries","text":"","title":"Package misk.retries"},{"location":"0.x/misk-core/misk.retries/#functions","text":"Name Summary doNotRetry [jvm] inline fun < T : Exception > doNotRetry (): RetryPolicy< Throwable > Returns a RetryPolicy that will throw the error that triggered the retry if it is type T . Otherwise, it voices no objection to retrying. retryWithHooks [jvm] suspend fun < T > retryWithHooks (policy: RetryPolicy< Throwable >, beforeRetryHook: () -> Unit , op: () -> T ): T This is a retry helper function with some hooks.","title":"Functions"},{"location":"0.x/misk-core/misk.retries/do-not-retry/","text":"// misk-core / misk.retries / doNotRetry doNotRetry \u00b6 [jvm]\\ inline fun < T : Exception > doNotRetry (): RetryPolicy< Throwable > Returns a RetryPolicy that will throw the error that triggered the retry if it is type T . Otherwise, it voices no objection to retrying.","title":"doNotRetry - Misk"},{"location":"0.x/misk-core/misk.retries/do-not-retry/#donotretry","text":"[jvm]\\ inline fun < T : Exception > doNotRetry (): RetryPolicy< Throwable > Returns a RetryPolicy that will throw the error that triggered the retry if it is type T . Otherwise, it voices no objection to retrying.","title":"doNotRetry"},{"location":"0.x/misk-core/misk.retries/retry-with-hooks/","text":"// misk-core / misk.retries / retryWithHooks retryWithHooks \u00b6 [jvm]\\ suspend fun < T > retryWithHooks (policy: RetryPolicy< Throwable >, beforeRetryHook: () -> Unit , op: () -> T ): T This is a retry helper function with some hooks. beforeRetryHook is called before retries, but not before the first attempt. Use cases: Optimistic locking where the state needs to be reloaded on retries Re-establishing a connection when a request fails due to a connection dropping","title":"retryWithHooks - Misk"},{"location":"0.x/misk-core/misk.retries/retry-with-hooks/#retrywithhooks","text":"[jvm]\\ suspend fun < T > retryWithHooks (policy: RetryPolicy< Throwable >, beforeRetryHook: () -> Unit , op: () -> T ): T This is a retry helper function with some hooks. beforeRetryHook is called before retries, but not before the first attempt. Use cases: Optimistic locking where the state needs to be reloaded on retries Re-establishing a connection when a request fails due to a connection dropping","title":"retryWithHooks"},{"location":"0.x/misk-core/misk.sampling/","text":"// misk-core / misk.sampling Package misk.sampling \u00b6 Types \u00b6 Name Summary AlwaysSampler [jvm] @Singleton class AlwaysSampler @Injectconstructor : Sampler Sampler that always invokes an action PercentSampler [jvm] class PercentSampler (samplePercentage: () -> Int , random: () -> Int ) : Sampler A Sampler randomly invokes an action based on a sample percentage RateLimiter [jvm] class RateLimiter A deterministic testable rate limiter that uses two variables: RateLimitingSampler [jvm] class RateLimitingSampler (rateLimiter: RateLimiter ) : Sampler Sampler [jvm] interface Sampler","title":"Package misk.sampling - Misk"},{"location":"0.x/misk-core/misk.sampling/#package-misksampling","text":"","title":"Package misk.sampling"},{"location":"0.x/misk-core/misk.sampling/#types","text":"Name Summary AlwaysSampler [jvm] @Singleton class AlwaysSampler @Injectconstructor : Sampler Sampler that always invokes an action PercentSampler [jvm] class PercentSampler (samplePercentage: () -> Int , random: () -> Int ) : Sampler A Sampler randomly invokes an action based on a sample percentage RateLimiter [jvm] class RateLimiter A deterministic testable rate limiter that uses two variables: RateLimitingSampler [jvm] class RateLimitingSampler (rateLimiter: RateLimiter ) : Sampler Sampler [jvm] interface Sampler","title":"Types"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/","text":"// misk-core / misk.sampling / AlwaysSampler AlwaysSampler \u00b6 [jvm]\\ @Singleton class AlwaysSampler @Injectconstructor : Sampler Sampler that always invokes an action Constructors \u00b6 AlwaysSampler [jvm] @Inject fun AlwaysSampler () Functions \u00b6 Name Summary sample [jvm] open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"AlwaysSampler - Misk"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/#alwayssampler","text":"[jvm]\\ @Singleton class AlwaysSampler @Injectconstructor : Sampler Sampler that always invokes an action","title":"AlwaysSampler"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/#constructors","text":"AlwaysSampler [jvm] @Inject fun AlwaysSampler ()","title":"Constructors"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/#functions","text":"Name Summary sample [jvm] open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"Functions"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/-always-sampler/","text":"// misk-core / misk.sampling / AlwaysSampler / AlwaysSampler AlwaysSampler \u00b6 [jvm]\\ @Inject fun AlwaysSampler ()","title":"AlwaysSampler - Misk"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/-always-sampler/#alwayssampler","text":"[jvm]\\ @Inject fun AlwaysSampler ()","title":"AlwaysSampler"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/sample/","text":"// misk-core / misk.sampling / AlwaysSampler / sample sample \u00b6 [jvm]\\ open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample - Misk"},{"location":"0.x/misk-core/misk.sampling/-always-sampler/sample/#sample","text":"[jvm]\\ open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/","text":"// misk-core / misk.sampling / PercentSampler PercentSampler \u00b6 [jvm]\\ class PercentSampler (samplePercentage: () -> Int , random: () -> Int ) : Sampler A Sampler randomly invokes an action based on a sample percentage Constructors \u00b6 PercentSampler [jvm] fun PercentSampler (samplePercentage: Int , random: () -> Int ) PercentSampler [jvm] fun PercentSampler (samplePercentage: Int ) PercentSampler [jvm] fun PercentSampler (samplePercentage: () -> Int , random: () -> Int = { ThreadLocalRandom.current().nextInt(0, 100) }) Functions \u00b6 Name Summary sample [jvm] open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda Properties \u00b6 Name Summary random [jvm] val random : () -> Int samplePercentage [jvm] val samplePercentage : () -> Int","title":"PercentSampler - Misk"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/#percentsampler","text":"[jvm]\\ class PercentSampler (samplePercentage: () -> Int , random: () -> Int ) : Sampler A Sampler randomly invokes an action based on a sample percentage","title":"PercentSampler"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/#constructors","text":"PercentSampler [jvm] fun PercentSampler (samplePercentage: Int , random: () -> Int ) PercentSampler [jvm] fun PercentSampler (samplePercentage: Int ) PercentSampler [jvm] fun PercentSampler (samplePercentage: () -> Int , random: () -> Int = { ThreadLocalRandom.current().nextInt(0, 100) })","title":"Constructors"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/#functions","text":"Name Summary sample [jvm] open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"Functions"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/#properties","text":"Name Summary random [jvm] val random : () -> Int samplePercentage [jvm] val samplePercentage : () -> Int","title":"Properties"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/-percent-sampler/","text":"// misk-core / misk.sampling / PercentSampler / PercentSampler PercentSampler \u00b6 [jvm]\\ fun PercentSampler (samplePercentage: Int , random: () -> Int ) fun PercentSampler (samplePercentage: Int ) fun PercentSampler (samplePercentage: () -> Int , random: () -> Int = { ThreadLocalRandom.current().nextInt(0, 100) })","title":"PercentSampler - Misk"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/-percent-sampler/#percentsampler","text":"[jvm]\\ fun PercentSampler (samplePercentage: Int , random: () -> Int ) fun PercentSampler (samplePercentage: Int ) fun PercentSampler (samplePercentage: () -> Int , random: () -> Int = { ThreadLocalRandom.current().nextInt(0, 100) })","title":"PercentSampler"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/random/","text":"// misk-core / misk.sampling / PercentSampler / random random \u00b6 [jvm]\\ val random : () -> Int","title":"random - Misk"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/random/#random","text":"[jvm]\\ val random : () -> Int","title":"random"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/sample-percentage/","text":"// misk-core / misk.sampling / PercentSampler / samplePercentage samplePercentage \u00b6 [jvm]\\ val samplePercentage : () -> Int","title":"samplePercentage - Misk"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/sample-percentage/#samplepercentage","text":"[jvm]\\ val samplePercentage : () -> Int","title":"samplePercentage"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/sample/","text":"// misk-core / misk.sampling / PercentSampler / sample sample \u00b6 [jvm]\\ open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample - Misk"},{"location":"0.x/misk-core/misk.sampling/-percent-sampler/sample/#sample","text":"[jvm]\\ open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/","text":"// misk-core / misk.sampling / RateLimiter RateLimiter \u00b6 [jvm]\\ class RateLimiter A deterministic testable rate limiter that uses two variables: Permits per second. This is the application\u2019s configured rate. We express as a per-second rate but use it as a time-between-permits. For example, 250 permits per second is a permit every 4 milliseconds. This may be zero, in which case all acquire attempts will return false. Window size. If the application specified 250 permits per second, that doesn\u2019t specify how many permits can be returned at once. An implementation could strictly return 1 permit every 4 milliseconds, or batches of 1000 permits every 4 seconds. This class hard codes the window size to 1 second. Small windows shrink batch sizes which is inefficient; large windows grow batch sizes which is bursty. This class uses 1 second to balance latency and throughput. The implementation tracks a future timestamp that permits are consumed until. This class is similar to Guava\u2019s rate limiter. Unlike Guava\u2019s rate limiter this class is testable by application code using the rate limiter. It also has very predictable behavior because its internal mechanisms are simpler than Guava\u2019s. Types \u00b6 Name Summary Factory [jvm] class Factory @Injectconstructor(ticker: Ticker, sleeper: Sleeper ) Functions \u00b6 Name Summary tryAcquire [jvm] fun tryAcquire (permitCount: Long , timeout: Long , unit: TimeUnit ): Boolean Attempt to acquire permitCount permits, sleeping up to timeout if necessary for them to become available. Properties \u00b6 Name Summary permitsPerSecond [jvm] @ Volatile var permitsPerSecond : Long = 0","title":"RateLimiter - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/#ratelimiter","text":"[jvm]\\ class RateLimiter A deterministic testable rate limiter that uses two variables: Permits per second. This is the application\u2019s configured rate. We express as a per-second rate but use it as a time-between-permits. For example, 250 permits per second is a permit every 4 milliseconds. This may be zero, in which case all acquire attempts will return false. Window size. If the application specified 250 permits per second, that doesn\u2019t specify how many permits can be returned at once. An implementation could strictly return 1 permit every 4 milliseconds, or batches of 1000 permits every 4 seconds. This class hard codes the window size to 1 second. Small windows shrink batch sizes which is inefficient; large windows grow batch sizes which is bursty. This class uses 1 second to balance latency and throughput. The implementation tracks a future timestamp that permits are consumed until. This class is similar to Guava\u2019s rate limiter. Unlike Guava\u2019s rate limiter this class is testable by application code using the rate limiter. It also has very predictable behavior because its internal mechanisms are simpler than Guava\u2019s.","title":"RateLimiter"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/#types","text":"Name Summary Factory [jvm] class Factory @Injectconstructor(ticker: Ticker, sleeper: Sleeper )","title":"Types"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/#functions","text":"Name Summary tryAcquire [jvm] fun tryAcquire (permitCount: Long , timeout: Long , unit: TimeUnit ): Boolean Attempt to acquire permitCount permits, sleeping up to timeout if necessary for them to become available.","title":"Functions"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/#properties","text":"Name Summary permitsPerSecond [jvm] @ Volatile var permitsPerSecond : Long = 0","title":"Properties"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/permits-per-second/","text":"// misk-core / misk.sampling / RateLimiter / permitsPerSecond permitsPerSecond \u00b6 [jvm]\\ @ Volatile var permitsPerSecond : Long = 0","title":"permitsPerSecond - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/permits-per-second/#permitspersecond","text":"[jvm]\\ @ Volatile var permitsPerSecond : Long = 0","title":"permitsPerSecond"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/try-acquire/","text":"// misk-core / misk.sampling / RateLimiter / tryAcquire tryAcquire \u00b6 [jvm]\\ fun tryAcquire (permitCount: Long , timeout: Long , unit: TimeUnit ): Boolean Attempt to acquire permitCount permits, sleeping up to timeout if necessary for them to become available. Returns true if permits were acquired. This always returns false if you request more than 1 window size worth of permits. If you need many permits, shrink your batch size. This is intended to smooth out consumption of the resources guarded by this rate limiter.","title":"tryAcquire - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/try-acquire/#tryacquire","text":"[jvm]\\ fun tryAcquire (permitCount: Long , timeout: Long , unit: TimeUnit ): Boolean Attempt to acquire permitCount permits, sleeping up to timeout if necessary for them to become available. Returns true if permits were acquired. This always returns false if you request more than 1 window size worth of permits. If you need many permits, shrink your batch size. This is intended to smooth out consumption of the resources guarded by this rate limiter.","title":"tryAcquire"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/-factory/","text":"// misk-core / misk.sampling / RateLimiter / Factory Factory \u00b6 [jvm]\\ class Factory @Injectconstructor(ticker: Ticker, sleeper: Sleeper ) Functions \u00b6 Name Summary create [jvm] fun create (rate: Long ): RateLimiter","title":"Factory - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/-factory/#factory","text":"[jvm]\\ class Factory @Injectconstructor(ticker: Ticker, sleeper: Sleeper )","title":"Factory"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/-factory/#functions","text":"Name Summary create [jvm] fun create (rate: Long ): RateLimiter","title":"Functions"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/-factory/-factory/","text":"// misk-core / misk.sampling / RateLimiter / Factory / Factory Factory \u00b6 [jvm]\\ @Inject fun Factory (ticker: Ticker, sleeper: Sleeper )","title":"Factory - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/-factory/-factory/#factory","text":"[jvm]\\ @Inject fun Factory (ticker: Ticker, sleeper: Sleeper )","title":"Factory"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/-factory/create/","text":"// misk-core / misk.sampling / RateLimiter / Factory / create create \u00b6 [jvm]\\ fun create (rate: Long ): RateLimiter","title":"create - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiter/-factory/create/#create","text":"[jvm]\\ fun create (rate: Long ): RateLimiter","title":"create"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/","text":"// misk-core / misk.sampling / RateLimitingSampler RateLimitingSampler \u00b6 [jvm]\\ class RateLimitingSampler (rateLimiter: RateLimiter ) : Sampler Constructors \u00b6 RateLimitingSampler [jvm] fun RateLimitingSampler (ratePerSecond: Long ) Functions \u00b6 Name Summary sample [jvm] open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"RateLimitingSampler - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/#ratelimitingsampler","text":"[jvm]\\ class RateLimitingSampler (rateLimiter: RateLimiter ) : Sampler","title":"RateLimitingSampler"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/#constructors","text":"RateLimitingSampler [jvm] fun RateLimitingSampler (ratePerSecond: Long )","title":"Constructors"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/#functions","text":"Name Summary sample [jvm] open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"Functions"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/-rate-limiting-sampler/","text":"// misk-core / misk.sampling / RateLimitingSampler / RateLimitingSampler RateLimitingSampler \u00b6 [jvm]\\ fun RateLimitingSampler (ratePerSecond: Long ) fun RateLimitingSampler (rateLimiter: RateLimiter )","title":"RateLimitingSampler - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/-rate-limiting-sampler/#ratelimitingsampler","text":"[jvm]\\ fun RateLimitingSampler (ratePerSecond: Long ) fun RateLimitingSampler (rateLimiter: RateLimiter )","title":"RateLimitingSampler"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/sample/","text":"// misk-core / misk.sampling / RateLimitingSampler / sample sample \u00b6 [jvm]\\ open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample - Misk"},{"location":"0.x/misk-core/misk.sampling/-rate-limiting-sampler/sample/#sample","text":"[jvm]\\ open override fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample"},{"location":"0.x/misk-core/misk.sampling/-sampler/","text":"// misk-core / misk.sampling / Sampler Sampler \u00b6 [jvm]\\ interface Sampler Functions \u00b6 Name Summary sample [jvm] abstract fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda Inheritors \u00b6 Name PercentSampler RateLimitingSampler AlwaysSampler","title":"Sampler - Misk"},{"location":"0.x/misk-core/misk.sampling/-sampler/#sampler","text":"[jvm]\\ interface Sampler","title":"Sampler"},{"location":"0.x/misk-core/misk.sampling/-sampler/#functions","text":"Name Summary sample [jvm] abstract fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true sampledCall [jvm] open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"Functions"},{"location":"0.x/misk-core/misk.sampling/-sampler/#inheritors","text":"Name PercentSampler RateLimitingSampler AlwaysSampler","title":"Inheritors"},{"location":"0.x/misk-core/misk.sampling/-sampler/sample/","text":"// misk-core / misk.sampling / Sampler / sample sample \u00b6 [jvm]\\ abstract fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample - Misk"},{"location":"0.x/misk-core/misk.sampling/-sampler/sample/#sample","text":"[jvm]\\ abstract fun sample (): Boolean If an action should be taken based on the implementation\u2019s policy, returns true","title":"sample"},{"location":"0.x/misk-core/misk.sampling/-sampler/sampled-call/","text":"// misk-core / misk.sampling / Sampler / sampledCall sampledCall \u00b6 [jvm]\\ open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"sampledCall - Misk"},{"location":"0.x/misk-core/misk.sampling/-sampler/sampled-call/#sampledcall","text":"[jvm]\\ open fun sampledCall (f: () -> Unit ) If sample returns true, runs the given lambda","title":"sampledCall"},{"location":"0.x/misk-core/misk.security.ssl/","text":"// misk-core / misk.security.ssl Package misk.security.ssl \u00b6 Types \u00b6 Name Summary CertificateAndKey [jvm] typealias CertificateAndKey = wisp.security.ssl.CertificateAndKey CertStore [jvm] typealias CertStore = wisp.security.ssl.CertStore A certificate and its private key. CertStoreConfig [jvm] data class CertStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String ) SslContextFactory [jvm] class SslContextFactory @Injectconstructor(sslLoader: SslLoader ) SslLoader [jvm] class SslLoader Loads keys and certificates from the file system. TrustStore [jvm] typealias TrustStore = wisp.security.ssl.TrustStore A set of trusted root certificates. TrustStoreConfig [jvm] data class TrustStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String ) Functions \u00b6 Name Summary aliasesOfType [jvm] inline fun < T : KeyStore.Entry > KeyStore . aliasesOfType (): List < String > fun KeyStore . aliasesOfType (entryClass: Class <out KeyStore.Entry >): List < String > getCertificateAndKey [jvm] fun KeyStore . getCertificateAndKey (passphrase: CharArray ): CertificateAndKey? fun KeyStore . getCertificateAndKey (alias: String , passphrase: CharArray ): CertificateAndKey ? getPrivateKey [jvm] fun KeyStore . getPrivateKey (passphrase: CharArray ): PrivateKey fun KeyStore . getPrivateKey (alias: String , passphrase: CharArray ): PrivateKey getX509Certificate [jvm] fun KeyStore . getX509Certificate (): X509Certificate fun KeyStore . getX509Certificate (alias: String ): X509Certificate getX509CertificateChain [jvm] fun KeyStore . getX509CertificateChain (): Array < X509Certificate > fun KeyStore . getX509CertificateChain (alias: String ): Array < X509Certificate > Properties \u00b6 Name Summary onlyAlias [jvm] val KeyStore . onlyAlias : String","title":"Package misk.security.ssl - Misk"},{"location":"0.x/misk-core/misk.security.ssl/#package-misksecurityssl","text":"","title":"Package misk.security.ssl"},{"location":"0.x/misk-core/misk.security.ssl/#types","text":"Name Summary CertificateAndKey [jvm] typealias CertificateAndKey = wisp.security.ssl.CertificateAndKey CertStore [jvm] typealias CertStore = wisp.security.ssl.CertStore A certificate and its private key. CertStoreConfig [jvm] data class CertStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String ) SslContextFactory [jvm] class SslContextFactory @Injectconstructor(sslLoader: SslLoader ) SslLoader [jvm] class SslLoader Loads keys and certificates from the file system. TrustStore [jvm] typealias TrustStore = wisp.security.ssl.TrustStore A set of trusted root certificates. TrustStoreConfig [jvm] data class TrustStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String )","title":"Types"},{"location":"0.x/misk-core/misk.security.ssl/#functions","text":"Name Summary aliasesOfType [jvm] inline fun < T : KeyStore.Entry > KeyStore . aliasesOfType (): List < String > fun KeyStore . aliasesOfType (entryClass: Class <out KeyStore.Entry >): List < String > getCertificateAndKey [jvm] fun KeyStore . getCertificateAndKey (passphrase: CharArray ): CertificateAndKey? fun KeyStore . getCertificateAndKey (alias: String , passphrase: CharArray ): CertificateAndKey ? getPrivateKey [jvm] fun KeyStore . getPrivateKey (passphrase: CharArray ): PrivateKey fun KeyStore . getPrivateKey (alias: String , passphrase: CharArray ): PrivateKey getX509Certificate [jvm] fun KeyStore . getX509Certificate (): X509Certificate fun KeyStore . getX509Certificate (alias: String ): X509Certificate getX509CertificateChain [jvm] fun KeyStore . getX509CertificateChain (): Array < X509Certificate > fun KeyStore . getX509CertificateChain (alias: String ): Array < X509Certificate >","title":"Functions"},{"location":"0.x/misk-core/misk.security.ssl/#properties","text":"Name Summary onlyAlias [jvm] val KeyStore . onlyAlias : String","title":"Properties"},{"location":"0.x/misk-core/misk.security.ssl/aliases-of-type/","text":"// misk-core / misk.security.ssl / aliasesOfType aliasesOfType \u00b6 [jvm]\\ fun KeyStore . aliasesOfType (entryClass: Class <out KeyStore.Entry >): List < String > Return \u00b6 all aliases present in the keystore of a given entry type. [jvm]\\ inline fun < T : KeyStore.Entry > KeyStore . aliasesOfType (): List < String >","title":"aliasesOfType - Misk"},{"location":"0.x/misk-core/misk.security.ssl/aliases-of-type/#aliasesoftype","text":"[jvm]\\ fun KeyStore . aliasesOfType (entryClass: Class <out KeyStore.Entry >): List < String >","title":"aliasesOfType"},{"location":"0.x/misk-core/misk.security.ssl/aliases-of-type/#return","text":"all aliases present in the keystore of a given entry type. [jvm]\\ inline fun < T : KeyStore.Entry > KeyStore . aliasesOfType (): List < String >","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-certificate-and-key/","text":"// misk-core / misk.security.ssl / getCertificateAndKey getCertificateAndKey \u00b6 [jvm]\\ fun KeyStore . getCertificateAndKey (alias: String , passphrase: CharArray ): CertificateAndKey ? Return \u00b6 the certificate and key pair for the given alias [jvm]\\ fun KeyStore . getCertificateAndKey (passphrase: CharArray ): CertificateAndKey? Return \u00b6 the one and only CertificateAndKey in the keystore","title":"getCertificateAndKey - Misk"},{"location":"0.x/misk-core/misk.security.ssl/get-certificate-and-key/#getcertificateandkey","text":"[jvm]\\ fun KeyStore . getCertificateAndKey (alias: String , passphrase: CharArray ): CertificateAndKey ?","title":"getCertificateAndKey"},{"location":"0.x/misk-core/misk.security.ssl/get-certificate-and-key/#return","text":"the certificate and key pair for the given alias [jvm]\\ fun KeyStore . getCertificateAndKey (passphrase: CharArray ): CertificateAndKey?","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-certificate-and-key/#return_1","text":"the one and only CertificateAndKey in the keystore","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-private-key/","text":"// misk-core / misk.security.ssl / getPrivateKey getPrivateKey \u00b6 [jvm]\\ fun KeyStore . getPrivateKey (alias: String , passphrase: CharArray ): PrivateKey Return \u00b6 the PrivateKey with the given alias [jvm]\\ fun KeyStore . getPrivateKey (passphrase: CharArray ): PrivateKey Return \u00b6 the one and only PrivateKey in the keystore","title":"getPrivateKey - Misk"},{"location":"0.x/misk-core/misk.security.ssl/get-private-key/#getprivatekey","text":"[jvm]\\ fun KeyStore . getPrivateKey (alias: String , passphrase: CharArray ): PrivateKey","title":"getPrivateKey"},{"location":"0.x/misk-core/misk.security.ssl/get-private-key/#return","text":"the PrivateKey with the given alias [jvm]\\ fun KeyStore . getPrivateKey (passphrase: CharArray ): PrivateKey","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-private-key/#return_1","text":"the one and only PrivateKey in the keystore","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate-chain/","text":"// misk-core / misk.security.ssl / getX509CertificateChain getX509CertificateChain \u00b6 [jvm]\\ fun KeyStore . getX509CertificateChain (alias: String ): Array < X509Certificate > Return \u00b6 the X509Certificate chain with the provided alias [jvm]\\ fun KeyStore . getX509CertificateChain (): Array < X509Certificate > Return \u00b6 the one and only X509Certificate chain in the keystore","title":"getX509CertificateChain - Misk"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate-chain/#getx509certificatechain","text":"[jvm]\\ fun KeyStore . getX509CertificateChain (alias: String ): Array < X509Certificate >","title":"getX509CertificateChain"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate-chain/#return","text":"the X509Certificate chain with the provided alias [jvm]\\ fun KeyStore . getX509CertificateChain (): Array < X509Certificate >","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate-chain/#return_1","text":"the one and only X509Certificate chain in the keystore","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate/","text":"// misk-core / misk.security.ssl / getX509Certificate getX509Certificate \u00b6 [jvm]\\ fun KeyStore . getX509Certificate (alias: String ): X509Certificate Return \u00b6 The X509Certificate with the provided alias [jvm]\\ fun KeyStore . getX509Certificate (): X509Certificate Return \u00b6 the one and only X509Certificate in the keystore","title":"getX509Certificate - Misk"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate/#getx509certificate","text":"[jvm]\\ fun KeyStore . getX509Certificate (alias: String ): X509Certificate","title":"getX509Certificate"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate/#return","text":"The X509Certificate with the provided alias [jvm]\\ fun KeyStore . getX509Certificate (): X509Certificate","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/get-x509-certificate/#return_1","text":"the one and only X509Certificate in the keystore","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/only-alias/","text":"// misk-core / misk.security.ssl / onlyAlias onlyAlias \u00b6 [jvm]\\ val KeyStore . onlyAlias : String Return \u00b6 the only alias in the keystore, if the keystore only has a single entry","title":"onlyAlias - Misk"},{"location":"0.x/misk-core/misk.security.ssl/only-alias/#onlyalias","text":"[jvm]\\ val KeyStore . onlyAlias : String","title":"onlyAlias"},{"location":"0.x/misk-core/misk.security.ssl/only-alias/#return","text":"the only alias in the keystore, if the keystore only has a single entry","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/","text":"// misk-core / misk.security.ssl / CertStoreConfig CertStoreConfig \u00b6 [jvm]\\ data class CertStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String ) Functions \u00b6 Name Summary toWispConfig [jvm] fun toWispConfig (): CertStoreConfig Properties \u00b6 Name Summary format [jvm] val format : String passphrase [jvm] val passphrase : String ? = null resource [jvm] val resource : String","title":"CertStoreConfig - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/#certstoreconfig","text":"[jvm]\\ data class CertStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String )","title":"CertStoreConfig"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/#functions","text":"Name Summary toWispConfig [jvm] fun toWispConfig (): CertStoreConfig","title":"Functions"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/#properties","text":"Name Summary format [jvm] val format : String passphrase [jvm] val passphrase : String ? = null resource [jvm] val resource : String","title":"Properties"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/-cert-store-config/","text":"// misk-core / misk.security.ssl / CertStoreConfig / CertStoreConfig CertStoreConfig \u00b6 [jvm]\\ @Inject fun CertStoreConfig (resource: String , passphrase: String ? = null, format: String = SslLoader.FORMAT_JCEKS)","title":"CertStoreConfig - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/-cert-store-config/#certstoreconfig","text":"[jvm]\\ @Inject fun CertStoreConfig (resource: String , passphrase: String ? = null, format: String = SslLoader.FORMAT_JCEKS)","title":"CertStoreConfig"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/format/","text":"// misk-core / misk.security.ssl / CertStoreConfig / format format \u00b6 [jvm]\\ val format : String","title":"format - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/format/#format","text":"[jvm]\\ val format : String","title":"format"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/passphrase/","text":"// misk-core / misk.security.ssl / CertStoreConfig / passphrase passphrase \u00b6 [jvm]\\ val passphrase : String ? = null","title":"passphrase - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/passphrase/#passphrase","text":"[jvm]\\ val passphrase : String ? = null","title":"passphrase"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/resource/","text":"// misk-core / misk.security.ssl / CertStoreConfig / resource resource \u00b6 [jvm]\\ val resource : String","title":"resource - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/resource/#resource","text":"[jvm]\\ val resource : String","title":"resource"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/to-wisp-config/","text":"// misk-core / misk.security.ssl / CertStoreConfig / toWispConfig toWispConfig \u00b6 [jvm]\\ fun toWispConfig (): CertStoreConfig","title":"toWispConfig - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-cert-store-config/to-wisp-config/#towispconfig","text":"[jvm]\\ fun toWispConfig (): CertStoreConfig","title":"toWispConfig"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/","text":"// misk-core / misk.security.ssl / SslContextFactory SslContextFactory \u00b6 [jvm]\\ class SslContextFactory @Injectconstructor(sslLoader: SslLoader ) Functions \u00b6 Name Summary create [jvm] fun create (certStore: CertStoreConfig ? = null, trustStore: TrustStoreConfig ? = null): SSLContext fun create (certStore: CertStore ?, pin: CharArray ?, trustStore: TrustStore ? = null): SSLContext loadTrustManagers [jvm] fun loadTrustManagers (trustStore: KeyStore ): Array < TrustManager > Properties \u00b6 Name Summary delegate [jvm] val delegate : SslContextFactory","title":"SslContextFactory - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/#sslcontextfactory","text":"[jvm]\\ class SslContextFactory @Injectconstructor(sslLoader: SslLoader )","title":"SslContextFactory"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/#functions","text":"Name Summary create [jvm] fun create (certStore: CertStoreConfig ? = null, trustStore: TrustStoreConfig ? = null): SSLContext fun create (certStore: CertStore ?, pin: CharArray ?, trustStore: TrustStore ? = null): SSLContext loadTrustManagers [jvm] fun loadTrustManagers (trustStore: KeyStore ): Array < TrustManager >","title":"Functions"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/#properties","text":"Name Summary delegate [jvm] val delegate : SslContextFactory","title":"Properties"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/-ssl-context-factory/","text":"// misk-core / misk.security.ssl / SslContextFactory / SslContextFactory SslContextFactory \u00b6 [jvm]\\ @Inject fun SslContextFactory (sslLoader: SslLoader )","title":"SslContextFactory - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/-ssl-context-factory/#sslcontextfactory","text":"[jvm]\\ @Inject fun SslContextFactory (sslLoader: SslLoader )","title":"SslContextFactory"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/create/","text":"// misk-core / misk.security.ssl / SslContextFactory / create create \u00b6 [jvm]\\ fun create (certStore: CertStoreConfig ? = null, trustStore: TrustStoreConfig ? = null): SSLContext fun create (certStore: CertStore ?, pin: CharArray ?, trustStore: TrustStore ? = null): SSLContext Return \u00b6 A new SSLContext for the given certstore and optional truststore config","title":"create - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/create/#create","text":"[jvm]\\ fun create (certStore: CertStoreConfig ? = null, trustStore: TrustStoreConfig ? = null): SSLContext fun create (certStore: CertStore ?, pin: CharArray ?, trustStore: TrustStore ? = null): SSLContext","title":"create"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/create/#return","text":"A new SSLContext for the given certstore and optional truststore config","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/delegate/","text":"// misk-core / misk.security.ssl / SslContextFactory / delegate delegate \u00b6 [jvm]\\ val delegate : SslContextFactory","title":"delegate - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/delegate/#delegate","text":"[jvm]\\ val delegate : SslContextFactory","title":"delegate"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/load-trust-managers/","text":"// misk-core / misk.security.ssl / SslContextFactory / loadTrustManagers loadTrustManagers \u00b6 [jvm]\\ fun loadTrustManagers (trustStore: KeyStore ): Array < TrustManager > Return \u00b6 a set of TrustManager s based on the certificates in the given truststore","title":"loadTrustManagers - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/load-trust-managers/#loadtrustmanagers","text":"[jvm]\\ fun loadTrustManagers (trustStore: KeyStore ): Array < TrustManager >","title":"loadTrustManagers"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-context-factory/load-trust-managers/#return","text":"a set of TrustManager s based on the certificates in the given truststore","title":"Return"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/","text":"// misk-core / misk.security.ssl / SslLoader SslLoader \u00b6 [jvm]\\ class SslLoader Loads keys and certificates from the file system. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary loadCertStore [jvm] fun loadCertStore (config: CertStoreConfig ): CertStore? fun loadCertStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): CertStore ? loadTrustStore [jvm] fun loadTrustStore (config: TrustStoreConfig ): TrustStore? fun loadTrustStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): TrustStore ? Properties \u00b6 Name Summary delegate [jvm] val delegate : SslLoader resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"SslLoader - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/#sslloader","text":"[jvm]\\ class SslLoader Loads keys and certificates from the file system.","title":"SslLoader"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/#functions","text":"Name Summary loadCertStore [jvm] fun loadCertStore (config: CertStoreConfig ): CertStore? fun loadCertStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): CertStore ? loadTrustStore [jvm] fun loadTrustStore (config: TrustStoreConfig ): TrustStore? fun loadTrustStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): TrustStore ?","title":"Functions"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/#properties","text":"Name Summary delegate [jvm] val delegate : SslLoader resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"Properties"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/delegate/","text":"// misk-core / misk.security.ssl / SslLoader / delegate delegate \u00b6 [jvm]\\ val delegate : SslLoader","title":"delegate - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/delegate/#delegate","text":"[jvm]\\ val delegate : SslLoader","title":"delegate"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/load-cert-store/","text":"// misk-core / misk.security.ssl / SslLoader / loadCertStore loadCertStore \u00b6 [jvm]\\ fun loadCertStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): CertStore ? fun loadCertStore (config: CertStoreConfig ): CertStore?","title":"loadCertStore - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/load-cert-store/#loadcertstore","text":"[jvm]\\ fun loadCertStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): CertStore ? fun loadCertStore (config: CertStoreConfig ): CertStore?","title":"loadCertStore"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/load-trust-store/","text":"// misk-core / misk.security.ssl / SslLoader / loadTrustStore loadTrustStore \u00b6 [jvm]\\ fun loadTrustStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): TrustStore ? fun loadTrustStore (config: TrustStoreConfig ): TrustStore?","title":"loadTrustStore - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/load-trust-store/#loadtruststore","text":"[jvm]\\ fun loadTrustStore (path: String , format: String = FORMAT_PEM, passphrase: String ? = null): TrustStore ? fun loadTrustStore (config: TrustStoreConfig ): TrustStore?","title":"loadTrustStore"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/resource-loader/","text":"// misk-core / misk.security.ssl / SslLoader / resourceLoader resourceLoader \u00b6 [jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/resource-loader/#resourceloader","text":"[jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/","text":"// misk-core / misk.security.ssl / SslLoader / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary FORMAT_JCEKS [jvm] const val FORMAT_JCEKS : String FORMAT_JKS [jvm] const val FORMAT_JKS : String FORMAT_PEM [jvm] const val FORMAT_PEM : String","title":"Companion - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/#properties","text":"Name Summary FORMAT_JCEKS [jvm] const val FORMAT_JCEKS : String FORMAT_JKS [jvm] const val FORMAT_JKS : String FORMAT_PEM [jvm] const val FORMAT_PEM : String","title":"Properties"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/-f-o-r-m-a-t_-j-c-e-k-s/","text":"// misk-core / misk.security.ssl / SslLoader / Companion / FORMAT_JCEKS FORMAT_JCEKS \u00b6 [jvm]\\ const val FORMAT_JCEKS : String","title":"FORMAT_JCEKS - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/-f-o-r-m-a-t_-j-c-e-k-s/#format_jceks","text":"[jvm]\\ const val FORMAT_JCEKS : String","title":"FORMAT_JCEKS"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/-f-o-r-m-a-t_-j-k-s/","text":"// misk-core / misk.security.ssl / SslLoader / Companion / FORMAT_JKS FORMAT_JKS \u00b6 [jvm]\\ const val FORMAT_JKS : String","title":"FORMAT_JKS - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/-f-o-r-m-a-t_-j-k-s/#format_jks","text":"[jvm]\\ const val FORMAT_JKS : String","title":"FORMAT_JKS"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/-f-o-r-m-a-t_-p-e-m/","text":"// misk-core / misk.security.ssl / SslLoader / Companion / FORMAT_PEM FORMAT_PEM \u00b6 [jvm]\\ const val FORMAT_PEM : String","title":"FORMAT_PEM - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-ssl-loader/-companion/-f-o-r-m-a-t_-p-e-m/#format_pem","text":"[jvm]\\ const val FORMAT_PEM : String","title":"FORMAT_PEM"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/","text":"// misk-core / misk.security.ssl / TrustStoreConfig TrustStoreConfig \u00b6 [jvm]\\ data class TrustStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String ) Functions \u00b6 Name Summary toWispConfig [jvm] fun toWispConfig (): TrustStoreConfig Properties \u00b6 Name Summary format [jvm] val format : String passphrase [jvm] val passphrase : String ? = null resource [jvm] val resource : String","title":"TrustStoreConfig - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/#truststoreconfig","text":"[jvm]\\ data class TrustStoreConfig @Injectconstructor(resource: String , passphrase: String ?, format: String )","title":"TrustStoreConfig"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/#functions","text":"Name Summary toWispConfig [jvm] fun toWispConfig (): TrustStoreConfig","title":"Functions"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/#properties","text":"Name Summary format [jvm] val format : String passphrase [jvm] val passphrase : String ? = null resource [jvm] val resource : String","title":"Properties"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/-trust-store-config/","text":"// misk-core / misk.security.ssl / TrustStoreConfig / TrustStoreConfig TrustStoreConfig \u00b6 [jvm]\\ @Inject fun TrustStoreConfig (resource: String , passphrase: String ? = null, format: String = FORMAT_JCEKS)","title":"TrustStoreConfig - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/-trust-store-config/#truststoreconfig","text":"[jvm]\\ @Inject fun TrustStoreConfig (resource: String , passphrase: String ? = null, format: String = FORMAT_JCEKS)","title":"TrustStoreConfig"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/format/","text":"// misk-core / misk.security.ssl / TrustStoreConfig / format format \u00b6 [jvm]\\ val format : String","title":"format - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/format/#format","text":"[jvm]\\ val format : String","title":"format"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/passphrase/","text":"// misk-core / misk.security.ssl / TrustStoreConfig / passphrase passphrase \u00b6 [jvm]\\ val passphrase : String ? = null","title":"passphrase - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/passphrase/#passphrase","text":"[jvm]\\ val passphrase : String ? = null","title":"passphrase"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/resource/","text":"// misk-core / misk.security.ssl / TrustStoreConfig / resource resource \u00b6 [jvm]\\ val resource : String","title":"resource - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/resource/#resource","text":"[jvm]\\ val resource : String","title":"resource"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/to-wisp-config/","text":"// misk-core / misk.security.ssl / TrustStoreConfig / toWispConfig toWispConfig \u00b6 [jvm]\\ fun toWispConfig (): TrustStoreConfig","title":"toWispConfig - Misk"},{"location":"0.x/misk-core/misk.security.ssl/-trust-store-config/to-wisp-config/#towispconfig","text":"[jvm]\\ fun toWispConfig (): TrustStoreConfig","title":"toWispConfig"},{"location":"0.x/misk-core/misk.tokens/","text":"// misk-core / misk.tokens Package misk.tokens \u00b6 Types \u00b6 Name Summary FakeTokenGenerator [jvm] @Singleton class FakeTokenGenerator @Injectconstructor : TokenGenerator FakeTokenGeneratorModule [jvm] class FakeTokenGeneratorModule : KAbstractModule RealTokenGenerator [jvm] @Singleton class RealTokenGenerator @Injectconstructor : TokenGenerator TokenGenerator [jvm] interface TokenGenerator Generates an secure, unguessable, alphanumeric token for use as a universally unique ID. Tokens are encoded with a https://www.crockford.com/wrmg/base32.html . This alphabet contains a mix of lowercase characters and digits and is resistant to decoding errors; for example 0, o, and \u2018O\u2019 are equivalent. TokenGeneratorModule [jvm] class TokenGeneratorModule : KAbstractModule","title":"Package misk.tokens - Misk"},{"location":"0.x/misk-core/misk.tokens/#package-misktokens","text":"","title":"Package misk.tokens"},{"location":"0.x/misk-core/misk.tokens/#types","text":"Name Summary FakeTokenGenerator [jvm] @Singleton class FakeTokenGenerator @Injectconstructor : TokenGenerator FakeTokenGeneratorModule [jvm] class FakeTokenGeneratorModule : KAbstractModule RealTokenGenerator [jvm] @Singleton class RealTokenGenerator @Injectconstructor : TokenGenerator TokenGenerator [jvm] interface TokenGenerator Generates an secure, unguessable, alphanumeric token for use as a universally unique ID. Tokens are encoded with a https://www.crockford.com/wrmg/base32.html . This alphabet contains a mix of lowercase characters and digits and is resistant to decoding errors; for example 0, o, and \u2018O\u2019 are equivalent. TokenGeneratorModule [jvm] class TokenGeneratorModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator/","text":"// misk-core / misk.tokens / FakeTokenGenerator FakeTokenGenerator \u00b6 [jvm]\\ @Singleton class FakeTokenGenerator @Injectconstructor : TokenGenerator Functions \u00b6 Name Summary generate [jvm] open override fun generate (label: String ?, length: Int ): String","title":"FakeTokenGenerator - Misk"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator/#faketokengenerator","text":"[jvm]\\ @Singleton class FakeTokenGenerator @Injectconstructor : TokenGenerator","title":"FakeTokenGenerator"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator/#functions","text":"Name Summary generate [jvm] open override fun generate (label: String ?, length: Int ): String","title":"Functions"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator/-fake-token-generator/","text":"// misk-core / misk.tokens / FakeTokenGenerator / FakeTokenGenerator FakeTokenGenerator \u00b6 [jvm]\\ @Inject fun FakeTokenGenerator ()","title":"FakeTokenGenerator - Misk"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator/-fake-token-generator/#faketokengenerator","text":"[jvm]\\ @Inject fun FakeTokenGenerator ()","title":"FakeTokenGenerator"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator/generate/","text":"// misk-core / misk.tokens / FakeTokenGenerator / generate generate \u00b6 [jvm]\\ open override fun generate (label: String ?, length: Int ): String","title":"generate - Misk"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator/generate/#generate","text":"[jvm]\\ open override fun generate (label: String ?, length: Int ): String","title":"generate"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator-module/","text":"// misk-core / misk.tokens / FakeTokenGeneratorModule FakeTokenGeneratorModule \u00b6 [jvm]\\ class FakeTokenGeneratorModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeTokenGeneratorModule - Misk"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator-module/#faketokengeneratormodule","text":"[jvm]\\ class FakeTokenGeneratorModule : KAbstractModule","title":"FakeTokenGeneratorModule"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator-module/-fake-token-generator-module/","text":"// misk-core / misk.tokens / FakeTokenGeneratorModule / FakeTokenGeneratorModule FakeTokenGeneratorModule \u00b6 [jvm]\\ fun FakeTokenGeneratorModule ()","title":"FakeTokenGeneratorModule - Misk"},{"location":"0.x/misk-core/misk.tokens/-fake-token-generator-module/-fake-token-generator-module/#faketokengeneratormodule","text":"[jvm]\\ fun FakeTokenGeneratorModule ()","title":"FakeTokenGeneratorModule"},{"location":"0.x/misk-core/misk.tokens/-real-token-generator/","text":"// misk-core / misk.tokens / RealTokenGenerator RealTokenGenerator \u00b6 [jvm]\\ @Singleton class RealTokenGenerator @Injectconstructor : TokenGenerator Functions \u00b6 Name Summary generate [jvm] open override fun generate (label: String ?, length: Int ): String","title":"RealTokenGenerator - Misk"},{"location":"0.x/misk-core/misk.tokens/-real-token-generator/#realtokengenerator","text":"[jvm]\\ @Singleton class RealTokenGenerator @Injectconstructor : TokenGenerator","title":"RealTokenGenerator"},{"location":"0.x/misk-core/misk.tokens/-real-token-generator/#functions","text":"Name Summary generate [jvm] open override fun generate (label: String ?, length: Int ): String","title":"Functions"},{"location":"0.x/misk-core/misk.tokens/-real-token-generator/-real-token-generator/","text":"// misk-core / misk.tokens / RealTokenGenerator / RealTokenGenerator RealTokenGenerator \u00b6 [jvm]\\ @Inject fun RealTokenGenerator ()","title":"RealTokenGenerator - Misk"},{"location":"0.x/misk-core/misk.tokens/-real-token-generator/-real-token-generator/#realtokengenerator","text":"[jvm]\\ @Inject fun RealTokenGenerator ()","title":"RealTokenGenerator"},{"location":"0.x/misk-core/misk.tokens/-real-token-generator/generate/","text":"// misk-core / misk.tokens / RealTokenGenerator / generate generate \u00b6 [jvm]\\ open override fun generate (label: String ?, length: Int ): String","title":"generate - Misk"},{"location":"0.x/misk-core/misk.tokens/-real-token-generator/generate/#generate","text":"[jvm]\\ open override fun generate (label: String ?, length: Int ): String","title":"generate"},{"location":"0.x/misk-core/misk.tokens/-token-generator/","text":"// misk-core / misk.tokens / TokenGenerator TokenGenerator \u00b6 [jvm]\\ interface TokenGenerator Generates an secure, unguessable, alphanumeric token for use as a universally unique ID. Tokens are encoded with a https://www.crockford.com/wrmg/base32.html . This alphabet contains a mix of lowercase characters and digits and is resistant to decoding errors; for example 0, o, and \u2018O\u2019 are equivalent. For strength similar to a random UUID (122 bits of entropy), most callers should use the default length of 25 characters (125 bits). Using fewer characters risks collision, which may be acceptable for some use-cases. There is no practical benefit to using more than 25 characters. In production, staging, and development environments tokens are always created using SecureRandom . These are some sample production tokens: 75dsma7kscyvbgz7ea1yy3qe8\\ 3zg6svk9hcpvqyhej41tdkaa0\\ gv7s8nkevt9d7aw2eb06g640e\\ a17f7h6t853kzdqpc29qa8mnw In tests tokens are sequential and predictable. They are prefixed with an optional label that appears in the returned string and can be used as a namespace. It is okay to hardcode expected tokens in test cases! These are some sample testing tokens: cst0mer000000000000000035\\ payment000000000000000034\\ cst0mer000000000000000036\\ payment000000000000000035 Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary generate [jvm] abstract fun generate (label: String ? = null, length: Int = 25): String Inheritors \u00b6 Name FakeTokenGenerator RealTokenGenerator","title":"TokenGenerator - Misk"},{"location":"0.x/misk-core/misk.tokens/-token-generator/#tokengenerator","text":"[jvm]\\ interface TokenGenerator Generates an secure, unguessable, alphanumeric token for use as a universally unique ID. Tokens are encoded with a https://www.crockford.com/wrmg/base32.html . This alphabet contains a mix of lowercase characters and digits and is resistant to decoding errors; for example 0, o, and \u2018O\u2019 are equivalent. For strength similar to a random UUID (122 bits of entropy), most callers should use the default length of 25 characters (125 bits). Using fewer characters risks collision, which may be acceptable for some use-cases. There is no practical benefit to using more than 25 characters. In production, staging, and development environments tokens are always created using SecureRandom . These are some sample production tokens: 75dsma7kscyvbgz7ea1yy3qe8\\ 3zg6svk9hcpvqyhej41tdkaa0\\ gv7s8nkevt9d7aw2eb06g640e\\ a17f7h6t853kzdqpc29qa8mnw In tests tokens are sequential and predictable. They are prefixed with an optional label that appears in the returned string and can be used as a namespace. It is okay to hardcode expected tokens in test cases! These are some sample testing tokens: cst0mer000000000000000035\\ payment000000000000000034\\ cst0mer000000000000000036\\ payment000000000000000035","title":"TokenGenerator"},{"location":"0.x/misk-core/misk.tokens/-token-generator/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-core/misk.tokens/-token-generator/#functions","text":"Name Summary generate [jvm] abstract fun generate (label: String ? = null, length: Int = 25): String","title":"Functions"},{"location":"0.x/misk-core/misk.tokens/-token-generator/#inheritors","text":"Name FakeTokenGenerator RealTokenGenerator","title":"Inheritors"},{"location":"0.x/misk-core/misk.tokens/-token-generator/generate/","text":"// misk-core / misk.tokens / TokenGenerator / generate generate \u00b6 [jvm]\\ abstract fun generate (label: String ? = null, length: Int = 25): String","title":"generate - Misk"},{"location":"0.x/misk-core/misk.tokens/-token-generator/generate/#generate","text":"[jvm]\\ abstract fun generate (label: String ? = null, length: Int = 25): String","title":"generate"},{"location":"0.x/misk-core/misk.tokens/-token-generator/-companion/","text":"// misk-core / misk.tokens / TokenGenerator / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary canonicalize [jvm] fun canonicalize (token: String ): String Returns a token semantically equal to token but using only characters from the Crockford Base32 alphabet. This maps visually similar characters like o to the corresponding encoding character like 0. Spaces are omitted.","title":"Companion - Misk"},{"location":"0.x/misk-core/misk.tokens/-token-generator/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-core/misk.tokens/-token-generator/-companion/#functions","text":"Name Summary canonicalize [jvm] fun canonicalize (token: String ): String Returns a token semantically equal to token but using only characters from the Crockford Base32 alphabet. This maps visually similar characters like o to the corresponding encoding character like 0. Spaces are omitted.","title":"Functions"},{"location":"0.x/misk-core/misk.tokens/-token-generator/-companion/canonicalize/","text":"// misk-core / misk.tokens / TokenGenerator / Companion / canonicalize canonicalize \u00b6 [jvm]\\ fun canonicalize (token: String ): String Returns a token semantically equal to token but using only characters from the Crockford Base32 alphabet. This maps visually similar characters like o to the corresponding encoding character like 0. Spaces are omitted. Call this when accepting tokens that may have been transcribed by a user. It is not necessary to canonicalize tokens that haven\u2019t been manually entered; they will already be in canonical form. Throws \u00b6 kotlin.IllegalArgumentException if token contains a character that cannot be mapped and that is not a space.","title":"canonicalize - Misk"},{"location":"0.x/misk-core/misk.tokens/-token-generator/-companion/canonicalize/#canonicalize","text":"[jvm]\\ fun canonicalize (token: String ): String Returns a token semantically equal to token but using only characters from the Crockford Base32 alphabet. This maps visually similar characters like o to the corresponding encoding character like 0. Spaces are omitted. Call this when accepting tokens that may have been transcribed by a user. It is not necessary to canonicalize tokens that haven\u2019t been manually entered; they will already be in canonical form.","title":"canonicalize"},{"location":"0.x/misk-core/misk.tokens/-token-generator/-companion/canonicalize/#throws","text":"kotlin.IllegalArgumentException if token contains a character that cannot be mapped and that is not a space.","title":"Throws"},{"location":"0.x/misk-core/misk.tokens/-token-generator-module/","text":"// misk-core / misk.tokens / TokenGeneratorModule TokenGeneratorModule \u00b6 [jvm]\\ class TokenGeneratorModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"TokenGeneratorModule - Misk"},{"location":"0.x/misk-core/misk.tokens/-token-generator-module/#tokengeneratormodule","text":"[jvm]\\ class TokenGeneratorModule : KAbstractModule","title":"TokenGeneratorModule"},{"location":"0.x/misk-core/misk.tokens/-token-generator-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-core/misk.tokens/-token-generator-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-core/misk.tokens/-token-generator-module/-token-generator-module/","text":"// misk-core / misk.tokens / TokenGeneratorModule / TokenGeneratorModule TokenGeneratorModule \u00b6 [jvm]\\ fun TokenGeneratorModule ()","title":"TokenGeneratorModule - Misk"},{"location":"0.x/misk-core/misk.tokens/-token-generator-module/-token-generator-module/#tokengeneratormodule","text":"[jvm]\\ fun TokenGeneratorModule ()","title":"TokenGeneratorModule"},{"location":"0.x/misk-core/misk.web.mediatype/","text":"// misk-core / misk.web.mediatype Package misk.web.mediatype \u00b6 Types \u00b6 Name Summary MediaRange [jvm] data class MediaRange (type: String , subtype: String , charset: Charset ?, qualityFactor: Double , parameters: Map < String , String >, extensions: Map < String , String >, rawText: String ) : Comparable < MediaRange > An RFC-2616 media range MediaTypes [jvm] object MediaTypes Functions \u00b6 Name Summary asMediaRange [jvm] fun String . asMediaRange (): MediaRange asMediaType [jvm] fun String . asMediaType (): MediaType compareTo [jvm] fun MediaType. compareTo (other: MediaType): Int","title":"Package misk.web.mediatype - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/#package-miskwebmediatype","text":"","title":"Package misk.web.mediatype"},{"location":"0.x/misk-core/misk.web.mediatype/#types","text":"Name Summary MediaRange [jvm] data class MediaRange (type: String , subtype: String , charset: Charset ?, qualityFactor: Double , parameters: Map < String , String >, extensions: Map < String , String >, rawText: String ) : Comparable < MediaRange > An RFC-2616 media range MediaTypes [jvm] object MediaTypes","title":"Types"},{"location":"0.x/misk-core/misk.web.mediatype/#functions","text":"Name Summary asMediaRange [jvm] fun String . asMediaRange (): MediaRange asMediaType [jvm] fun String . asMediaType (): MediaType compareTo [jvm] fun MediaType. compareTo (other: MediaType): Int","title":"Functions"},{"location":"0.x/misk-core/misk.web.mediatype/as-media-range/","text":"// misk-core / misk.web.mediatype / asMediaRange asMediaRange \u00b6 [jvm]\\ fun String . asMediaRange (): MediaRange","title":"asMediaRange - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/as-media-range/#asmediarange","text":"[jvm]\\ fun String . asMediaRange (): MediaRange","title":"asMediaRange"},{"location":"0.x/misk-core/misk.web.mediatype/as-media-type/","text":"// misk-core / misk.web.mediatype / asMediaType asMediaType \u00b6 [jvm]\\ fun String . asMediaType (): MediaType","title":"asMediaType - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/as-media-type/#asmediatype","text":"[jvm]\\ fun String . asMediaType (): MediaType","title":"asMediaType"},{"location":"0.x/misk-core/misk.web.mediatype/compare-to/","text":"// misk-core / misk.web.mediatype / compareTo compareTo \u00b6 [jvm]\\ fun MediaType. compareTo (other: MediaType): Int","title":"compareTo - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/compare-to/#compareto","text":"[jvm]\\ fun MediaType. compareTo (other: MediaType): Int","title":"compareTo"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/","text":"// misk-core / misk.web.mediatype / MediaRange MediaRange \u00b6 [jvm]\\ data class MediaRange (type: String , subtype: String , charset: Charset ?, qualityFactor: Double , parameters: Map < String , String >, extensions: Map < String , String >, rawText: String ) : Comparable < MediaRange > An RFC-2616 media range Constructors \u00b6 MediaRange [jvm] fun MediaRange (type: String , subtype: String , charset: Charset ? = null, qualityFactor: Double = 1.0, parameters: Map < String , String > = mapOf(), extensions: Map < String , String > = mapOf(), rawText: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Matcher [jvm] class Matcher (mediaRange: MediaRange , matchesCharset: Boolean ) : Comparable < MediaRange.Matcher > Functions \u00b6 Name Summary compareTo [jvm] open operator override fun compareTo (other: MediaRange ): Int matcher [jvm] fun matcher (mediaType: MediaType): MediaRange.Matcher ? toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary charset [jvm] val charset : Charset ? = null extensions [jvm] val extensions : Map < String , String > parameters [jvm] val parameters : Map < String , String > qualityFactor [jvm] val qualityFactor : Double = 1.0 subtype [jvm] val subtype : String type [jvm] val type : String","title":"MediaRange - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/#mediarange","text":"[jvm]\\ data class MediaRange (type: String , subtype: String , charset: Charset ?, qualityFactor: Double , parameters: Map < String , String >, extensions: Map < String , String >, rawText: String ) : Comparable < MediaRange > An RFC-2616 media range","title":"MediaRange"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/#constructors","text":"MediaRange [jvm] fun MediaRange (type: String , subtype: String , charset: Charset ? = null, qualityFactor: Double = 1.0, parameters: Map < String , String > = mapOf(), extensions: Map < String , String > = mapOf(), rawText: String )","title":"Constructors"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/#types","text":"Name Summary Companion [jvm] object Companion Matcher [jvm] class Matcher (mediaRange: MediaRange , matchesCharset: Boolean ) : Comparable < MediaRange.Matcher >","title":"Types"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/#functions","text":"Name Summary compareTo [jvm] open operator override fun compareTo (other: MediaRange ): Int matcher [jvm] fun matcher (mediaType: MediaType): MediaRange.Matcher ? toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/#properties","text":"Name Summary charset [jvm] val charset : Charset ? = null extensions [jvm] val extensions : Map < String , String > parameters [jvm] val parameters : Map < String , String > qualityFactor [jvm] val qualityFactor : Double = 1.0 subtype [jvm] val subtype : String type [jvm] val type : String","title":"Properties"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-media-range/","text":"// misk-core / misk.web.mediatype / MediaRange / MediaRange MediaRange \u00b6 [jvm]\\ fun MediaRange (type: String , subtype: String , charset: Charset ? = null, qualityFactor: Double = 1.0, parameters: Map < String , String > = mapOf(), extensions: Map < String , String > = mapOf(), rawText: String )","title":"MediaRange - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-media-range/#mediarange","text":"[jvm]\\ fun MediaRange (type: String , subtype: String , charset: Charset ? = null, qualityFactor: Double = 1.0, parameters: Map < String , String > = mapOf(), extensions: Map < String , String > = mapOf(), rawText: String )","title":"MediaRange"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/charset/","text":"// misk-core / misk.web.mediatype / MediaRange / charset charset \u00b6 [jvm]\\ val charset : Charset ? = null","title":"charset - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/charset/#charset","text":"[jvm]\\ val charset : Charset ? = null","title":"charset"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/compare-to/","text":"// misk-core / misk.web.mediatype / MediaRange / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: MediaRange ): Int","title":"compareTo - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: MediaRange ): Int","title":"compareTo"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/extensions/","text":"// misk-core / misk.web.mediatype / MediaRange / extensions extensions \u00b6 [jvm]\\ val extensions : Map < String , String >","title":"extensions - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/extensions/#extensions","text":"[jvm]\\ val extensions : Map < String , String >","title":"extensions"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/matcher/","text":"// misk-core / misk.web.mediatype / MediaRange / matcher matcher \u00b6 [jvm]\\ fun matcher (mediaType: MediaType): MediaRange.Matcher ?","title":"matcher - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/matcher/#matcher","text":"[jvm]\\ fun matcher (mediaType: MediaType): MediaRange.Matcher ?","title":"matcher"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/parameters/","text":"// misk-core / misk.web.mediatype / MediaRange / parameters parameters \u00b6 [jvm]\\ val parameters : Map < String , String >","title":"parameters - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/parameters/#parameters","text":"[jvm]\\ val parameters : Map < String , String >","title":"parameters"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/quality-factor/","text":"// misk-core / misk.web.mediatype / MediaRange / qualityFactor qualityFactor \u00b6 [jvm]\\ val qualityFactor : Double = 1.0","title":"qualityFactor - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/quality-factor/#qualityfactor","text":"[jvm]\\ val qualityFactor : Double = 1.0","title":"qualityFactor"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/subtype/","text":"// misk-core / misk.web.mediatype / MediaRange / subtype subtype \u00b6 [jvm]\\ val subtype : String","title":"subtype - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/subtype/#subtype","text":"[jvm]\\ val subtype : String","title":"subtype"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/to-string/","text":"// misk-core / misk.web.mediatype / MediaRange / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/type/","text":"// misk-core / misk.web.mediatype / MediaRange / type type \u00b6 [jvm]\\ val type : String","title":"type - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/type/#type","text":"[jvm]\\ val type : String","title":"type"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/","text":"// misk-core / misk.web.mediatype / MediaRange / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary parse [jvm] fun parse (s: String ): MediaRange parseRanges [jvm] fun parseRanges (s: String , swallowExceptions: Boolean = false): List < MediaRange > Properties \u00b6 Name Summary ALL_MEDIA [jvm] val ALL_MEDIA : MediaRange WILDCARD [jvm] const val WILDCARD : String","title":"Companion - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/#functions","text":"Name Summary parse [jvm] fun parse (s: String ): MediaRange parseRanges [jvm] fun parseRanges (s: String , swallowExceptions: Boolean = false): List < MediaRange >","title":"Functions"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/#properties","text":"Name Summary ALL_MEDIA [jvm] val ALL_MEDIA : MediaRange WILDCARD [jvm] const val WILDCARD : String","title":"Properties"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/-a-l-l_-m-e-d-i-a/","text":"// misk-core / misk.web.mediatype / MediaRange / Companion / ALL_MEDIA ALL_MEDIA \u00b6 [jvm]\\ val ALL_MEDIA : MediaRange","title":"ALL_MEDIA - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/-a-l-l_-m-e-d-i-a/#all_media","text":"[jvm]\\ val ALL_MEDIA : MediaRange","title":"ALL_MEDIA"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/-w-i-l-d-c-a-r-d/","text":"// misk-core / misk.web.mediatype / MediaRange / Companion / WILDCARD WILDCARD \u00b6 [jvm]\\ const val WILDCARD : String","title":"WILDCARD - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/-w-i-l-d-c-a-r-d/#wildcard","text":"[jvm]\\ const val WILDCARD : String","title":"WILDCARD"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/parse-ranges/","text":"// misk-core / misk.web.mediatype / MediaRange / Companion / parseRanges parseRanges \u00b6 [jvm]\\ fun parseRanges (s: String , swallowExceptions: Boolean = false): List < MediaRange >","title":"parseRanges - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/parse-ranges/#parseranges","text":"[jvm]\\ fun parseRanges (s: String , swallowExceptions: Boolean = false): List < MediaRange >","title":"parseRanges"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/parse/","text":"// misk-core / misk.web.mediatype / MediaRange / Companion / parse parse \u00b6 [jvm]\\ fun parse (s: String ): MediaRange","title":"parse - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-companion/parse/#parse","text":"[jvm]\\ fun parse (s: String ): MediaRange","title":"parse"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/","text":"// misk-core / misk.web.mediatype / MediaRange / Matcher Matcher \u00b6 [jvm]\\ class Matcher (mediaRange: MediaRange , matchesCharset: Boolean ) : Comparable < MediaRange.Matcher > Functions \u00b6 Name Summary compareTo [jvm] open operator override fun compareTo (other: MediaRange.Matcher ): Int toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary matchesCharset [jvm] val matchesCharset : Boolean = false mediaRange [jvm] val mediaRange : MediaRange","title":"Matcher - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/#matcher","text":"[jvm]\\ class Matcher (mediaRange: MediaRange , matchesCharset: Boolean ) : Comparable < MediaRange.Matcher >","title":"Matcher"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/#functions","text":"Name Summary compareTo [jvm] open operator override fun compareTo (other: MediaRange.Matcher ): Int toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/#properties","text":"Name Summary matchesCharset [jvm] val matchesCharset : Boolean = false mediaRange [jvm] val mediaRange : MediaRange","title":"Properties"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/-matcher/","text":"// misk-core / misk.web.mediatype / MediaRange / Matcher / Matcher Matcher \u00b6 [jvm]\\ fun Matcher (mediaRange: MediaRange , matchesCharset: Boolean = false)","title":"Matcher - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/-matcher/#matcher","text":"[jvm]\\ fun Matcher (mediaRange: MediaRange , matchesCharset: Boolean = false)","title":"Matcher"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/compare-to/","text":"// misk-core / misk.web.mediatype / MediaRange / Matcher / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: MediaRange.Matcher ): Int","title":"compareTo - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: MediaRange.Matcher ): Int","title":"compareTo"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/matches-charset/","text":"// misk-core / misk.web.mediatype / MediaRange / Matcher / matchesCharset matchesCharset \u00b6 [jvm]\\ val matchesCharset : Boolean = false","title":"matchesCharset - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/matches-charset/#matchescharset","text":"[jvm]\\ val matchesCharset : Boolean = false","title":"matchesCharset"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/media-range/","text":"// misk-core / misk.web.mediatype / MediaRange / Matcher / mediaRange mediaRange \u00b6 [jvm]\\ val mediaRange : MediaRange","title":"mediaRange - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/media-range/#mediarange","text":"[jvm]\\ val mediaRange : MediaRange","title":"mediaRange"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/to-string/","text":"// misk-core / misk.web.mediatype / MediaRange / Matcher / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-range/-matcher/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/","text":"// misk-core / misk.web.mediatype / MediaTypes MediaTypes \u00b6 [jvm]\\ object MediaTypes Functions \u00b6 Name Summary fromFileExtension [jvm] fun fromFileExtension (ext: String ): MediaType Properties \u00b6 Name Summary ALL [jvm] const val ALL : String ALL_MEDIA_TYPE [jvm] val ALL_MEDIA_TYPE : MediaType APPLICATION_FORM_URLENCODED [jvm] const val APPLICATION_FORM_URLENCODED : String APPLICATION_GRPC [jvm] const val APPLICATION_GRPC : String APPLICATION_GRPC_MEDIA_TYPE [jvm] val APPLICATION_GRPC_MEDIA_TYPE : MediaType APPLICATION_JAVASCRIPT [jvm] const val APPLICATION_JAVASCRIPT : String APPLICATION_JAVASCRIPT_MEDIA_TYPE [jvm] val APPLICATION_JAVASCRIPT_MEDIA_TYPE : MediaType APPLICATION_JSON [jvm] const val APPLICATION_JSON : String APPLICATION_JSON_MEDIA_TYPE [jvm] val APPLICATION_JSON_MEDIA_TYPE : MediaType APPLICATION_OCTETSTREAM [jvm] const val APPLICATION_OCTETSTREAM : String APPLICATION_OCTETSTREAM_MEDIA_TYPE [jvm] val APPLICATION_OCTETSTREAM_MEDIA_TYPE : MediaType APPLICATION_PROTOBUF [jvm] const val APPLICATION_PROTOBUF : String APPLICATION_PROTOBUF_MEDIA_TYPE [jvm] val APPLICATION_PROTOBUF_MEDIA_TYPE : MediaType IMAGE_PNG [jvm] const val IMAGE_PNG : String IMAGE_PNG_MEDIA_TYPE [jvm] val IMAGE_PNG_MEDIA_TYPE : MediaType IMAGE_SVG [jvm] const val IMAGE_SVG : String IMAGE_SVG_MEDIA_TYPE [jvm] val IMAGE_SVG_MEDIA_TYPE : MediaType TEXT_CSS [jvm] const val TEXT_CSS : String TEXT_CSS_MEDIA_TYPE [jvm] val TEXT_CSS_MEDIA_TYPE : MediaType TEXT_HTML [jvm] const val TEXT_HTML : String TEXT_HTML_MEDIA_TYPE [jvm] val TEXT_HTML_MEDIA_TYPE : MediaType TEXT_PLAIN_UTF8 [jvm] const val TEXT_PLAIN_UTF8 : String TEXT_PLAIN_UTF8_MEDIA_TYPE [jvm] val TEXT_PLAIN_UTF8_MEDIA_TYPE : MediaType","title":"MediaTypes - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/#mediatypes","text":"[jvm]\\ object MediaTypes","title":"MediaTypes"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/#functions","text":"Name Summary fromFileExtension [jvm] fun fromFileExtension (ext: String ): MediaType","title":"Functions"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/#properties","text":"Name Summary ALL [jvm] const val ALL : String ALL_MEDIA_TYPE [jvm] val ALL_MEDIA_TYPE : MediaType APPLICATION_FORM_URLENCODED [jvm] const val APPLICATION_FORM_URLENCODED : String APPLICATION_GRPC [jvm] const val APPLICATION_GRPC : String APPLICATION_GRPC_MEDIA_TYPE [jvm] val APPLICATION_GRPC_MEDIA_TYPE : MediaType APPLICATION_JAVASCRIPT [jvm] const val APPLICATION_JAVASCRIPT : String APPLICATION_JAVASCRIPT_MEDIA_TYPE [jvm] val APPLICATION_JAVASCRIPT_MEDIA_TYPE : MediaType APPLICATION_JSON [jvm] const val APPLICATION_JSON : String APPLICATION_JSON_MEDIA_TYPE [jvm] val APPLICATION_JSON_MEDIA_TYPE : MediaType APPLICATION_OCTETSTREAM [jvm] const val APPLICATION_OCTETSTREAM : String APPLICATION_OCTETSTREAM_MEDIA_TYPE [jvm] val APPLICATION_OCTETSTREAM_MEDIA_TYPE : MediaType APPLICATION_PROTOBUF [jvm] const val APPLICATION_PROTOBUF : String APPLICATION_PROTOBUF_MEDIA_TYPE [jvm] val APPLICATION_PROTOBUF_MEDIA_TYPE : MediaType IMAGE_PNG [jvm] const val IMAGE_PNG : String IMAGE_PNG_MEDIA_TYPE [jvm] val IMAGE_PNG_MEDIA_TYPE : MediaType IMAGE_SVG [jvm] const val IMAGE_SVG : String IMAGE_SVG_MEDIA_TYPE [jvm] val IMAGE_SVG_MEDIA_TYPE : MediaType TEXT_CSS [jvm] const val TEXT_CSS : String TEXT_CSS_MEDIA_TYPE [jvm] val TEXT_CSS_MEDIA_TYPE : MediaType TEXT_HTML [jvm] const val TEXT_HTML : String TEXT_HTML_MEDIA_TYPE [jvm] val TEXT_HTML_MEDIA_TYPE : MediaType TEXT_PLAIN_UTF8 [jvm] const val TEXT_PLAIN_UTF8 : String TEXT_PLAIN_UTF8_MEDIA_TYPE [jvm] val TEXT_PLAIN_UTF8_MEDIA_TYPE : MediaType","title":"Properties"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-l-l/","text":"// misk-core / misk.web.mediatype / MediaTypes / ALL ALL \u00b6 [jvm]\\ const val ALL : String","title":"ALL - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-l-l/#all","text":"[jvm]\\ const val ALL : String","title":"ALL"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-l-l_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / ALL_MEDIA_TYPE ALL_MEDIA_TYPE \u00b6 [jvm]\\ val ALL_MEDIA_TYPE : MediaType","title":"ALL_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-l-l_-m-e-d-i-a_-t-y-p-e/#all_media_type","text":"[jvm]\\ val ALL_MEDIA_TYPE : MediaType","title":"ALL_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-f-o-r-m_-u-r-l-e-n-c-o-d-e-d/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_FORM_URLENCODED APPLICATION_FORM_URLENCODED \u00b6 [jvm]\\ const val APPLICATION_FORM_URLENCODED : String","title":"APPLICATION_FORM_URLENCODED - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-f-o-r-m_-u-r-l-e-n-c-o-d-e-d/#application_form_urlencoded","text":"[jvm]\\ const val APPLICATION_FORM_URLENCODED : String","title":"APPLICATION_FORM_URLENCODED"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-g-r-p-c/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_GRPC APPLICATION_GRPC \u00b6 [jvm]\\ const val APPLICATION_GRPC : String","title":"APPLICATION_GRPC - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-g-r-p-c/#application_grpc","text":"[jvm]\\ const val APPLICATION_GRPC : String","title":"APPLICATION_GRPC"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-g-r-p-c_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_GRPC_MEDIA_TYPE APPLICATION_GRPC_MEDIA_TYPE \u00b6 [jvm]\\ val APPLICATION_GRPC_MEDIA_TYPE : MediaType","title":"APPLICATION_GRPC_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-g-r-p-c_-m-e-d-i-a_-t-y-p-e/#application_grpc_media_type","text":"[jvm]\\ val APPLICATION_GRPC_MEDIA_TYPE : MediaType","title":"APPLICATION_GRPC_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-a-v-a-s-c-r-i-p-t/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_JAVASCRIPT APPLICATION_JAVASCRIPT \u00b6 [jvm]\\ const val APPLICATION_JAVASCRIPT : String","title":"APPLICATION_JAVASCRIPT - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-a-v-a-s-c-r-i-p-t/#application_javascript","text":"[jvm]\\ const val APPLICATION_JAVASCRIPT : String","title":"APPLICATION_JAVASCRIPT"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-a-v-a-s-c-r-i-p-t_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_JAVASCRIPT_MEDIA_TYPE APPLICATION_JAVASCRIPT_MEDIA_TYPE \u00b6 [jvm]\\ val APPLICATION_JAVASCRIPT_MEDIA_TYPE : MediaType","title":"APPLICATION_JAVASCRIPT_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-a-v-a-s-c-r-i-p-t_-m-e-d-i-a_-t-y-p-e/#application_javascript_media_type","text":"[jvm]\\ val APPLICATION_JAVASCRIPT_MEDIA_TYPE : MediaType","title":"APPLICATION_JAVASCRIPT_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-s-o-n/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_JSON APPLICATION_JSON \u00b6 [jvm]\\ const val APPLICATION_JSON : String","title":"APPLICATION_JSON - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-s-o-n/#application_json","text":"[jvm]\\ const val APPLICATION_JSON : String","title":"APPLICATION_JSON"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-s-o-n_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_JSON_MEDIA_TYPE APPLICATION_JSON_MEDIA_TYPE \u00b6 [jvm]\\ val APPLICATION_JSON_MEDIA_TYPE : MediaType","title":"APPLICATION_JSON_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-j-s-o-n_-m-e-d-i-a_-t-y-p-e/#application_json_media_type","text":"[jvm]\\ val APPLICATION_JSON_MEDIA_TYPE : MediaType","title":"APPLICATION_JSON_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-o-c-t-e-t-s-t-r-e-a-m/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_OCTETSTREAM APPLICATION_OCTETSTREAM \u00b6 [jvm]\\ const val APPLICATION_OCTETSTREAM : String","title":"APPLICATION_OCTETSTREAM - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-o-c-t-e-t-s-t-r-e-a-m/#application_octetstream","text":"[jvm]\\ const val APPLICATION_OCTETSTREAM : String","title":"APPLICATION_OCTETSTREAM"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-o-c-t-e-t-s-t-r-e-a-m_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_OCTETSTREAM_MEDIA_TYPE APPLICATION_OCTETSTREAM_MEDIA_TYPE \u00b6 [jvm]\\ val APPLICATION_OCTETSTREAM_MEDIA_TYPE : MediaType","title":"APPLICATION_OCTETSTREAM_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-o-c-t-e-t-s-t-r-e-a-m_-m-e-d-i-a_-t-y-p-e/#application_octetstream_media_type","text":"[jvm]\\ val APPLICATION_OCTETSTREAM_MEDIA_TYPE : MediaType","title":"APPLICATION_OCTETSTREAM_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-p-r-o-t-o-b-u-f/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_PROTOBUF APPLICATION_PROTOBUF \u00b6 [jvm]\\ const val APPLICATION_PROTOBUF : String","title":"APPLICATION_PROTOBUF - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-p-r-o-t-o-b-u-f/#application_protobuf","text":"[jvm]\\ const val APPLICATION_PROTOBUF : String","title":"APPLICATION_PROTOBUF"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-p-r-o-t-o-b-u-f_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / APPLICATION_PROTOBUF_MEDIA_TYPE APPLICATION_PROTOBUF_MEDIA_TYPE \u00b6 [jvm]\\ val APPLICATION_PROTOBUF_MEDIA_TYPE : MediaType","title":"APPLICATION_PROTOBUF_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-a-p-p-l-i-c-a-t-i-o-n_-p-r-o-t-o-b-u-f_-m-e-d-i-a_-t-y-p-e/#application_protobuf_media_type","text":"[jvm]\\ val APPLICATION_PROTOBUF_MEDIA_TYPE : MediaType","title":"APPLICATION_PROTOBUF_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-p-n-g/","text":"// misk-core / misk.web.mediatype / MediaTypes / IMAGE_PNG IMAGE_PNG \u00b6 [jvm]\\ const val IMAGE_PNG : String","title":"IMAGE_PNG - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-p-n-g/#image_png","text":"[jvm]\\ const val IMAGE_PNG : String","title":"IMAGE_PNG"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-p-n-g_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / IMAGE_PNG_MEDIA_TYPE IMAGE_PNG_MEDIA_TYPE \u00b6 [jvm]\\ val IMAGE_PNG_MEDIA_TYPE : MediaType","title":"IMAGE_PNG_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-p-n-g_-m-e-d-i-a_-t-y-p-e/#image_png_media_type","text":"[jvm]\\ val IMAGE_PNG_MEDIA_TYPE : MediaType","title":"IMAGE_PNG_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-s-v-g/","text":"// misk-core / misk.web.mediatype / MediaTypes / IMAGE_SVG IMAGE_SVG \u00b6 [jvm]\\ const val IMAGE_SVG : String","title":"IMAGE_SVG - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-s-v-g/#image_svg","text":"[jvm]\\ const val IMAGE_SVG : String","title":"IMAGE_SVG"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-s-v-g_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / IMAGE_SVG_MEDIA_TYPE IMAGE_SVG_MEDIA_TYPE \u00b6 [jvm]\\ val IMAGE_SVG_MEDIA_TYPE : MediaType","title":"IMAGE_SVG_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-i-m-a-g-e_-s-v-g_-m-e-d-i-a_-t-y-p-e/#image_svg_media_type","text":"[jvm]\\ val IMAGE_SVG_MEDIA_TYPE : MediaType","title":"IMAGE_SVG_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-c-s-s/","text":"// misk-core / misk.web.mediatype / MediaTypes / TEXT_CSS TEXT_CSS \u00b6 [jvm]\\ const val TEXT_CSS : String","title":"TEXT_CSS - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-c-s-s/#text_css","text":"[jvm]\\ const val TEXT_CSS : String","title":"TEXT_CSS"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-c-s-s_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / TEXT_CSS_MEDIA_TYPE TEXT_CSS_MEDIA_TYPE \u00b6 [jvm]\\ val TEXT_CSS_MEDIA_TYPE : MediaType","title":"TEXT_CSS_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-c-s-s_-m-e-d-i-a_-t-y-p-e/#text_css_media_type","text":"[jvm]\\ val TEXT_CSS_MEDIA_TYPE : MediaType","title":"TEXT_CSS_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-h-t-m-l/","text":"// misk-core / misk.web.mediatype / MediaTypes / TEXT_HTML TEXT_HTML \u00b6 [jvm]\\ const val TEXT_HTML : String","title":"TEXT_HTML - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-h-t-m-l/#text_html","text":"[jvm]\\ const val TEXT_HTML : String","title":"TEXT_HTML"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-h-t-m-l_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / TEXT_HTML_MEDIA_TYPE TEXT_HTML_MEDIA_TYPE \u00b6 [jvm]\\ val TEXT_HTML_MEDIA_TYPE : MediaType","title":"TEXT_HTML_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-h-t-m-l_-m-e-d-i-a_-t-y-p-e/#text_html_media_type","text":"[jvm]\\ val TEXT_HTML_MEDIA_TYPE : MediaType","title":"TEXT_HTML_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-p-l-a-i-n_-u-t-f8/","text":"// misk-core / misk.web.mediatype / MediaTypes / TEXT_PLAIN_UTF8 TEXT_PLAIN_UTF8 \u00b6 [jvm]\\ const val TEXT_PLAIN_UTF8 : String","title":"TEXT_PLAIN_UTF8 - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-p-l-a-i-n_-u-t-f8/#text_plain_utf8","text":"[jvm]\\ const val TEXT_PLAIN_UTF8 : String","title":"TEXT_PLAIN_UTF8"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-p-l-a-i-n_-u-t-f8_-m-e-d-i-a_-t-y-p-e/","text":"// misk-core / misk.web.mediatype / MediaTypes / TEXT_PLAIN_UTF8_MEDIA_TYPE TEXT_PLAIN_UTF8_MEDIA_TYPE \u00b6 [jvm]\\ val TEXT_PLAIN_UTF8_MEDIA_TYPE : MediaType","title":"TEXT_PLAIN_UTF8_MEDIA_TYPE - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/-t-e-x-t_-p-l-a-i-n_-u-t-f8_-m-e-d-i-a_-t-y-p-e/#text_plain_utf8_media_type","text":"[jvm]\\ val TEXT_PLAIN_UTF8_MEDIA_TYPE : MediaType","title":"TEXT_PLAIN_UTF8_MEDIA_TYPE"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/from-file-extension/","text":"// misk-core / misk.web.mediatype / MediaTypes / fromFileExtension fromFileExtension \u00b6 [jvm]\\ fun fromFileExtension (ext: String ): MediaType","title":"fromFileExtension - Misk"},{"location":"0.x/misk-core/misk.web.mediatype/-media-types/from-file-extension/#fromfileextension","text":"[jvm]\\ fun fromFileExtension (ext: String ): MediaType","title":"fromFileExtension"},{"location":"0.x/misk-cron/misk.cron/","text":"// misk-cron / misk.cron Package misk.cron \u00b6 Types \u00b6 Name Summary CronEntryModule [jvm] class CronEntryModule < A : Runnable > : KAbstractModule CronManager [jvm] @Singleton class CronManager @Injectconstructor CronModule [jvm] class CronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule CronPattern [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class CronPattern (pattern: String ) FakeCronModule [jvm] class FakeCronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule","title":"Package misk.cron - Misk"},{"location":"0.x/misk-cron/misk.cron/#package-miskcron","text":"","title":"Package misk.cron"},{"location":"0.x/misk-cron/misk.cron/#types","text":"Name Summary CronEntryModule [jvm] class CronEntryModule < A : Runnable > : KAbstractModule CronManager [jvm] @Singleton class CronManager @Injectconstructor CronModule [jvm] class CronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule CronPattern [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class CronPattern (pattern: String ) FakeCronModule [jvm] class FakeCronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule","title":"Types"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/","text":"// misk-cron / misk.cron / CronEntryModule CronEntryModule \u00b6 [jvm]\\ class CronEntryModule < A : Runnable > : KAbstractModule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"CronEntryModule - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/#cronentrymodule","text":"[jvm]\\ class CronEntryModule < A : Runnable > : KAbstractModule","title":"CronEntryModule"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/-companion/","text":"// misk-cron / misk.cron / CronEntryModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < A : Runnable > create (): CronEntryModule < A > [jvm] fun < A : Runnable > create (cronRunnableClass: KClass < A >): CronEntryModule < A > Registers a cron runnable.","title":"Companion - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < A : Runnable > create (): CronEntryModule < A > [jvm] fun < A : Runnable > create (cronRunnableClass: KClass < A >): CronEntryModule < A > Registers a cron runnable.","title":"Functions"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/-companion/create/","text":"// misk-cron / misk.cron / CronEntryModule / Companion / create create \u00b6 [jvm]\\ inline fun < A : Runnable > create (): CronEntryModule < A > [jvm]\\ fun < A : Runnable > create (cronRunnableClass: KClass < A >): CronEntryModule < A > Registers a cron runnable. Parameters \u00b6 jvm cronRunnableClass : The cron runnable to register.","title":"create - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/-companion/create/#create","text":"[jvm]\\ inline fun < A : Runnable > create (): CronEntryModule < A > [jvm]\\ fun < A : Runnable > create (cronRunnableClass: KClass < A >): CronEntryModule < A > Registers a cron runnable.","title":"create"},{"location":"0.x/misk-cron/misk.cron/-cron-entry-module/-companion/create/#parameters","text":"jvm cronRunnableClass : The cron runnable to register.","title":"Parameters"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/","text":"// misk-cron / misk.cron / CronManager CronManager \u00b6 [jvm]\\ @Singleton class CronManager @Injectconstructor Types \u00b6 Name Summary Companion [jvm] object Companion CronEntry [jvm] data class CronEntry (name: String , cronTab: String , executionTime: ExecutionTime, runnable: Runnable ) Functions \u00b6 Name Summary runReadyCrons [jvm] fun runReadyCrons (lastRun: Instant ) waitForCronsComplete [jvm] fun waitForCronsComplete ()","title":"CronManager - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/#cronmanager","text":"[jvm]\\ @Singleton class CronManager @Injectconstructor","title":"CronManager"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/#types","text":"Name Summary Companion [jvm] object Companion CronEntry [jvm] data class CronEntry (name: String , cronTab: String , executionTime: ExecutionTime, runnable: Runnable )","title":"Types"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/#functions","text":"Name Summary runReadyCrons [jvm] fun runReadyCrons (lastRun: Instant ) waitForCronsComplete [jvm] fun waitForCronsComplete ()","title":"Functions"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-manager/","text":"// misk-cron / misk.cron / CronManager / CronManager CronManager \u00b6 [jvm]\\ @Inject fun CronManager ()","title":"CronManager - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-manager/#cronmanager","text":"[jvm]\\ @Inject fun CronManager ()","title":"CronManager"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/run-ready-crons/","text":"// misk-cron / misk.cron / CronManager / runReadyCrons runReadyCrons \u00b6 [jvm]\\ fun runReadyCrons (lastRun: Instant )","title":"runReadyCrons - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/run-ready-crons/#runreadycrons","text":"[jvm]\\ fun runReadyCrons (lastRun: Instant )","title":"runReadyCrons"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/wait-for-crons-complete/","text":"// misk-cron / misk.cron / CronManager / waitForCronsComplete waitForCronsComplete \u00b6 [jvm]\\ fun waitForCronsComplete ()","title":"waitForCronsComplete - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/wait-for-crons-complete/#waitforcronscomplete","text":"[jvm]\\ fun waitForCronsComplete ()","title":"waitForCronsComplete"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-companion/","text":"// misk-cron / misk.cron / CronManager / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/","text":"// misk-cron / misk.cron / CronManager / CronEntry CronEntry \u00b6 [jvm]\\ data class CronEntry (name: String , cronTab: String , executionTime: ExecutionTime, runnable: Runnable ) Properties \u00b6 Name Summary cronTab [jvm] val cronTab : String executionTime [jvm] val executionTime : ExecutionTime name [jvm] val name : String runnable [jvm] val runnable : Runnable","title":"CronEntry - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/#cronentry","text":"[jvm]\\ data class CronEntry (name: String , cronTab: String , executionTime: ExecutionTime, runnable: Runnable )","title":"CronEntry"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/#properties","text":"Name Summary cronTab [jvm] val cronTab : String executionTime [jvm] val executionTime : ExecutionTime name [jvm] val name : String runnable [jvm] val runnable : Runnable","title":"Properties"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/-cron-entry/","text":"// misk-cron / misk.cron / CronManager / CronEntry / CronEntry CronEntry \u00b6 [jvm]\\ fun CronEntry (name: String , cronTab: String , executionTime: ExecutionTime, runnable: Runnable )","title":"CronEntry - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/-cron-entry/#cronentry","text":"[jvm]\\ fun CronEntry (name: String , cronTab: String , executionTime: ExecutionTime, runnable: Runnable )","title":"CronEntry"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/cron-tab/","text":"// misk-cron / misk.cron / CronManager / CronEntry / cronTab cronTab \u00b6 [jvm]\\ val cronTab : String","title":"cronTab - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/cron-tab/#crontab","text":"[jvm]\\ val cronTab : String","title":"cronTab"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/execution-time/","text":"// misk-cron / misk.cron / CronManager / CronEntry / executionTime executionTime \u00b6 [jvm]\\ val executionTime : ExecutionTime","title":"executionTime - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/execution-time/#executiontime","text":"[jvm]\\ val executionTime : ExecutionTime","title":"executionTime"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/name/","text":"// misk-cron / misk.cron / CronManager / CronEntry / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/runnable/","text":"// misk-cron / misk.cron / CronManager / CronEntry / runnable runnable \u00b6 [jvm]\\ val runnable : Runnable","title":"runnable - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-manager/-cron-entry/runnable/#runnable","text":"[jvm]\\ val runnable : Runnable","title":"runnable"},{"location":"0.x/misk-cron/misk.cron/-cron-module/","text":"// misk-cron / misk.cron / CronModule CronModule \u00b6 [jvm]\\ class CronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideTaskQueue [jvm] @Provides fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"CronModule - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-module/#cronmodule","text":"[jvm]\\ class CronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule","title":"CronModule"},{"location":"0.x/misk-cron/misk.cron/-cron-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideTaskQueue [jvm] @Provides fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-cron/misk.cron/-cron-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-cron/misk.cron/-cron-module/-cron-module/","text":"// misk-cron / misk.cron / CronModule / CronModule CronModule \u00b6 [jvm]\\ fun CronModule (zoneId: ZoneId , threadPoolSize: Int = 10, dependencies: List <Key<out Service>> = listOf())","title":"CronModule - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-module/-cron-module/#cronmodule","text":"[jvm]\\ fun CronModule (zoneId: ZoneId , threadPoolSize: Int = 10, dependencies: List <Key<out Service>> = listOf())","title":"CronModule"},{"location":"0.x/misk-cron/misk.cron/-cron-module/provide-task-queue/","text":"// misk-cron / misk.cron / CronModule / provideTaskQueue provideTaskQueue \u00b6 [jvm]\\ @Provides fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue","title":"provideTaskQueue - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-module/provide-task-queue/#providetaskqueue","text":"[jvm]\\ @Provides fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue","title":"provideTaskQueue"},{"location":"0.x/misk-cron/misk.cron/-cron-pattern/","text":"// misk-cron / misk.cron / CronPattern CronPattern \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class CronPattern (pattern: String ) Properties \u00b6 Name Summary pattern [jvm] val pattern : String","title":"CronPattern - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-pattern/#cronpattern","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class CronPattern (pattern: String )","title":"CronPattern"},{"location":"0.x/misk-cron/misk.cron/-cron-pattern/#properties","text":"Name Summary pattern [jvm] val pattern : String","title":"Properties"},{"location":"0.x/misk-cron/misk.cron/-cron-pattern/-cron-pattern/","text":"// misk-cron / misk.cron / CronPattern / CronPattern CronPattern \u00b6 [jvm]\\ fun CronPattern (pattern: String )","title":"CronPattern - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-pattern/-cron-pattern/#cronpattern","text":"[jvm]\\ fun CronPattern (pattern: String )","title":"CronPattern"},{"location":"0.x/misk-cron/misk.cron/-cron-pattern/pattern/","text":"// misk-cron / misk.cron / CronPattern / pattern pattern \u00b6 [jvm]\\ val pattern : String","title":"pattern - Misk"},{"location":"0.x/misk-cron/misk.cron/-cron-pattern/pattern/#pattern","text":"[jvm]\\ val pattern : String","title":"pattern"},{"location":"0.x/misk-cron/misk.cron/-fake-cron-module/","text":"// misk-cron / misk.cron / FakeCronModule FakeCronModule \u00b6 [jvm]\\ class FakeCronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeCronModule - Misk"},{"location":"0.x/misk-cron/misk.cron/-fake-cron-module/#fakecronmodule","text":"[jvm]\\ class FakeCronModule (zoneId: ZoneId , threadPoolSize: Int , dependencies: List <Key<out Service>>) : KAbstractModule","title":"FakeCronModule"},{"location":"0.x/misk-cron/misk.cron/-fake-cron-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-cron/misk.cron/-fake-cron-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-cron/misk.cron/-fake-cron-module/-fake-cron-module/","text":"// misk-cron / misk.cron / FakeCronModule / FakeCronModule FakeCronModule \u00b6 [jvm]\\ fun FakeCronModule (zoneId: ZoneId , threadPoolSize: Int = 10, dependencies: List <Key<out Service>> = listOf())","title":"FakeCronModule - Misk"},{"location":"0.x/misk-cron/misk.cron/-fake-cron-module/-fake-cron-module/#fakecronmodule","text":"[jvm]\\ fun FakeCronModule (zoneId: ZoneId , threadPoolSize: Int = 10, dependencies: List <Key<out Service>> = listOf())","title":"FakeCronModule"},{"location":"0.x/misk-crypto/misk.crypto/","text":"// misk-crypto / misk.crypto Package misk.crypto \u00b6 Types \u00b6 Name Summary AeadKeyManager [jvm] @Singleton class AeadKeyManager : MappedKeyManager <Aead> Holds a map of every Aead key name to its primitive listed in the configuration for this app. AwsKmsClientModule [jvm] class AwsKmsClientModule (credentialsPath: String ?) : KAbstractModule AWS specific KMS client module. Currently uses a file path to a JSON credentials file to initialize the client. If no file is provided, tries to initialize the client using the default credentials path as specified in AwsKmsClient.withDefaultCredentials BucketNameSource [jvm] interface BucketNameSource Bind this to an instance to control how external buckets are referenced. CiphertextFormat [jvm] class CiphertextFormat Wraps a ciphertext and the encryption context associated with it in a ByteArray . CryptoConfig [jvm] data class CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >?) : Config Main configuration object representing to be used in the app. CryptoModule [jvm] class CryptoModule (config: CryptoConfig ) : KAbstractModule Configures and registers the keys listed in the configuration file. Each key is read, decrypted, and then bound via Google Guice and added to a MappedKeyManager . CryptoTestModule [jvm] class CryptoTestModule (config: CryptoConfig ?) : KAbstractModule This module should be used for testing purposes only. It generates random keys for each key name specified in the configuration and uses FakeKmsClient instead of a real KMS service. DeterministicAeadKeyManager [jvm] @Singleton class DeterministicAeadKeyManager : MappedKeyManager <DeterministicAead> Holds a map of every DeterministicAead key name to its primitive listed in the configuration for this app. DigitalSignature [jvm] data class DigitalSignature (signer: PublicKeySign, verifier: PublicKeyVerify) DigitalSignatureKeyManager [jvm] @Singleton class DigitalSignatureKeyManager : MappedKeyManager < DigitalSignature > Holds a map of every key name to its corresponding PublicKeySign and PublicKeyVerify primitives. ExternalDataKeys [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ExternalDataKeys This annotation is used to decorate the collection of external data keys used in the service. ExternalKeyManagerException [jvm] class ExternalKeyManagerException (message: String ) : IOException Thrown on creation if external key does not exist. ExternalKeyResolver [jvm] class ExternalKeyResolver @Injectconstructor(allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >) : KeyResolver ExternalKeyResolver implements an KeyResolver that fetches Tink keysets from an external source, such as an S3 bucket. If multiple sources are registered (by binding implementations of KeyResolver ), the first one to contain the key (via ExternalKeySource.keyExists ) is the key that is used. ExternalKeySource [jvm] interface ExternalKeySource Implement an ExternalKeySource to provide Tink keysets from an external location, such as an S3 bucket or an NFS share. FakeExternalKeyManagerModule [jvm] class FakeExternalKeyManagerModule (config: CryptoConfig ) : KAbstractModule FakeKeyResolver [jvm] class FakeKeyResolver : KeyResolver GcpKmsClientModule [jvm] class GcpKmsClientModule (credentialsPath: String ?) : KAbstractModule GCP specific KMS client module. Uses a file path to a JSON credentials file to initialize the client. HybridDecryptKeyManager [jvm] @Singleton class HybridDecryptKeyManager : MappedKeyManager <HybridDecrypt> Holds a map of every HybridDecrypt key name to its corresponding primitive listed in the configuration for this app. HybridEncryptKeyManager [jvm] @Singleton class HybridEncryptKeyManager : MappedKeyManager <HybridEncrypt> Holds a map of every HybridEncrypt key name to its corresponding primitive listed in the configuration for this app. Key [jvm] data class Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >?, kms_uri: String ?) : Config Describes a specific key KeyAlias [jvm] typealias KeyAlias = String A KeyAlias is how we refer to a Tink keyset. KeyNotFoundException [jvm] class KeyNotFoundException (message: String ?, cause: Throwable ?) : GeneralSecurityException KeyReader [jvm] open class KeyReader KeyResolver [jvm] interface KeyResolver KeyResolver provides an interface to access keys indexed by aliases. Optionally, callers can register a callback to be invoked when a key is updated. KeyType [jvm] enum KeyType : Enum < KeyType > Supported key types LocalConfigKeyResolver [jvm] class LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String ) : KeyResolver LocalConfigKeyResolver provides keys that are stored locally and protected by a single KMS key. MacKeyManager [jvm] @Singleton class MacKeyManager : MappedKeyManager <Mac> Holds a map of every Mac key name to its primitive listed in the configuration for this app. MappedKeyManager [jvm] sealed class MappedKeyManager < KeyT > MiskAWSKMS [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskAWSKMS This annotation is used to specify which com.amazonaws.services.kms.AWSKMS instance should be used by misk to construct a KmsClient and communicate with the KMS service MiskKmsClient [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskKmsClient This annotation is used to specify the KmsClient that\u2019s being used by misk to load encryption keys PgpDecrypterManager [jvm] @Singleton class PgpDecrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpDecrypter > Holds a map of every PgpDecrypter key name to its primitive listed in the configuration for this app. PgpEncrypterManager [jvm] @Singleton class PgpEncrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpEncrypter > Holds a map of every PgpEncrypter key name to its primitive listed in the configuration for this app. S3KeySource [jvm] class S3KeySource @Injectconstructor(deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource , awsCredentials: AWSCredentialsProvider) : ExternalKeySource S3KeySource implements an ExternalKeySource that fetches Tink keysets from an S3 bucket. Keysets are indexed by an alias and a region, and are encrypted with a key in the KMS using an envelope key encryption scheme. Each Keyset is protected by a KMS key in each service region. ServiceKeys [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ServiceKeys This annotation is used to decorate the collection of service keys used in the service. StreamingAeadKeyManager [jvm] @Singleton class StreamingAeadKeyManager @Injectconstructor(injector: Injector) : MappedKeyManager <StreamingAead> Holds a map of every StreamingAead key name to its primitive listed in the configuration for this app. Functions \u00b6 Name Summary computeMac [jvm] fun Mac. computeMac (data: String ): String Extension function for conveniently computing an HMAC and encoding it with Base64. verifyMac [jvm] fun Mac. verifyMac (tag: String , data: String ) Extension function for conveniently verifying a message\u2019s authenticity. This function expects the tag string variable to contain a Base64 encoded array of bytes.","title":"Package misk.crypto - Misk"},{"location":"0.x/misk-crypto/misk.crypto/#package-miskcrypto","text":"","title":"Package misk.crypto"},{"location":"0.x/misk-crypto/misk.crypto/#types","text":"Name Summary AeadKeyManager [jvm] @Singleton class AeadKeyManager : MappedKeyManager <Aead> Holds a map of every Aead key name to its primitive listed in the configuration for this app. AwsKmsClientModule [jvm] class AwsKmsClientModule (credentialsPath: String ?) : KAbstractModule AWS specific KMS client module. Currently uses a file path to a JSON credentials file to initialize the client. If no file is provided, tries to initialize the client using the default credentials path as specified in AwsKmsClient.withDefaultCredentials BucketNameSource [jvm] interface BucketNameSource Bind this to an instance to control how external buckets are referenced. CiphertextFormat [jvm] class CiphertextFormat Wraps a ciphertext and the encryption context associated with it in a ByteArray . CryptoConfig [jvm] data class CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >?) : Config Main configuration object representing to be used in the app. CryptoModule [jvm] class CryptoModule (config: CryptoConfig ) : KAbstractModule Configures and registers the keys listed in the configuration file. Each key is read, decrypted, and then bound via Google Guice and added to a MappedKeyManager . CryptoTestModule [jvm] class CryptoTestModule (config: CryptoConfig ?) : KAbstractModule This module should be used for testing purposes only. It generates random keys for each key name specified in the configuration and uses FakeKmsClient instead of a real KMS service. DeterministicAeadKeyManager [jvm] @Singleton class DeterministicAeadKeyManager : MappedKeyManager <DeterministicAead> Holds a map of every DeterministicAead key name to its primitive listed in the configuration for this app. DigitalSignature [jvm] data class DigitalSignature (signer: PublicKeySign, verifier: PublicKeyVerify) DigitalSignatureKeyManager [jvm] @Singleton class DigitalSignatureKeyManager : MappedKeyManager < DigitalSignature > Holds a map of every key name to its corresponding PublicKeySign and PublicKeyVerify primitives. ExternalDataKeys [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ExternalDataKeys This annotation is used to decorate the collection of external data keys used in the service. ExternalKeyManagerException [jvm] class ExternalKeyManagerException (message: String ) : IOException Thrown on creation if external key does not exist. ExternalKeyResolver [jvm] class ExternalKeyResolver @Injectconstructor(allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >) : KeyResolver ExternalKeyResolver implements an KeyResolver that fetches Tink keysets from an external source, such as an S3 bucket. If multiple sources are registered (by binding implementations of KeyResolver ), the first one to contain the key (via ExternalKeySource.keyExists ) is the key that is used. ExternalKeySource [jvm] interface ExternalKeySource Implement an ExternalKeySource to provide Tink keysets from an external location, such as an S3 bucket or an NFS share. FakeExternalKeyManagerModule [jvm] class FakeExternalKeyManagerModule (config: CryptoConfig ) : KAbstractModule FakeKeyResolver [jvm] class FakeKeyResolver : KeyResolver GcpKmsClientModule [jvm] class GcpKmsClientModule (credentialsPath: String ?) : KAbstractModule GCP specific KMS client module. Uses a file path to a JSON credentials file to initialize the client. HybridDecryptKeyManager [jvm] @Singleton class HybridDecryptKeyManager : MappedKeyManager <HybridDecrypt> Holds a map of every HybridDecrypt key name to its corresponding primitive listed in the configuration for this app. HybridEncryptKeyManager [jvm] @Singleton class HybridEncryptKeyManager : MappedKeyManager <HybridEncrypt> Holds a map of every HybridEncrypt key name to its corresponding primitive listed in the configuration for this app. Key [jvm] data class Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >?, kms_uri: String ?) : Config Describes a specific key KeyAlias [jvm] typealias KeyAlias = String A KeyAlias is how we refer to a Tink keyset. KeyNotFoundException [jvm] class KeyNotFoundException (message: String ?, cause: Throwable ?) : GeneralSecurityException KeyReader [jvm] open class KeyReader KeyResolver [jvm] interface KeyResolver KeyResolver provides an interface to access keys indexed by aliases. Optionally, callers can register a callback to be invoked when a key is updated. KeyType [jvm] enum KeyType : Enum < KeyType > Supported key types LocalConfigKeyResolver [jvm] class LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String ) : KeyResolver LocalConfigKeyResolver provides keys that are stored locally and protected by a single KMS key. MacKeyManager [jvm] @Singleton class MacKeyManager : MappedKeyManager <Mac> Holds a map of every Mac key name to its primitive listed in the configuration for this app. MappedKeyManager [jvm] sealed class MappedKeyManager < KeyT > MiskAWSKMS [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskAWSKMS This annotation is used to specify which com.amazonaws.services.kms.AWSKMS instance should be used by misk to construct a KmsClient and communicate with the KMS service MiskKmsClient [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskKmsClient This annotation is used to specify the KmsClient that\u2019s being used by misk to load encryption keys PgpDecrypterManager [jvm] @Singleton class PgpDecrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpDecrypter > Holds a map of every PgpDecrypter key name to its primitive listed in the configuration for this app. PgpEncrypterManager [jvm] @Singleton class PgpEncrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpEncrypter > Holds a map of every PgpEncrypter key name to its primitive listed in the configuration for this app. S3KeySource [jvm] class S3KeySource @Injectconstructor(deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource , awsCredentials: AWSCredentialsProvider) : ExternalKeySource S3KeySource implements an ExternalKeySource that fetches Tink keysets from an S3 bucket. Keysets are indexed by an alias and a region, and are encrypted with a key in the KMS using an envelope key encryption scheme. Each Keyset is protected by a KMS key in each service region. ServiceKeys [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ServiceKeys This annotation is used to decorate the collection of service keys used in the service. StreamingAeadKeyManager [jvm] @Singleton class StreamingAeadKeyManager @Injectconstructor(injector: Injector) : MappedKeyManager <StreamingAead> Holds a map of every StreamingAead key name to its primitive listed in the configuration for this app.","title":"Types"},{"location":"0.x/misk-crypto/misk.crypto/#functions","text":"Name Summary computeMac [jvm] fun Mac. computeMac (data: String ): String Extension function for conveniently computing an HMAC and encoding it with Base64. verifyMac [jvm] fun Mac. verifyMac (tag: String , data: String ) Extension function for conveniently verifying a message\u2019s authenticity. This function expects the tag string variable to contain a Base64 encoded array of bytes.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/compute-mac/","text":"// misk-crypto / misk.crypto / computeMac computeMac \u00b6 [jvm]\\ fun Mac. computeMac (data: String ): String Extension function for conveniently computing an HMAC and encoding it with Base64.","title":"computeMac - Misk"},{"location":"0.x/misk-crypto/misk.crypto/compute-mac/#computemac","text":"[jvm]\\ fun Mac. computeMac (data: String ): String Extension function for conveniently computing an HMAC and encoding it with Base64.","title":"computeMac"},{"location":"0.x/misk-crypto/misk.crypto/verify-mac/","text":"// misk-crypto / misk.crypto / verifyMac verifyMac \u00b6 [jvm]\\ fun Mac. verifyMac (tag: String , data: String ) Extension function for conveniently verifying a message\u2019s authenticity. This function expects the tag string variable to contain a Base64 encoded array of bytes.","title":"verifyMac - Misk"},{"location":"0.x/misk-crypto/misk.crypto/verify-mac/#verifymac","text":"[jvm]\\ fun Mac. verifyMac (tag: String , data: String ) Extension function for conveniently verifying a message\u2019s authenticity. This function expects the tag string variable to contain a Base64 encoded array of bytes.","title":"verifyMac"},{"location":"0.x/misk-crypto/misk.crypto/-aead-key-manager/","text":"// misk-crypto / misk.crypto / AeadKeyManager AeadKeyManager \u00b6 [jvm]\\ @Singleton class AeadKeyManager : MappedKeyManager <Aead> Holds a map of every Aead key name to its primitive listed in the configuration for this app. Users may use this object to obtain an Aead dynamically: val myKey: Aead = aeadKeyManager[\u201cmyKey\u201d] Note: Aead instances provided by this module are envelope Aead instances. This means that all data is encrypted with an ephemeral data encryption key (DEK), which is then protected by a key-encryption key (KEK) and stored inline with ciphertext. This effectively means that ciphertext will be a bit larger than the plaintext, and that migrating keys (KEKs) should not require the re-encryption of stored data. Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): Aead","title":"AeadKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-aead-key-manager/#aeadkeymanager","text":"[jvm]\\ @Singleton class AeadKeyManager : MappedKeyManager <Aead> Holds a map of every Aead key name to its primitive listed in the configuration for this app. Users may use this object to obtain an Aead dynamically: val myKey: Aead = aeadKeyManager[\u201cmyKey\u201d] Note: Aead instances provided by this module are envelope Aead instances. This means that all data is encrypted with an ephemeral data encryption key (DEK), which is then protected by a key-encryption key (KEK) and stored inline with ciphertext. This effectively means that ciphertext will be a bit larger than the plaintext, and that migrating keys (KEKs) should not require the re-encryption of stored data.","title":"AeadKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-aead-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): Aead","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/","text":"// misk-crypto / misk.crypto / AwsKmsClientModule AwsKmsClientModule \u00b6 [jvm]\\ class AwsKmsClientModule (credentialsPath: String ?) : KAbstractModule AWS specific KMS client module. Currently uses a file path to a JSON credentials file to initialize the client. If no file is provided, tries to initialize the client using the default credentials path as specified in AwsKmsClient.withDefaultCredentials Constructors \u00b6 AwsKmsClientModule [jvm] fun AwsKmsClientModule (credentialsPath: String ? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getKmsClient [jvm] @Provides fun getKmsClient (): KmsClient getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"AwsKmsClientModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/#awskmsclientmodule","text":"[jvm]\\ class AwsKmsClientModule (credentialsPath: String ?) : KAbstractModule AWS specific KMS client module. Currently uses a file path to a JSON credentials file to initialize the client. If no file is provided, tries to initialize the client using the default credentials path as specified in AwsKmsClient.withDefaultCredentials","title":"AwsKmsClientModule"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/#constructors","text":"AwsKmsClientModule [jvm] fun AwsKmsClientModule (credentialsPath: String ? = null)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getKmsClient [jvm] @Provides fun getKmsClient (): KmsClient getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/-aws-kms-client-module/","text":"// misk-crypto / misk.crypto / AwsKmsClientModule / AwsKmsClientModule AwsKmsClientModule \u00b6 [jvm]\\ fun AwsKmsClientModule (credentialsPath: String ? = null)","title":"AwsKmsClientModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/-aws-kms-client-module/#awskmsclientmodule","text":"[jvm]\\ fun AwsKmsClientModule (credentialsPath: String ? = null)","title":"AwsKmsClientModule"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/get-kms-client/","text":"// misk-crypto / misk.crypto / AwsKmsClientModule / getKmsClient getKmsClient \u00b6 [jvm]\\ @Provides fun getKmsClient (): KmsClient","title":"getKmsClient - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-aws-kms-client-module/get-kms-client/#getkmsclient","text":"[jvm]\\ @Provides fun getKmsClient (): KmsClient","title":"getKmsClient"},{"location":"0.x/misk-crypto/misk.crypto/-bucket-name-source/","text":"// misk-crypto / misk.crypto / BucketNameSource BucketNameSource \u00b6 [jvm]\\ interface BucketNameSource Bind this to an instance to control how external buckets are referenced. Functions \u00b6 Name Summary getBucketName [jvm] abstract fun getBucketName (deployment: Deployment): String Name of the bucket that stores keys getBucketRegion [jvm] open fun getBucketRegion (deployment: Deployment): String ? The region that the bucket lives in.","title":"BucketNameSource - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-bucket-name-source/#bucketnamesource","text":"[jvm]\\ interface BucketNameSource Bind this to an instance to control how external buckets are referenced.","title":"BucketNameSource"},{"location":"0.x/misk-crypto/misk.crypto/-bucket-name-source/#functions","text":"Name Summary getBucketName [jvm] abstract fun getBucketName (deployment: Deployment): String Name of the bucket that stores keys getBucketRegion [jvm] open fun getBucketRegion (deployment: Deployment): String ? The region that the bucket lives in.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-bucket-name-source/get-bucket-name/","text":"// misk-crypto / misk.crypto / BucketNameSource / getBucketName getBucketName \u00b6 [jvm]\\ abstract fun getBucketName (deployment: Deployment): String Name of the bucket that stores keys","title":"getBucketName - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-bucket-name-source/get-bucket-name/#getbucketname","text":"[jvm]\\ abstract fun getBucketName (deployment: Deployment): String Name of the bucket that stores keys","title":"getBucketName"},{"location":"0.x/misk-crypto/misk.crypto/-bucket-name-source/get-bucket-region/","text":"// misk-crypto / misk.crypto / BucketNameSource / getBucketRegion getBucketRegion \u00b6 [jvm]\\ open fun getBucketRegion (deployment: Deployment): String ? The region that the bucket lives in. Returns null for same region as the service.","title":"getBucketRegion - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-bucket-name-source/get-bucket-region/#getbucketregion","text":"[jvm]\\ open fun getBucketRegion (deployment: Deployment): String ? The region that the bucket lives in. Returns null for same region as the service.","title":"getBucketRegion"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/","text":"// misk-crypto / misk.crypto / CiphertextFormat CiphertextFormat \u00b6 [jvm]\\ class CiphertextFormat Wraps a ciphertext and the encryption context associated with it in a ByteArray . Misk uses Tink to encrypt data, which uses Encryption Context (EC), or Additional Authentication Data (AAD) to authenticate ciphertext. This class introduces a new, higher level abstraction, that\u2019ll be used instead of the AAD byte array interfaces Tink exposes to users. The main reasons to do this are: Preventing the misuse of AAD Preventing undecipherable ciphertext from being created Exposing a friendlier user interface Encryption Context Specification \u00b6 Map<String, String> The map must contain at least 1 entry No blank/empty/null strings in either the map\u2019s keys or values The map is optional, and can be completely omitted from the encryption operation The encryption context will be serialized using the following format: [ AAD:\\ [ varint: pair count ]\\ [ pairs:\\ ( [ varint: key length ] [ ByteArray: key ]\\ [ varint: value length ] [ ByteArray: value ]\\ )*\\ ]\\ ] The final output will be serialized using the following format: [ 0xEE: magic+version ]\\ [ varint: AAD length ]\\ [ AAD ]\\ [ tink ciphertext ] For the full documentation of the CiphertextFormat serialization, read FORMAT.md Types \u00b6 Name Summary Companion [jvm] object Companion EncryptionContextMismatchException [jvm] class EncryptionContextMismatchException (message: String ) : GeneralSecurityException InvalidCiphertextFormatException [jvm] class InvalidCiphertextFormatException (message: String ) : GeneralSecurityException InvalidEncryptionContextException [jvm] class InvalidEncryptionContextException (message: String ) : GeneralSecurityException MissingEncryptionContextException [jvm] class MissingEncryptionContextException : GeneralSecurityException UnexpectedEncryptionContextException [jvm] class UnexpectedEncryptionContextException : GeneralSecurityException","title":"CiphertextFormat - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/#ciphertextformat","text":"[jvm]\\ class CiphertextFormat Wraps a ciphertext and the encryption context associated with it in a ByteArray . Misk uses Tink to encrypt data, which uses Encryption Context (EC), or Additional Authentication Data (AAD) to authenticate ciphertext. This class introduces a new, higher level abstraction, that\u2019ll be used instead of the AAD byte array interfaces Tink exposes to users. The main reasons to do this are: Preventing the misuse of AAD Preventing undecipherable ciphertext from being created Exposing a friendlier user interface","title":"CiphertextFormat"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/#encryption-context-specification","text":"Map<String, String> The map must contain at least 1 entry No blank/empty/null strings in either the map\u2019s keys or values The map is optional, and can be completely omitted from the encryption operation The encryption context will be serialized using the following format: [ AAD:\\ [ varint: pair count ]\\ [ pairs:\\ ( [ varint: key length ] [ ByteArray: key ]\\ [ varint: value length ] [ ByteArray: value ]\\ )*\\ ]\\ ] The final output will be serialized using the following format: [ 0xEE: magic+version ]\\ [ varint: AAD length ]\\ [ AAD ]\\ [ tink ciphertext ] For the full documentation of the CiphertextFormat serialization, read FORMAT.md","title":"Encryption Context Specification"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/#types","text":"Name Summary Companion [jvm] object Companion EncryptionContextMismatchException [jvm] class EncryptionContextMismatchException (message: String ) : GeneralSecurityException InvalidCiphertextFormatException [jvm] class InvalidCiphertextFormatException (message: String ) : GeneralSecurityException InvalidEncryptionContextException [jvm] class InvalidEncryptionContextException (message: String ) : GeneralSecurityException MissingEncryptionContextException [jvm] class MissingEncryptionContextException : GeneralSecurityException UnexpectedEncryptionContextException [jvm] class UnexpectedEncryptionContextException : GeneralSecurityException","title":"Types"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/","text":"// misk-crypto / misk.crypto / CiphertextFormat / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary deserializeFleFormat [jvm] fun deserializeFleFormat (serialized: ByteArray ): Pair < ByteArray , Map < String , String ?>> Extracts the ciphertext and encryption context from the serialized ByteArray. Properties \u00b6 Name Summary CURRENT_VERSION [jvm] const val CURRENT_VERSION : Int = 238 Current version of the encryption packet schema","title":"Companion - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/#functions","text":"Name Summary deserializeFleFormat [jvm] fun deserializeFleFormat (serialized: ByteArray ): Pair < ByteArray , Map < String , String ?>> Extracts the ciphertext and encryption context from the serialized ByteArray.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/#properties","text":"Name Summary CURRENT_VERSION [jvm] const val CURRENT_VERSION : Int = 238 Current version of the encryption packet schema","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/-c-u-r-r-e-n-t_-v-e-r-s-i-o-n/","text":"// misk-crypto / misk.crypto / CiphertextFormat / Companion / CURRENT_VERSION CURRENT_VERSION \u00b6 [jvm]\\ const val CURRENT_VERSION : Int = 238 Current version of the encryption packet schema","title":"CURRENT_VERSION - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/-c-u-r-r-e-n-t_-v-e-r-s-i-o-n/#current_version","text":"[jvm]\\ const val CURRENT_VERSION : Int = 238 Current version of the encryption packet schema","title":"CURRENT_VERSION"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/deserialize-fle-format/","text":"// misk-crypto / misk.crypto / CiphertextFormat / Companion / deserializeFleFormat deserializeFleFormat \u00b6 [jvm]\\ fun deserializeFleFormat (serialized: ByteArray ): Pair < ByteArray , Map < String , String ?>> Extracts the ciphertext and encryption context from the serialized ByteArray. This method is meant to be used with field-level-encryption in Hibernate only.","title":"deserializeFleFormat - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-companion/deserialize-fle-format/#deserializefleformat","text":"[jvm]\\ fun deserializeFleFormat (serialized: ByteArray ): Pair < ByteArray , Map < String , String ?>> Extracts the ciphertext and encryption context from the serialized ByteArray. This method is meant to be used with field-level-encryption in Hibernate only.","title":"deserializeFleFormat"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-encryption-context-mismatch-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / EncryptionContextMismatchException EncryptionContextMismatchException \u00b6 [jvm]\\ class EncryptionContextMismatchException (message: String ) : GeneralSecurityException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"EncryptionContextMismatchException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-encryption-context-mismatch-exception/#encryptioncontextmismatchexception","text":"[jvm]\\ class EncryptionContextMismatchException (message: String ) : GeneralSecurityException","title":"EncryptionContextMismatchException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-encryption-context-mismatch-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-encryption-context-mismatch-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-encryption-context-mismatch-exception/-encryption-context-mismatch-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / EncryptionContextMismatchException / EncryptionContextMismatchException EncryptionContextMismatchException \u00b6 [jvm]\\ fun EncryptionContextMismatchException (message: String )","title":"EncryptionContextMismatchException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-encryption-context-mismatch-exception/-encryption-context-mismatch-exception/#encryptioncontextmismatchexception","text":"[jvm]\\ fun EncryptionContextMismatchException (message: String )","title":"EncryptionContextMismatchException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-ciphertext-format-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / InvalidCiphertextFormatException InvalidCiphertextFormatException \u00b6 [jvm]\\ class InvalidCiphertextFormatException (message: String ) : GeneralSecurityException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"InvalidCiphertextFormatException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-ciphertext-format-exception/#invalidciphertextformatexception","text":"[jvm]\\ class InvalidCiphertextFormatException (message: String ) : GeneralSecurityException","title":"InvalidCiphertextFormatException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-ciphertext-format-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-ciphertext-format-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-ciphertext-format-exception/-invalid-ciphertext-format-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / InvalidCiphertextFormatException / InvalidCiphertextFormatException InvalidCiphertextFormatException \u00b6 [jvm]\\ fun InvalidCiphertextFormatException (message: String )","title":"InvalidCiphertextFormatException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-ciphertext-format-exception/-invalid-ciphertext-format-exception/#invalidciphertextformatexception","text":"[jvm]\\ fun InvalidCiphertextFormatException (message: String )","title":"InvalidCiphertextFormatException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-encryption-context-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / InvalidEncryptionContextException InvalidEncryptionContextException \u00b6 [jvm]\\ class InvalidEncryptionContextException (message: String ) : GeneralSecurityException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"InvalidEncryptionContextException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-encryption-context-exception/#invalidencryptioncontextexception","text":"[jvm]\\ class InvalidEncryptionContextException (message: String ) : GeneralSecurityException","title":"InvalidEncryptionContextException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-encryption-context-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-encryption-context-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-encryption-context-exception/-invalid-encryption-context-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / InvalidEncryptionContextException / InvalidEncryptionContextException InvalidEncryptionContextException \u00b6 [jvm]\\ fun InvalidEncryptionContextException (message: String )","title":"InvalidEncryptionContextException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-invalid-encryption-context-exception/-invalid-encryption-context-exception/#invalidencryptioncontextexception","text":"[jvm]\\ fun InvalidEncryptionContextException (message: String )","title":"InvalidEncryptionContextException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-missing-encryption-context-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / MissingEncryptionContextException MissingEncryptionContextException \u00b6 [jvm]\\ class MissingEncryptionContextException : GeneralSecurityException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"MissingEncryptionContextException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-missing-encryption-context-exception/#missingencryptioncontextexception","text":"[jvm]\\ class MissingEncryptionContextException : GeneralSecurityException","title":"MissingEncryptionContextException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-missing-encryption-context-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-missing-encryption-context-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-missing-encryption-context-exception/-missing-encryption-context-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / MissingEncryptionContextException / MissingEncryptionContextException MissingEncryptionContextException \u00b6 [jvm]\\ fun MissingEncryptionContextException ()","title":"MissingEncryptionContextException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-missing-encryption-context-exception/-missing-encryption-context-exception/#missingencryptioncontextexception","text":"[jvm]\\ fun MissingEncryptionContextException ()","title":"MissingEncryptionContextException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-unexpected-encryption-context-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / UnexpectedEncryptionContextException UnexpectedEncryptionContextException \u00b6 [jvm]\\ class UnexpectedEncryptionContextException : GeneralSecurityException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"UnexpectedEncryptionContextException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-unexpected-encryption-context-exception/#unexpectedencryptioncontextexception","text":"[jvm]\\ class UnexpectedEncryptionContextException : GeneralSecurityException","title":"UnexpectedEncryptionContextException"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-unexpected-encryption-context-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-unexpected-encryption-context-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-unexpected-encryption-context-exception/-unexpected-encryption-context-exception/","text":"// misk-crypto / misk.crypto / CiphertextFormat / UnexpectedEncryptionContextException / UnexpectedEncryptionContextException UnexpectedEncryptionContextException \u00b6 [jvm]\\ fun UnexpectedEncryptionContextException ()","title":"UnexpectedEncryptionContextException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-ciphertext-format/-unexpected-encryption-context-exception/-unexpected-encryption-context-exception/#unexpectedencryptioncontextexception","text":"[jvm]\\ fun UnexpectedEncryptionContextException ()","title":"UnexpectedEncryptionContextException"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/","text":"// misk-crypto / misk.crypto / CryptoConfig CryptoConfig \u00b6 [jvm]\\ data class CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >?) : Config Main configuration object representing to be used in the app. Constructors \u00b6 CryptoConfig [jvm] fun CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >? = null) Properties \u00b6 Name Summary external_data_keys [jvm] val external_data_keys : Map < KeyAlias , KeyType >? = null The key references (map of alias to type) of keys we want to use that are loaded from an external key source, such as an S3 bucket. keys [jvm] val keys : List < Key >? kms_uri [jvm] val kms_uri : String The KMS\u2019 key URI. For GCP users that may look like: gcp-kms://projects/<project>/locations/<location>/keyRings/<keyRing>/cryptoKeys/<key> For AWS users the Key URI looks like: aws-kms://arn:aws:kms:<region>:<account-id>:key/<key-id>","title":"CryptoConfig - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/#cryptoconfig","text":"[jvm]\\ data class CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >?) : Config Main configuration object representing to be used in the app.","title":"CryptoConfig"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/#constructors","text":"CryptoConfig [jvm] fun CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >? = null)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/#properties","text":"Name Summary external_data_keys [jvm] val external_data_keys : Map < KeyAlias , KeyType >? = null The key references (map of alias to type) of keys we want to use that are loaded from an external key source, such as an S3 bucket. keys [jvm] val keys : List < Key >? kms_uri [jvm] val kms_uri : String The KMS\u2019 key URI. For GCP users that may look like: gcp-kms://projects/<project>/locations/<location>/keyRings/<keyRing>/cryptoKeys/<key> For AWS users the Key URI looks like: aws-kms://arn:aws:kms:<region>:<account-id>:key/<key-id>","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/-crypto-config/","text":"// misk-crypto / misk.crypto / CryptoConfig / CryptoConfig CryptoConfig \u00b6 [jvm]\\ fun CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >? = null)","title":"CryptoConfig - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/-crypto-config/#cryptoconfig","text":"[jvm]\\ fun CryptoConfig (keys: List < Key >?, kms_uri: String , external_data_keys: Map < KeyAlias , KeyType >? = null)","title":"CryptoConfig"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/external_data_keys/","text":"// misk-crypto / misk.crypto / CryptoConfig / external_data_keys external_data_keys \u00b6 [jvm]\\ val external_data_keys : Map < KeyAlias , KeyType >? = null The key references (map of alias to type) of keys we want to use that are loaded from an external key source, such as an S3 bucket.","title":"external_data_keys - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/external_data_keys/#external_data_keys","text":"[jvm]\\ val external_data_keys : Map < KeyAlias , KeyType >? = null The key references (map of alias to type) of keys we want to use that are loaded from an external key source, such as an S3 bucket.","title":"external_data_keys"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/keys/","text":"// misk-crypto / misk.crypto / CryptoConfig / keys keys \u00b6 [jvm]\\ val keys : List < Key >?","title":"keys - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/keys/#keys","text":"[jvm]\\ val keys : List < Key >?","title":"keys"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/kms_uri/","text":"// misk-crypto / misk.crypto / CryptoConfig / kms_uri kms_uri \u00b6 [jvm]\\ val kms_uri : String The KMS\u2019 key URI. For GCP users that may look like: gcp-kms://projects/<project>/locations/<location>/keyRings/<keyRing>/cryptoKeys/<key> For AWS users the Key URI looks like: aws-kms://arn:aws:kms:<region>:<account-id>:key/<key-id>","title":"kms_uri - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-config/kms_uri/#kms_uri","text":"[jvm]\\ val kms_uri : String The KMS\u2019 key URI. For GCP users that may look like: gcp-kms://projects/<project>/locations/<location>/keyRings/<keyRing>/cryptoKeys/<key> For AWS users the Key URI looks like: aws-kms://arn:aws:kms:<region>:<account-id>:key/<key-id>","title":"kms_uri"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-module/","text":"// misk-crypto / misk.crypto / CryptoModule CryptoModule \u00b6 [jvm]\\ class CryptoModule (config: CryptoConfig ) : KAbstractModule Configures and registers the keys listed in the configuration file. Each key is read, decrypted, and then bound via Google Guice and added to a MappedKeyManager . Constructors \u00b6 CryptoModule [jvm] fun CryptoModule (config: CryptoConfig ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"CryptoModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-module/#cryptomodule","text":"[jvm]\\ class CryptoModule (config: CryptoConfig ) : KAbstractModule Configures and registers the keys listed in the configuration file. Each key is read, decrypted, and then bound via Google Guice and added to a MappedKeyManager .","title":"CryptoModule"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-module/#constructors","text":"CryptoModule [jvm] fun CryptoModule (config: CryptoConfig )","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-module/-crypto-module/","text":"// misk-crypto / misk.crypto / CryptoModule / CryptoModule CryptoModule \u00b6 [jvm]\\ fun CryptoModule (config: CryptoConfig )","title":"CryptoModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-module/-crypto-module/#cryptomodule","text":"[jvm]\\ fun CryptoModule (config: CryptoConfig )","title":"CryptoModule"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-test-module/","text":"// misk-crypto / misk.crypto / CryptoTestModule CryptoTestModule \u00b6 [jvm]\\ class CryptoTestModule (config: CryptoConfig ?) : KAbstractModule This module should be used for testing purposes only. It generates random keys for each key name specified in the configuration and uses FakeKmsClient instead of a real KMS service. This module will read the exact same configuration files as the real application, but will not use the key material specified in the configuration. Instead, it\u2019ll generate a random keyset handle for each named key. Constructors \u00b6 CryptoTestModule [jvm] fun CryptoTestModule (config: CryptoConfig ? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"CryptoTestModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-test-module/#cryptotestmodule","text":"[jvm]\\ class CryptoTestModule (config: CryptoConfig ?) : KAbstractModule This module should be used for testing purposes only. It generates random keys for each key name specified in the configuration and uses FakeKmsClient instead of a real KMS service. This module will read the exact same configuration files as the real application, but will not use the key material specified in the configuration. Instead, it\u2019ll generate a random keyset handle for each named key.","title":"CryptoTestModule"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-test-module/#constructors","text":"CryptoTestModule [jvm] fun CryptoTestModule (config: CryptoConfig ? = null)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-test-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-test-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-test-module/-crypto-test-module/","text":"// misk-crypto / misk.crypto / CryptoTestModule / CryptoTestModule CryptoTestModule \u00b6 [jvm]\\ fun CryptoTestModule (config: CryptoConfig ? = null)","title":"CryptoTestModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-crypto-test-module/-crypto-test-module/#cryptotestmodule","text":"[jvm]\\ fun CryptoTestModule (config: CryptoConfig ? = null)","title":"CryptoTestModule"},{"location":"0.x/misk-crypto/misk.crypto/-deterministic-aead-key-manager/","text":"// misk-crypto / misk.crypto / DeterministicAeadKeyManager DeterministicAeadKeyManager \u00b6 [jvm]\\ @Singleton class DeterministicAeadKeyManager : MappedKeyManager <DeterministicAead> Holds a map of every DeterministicAead key name to its primitive listed in the configuration for this app. Users may use this object to obtain an DeterministicAead dynamically: val myKey: DeterministicAead = deterministicAeadKeyManager[\u201cmyKey\u201d] Note that DeterministicAead objects do not provide secrecy to the same level as AEAD do, since multiple plaintexts encrypted with the same key will produce identical ciphertext. This behavior is desirable when querying data via its ciphertext (i.e. equality will hold), but an attacker can detect repeated plaintexts. Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): DeterministicAead","title":"DeterministicAeadKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-deterministic-aead-key-manager/#deterministicaeadkeymanager","text":"[jvm]\\ @Singleton class DeterministicAeadKeyManager : MappedKeyManager <DeterministicAead> Holds a map of every DeterministicAead key name to its primitive listed in the configuration for this app. Users may use this object to obtain an DeterministicAead dynamically: val myKey: DeterministicAead = deterministicAeadKeyManager[\u201cmyKey\u201d] Note that DeterministicAead objects do not provide secrecy to the same level as AEAD do, since multiple plaintexts encrypted with the same key will produce identical ciphertext. This behavior is desirable when querying data via its ciphertext (i.e. equality will hold), but an attacker can detect repeated plaintexts.","title":"DeterministicAeadKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-deterministic-aead-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): DeterministicAead","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/","text":"// misk-crypto / misk.crypto / DigitalSignature DigitalSignature \u00b6 [jvm]\\ data class DigitalSignature (signer: PublicKeySign, verifier: PublicKeyVerify) Properties \u00b6 Name Summary signer [jvm] val signer : PublicKeySign verifier [jvm] val verifier : PublicKeyVerify","title":"DigitalSignature - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/#digitalsignature","text":"[jvm]\\ data class DigitalSignature (signer: PublicKeySign, verifier: PublicKeyVerify)","title":"DigitalSignature"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/#properties","text":"Name Summary signer [jvm] val signer : PublicKeySign verifier [jvm] val verifier : PublicKeyVerify","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/-digital-signature/","text":"// misk-crypto / misk.crypto / DigitalSignature / DigitalSignature DigitalSignature \u00b6 [jvm]\\ fun DigitalSignature (signer: PublicKeySign, verifier: PublicKeyVerify)","title":"DigitalSignature - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/-digital-signature/#digitalsignature","text":"[jvm]\\ fun DigitalSignature (signer: PublicKeySign, verifier: PublicKeyVerify)","title":"DigitalSignature"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/signer/","text":"// misk-crypto / misk.crypto / DigitalSignature / signer signer \u00b6 [jvm]\\ val signer : PublicKeySign","title":"signer - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/signer/#signer","text":"[jvm]\\ val signer : PublicKeySign","title":"signer"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/verifier/","text":"// misk-crypto / misk.crypto / DigitalSignature / verifier verifier \u00b6 [jvm]\\ val verifier : PublicKeyVerify","title":"verifier - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature/verifier/#verifier","text":"[jvm]\\ val verifier : PublicKeyVerify","title":"verifier"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature-key-manager/","text":"// misk-crypto / misk.crypto / DigitalSignatureKeyManager DigitalSignatureKeyManager \u00b6 [jvm]\\ @Singleton class DigitalSignatureKeyManager : MappedKeyManager < DigitalSignature > Holds a map of every key name to its corresponding PublicKeySign and PublicKeyVerify primitives. Users may use this class to obtain a PublicKeySign to sign data or PublicKeyVerify to verify the integrity of a message dynamically: val signer: PublicKeySign = keyManager.getSigner(\u201cmyDigitalSignatureKey\u201d)\\ val verifier: PublicKeyVerify = keyManager.getVerifier(\u201cmySigitalSignatureKey\u201d)\\ val signature = signer.sign(data)\\ verifier.verify(signature, data) Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): DigitalSignature getSigner [jvm] fun getSigner (name: String ): PublicKeySign getVerifier [jvm] fun getVerifier (name: String ): PublicKeyVerify","title":"DigitalSignatureKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature-key-manager/#digitalsignaturekeymanager","text":"[jvm]\\ @Singleton class DigitalSignatureKeyManager : MappedKeyManager < DigitalSignature > Holds a map of every key name to its corresponding PublicKeySign and PublicKeyVerify primitives. Users may use this class to obtain a PublicKeySign to sign data or PublicKeyVerify to verify the integrity of a message dynamically: val signer: PublicKeySign = keyManager.getSigner(\u201cmyDigitalSignatureKey\u201d)\\ val verifier: PublicKeyVerify = keyManager.getVerifier(\u201cmySigitalSignatureKey\u201d)\\ val signature = signer.sign(data)\\ verifier.verify(signature, data)","title":"DigitalSignatureKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): DigitalSignature getSigner [jvm] fun getSigner (name: String ): PublicKeySign getVerifier [jvm] fun getVerifier (name: String ): PublicKeyVerify","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature-key-manager/get-signer/","text":"// misk-crypto / misk.crypto / DigitalSignatureKeyManager / getSigner getSigner \u00b6 [jvm]\\ fun getSigner (name: String ): PublicKeySign","title":"getSigner - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature-key-manager/get-signer/#getsigner","text":"[jvm]\\ fun getSigner (name: String ): PublicKeySign","title":"getSigner"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature-key-manager/get-verifier/","text":"// misk-crypto / misk.crypto / DigitalSignatureKeyManager / getVerifier getVerifier \u00b6 [jvm]\\ fun getVerifier (name: String ): PublicKeyVerify","title":"getVerifier - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-digital-signature-key-manager/get-verifier/#getverifier","text":"[jvm]\\ fun getVerifier (name: String ): PublicKeyVerify","title":"getVerifier"},{"location":"0.x/misk-crypto/misk.crypto/-external-data-keys/","text":"// misk-crypto / misk.crypto / ExternalDataKeys ExternalDataKeys \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ExternalDataKeys This annotation is used to decorate the collection of external data keys used in the service. External data keys are defined in the configuration as a Map < KeyAlias , KeyType >. This annotation can be useful for cases where one would need access to all external data keys available to the service. Constructors \u00b6 ExternalDataKeys [jvm] fun ExternalDataKeys ()","title":"ExternalDataKeys - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-data-keys/#externaldatakeys","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ExternalDataKeys This annotation is used to decorate the collection of external data keys used in the service. External data keys are defined in the configuration as a Map < KeyAlias , KeyType >. This annotation can be useful for cases where one would need access to all external data keys available to the service.","title":"ExternalDataKeys"},{"location":"0.x/misk-crypto/misk.crypto/-external-data-keys/#constructors","text":"ExternalDataKeys [jvm] fun ExternalDataKeys ()","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-external-data-keys/-external-data-keys/","text":"// misk-crypto / misk.crypto / ExternalDataKeys / ExternalDataKeys ExternalDataKeys \u00b6 [jvm]\\ fun ExternalDataKeys ()","title":"ExternalDataKeys - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-data-keys/-external-data-keys/#externaldatakeys","text":"[jvm]\\ fun ExternalDataKeys ()","title":"ExternalDataKeys"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-manager-exception/","text":"// misk-crypto / misk.crypto / ExternalKeyManagerException ExternalKeyManagerException \u00b6 [jvm]\\ class ExternalKeyManagerException (message: String ) : IOException Thrown on creation if external key does not exist. Constructors \u00b6 ExternalKeyManagerException [jvm] fun ExternalKeyManagerException (message: String ) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"ExternalKeyManagerException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-manager-exception/#externalkeymanagerexception","text":"[jvm]\\ class ExternalKeyManagerException (message: String ) : IOException Thrown on creation if external key does not exist.","title":"ExternalKeyManagerException"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-manager-exception/#constructors","text":"ExternalKeyManagerException [jvm] fun ExternalKeyManagerException (message: String )","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-manager-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-manager-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-manager-exception/-external-key-manager-exception/","text":"// misk-crypto / misk.crypto / ExternalKeyManagerException / ExternalKeyManagerException ExternalKeyManagerException \u00b6 [jvm]\\ fun ExternalKeyManagerException (message: String )","title":"ExternalKeyManagerException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-manager-exception/-external-key-manager-exception/#externalkeymanagerexception","text":"[jvm]\\ fun ExternalKeyManagerException (message: String )","title":"ExternalKeyManagerException"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/","text":"// misk-crypto / misk.crypto / ExternalKeyResolver ExternalKeyResolver \u00b6 [jvm]\\ class ExternalKeyResolver @Injectconstructor(allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >) : KeyResolver ExternalKeyResolver implements an KeyResolver that fetches Tink keysets from an external source, such as an S3 bucket. If multiple sources are registered (by binding implementations of KeyResolver ), the first one to contain the key (via ExternalKeySource.keyExists ) is the key that is used. If a key is not found, an ExternalKeyManagerException exception is raised. Constructors \u00b6 ExternalKeyResolver [jvm] @Inject fun ExternalKeyResolver (allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary getKeyByAlias [jvm] open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias. Properties \u00b6 Name Summary allKeyAliases [jvm] open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"ExternalKeyResolver - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/#externalkeyresolver","text":"[jvm]\\ class ExternalKeyResolver @Injectconstructor(allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >) : KeyResolver ExternalKeyResolver implements an KeyResolver that fetches Tink keysets from an external source, such as an S3 bucket. If multiple sources are registered (by binding implementations of KeyResolver ), the first one to contain the key (via ExternalKeySource.keyExists ) is the key that is used. If a key is not found, an ExternalKeyManagerException exception is raised.","title":"ExternalKeyResolver"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/#constructors","text":"ExternalKeyResolver [jvm] @Inject fun ExternalKeyResolver (allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/#functions","text":"Name Summary getKeyByAlias [jvm] open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/#properties","text":"Name Summary allKeyAliases [jvm] open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/-external-key-resolver/","text":"// misk-crypto / misk.crypto / ExternalKeyResolver / ExternalKeyResolver ExternalKeyResolver \u00b6 [jvm]\\ @Inject fun ExternalKeyResolver (allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >)","title":"ExternalKeyResolver - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/-external-key-resolver/#externalkeyresolver","text":"[jvm]\\ @Inject fun ExternalKeyResolver (allKeyAliases: Map < KeyAlias , KeyType >, externalKeySources: Set < ExternalKeySource >)","title":"ExternalKeyResolver"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/all-key-aliases/","text":"// misk-crypto / misk.crypto / ExternalKeyResolver / allKeyAliases allKeyAliases \u00b6 [jvm]\\ open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/all-key-aliases/#allkeyaliases","text":"[jvm]\\ open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/get-key-by-alias/","text":"// misk-crypto / misk.crypto / ExternalKeyResolver / getKeyByAlias getKeyByAlias \u00b6 [jvm]\\ open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/get-key-by-alias/#getkeybyalias","text":"[jvm]\\ open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/-companion/","text":"// misk-crypto / misk.crypto / ExternalKeyResolver / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-resolver/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/","text":"// misk-crypto / misk.crypto / ExternalKeySource ExternalKeySource \u00b6 [jvm]\\ interface ExternalKeySource Implement an ExternalKeySource to provide Tink keysets from an external location, such as an S3 bucket or an NFS share. Functions \u00b6 Name Summary getKey [jvm] abstract fun getKey (alias: KeyAlias ): Key ? Return a Key from an external key source. keyExists [jvm] abstract fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source. Inheritors \u00b6 Name S3KeySource","title":"ExternalKeySource - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/#externalkeysource","text":"[jvm]\\ interface ExternalKeySource Implement an ExternalKeySource to provide Tink keysets from an external location, such as an S3 bucket or an NFS share.","title":"ExternalKeySource"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/#functions","text":"Name Summary getKey [jvm] abstract fun getKey (alias: KeyAlias ): Key ? Return a Key from an external key source. keyExists [jvm] abstract fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/#inheritors","text":"Name S3KeySource","title":"Inheritors"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/get-key/","text":"// misk-crypto / misk.crypto / ExternalKeySource / getKey getKey \u00b6 [jvm]\\ abstract fun getKey (alias: KeyAlias ): Key ? Return a Key from an external key source.","title":"getKey - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/get-key/#getkey","text":"[jvm]\\ abstract fun getKey (alias: KeyAlias ): Key ? Return a Key from an external key source.","title":"getKey"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/key-exists/","text":"// misk-crypto / misk.crypto / ExternalKeySource / keyExists keyExists \u00b6 [jvm]\\ abstract fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source.","title":"keyExists - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-external-key-source/key-exists/#keyexists","text":"[jvm]\\ abstract fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source.","title":"keyExists"},{"location":"0.x/misk-crypto/misk.crypto/-fake-external-key-manager-module/","text":"// misk-crypto / misk.crypto / FakeExternalKeyManagerModule FakeExternalKeyManagerModule \u00b6 [jvm]\\ class FakeExternalKeyManagerModule (config: CryptoConfig ) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeExternalKeyManagerModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-fake-external-key-manager-module/#fakeexternalkeymanagermodule","text":"[jvm]\\ class FakeExternalKeyManagerModule (config: CryptoConfig ) : KAbstractModule","title":"FakeExternalKeyManagerModule"},{"location":"0.x/misk-crypto/misk.crypto/-fake-external-key-manager-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-fake-external-key-manager-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-fake-external-key-manager-module/-fake-external-key-manager-module/","text":"// misk-crypto / misk.crypto / FakeExternalKeyManagerModule / FakeExternalKeyManagerModule FakeExternalKeyManagerModule \u00b6 [jvm]\\ fun FakeExternalKeyManagerModule (config: CryptoConfig )","title":"FakeExternalKeyManagerModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-fake-external-key-manager-module/-fake-external-key-manager-module/#fakeexternalkeymanagermodule","text":"[jvm]\\ fun FakeExternalKeyManagerModule (config: CryptoConfig )","title":"FakeExternalKeyManagerModule"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/","text":"// misk-crypto / misk.crypto / FakeKeyResolver FakeKeyResolver \u00b6 [jvm]\\ class FakeKeyResolver : KeyResolver Constructors \u00b6 FakeKeyResolver [jvm] fun FakeKeyResolver (aliases: Map < KeyAlias , KeyType >) FakeKeyResolver [jvm] fun FakeKeyResolver (rawKeys: List < Key >) Functions \u00b6 Name Summary getKeyByAlias [jvm] open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias. Properties \u00b6 Name Summary allKeyAliases [jvm] open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"FakeKeyResolver - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/#fakekeyresolver","text":"[jvm]\\ class FakeKeyResolver : KeyResolver","title":"FakeKeyResolver"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/#constructors","text":"FakeKeyResolver [jvm] fun FakeKeyResolver (aliases: Map < KeyAlias , KeyType >) FakeKeyResolver [jvm] fun FakeKeyResolver (rawKeys: List < Key >)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/#functions","text":"Name Summary getKeyByAlias [jvm] open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/#properties","text":"Name Summary allKeyAliases [jvm] open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/-fake-key-resolver/","text":"// misk-crypto / misk.crypto / FakeKeyResolver / FakeKeyResolver FakeKeyResolver \u00b6 [jvm]\\ fun FakeKeyResolver (aliases: Map < KeyAlias , KeyType >) fun FakeKeyResolver (rawKeys: List < Key >)","title":"FakeKeyResolver - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/-fake-key-resolver/#fakekeyresolver","text":"[jvm]\\ fun FakeKeyResolver (aliases: Map < KeyAlias , KeyType >) fun FakeKeyResolver (rawKeys: List < Key >)","title":"FakeKeyResolver"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/all-key-aliases/","text":"// misk-crypto / misk.crypto / FakeKeyResolver / allKeyAliases allKeyAliases \u00b6 [jvm]\\ open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/all-key-aliases/#allkeyaliases","text":"[jvm]\\ open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/get-key-by-alias/","text":"// misk-crypto / misk.crypto / FakeKeyResolver / getKeyByAlias getKeyByAlias \u00b6 [jvm]\\ open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-fake-key-resolver/get-key-by-alias/#getkeybyalias","text":"[jvm]\\ open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/","text":"// misk-crypto / misk.crypto / GcpKmsClientModule GcpKmsClientModule \u00b6 [jvm]\\ class GcpKmsClientModule (credentialsPath: String ?) : KAbstractModule GCP specific KMS client module. Uses a file path to a JSON credentials file to initialize the client. If no file is provided, tries to initialize the client using the default credentials path as specified in GcpKmsClient.withDefaultCredentials Constructors \u00b6 GcpKmsClientModule [jvm] fun GcpKmsClientModule (credentialsPath: String ? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getKmsClient [jvm] @Provides fun getKmsClient (): KmsClient getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"GcpKmsClientModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/#gcpkmsclientmodule","text":"[jvm]\\ class GcpKmsClientModule (credentialsPath: String ?) : KAbstractModule GCP specific KMS client module. Uses a file path to a JSON credentials file to initialize the client. If no file is provided, tries to initialize the client using the default credentials path as specified in GcpKmsClient.withDefaultCredentials","title":"GcpKmsClientModule"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/#constructors","text":"GcpKmsClientModule [jvm] fun GcpKmsClientModule (credentialsPath: String ? = null)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getKmsClient [jvm] @Provides fun getKmsClient (): KmsClient getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/-gcp-kms-client-module/","text":"// misk-crypto / misk.crypto / GcpKmsClientModule / GcpKmsClientModule GcpKmsClientModule \u00b6 [jvm]\\ fun GcpKmsClientModule (credentialsPath: String ? = null)","title":"GcpKmsClientModule - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/-gcp-kms-client-module/#gcpkmsclientmodule","text":"[jvm]\\ fun GcpKmsClientModule (credentialsPath: String ? = null)","title":"GcpKmsClientModule"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/get-kms-client/","text":"// misk-crypto / misk.crypto / GcpKmsClientModule / getKmsClient getKmsClient \u00b6 [jvm]\\ @Provides fun getKmsClient (): KmsClient","title":"getKmsClient - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-gcp-kms-client-module/get-kms-client/#getkmsclient","text":"[jvm]\\ @Provides fun getKmsClient (): KmsClient","title":"getKmsClient"},{"location":"0.x/misk-crypto/misk.crypto/-hybrid-decrypt-key-manager/","text":"// misk-crypto / misk.crypto / HybridDecryptKeyManager HybridDecryptKeyManager \u00b6 [jvm]\\ @Singleton class HybridDecryptKeyManager : MappedKeyManager <HybridDecrypt> Holds a map of every HybridDecrypt key name to its corresponding primitive listed in the configuration for this app. Users may this class to obtain a HybridDecrypt object dynamically: val hybridDecrypt: HybridDecrypt = hybridKeyManager[\u201cmyHybridKey\u201d] Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): HybridDecrypt","title":"HybridDecryptKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-hybrid-decrypt-key-manager/#hybriddecryptkeymanager","text":"[jvm]\\ @Singleton class HybridDecryptKeyManager : MappedKeyManager <HybridDecrypt> Holds a map of every HybridDecrypt key name to its corresponding primitive listed in the configuration for this app. Users may this class to obtain a HybridDecrypt object dynamically: val hybridDecrypt: HybridDecrypt = hybridKeyManager[\u201cmyHybridKey\u201d]","title":"HybridDecryptKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-hybrid-decrypt-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): HybridDecrypt","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-hybrid-encrypt-key-manager/","text":"// misk-crypto / misk.crypto / HybridEncryptKeyManager HybridEncryptKeyManager \u00b6 [jvm]\\ @Singleton class HybridEncryptKeyManager : MappedKeyManager <HybridEncrypt> Holds a map of every HybridEncrypt key name to its corresponding primitive listed in the configuration for this app. Users may use this class to obtain a HybridEncrypt object dynamically: val hybridEncrypt: HybridEncrypt = hybridKeyManager[\u201cmyHybridKey\u201d] Note: Hybrid encryption is intentionally divided to 2 separate key managers, HybridEncryptKeyManager and HybridDecryptKeyManager , so that the public portion of the keyset could be exported to other services. This configuration helps achieve the goal of allowing some services to encrypt only and other services to both encrypt and decrypt. Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): HybridEncrypt","title":"HybridEncryptKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-hybrid-encrypt-key-manager/#hybridencryptkeymanager","text":"[jvm]\\ @Singleton class HybridEncryptKeyManager : MappedKeyManager <HybridEncrypt> Holds a map of every HybridEncrypt key name to its corresponding primitive listed in the configuration for this app. Users may use this class to obtain a HybridEncrypt object dynamically: val hybridEncrypt: HybridEncrypt = hybridKeyManager[\u201cmyHybridKey\u201d] Note: Hybrid encryption is intentionally divided to 2 separate key managers, HybridEncryptKeyManager and HybridDecryptKeyManager , so that the public portion of the keyset could be exported to other services. This configuration helps achieve the goal of allowing some services to encrypt only and other services to both encrypt and decrypt.","title":"HybridEncryptKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-hybrid-encrypt-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): HybridEncrypt","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-key/","text":"// misk-crypto / misk.crypto / Key Key \u00b6 [jvm]\\ data class Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >?, kms_uri: String ?) : Config Describes a specific key Constructors \u00b6 Key [jvm] fun Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >? = null, kms_uri: String ? = null) Properties \u00b6 Name Summary encrypted_key [jvm] val encrypted_key : Secret< String >? = null In config it\u2019s the path to a file containing the encrypted key material in Tink\u2019s JSON format. However MiskConfig will read the contents of the file, so this variable is the file\u2019s contents. key_name [jvm] val key_name : String Descriptive short string for the key. This name will be used when injecting the corresponding key object in the app, like: key_type [jvm] val key_type : KeyType Type of Tink primitive to initialize. kms_uri [jvm] val kms_uri : String ? = null A key-specific, and region-specific KMS uri that was used to encrypt this key.","title":"Key - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key/#key","text":"[jvm]\\ data class Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >?, kms_uri: String ?) : Config Describes a specific key","title":"Key"},{"location":"0.x/misk-crypto/misk.crypto/-key/#constructors","text":"Key [jvm] fun Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >? = null, kms_uri: String ? = null)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-key/#properties","text":"Name Summary encrypted_key [jvm] val encrypted_key : Secret< String >? = null In config it\u2019s the path to a file containing the encrypted key material in Tink\u2019s JSON format. However MiskConfig will read the contents of the file, so this variable is the file\u2019s contents. key_name [jvm] val key_name : String Descriptive short string for the key. This name will be used when injecting the corresponding key object in the app, like: key_type [jvm] val key_type : KeyType Type of Tink primitive to initialize. kms_uri [jvm] val kms_uri : String ? = null A key-specific, and region-specific KMS uri that was used to encrypt this key.","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key/-key/","text":"// misk-crypto / misk.crypto / Key / Key Key \u00b6 [jvm]\\ fun Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >? = null, kms_uri: String ? = null)","title":"Key - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key/-key/#key","text":"[jvm]\\ fun Key (key_name: String , key_type: KeyType , encrypted_key: Secret< String >? = null, kms_uri: String ? = null)","title":"Key"},{"location":"0.x/misk-crypto/misk.crypto/-key/encrypted_key/","text":"// misk-crypto / misk.crypto / Key / encrypted_key encrypted_key \u00b6 [jvm]\\ val encrypted_key : Secret< String >? = null In config it\u2019s the path to a file containing the encrypted key material in Tink\u2019s JSON format. However MiskConfig will read the contents of the file, so this variable is the file\u2019s contents.","title":"encrypted_key - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key/encrypted_key/#encrypted_key","text":"[jvm]\\ val encrypted_key : Secret< String >? = null In config it\u2019s the path to a file containing the encrypted key material in Tink\u2019s JSON format. However MiskConfig will read the contents of the file, so this variable is the file\u2019s contents.","title":"encrypted_key"},{"location":"0.x/misk-crypto/misk.crypto/-key/key_name/","text":"// misk-crypto / misk.crypto / Key / key_name key_name \u00b6 [jvm]\\ val key_name : String Descriptive short string for the key. This name will be used when injecting the corresponding key object in the app, like: @Inject @Named(\u201ckeyName\u201d) lateinit var myKey: Aead","title":"key_name - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key/key_name/#key_name","text":"[jvm]\\ val key_name : String Descriptive short string for the key. This name will be used when injecting the corresponding key object in the app, like: @Inject @Named(\u201ckeyName\u201d) lateinit var myKey: Aead","title":"key_name"},{"location":"0.x/misk-crypto/misk.crypto/-key/key_type/","text":"// misk-crypto / misk.crypto / Key / key_type key_type \u00b6 [jvm]\\ val key_type : KeyType Type of Tink primitive to initialize.","title":"key_type - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key/key_type/#key_type","text":"[jvm]\\ val key_type : KeyType Type of Tink primitive to initialize.","title":"key_type"},{"location":"0.x/misk-crypto/misk.crypto/-key/kms_uri/","text":"// misk-crypto / misk.crypto / Key / kms_uri kms_uri \u00b6 [jvm]\\ val kms_uri : String ? = null A key-specific, and region-specific KMS uri that was used to encrypt this key.","title":"kms_uri - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key/kms_uri/#kms_uri","text":"[jvm]\\ val kms_uri : String ? = null A key-specific, and region-specific KMS uri that was used to encrypt this key.","title":"kms_uri"},{"location":"0.x/misk-crypto/misk.crypto/-key-not-found-exception/","text":"// misk-crypto / misk.crypto / KeyNotFoundException KeyNotFoundException \u00b6 [jvm]\\ class KeyNotFoundException (message: String ?, cause: Throwable ?) : GeneralSecurityException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"KeyNotFoundException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-not-found-exception/#keynotfoundexception","text":"[jvm]\\ class KeyNotFoundException (message: String ?, cause: Throwable ?) : GeneralSecurityException","title":"KeyNotFoundException"},{"location":"0.x/misk-crypto/misk.crypto/-key-not-found-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-key-not-found-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-not-found-exception/-key-not-found-exception/","text":"// misk-crypto / misk.crypto / KeyNotFoundException / KeyNotFoundException KeyNotFoundException \u00b6 [jvm]\\ fun KeyNotFoundException (message: String ? = null, cause: Throwable ? = null)","title":"KeyNotFoundException - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-not-found-exception/-key-not-found-exception/#keynotfoundexception","text":"[jvm]\\ fun KeyNotFoundException (message: String ? = null, cause: Throwable ? = null)","title":"KeyNotFoundException"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/","text":"// misk-crypto / misk.crypto / KeyReader KeyReader \u00b6 [jvm]\\ open class KeyReader Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary readKey [jvm] fun readKey (alias: KeyAlias ): KeysetHandle Properties \u00b6 Name Summary keySources [jvm] @Inject lateinit var keySources : Set < KeyResolver > kmsClient [jvm] @Inject lateinit var kmsClient : KmsClient","title":"KeyReader - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/#keyreader","text":"[jvm]\\ open class KeyReader","title":"KeyReader"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/#functions","text":"Name Summary readKey [jvm] fun readKey (alias: KeyAlias ): KeysetHandle","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/#properties","text":"Name Summary keySources [jvm] @Inject lateinit var keySources : Set < KeyResolver > kmsClient [jvm] @Inject lateinit var kmsClient : KmsClient","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/-key-reader/","text":"// misk-crypto / misk.crypto / KeyReader / KeyReader KeyReader \u00b6 [jvm]\\ fun KeyReader ()","title":"KeyReader - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/-key-reader/#keyreader","text":"[jvm]\\ fun KeyReader ()","title":"KeyReader"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/key-sources/","text":"// misk-crypto / misk.crypto / KeyReader / keySources keySources \u00b6 [jvm]\\ @Inject lateinit var keySources : Set < KeyResolver >","title":"keySources - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/key-sources/#keysources","text":"[jvm]\\ @Inject lateinit var keySources : Set < KeyResolver >","title":"keySources"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/kms-client/","text":"// misk-crypto / misk.crypto / KeyReader / kmsClient kmsClient \u00b6 [jvm]\\ @Inject lateinit var kmsClient : KmsClient","title":"kmsClient - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/kms-client/#kmsclient","text":"[jvm]\\ @Inject lateinit var kmsClient : KmsClient","title":"kmsClient"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/read-key/","text":"// misk-crypto / misk.crypto / KeyReader / readKey readKey \u00b6 [jvm]\\ fun readKey (alias: KeyAlias ): KeysetHandle","title":"readKey - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/read-key/#readkey","text":"[jvm]\\ fun readKey (alias: KeyAlias ): KeysetHandle","title":"readKey"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/-companion/","text":"// misk-crypto / misk.crypto / KeyReader / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary KEK_TEMPLATE [jvm] val KEK_TEMPLATE : KeyTemplate","title":"Companion - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/-companion/#properties","text":"Name Summary KEK_TEMPLATE [jvm] val KEK_TEMPLATE : KeyTemplate","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/-companion/-k-e-k_-t-e-m-p-l-a-t-e/","text":"// misk-crypto / misk.crypto / KeyReader / Companion / KEK_TEMPLATE KEK_TEMPLATE \u00b6 [jvm]\\ val KEK_TEMPLATE : KeyTemplate","title":"KEK_TEMPLATE - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-reader/-companion/-k-e-k_-t-e-m-p-l-a-t-e/#kek_template","text":"[jvm]\\ val KEK_TEMPLATE : KeyTemplate","title":"KEK_TEMPLATE"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/","text":"// misk-crypto / misk.crypto / KeyResolver KeyResolver \u00b6 [jvm]\\ interface KeyResolver KeyResolver provides an interface to access keys indexed by aliases. Optionally, callers can register a callback to be invoked when a key is updated. Functions \u00b6 Name Summary getKeyByAlias [jvm] abstract fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias. Properties \u00b6 Name Summary allKeyAliases [jvm] abstract val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes. Inheritors \u00b6 Name ExternalKeyResolver FakeKeyResolver LocalConfigKeyResolver","title":"KeyResolver - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/#keyresolver","text":"[jvm]\\ interface KeyResolver KeyResolver provides an interface to access keys indexed by aliases. Optionally, callers can register a callback to be invoked when a key is updated.","title":"KeyResolver"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/#functions","text":"Name Summary getKeyByAlias [jvm] abstract fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/#properties","text":"Name Summary allKeyAliases [jvm] abstract val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/#inheritors","text":"Name ExternalKeyResolver FakeKeyResolver LocalConfigKeyResolver","title":"Inheritors"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/all-key-aliases/","text":"// misk-crypto / misk.crypto / KeyResolver / allKeyAliases allKeyAliases \u00b6 [jvm]\\ abstract val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/all-key-aliases/#allkeyaliases","text":"[jvm]\\ abstract val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/get-key-by-alias/","text":"// misk-crypto / misk.crypto / KeyResolver / getKeyByAlias getKeyByAlias \u00b6 [jvm]\\ abstract fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-resolver/get-key-by-alias/#getkeybyalias","text":"[jvm]\\ abstract fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/","text":"// misk-crypto / misk.crypto / KeyType KeyType \u00b6 [jvm]\\ enum KeyType : Enum < KeyType > Supported key types Entries \u00b6 PGP_ENCRYPT [jvm] PGP_ENCRYPT () PGP_DECRYPT [jvm] PGP_DECRYPT () STREAMING_AEAD [jvm] STREAMING_AEAD () HYBRID_ENCRYPT_DECRYPT [jvm] HYBRID_ENCRYPT_DECRYPT () HYBRID_ENCRYPT [jvm] HYBRID_ENCRYPT () DIGITAL_SIGNATURE [jvm] DIGITAL_SIGNATURE () MAC [jvm] MAC () DAEAD [jvm] DAEAD () AEAD [jvm] AEAD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"KeyType - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/#keytype","text":"[jvm]\\ enum KeyType : Enum < KeyType > Supported key types","title":"KeyType"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/#entries","text":"PGP_ENCRYPT [jvm] PGP_ENCRYPT () PGP_DECRYPT [jvm] PGP_DECRYPT () STREAMING_AEAD [jvm] STREAMING_AEAD () HYBRID_ENCRYPT_DECRYPT [jvm] HYBRID_ENCRYPT_DECRYPT () HYBRID_ENCRYPT [jvm] HYBRID_ENCRYPT () DIGITAL_SIGNATURE [jvm] DIGITAL_SIGNATURE () MAC [jvm] MAC () DAEAD [jvm] DAEAD () AEAD [jvm] AEAD ()","title":"Entries"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-a-e-a-d/","text":"// misk-crypto / misk.crypto / KeyType / AEAD AEAD \u00b6 [jvm]\\ AEAD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"AEAD - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-a-e-a-d/#aead","text":"[jvm]\\ AEAD ()","title":"AEAD"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-a-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-d-a-e-a-d/","text":"// misk-crypto / misk.crypto / KeyType / DAEAD DAEAD \u00b6 [jvm]\\ DAEAD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"DAEAD - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-d-a-e-a-d/#daead","text":"[jvm]\\ DAEAD ()","title":"DAEAD"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-d-a-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-d-i-g-i-t-a-l_-s-i-g-n-a-t-u-r-e/","text":"// misk-crypto / misk.crypto / KeyType / DIGITAL_SIGNATURE DIGITAL_SIGNATURE \u00b6 [jvm]\\ DIGITAL_SIGNATURE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"DIGITAL_SIGNATURE - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-d-i-g-i-t-a-l_-s-i-g-n-a-t-u-r-e/#digital_signature","text":"[jvm]\\ DIGITAL_SIGNATURE ()","title":"DIGITAL_SIGNATURE"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-d-i-g-i-t-a-l_-s-i-g-n-a-t-u-r-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-h-y-b-r-i-d_-e-n-c-r-y-p-t/","text":"// misk-crypto / misk.crypto / KeyType / HYBRID_ENCRYPT HYBRID_ENCRYPT \u00b6 [jvm]\\ HYBRID_ENCRYPT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"HYBRID_ENCRYPT - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-h-y-b-r-i-d_-e-n-c-r-y-p-t/#hybrid_encrypt","text":"[jvm]\\ HYBRID_ENCRYPT ()","title":"HYBRID_ENCRYPT"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-h-y-b-r-i-d_-e-n-c-r-y-p-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-h-y-b-r-i-d_-e-n-c-r-y-p-t_-d-e-c-r-y-p-t/","text":"// misk-crypto / misk.crypto / KeyType / HYBRID_ENCRYPT_DECRYPT HYBRID_ENCRYPT_DECRYPT \u00b6 [jvm]\\ HYBRID_ENCRYPT_DECRYPT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"HYBRID_ENCRYPT_DECRYPT - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-h-y-b-r-i-d_-e-n-c-r-y-p-t_-d-e-c-r-y-p-t/#hybrid_encrypt_decrypt","text":"[jvm]\\ HYBRID_ENCRYPT_DECRYPT ()","title":"HYBRID_ENCRYPT_DECRYPT"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-h-y-b-r-i-d_-e-n-c-r-y-p-t_-d-e-c-r-y-p-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-m-a-c/","text":"// misk-crypto / misk.crypto / KeyType / MAC MAC \u00b6 [jvm]\\ MAC () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"MAC - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-m-a-c/#mac","text":"[jvm]\\ MAC ()","title":"MAC"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-m-a-c/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-p-g-p_-d-e-c-r-y-p-t/","text":"// misk-crypto / misk.crypto / KeyType / PGP_DECRYPT PGP_DECRYPT \u00b6 [jvm]\\ PGP_DECRYPT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PGP_DECRYPT - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-p-g-p_-d-e-c-r-y-p-t/#pgp_decrypt","text":"[jvm]\\ PGP_DECRYPT ()","title":"PGP_DECRYPT"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-p-g-p_-d-e-c-r-y-p-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-p-g-p_-e-n-c-r-y-p-t/","text":"// misk-crypto / misk.crypto / KeyType / PGP_ENCRYPT PGP_ENCRYPT \u00b6 [jvm]\\ PGP_ENCRYPT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PGP_ENCRYPT - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-p-g-p_-e-n-c-r-y-p-t/#pgp_encrypt","text":"[jvm]\\ PGP_ENCRYPT ()","title":"PGP_ENCRYPT"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-p-g-p_-e-n-c-r-y-p-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-s-t-r-e-a-m-i-n-g_-a-e-a-d/","text":"// misk-crypto / misk.crypto / KeyType / STREAMING_AEAD STREAMING_AEAD \u00b6 [jvm]\\ STREAMING_AEAD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"STREAMING_AEAD - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-s-t-r-e-a-m-i-n-g_-a-e-a-d/#streaming_aead","text":"[jvm]\\ STREAMING_AEAD ()","title":"STREAMING_AEAD"},{"location":"0.x/misk-crypto/misk.crypto/-key-type/-s-t-r-e-a-m-i-n-g_-a-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/","text":"// misk-crypto / misk.crypto / LocalConfigKeyResolver LocalConfigKeyResolver \u00b6 [jvm]\\ class LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String ) : KeyResolver LocalConfigKeyResolver provides keys that are stored locally and protected by a single KMS key. Constructors \u00b6 LocalConfigKeyResolver [jvm] fun LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String ) Functions \u00b6 Name Summary getKeyByAlias [jvm] open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias. Properties \u00b6 Name Summary allKeyAliases [jvm] open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"LocalConfigKeyResolver - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/#localconfigkeyresolver","text":"[jvm]\\ class LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String ) : KeyResolver LocalConfigKeyResolver provides keys that are stored locally and protected by a single KMS key.","title":"LocalConfigKeyResolver"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/#constructors","text":"LocalConfigKeyResolver [jvm] fun LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String )","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/#functions","text":"Name Summary getKeyByAlias [jvm] open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/#properties","text":"Name Summary allKeyAliases [jvm] open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/-local-config-key-resolver/","text":"// misk-crypto / misk.crypto / LocalConfigKeyResolver / LocalConfigKeyResolver LocalConfigKeyResolver \u00b6 [jvm]\\ fun LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String )","title":"LocalConfigKeyResolver - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/-local-config-key-resolver/#localconfigkeyresolver","text":"[jvm]\\ fun LocalConfigKeyResolver (keys: List < Key >, defaultKmsUri: String )","title":"LocalConfigKeyResolver"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/all-key-aliases/","text":"// misk-crypto / misk.crypto / LocalConfigKeyResolver / allKeyAliases allKeyAliases \u00b6 [jvm]\\ open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/all-key-aliases/#allkeyaliases","text":"[jvm]\\ open override val allKeyAliases : Map < KeyAlias , KeyType > All resolved key aliases and their respective KeyTypes.","title":"allKeyAliases"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/get-key-by-alias/","text":"// misk-crypto / misk.crypto / LocalConfigKeyResolver / getKeyByAlias getKeyByAlias \u00b6 [jvm]\\ open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-local-config-key-resolver/get-key-by-alias/#getkeybyalias","text":"[jvm]\\ open override fun getKeyByAlias (alias: KeyAlias ): Key ? Fetch and return a Key (includes contents, type and a KMS ARN) by its alias.","title":"getKeyByAlias"},{"location":"0.x/misk-crypto/misk.crypto/-mac-key-manager/","text":"// misk-crypto / misk.crypto / MacKeyManager MacKeyManager \u00b6 [jvm]\\ @Singleton class MacKeyManager : MappedKeyManager <Mac> Holds a map of every Mac key name to its primitive listed in the configuration for this app. Users may use this class to obtain a Mac object dynamically: val hmac: Mac = macKeyManager[\u201cmyHmac\u201d] Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): Mac","title":"MacKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-mac-key-manager/#mackeymanager","text":"[jvm]\\ @Singleton class MacKeyManager : MappedKeyManager <Mac> Holds a map of every Mac key name to its primitive listed in the configuration for this app. Users may use this class to obtain a Mac object dynamically: val hmac: Mac = macKeyManager[\u201cmyHmac\u201d]","title":"MacKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-mac-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): Mac","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-mapped-key-manager/","text":"// misk-crypto / misk.crypto / MappedKeyManager MappedKeyManager \u00b6 [jvm]\\ sealed class MappedKeyManager < KeyT > Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): KeyT Inheritors \u00b6 Name AeadKeyManager DeterministicAeadKeyManager MacKeyManager DigitalSignatureKeyManager HybridEncryptKeyManager HybridDecryptKeyManager StreamingAeadKeyManager PgpEncrypterManager PgpDecrypterManager","title":"MappedKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-mapped-key-manager/#mappedkeymanager","text":"[jvm]\\ sealed class MappedKeyManager < KeyT >","title":"MappedKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-mapped-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): KeyT","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-mapped-key-manager/#inheritors","text":"Name AeadKeyManager DeterministicAeadKeyManager MacKeyManager DigitalSignatureKeyManager HybridEncryptKeyManager HybridDecryptKeyManager StreamingAeadKeyManager PgpEncrypterManager PgpDecrypterManager","title":"Inheritors"},{"location":"0.x/misk-crypto/misk.crypto/-mapped-key-manager/get/","text":"// misk-crypto / misk.crypto / MappedKeyManager / get get \u00b6 [jvm]\\ operator fun get (name: String ): KeyT","title":"get - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-mapped-key-manager/get/#get","text":"[jvm]\\ operator fun get (name: String ): KeyT","title":"get"},{"location":"0.x/misk-crypto/misk.crypto/-misk-a-w-s-k-m-s/","text":"// misk-crypto / misk.crypto / MiskAWSKMS MiskAWSKMS \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskAWSKMS This annotation is used to specify which com.amazonaws.services.kms.AWSKMS instance should be used by misk to construct a KmsClient and communicate with the KMS service Constructors \u00b6 MiskAWSKMS [jvm] fun MiskAWSKMS ()","title":"MiskAWSKMS - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-misk-a-w-s-k-m-s/#miskawskms","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskAWSKMS This annotation is used to specify which com.amazonaws.services.kms.AWSKMS instance should be used by misk to construct a KmsClient and communicate with the KMS service","title":"MiskAWSKMS"},{"location":"0.x/misk-crypto/misk.crypto/-misk-a-w-s-k-m-s/#constructors","text":"MiskAWSKMS [jvm] fun MiskAWSKMS ()","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-misk-a-w-s-k-m-s/-misk-a-w-s-k-m-s/","text":"// misk-crypto / misk.crypto / MiskAWSKMS / MiskAWSKMS MiskAWSKMS \u00b6 [jvm]\\ fun MiskAWSKMS ()","title":"MiskAWSKMS - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-misk-a-w-s-k-m-s/-misk-a-w-s-k-m-s/#miskawskms","text":"[jvm]\\ fun MiskAWSKMS ()","title":"MiskAWSKMS"},{"location":"0.x/misk-crypto/misk.crypto/-misk-kms-client/","text":"// misk-crypto / misk.crypto / MiskKmsClient MiskKmsClient \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskKmsClient This annotation is used to specify the KmsClient that\u2019s being used by misk to load encryption keys Constructors \u00b6 MiskKmsClient [jvm] fun MiskKmsClient ()","title":"MiskKmsClient - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-misk-kms-client/#miskkmsclient","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class MiskKmsClient This annotation is used to specify the KmsClient that\u2019s being used by misk to load encryption keys","title":"MiskKmsClient"},{"location":"0.x/misk-crypto/misk.crypto/-misk-kms-client/#constructors","text":"MiskKmsClient [jvm] fun MiskKmsClient ()","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-misk-kms-client/-misk-kms-client/","text":"// misk-crypto / misk.crypto / MiskKmsClient / MiskKmsClient MiskKmsClient \u00b6 [jvm]\\ fun MiskKmsClient ()","title":"MiskKmsClient - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-misk-kms-client/-misk-kms-client/#miskkmsclient","text":"[jvm]\\ fun MiskKmsClient ()","title":"MiskKmsClient"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-decrypter-manager/","text":"// misk-crypto / misk.crypto / PgpDecrypterManager PgpDecrypterManager \u00b6 [jvm]\\ @Singleton class PgpDecrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpDecrypter > Holds a map of every PgpDecrypter key name to its primitive listed in the configuration for this app. Users may use this object to obtain an PgpDecrypter dynamically: val myKey: PgpDecrypter = pgpDecrypterManager[\u201cmyKey\u201d] Constructors \u00b6 PgpDecrypterManager [jvm] @Inject fun PgpDecrypterManager (injector: Injector) Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): PgpDecrypter","title":"PgpDecrypterManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-decrypter-manager/#pgpdecryptermanager","text":"[jvm]\\ @Singleton class PgpDecrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpDecrypter > Holds a map of every PgpDecrypter key name to its primitive listed in the configuration for this app. Users may use this object to obtain an PgpDecrypter dynamically: val myKey: PgpDecrypter = pgpDecrypterManager[\u201cmyKey\u201d]","title":"PgpDecrypterManager"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-decrypter-manager/#constructors","text":"PgpDecrypterManager [jvm] @Inject fun PgpDecrypterManager (injector: Injector)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-decrypter-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): PgpDecrypter","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-decrypter-manager/-pgp-decrypter-manager/","text":"// misk-crypto / misk.crypto / PgpDecrypterManager / PgpDecrypterManager PgpDecrypterManager \u00b6 [jvm]\\ @Inject fun PgpDecrypterManager (injector: Injector)","title":"PgpDecrypterManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-decrypter-manager/-pgp-decrypter-manager/#pgpdecryptermanager","text":"[jvm]\\ @Inject fun PgpDecrypterManager (injector: Injector)","title":"PgpDecrypterManager"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-encrypter-manager/","text":"// misk-crypto / misk.crypto / PgpEncrypterManager PgpEncrypterManager \u00b6 [jvm]\\ @Singleton class PgpEncrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpEncrypter > Holds a map of every PgpEncrypter key name to its primitive listed in the configuration for this app. Users may use this object to obtain an PgpEncrypter dynamically: val myKey: PgpEncrypter = pgpEncrypterManager[\u201cmyKey\u201d] Constructors \u00b6 PgpEncrypterManager [jvm] @Inject fun PgpEncrypterManager (injector: Injector) Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): PgpEncrypter","title":"PgpEncrypterManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-encrypter-manager/#pgpencryptermanager","text":"[jvm]\\ @Singleton class PgpEncrypterManager @Injectconstructor(injector: Injector) : MappedKeyManager < PgpEncrypter > Holds a map of every PgpEncrypter key name to its primitive listed in the configuration for this app. Users may use this object to obtain an PgpEncrypter dynamically: val myKey: PgpEncrypter = pgpEncrypterManager[\u201cmyKey\u201d]","title":"PgpEncrypterManager"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-encrypter-manager/#constructors","text":"PgpEncrypterManager [jvm] @Inject fun PgpEncrypterManager (injector: Injector)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-encrypter-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): PgpEncrypter","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-encrypter-manager/-pgp-encrypter-manager/","text":"// misk-crypto / misk.crypto / PgpEncrypterManager / PgpEncrypterManager PgpEncrypterManager \u00b6 [jvm]\\ @Inject fun PgpEncrypterManager (injector: Injector)","title":"PgpEncrypterManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-pgp-encrypter-manager/-pgp-encrypter-manager/#pgpencryptermanager","text":"[jvm]\\ @Inject fun PgpEncrypterManager (injector: Injector)","title":"PgpEncrypterManager"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/","text":"// misk-crypto / misk.crypto / S3KeySource S3KeySource \u00b6 [jvm]\\ class S3KeySource @Injectconstructor(deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource , awsCredentials: AWSCredentialsProvider) : ExternalKeySource S3KeySource implements an ExternalKeySource that fetches Tink keysets from an S3 bucket. Keysets are indexed by an alias and a region, and are encrypted with a key in the KMS using an envelope key encryption scheme. Each Keyset is protected by a KMS key in each service region. For example, if we are to load a key aliased by \u201cexample_key\u201d in the staging environment, we\u2019d expect the following layout: bucket \u21b3 example_key \u21b3 us-east-1 \u21b3 us-west-2 And the metadata of the region-specified object will contain the KMS key arn that was used to protect it under the key x-amz-meta-kms-key-arn, and the type of the key under x-amz-meta-key-type. These keys are exposed in the S3 api without the x-amz-meta- prefix. The envelope scheme itself is from misk-crypto and is defined in KeyReader If a requested key alias does not exist, this will raise a ExternalKeyManagerException Constructors \u00b6 S3KeySource [jvm] @Inject fun S3KeySource (deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource = object : BucketNameSource { override fun getBucketName(deployment: Deployment) = deployment.mapToEnvironmentName() }, awsCredentials: AWSCredentialsProvider) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary getKey [jvm] open override fun getKey (alias: KeyAlias ): Key Return a Key from an external key source. keyExists [jvm] open override fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source. Properties \u00b6 Name Summary allKeyAliases [jvm] val allKeyAliases : Map < KeyAlias , KeyType >","title":"S3KeySource - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/#s3keysource","text":"[jvm]\\ class S3KeySource @Injectconstructor(deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource , awsCredentials: AWSCredentialsProvider) : ExternalKeySource S3KeySource implements an ExternalKeySource that fetches Tink keysets from an S3 bucket. Keysets are indexed by an alias and a region, and are encrypted with a key in the KMS using an envelope key encryption scheme. Each Keyset is protected by a KMS key in each service region. For example, if we are to load a key aliased by \u201cexample_key\u201d in the staging environment, we\u2019d expect the following layout: bucket \u21b3 example_key \u21b3 us-east-1 \u21b3 us-west-2 And the metadata of the region-specified object will contain the KMS key arn that was used to protect it under the key x-amz-meta-kms-key-arn, and the type of the key under x-amz-meta-key-type. These keys are exposed in the S3 api without the x-amz-meta- prefix. The envelope scheme itself is from misk-crypto and is defined in KeyReader If a requested key alias does not exist, this will raise a ExternalKeyManagerException","title":"S3KeySource"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/#constructors","text":"S3KeySource [jvm] @Inject fun S3KeySource (deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource = object : BucketNameSource { override fun getBucketName(deployment: Deployment) = deployment.mapToEnvironmentName() }, awsCredentials: AWSCredentialsProvider)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/#functions","text":"Name Summary getKey [jvm] open override fun getKey (alias: KeyAlias ): Key Return a Key from an external key source. keyExists [jvm] open override fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/#properties","text":"Name Summary allKeyAliases [jvm] val allKeyAliases : Map < KeyAlias , KeyType >","title":"Properties"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/-s3-key-source/","text":"// misk-crypto / misk.crypto / S3KeySource / S3KeySource S3KeySource \u00b6 [jvm]\\ @Inject fun S3KeySource (deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource = object : BucketNameSource { override fun getBucketName(deployment: Deployment) = deployment.mapToEnvironmentName() }, awsCredentials: AWSCredentialsProvider)","title":"S3KeySource - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/-s3-key-source/#s3keysource","text":"[jvm]\\ @Inject fun S3KeySource (deployment: Deployment, defaultS3: AmazonS3, allKeyAliases: Map < KeyAlias , KeyType >, bucketNameSource: BucketNameSource = object : BucketNameSource { override fun getBucketName(deployment: Deployment) = deployment.mapToEnvironmentName() }, awsCredentials: AWSCredentialsProvider)","title":"S3KeySource"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/all-key-aliases/","text":"// misk-crypto / misk.crypto / S3KeySource / allKeyAliases allKeyAliases \u00b6 [jvm]\\ val allKeyAliases : Map < KeyAlias , KeyType >","title":"allKeyAliases - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/all-key-aliases/#allkeyaliases","text":"[jvm]\\ val allKeyAliases : Map < KeyAlias , KeyType >","title":"allKeyAliases"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/get-key/","text":"// misk-crypto / misk.crypto / S3KeySource / getKey getKey \u00b6 [jvm]\\ open override fun getKey (alias: KeyAlias ): Key Return a Key from an external key source.","title":"getKey - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/get-key/#getkey","text":"[jvm]\\ open override fun getKey (alias: KeyAlias ): Key Return a Key from an external key source.","title":"getKey"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/key-exists/","text":"// misk-crypto / misk.crypto / S3KeySource / keyExists keyExists \u00b6 [jvm]\\ open override fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source.","title":"keyExists - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/key-exists/#keyexists","text":"[jvm]\\ open override fun keyExists (alias: KeyAlias ): Boolean Check if a key alias exists in the key source.","title":"keyExists"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/-companion/","text":"// misk-crypto / misk.crypto / S3KeySource / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-s3-key-source/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-crypto/misk.crypto/-service-keys/","text":"// misk-crypto / misk.crypto / ServiceKeys ServiceKeys \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ServiceKeys This annotation is used to decorate the collection of service keys used in the service. This annotation can be useful for cases where one would need access to all service keys as a Map < KeyAlias , KeyType > Constructors \u00b6 ServiceKeys [jvm] fun ServiceKeys ()","title":"ServiceKeys - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-service-keys/#servicekeys","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.VALUE_PARAMETER ]) annotation class ServiceKeys This annotation is used to decorate the collection of service keys used in the service. This annotation can be useful for cases where one would need access to all service keys as a Map < KeyAlias , KeyType >","title":"ServiceKeys"},{"location":"0.x/misk-crypto/misk.crypto/-service-keys/#constructors","text":"ServiceKeys [jvm] fun ServiceKeys ()","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-service-keys/-service-keys/","text":"// misk-crypto / misk.crypto / ServiceKeys / ServiceKeys ServiceKeys \u00b6 [jvm]\\ fun ServiceKeys ()","title":"ServiceKeys - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-service-keys/-service-keys/#servicekeys","text":"[jvm]\\ fun ServiceKeys ()","title":"ServiceKeys"},{"location":"0.x/misk-crypto/misk.crypto/-streaming-aead-key-manager/","text":"// misk-crypto / misk.crypto / StreamingAeadKeyManager StreamingAeadKeyManager \u00b6 [jvm]\\ @Singleton class StreamingAeadKeyManager @Injectconstructor(injector: Injector) : MappedKeyManager <StreamingAead> Holds a map of every StreamingAead key name to its primitive listed in the configuration for this app. Users may use this object to obtain an StreamingAead dynamically: val myKey: StreamingAead = streamingAeadKeyManager[\u201cmyKey\u201d] Note: StreamingAead is useful when the data to be encrypted is too large to be processed in a single step. Typical use cases include encryption of large files or encryption of live data streams Constructors \u00b6 StreamingAeadKeyManager [jvm] @Inject fun StreamingAeadKeyManager (injector: Injector) Functions \u00b6 Name Summary get [jvm] operator fun get (name: String ): StreamingAead","title":"StreamingAeadKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-streaming-aead-key-manager/#streamingaeadkeymanager","text":"[jvm]\\ @Singleton class StreamingAeadKeyManager @Injectconstructor(injector: Injector) : MappedKeyManager <StreamingAead> Holds a map of every StreamingAead key name to its primitive listed in the configuration for this app. Users may use this object to obtain an StreamingAead dynamically: val myKey: StreamingAead = streamingAeadKeyManager[\u201cmyKey\u201d] Note: StreamingAead is useful when the data to be encrypted is too large to be processed in a single step. Typical use cases include encryption of large files or encryption of live data streams","title":"StreamingAeadKeyManager"},{"location":"0.x/misk-crypto/misk.crypto/-streaming-aead-key-manager/#constructors","text":"StreamingAeadKeyManager [jvm] @Inject fun StreamingAeadKeyManager (injector: Injector)","title":"Constructors"},{"location":"0.x/misk-crypto/misk.crypto/-streaming-aead-key-manager/#functions","text":"Name Summary get [jvm] operator fun get (name: String ): StreamingAead","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto/-streaming-aead-key-manager/-streaming-aead-key-manager/","text":"// misk-crypto / misk.crypto / StreamingAeadKeyManager / StreamingAeadKeyManager StreamingAeadKeyManager \u00b6 [jvm]\\ @Inject fun StreamingAeadKeyManager (injector: Injector)","title":"StreamingAeadKeyManager - Misk"},{"location":"0.x/misk-crypto/misk.crypto/-streaming-aead-key-manager/-streaming-aead-key-manager/#streamingaeadkeymanager","text":"[jvm]\\ @Inject fun StreamingAeadKeyManager (injector: Injector)","title":"StreamingAeadKeyManager"},{"location":"0.x/misk-crypto/misk.crypto.pgp/","text":"// misk-crypto / misk.crypto.pgp Package misk.crypto.pgp \u00b6 Types \u00b6 Name Summary PgpDecrypter [jvm] interface PgpDecrypter A PgpDecrypter is tied to a private PGP key which it uses to decrypt messages. PgpEncrypter [jvm] interface PgpEncrypter A PgpEncrypter is tied to a public PGP key which it uses to encrypt messages.","title":"Package misk.crypto.pgp - Misk"},{"location":"0.x/misk-crypto/misk.crypto.pgp/#package-miskcryptopgp","text":"","title":"Package misk.crypto.pgp"},{"location":"0.x/misk-crypto/misk.crypto.pgp/#types","text":"Name Summary PgpDecrypter [jvm] interface PgpDecrypter A PgpDecrypter is tied to a private PGP key which it uses to decrypt messages. PgpEncrypter [jvm] interface PgpEncrypter A PgpEncrypter is tied to a public PGP key which it uses to encrypt messages.","title":"Types"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-decrypter/","text":"// misk-crypto / misk.crypto.pgp / PgpDecrypter PgpDecrypter \u00b6 [jvm]\\ interface PgpDecrypter A PgpDecrypter is tied to a private PGP key which it uses to decrypt messages. Functions \u00b6 Name Summary decrypt [jvm] abstract fun decrypt (ciphertext: ByteArray ): ByteArray","title":"PgpDecrypter - Misk"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-decrypter/#pgpdecrypter","text":"[jvm]\\ interface PgpDecrypter A PgpDecrypter is tied to a private PGP key which it uses to decrypt messages.","title":"PgpDecrypter"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-decrypter/#functions","text":"Name Summary decrypt [jvm] abstract fun decrypt (ciphertext: ByteArray ): ByteArray","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-decrypter/decrypt/","text":"// misk-crypto / misk.crypto.pgp / PgpDecrypter / decrypt decrypt \u00b6 [jvm]\\ abstract fun decrypt (ciphertext: ByteArray ): ByteArray","title":"decrypt - Misk"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-decrypter/decrypt/#decrypt","text":"[jvm]\\ abstract fun decrypt (ciphertext: ByteArray ): ByteArray","title":"decrypt"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-encrypter/","text":"// misk-crypto / misk.crypto.pgp / PgpEncrypter PgpEncrypter \u00b6 [jvm]\\ interface PgpEncrypter A PgpEncrypter is tied to a public PGP key which it uses to encrypt messages. Functions \u00b6 Name Summary encrypt [jvm] abstract fun encrypt (plaintext: ByteArray , armored: Boolean ): ByteArray Encrypts the given byte array. Armored refers to whether to output in a text format or not.","title":"PgpEncrypter - Misk"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-encrypter/#pgpencrypter","text":"[jvm]\\ interface PgpEncrypter A PgpEncrypter is tied to a public PGP key which it uses to encrypt messages.","title":"PgpEncrypter"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-encrypter/#functions","text":"Name Summary encrypt [jvm] abstract fun encrypt (plaintext: ByteArray , armored: Boolean ): ByteArray Encrypts the given byte array. Armored refers to whether to output in a text format or not.","title":"Functions"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-encrypter/encrypt/","text":"// misk-crypto / misk.crypto.pgp / PgpEncrypter / encrypt encrypt \u00b6 [jvm]\\ abstract fun encrypt (plaintext: ByteArray , armored: Boolean ): ByteArray Encrypts the given byte array. Armored refers to whether to output in a text format or not. For example, with armored we get output like: -----BEGIN PGP MESSAGE----- Version: BCPG C# v1.6.1.0 hQIMA0tM4ZUzpKCkAQ//ZO8hVhp6LMxshCLqcqgPkXcU1kBHPQjiUBs6QPxaQFcg PIXJEdZWQ1RkMUKdCfzjvevizi/2NWAwZ797fELdbpVyH6JI2Me1Ov10f8qgYvbG V0GJ3loRt84KjKdVocKguJVfMvOeMVJanPpxfPt3Ak+Nt/voZHmJdTkV4cjWTmcU x31xqc5LZcvgF4Lv+ZcMw090b281yMENwALnvQJ9FQg5WTfZ+YautUMwWGk8W8XM H3tYkdh3jKizy8YTw+zfVDn1yhw2BgSFp0QIgHIQQ2Q2gyknRfj4zdfs/4bZYcu1 KNgj9op/IejZNstP9JWw4labC78nTIW5s1f0LWF5hhZUkxeAOEyVluUVJgEw44B4 LKb0p/8jb4J/dVrsmaTDOONZ48wtNjZOTV61DhCnn+UiNVSfQe6I7XMtFpEH0PN4 WzermmeEgjw1MADeh0jg/9wMM/p9UnTxihGQrPRgHYUu45jI3ys3qArsD2GvAi9y QYqsuRJNB7EEu2clBRASA3zoWkpqbs3H9S2fB9Sf9ZzZTPCzowOdK1oe0vlMVt3A mCILe05s2nowwBrBWu4PHUTkllsnLliHhrihu9sqXCHy6u1pdNQMvJgY6kbgQmsG bVY+brdkLdQ1BxbTT1YixzLm//zqMqGC1ZJUsr5PAIbNtyKK6u6+mCkZj0Y3fU3J Il0x5V09QcC9AHyxJ8VMOxzhQZjwVYNtD6SGeY8jOyfUScY= =DHKq -----END PGP MESSAGE----- Without the armored encoding we would get binary data which isn\u2019t viewable in text format.","title":"encrypt - Misk"},{"location":"0.x/misk-crypto/misk.crypto.pgp/-pgp-encrypter/encrypt/#encrypt","text":"[jvm]\\ abstract fun encrypt (plaintext: ByteArray , armored: Boolean ): ByteArray Encrypts the given byte array. Armored refers to whether to output in a text format or not. For example, with armored we get output like: -----BEGIN PGP MESSAGE----- Version: BCPG C# v1.6.1.0 hQIMA0tM4ZUzpKCkAQ//ZO8hVhp6LMxshCLqcqgPkXcU1kBHPQjiUBs6QPxaQFcg PIXJEdZWQ1RkMUKdCfzjvevizi/2NWAwZ797fELdbpVyH6JI2Me1Ov10f8qgYvbG V0GJ3loRt84KjKdVocKguJVfMvOeMVJanPpxfPt3Ak+Nt/voZHmJdTkV4cjWTmcU x31xqc5LZcvgF4Lv+ZcMw090b281yMENwALnvQJ9FQg5WTfZ+YautUMwWGk8W8XM H3tYkdh3jKizy8YTw+zfVDn1yhw2BgSFp0QIgHIQQ2Q2gyknRfj4zdfs/4bZYcu1 KNgj9op/IejZNstP9JWw4labC78nTIW5s1f0LWF5hhZUkxeAOEyVluUVJgEw44B4 LKb0p/8jb4J/dVrsmaTDOONZ48wtNjZOTV61DhCnn+UiNVSfQe6I7XMtFpEH0PN4 WzermmeEgjw1MADeh0jg/9wMM/p9UnTxihGQrPRgHYUu45jI3ys3qArsD2GvAi9y QYqsuRJNB7EEu2clBRASA3zoWkpqbs3H9S2fB9Sf9ZzZTPCzowOdK1oe0vlMVt3A mCILe05s2nowwBrBWu4PHUTkllsnLliHhrihu9sqXCHy6u1pdNQMvJgY6kbgQmsG bVY+brdkLdQ1BxbTT1YixzLm//zqMqGC1ZJUsr5PAIbNtyKK6u6+mCkZj0Y3fU3J Il0x5V09QcC9AHyxJ8VMOxzhQZjwVYNtD6SGeY8jOyfUScY= =DHKq -----END PGP MESSAGE----- Without the armored encoding we would get binary data which isn\u2019t viewable in text format.","title":"encrypt"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/","text":"// misk-datadog / misk.tracing.backends.datadog Package misk.tracing.backends.datadog \u00b6 Types \u00b6 Name Summary DatadogTracingBackendModule [jvm] class DatadogTracingBackendModule : KAbstractModule Binds the datadog tracer to opentracing\u2019s Tracer MDCScopeListener [jvm] class MDCScopeListener : ScopeListener A scope listener that updates the MDC with the trace and span reference anytime a new scope is activated or closed.","title":"Package misk.tracing.backends.datadog - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/#package-misktracingbackendsdatadog","text":"","title":"Package misk.tracing.backends.datadog"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/#types","text":"Name Summary DatadogTracingBackendModule [jvm] class DatadogTracingBackendModule : KAbstractModule Binds the datadog tracer to opentracing\u2019s Tracer MDCScopeListener [jvm] class MDCScopeListener : ScopeListener A scope listener that updates the MDC with the trace and span reference anytime a new scope is activated or closed.","title":"Types"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-datadog-tracing-backend-module/","text":"// misk-datadog / misk.tracing.backends.datadog / DatadogTracingBackendModule DatadogTracingBackendModule \u00b6 [jvm]\\ class DatadogTracingBackendModule : KAbstractModule Binds the datadog tracer to opentracing\u2019s Tracer Constructors \u00b6 DatadogTracingBackendModule [jvm] fun DatadogTracingBackendModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"DatadogTracingBackendModule - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-datadog-tracing-backend-module/#datadogtracingbackendmodule","text":"[jvm]\\ class DatadogTracingBackendModule : KAbstractModule Binds the datadog tracer to opentracing\u2019s Tracer","title":"DatadogTracingBackendModule"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-datadog-tracing-backend-module/#constructors","text":"DatadogTracingBackendModule [jvm] fun DatadogTracingBackendModule ()","title":"Constructors"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-datadog-tracing-backend-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-datadog-tracing-backend-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-datadog-tracing-backend-module/-datadog-tracing-backend-module/","text":"// misk-datadog / misk.tracing.backends.datadog / DatadogTracingBackendModule / DatadogTracingBackendModule DatadogTracingBackendModule \u00b6 [jvm]\\ fun DatadogTracingBackendModule ()","title":"DatadogTracingBackendModule - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-datadog-tracing-backend-module/-datadog-tracing-backend-module/#datadogtracingbackendmodule","text":"[jvm]\\ fun DatadogTracingBackendModule ()","title":"DatadogTracingBackendModule"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener MDCScopeListener \u00b6 [jvm]\\ class MDCScopeListener : ScopeListener A scope listener that updates the MDC with the trace and span reference anytime a new scope is activated or closed. Constructors \u00b6 MDCScopeListener [jvm] fun MDCScopeListener () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary afterScopeActivated [jvm] open override fun afterScopeActivated () afterScopeClosed [jvm] open override fun afterScopeClosed ()","title":"MDCScopeListener - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/#mdcscopelistener","text":"[jvm]\\ class MDCScopeListener : ScopeListener A scope listener that updates the MDC with the trace and span reference anytime a new scope is activated or closed.","title":"MDCScopeListener"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/#constructors","text":"MDCScopeListener [jvm] fun MDCScopeListener ()","title":"Constructors"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/#functions","text":"Name Summary afterScopeActivated [jvm] open override fun afterScopeActivated () afterScopeClosed [jvm] open override fun afterScopeClosed ()","title":"Functions"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-m-d-c-scope-listener/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener / MDCScopeListener MDCScopeListener \u00b6 [jvm]\\ fun MDCScopeListener ()","title":"MDCScopeListener - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-m-d-c-scope-listener/#mdcscopelistener","text":"[jvm]\\ fun MDCScopeListener ()","title":"MDCScopeListener"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/after-scope-activated/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener / afterScopeActivated afterScopeActivated \u00b6 [jvm]\\ open override fun afterScopeActivated ()","title":"afterScopeActivated - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/after-scope-activated/#afterscopeactivated","text":"[jvm]\\ open override fun afterScopeActivated ()","title":"afterScopeActivated"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/after-scope-closed/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener / afterScopeClosed afterScopeClosed \u00b6 [jvm]\\ open override fun afterScopeClosed ()","title":"afterScopeClosed - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/after-scope-closed/#afterscopeclosed","text":"[jvm]\\ open override fun afterScopeClosed ()","title":"afterScopeClosed"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary log [jvm] val log : KLogger MDC_SPAN_ID [jvm] const val MDC_SPAN_ID : String MDC_TRACE_ID [jvm] const val MDC_TRACE_ID : String","title":"Companion - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/#properties","text":"Name Summary log [jvm] val log : KLogger MDC_SPAN_ID [jvm] const val MDC_SPAN_ID : String MDC_TRACE_ID [jvm] const val MDC_TRACE_ID : String","title":"Properties"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/-m-d-c_-s-p-a-n_-i-d/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener / Companion / MDC_SPAN_ID MDC_SPAN_ID \u00b6 [jvm]\\ const val MDC_SPAN_ID : String","title":"MDC_SPAN_ID - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/-m-d-c_-s-p-a-n_-i-d/#mdc_span_id","text":"[jvm]\\ const val MDC_SPAN_ID : String","title":"MDC_SPAN_ID"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/-m-d-c_-t-r-a-c-e_-i-d/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener / Companion / MDC_TRACE_ID MDC_TRACE_ID \u00b6 [jvm]\\ const val MDC_TRACE_ID : String","title":"MDC_TRACE_ID - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/-m-d-c_-t-r-a-c-e_-i-d/#mdc_trace_id","text":"[jvm]\\ const val MDC_TRACE_ID : String","title":"MDC_TRACE_ID"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/log/","text":"// misk-datadog / misk.tracing.backends.datadog / MDCScopeListener / Companion / log log \u00b6 [jvm]\\ val log : KLogger","title":"log - Misk"},{"location":"0.x/misk-datadog/misk.tracing.backends.datadog/-m-d-c-scope-listener/-companion/log/#log","text":"[jvm]\\ val log : KLogger","title":"log"},{"location":"0.x/misk-eventrouter/misk.eventrouter/","text":"// misk-eventrouter / misk.eventrouter Package misk.eventrouter \u00b6 Types \u00b6 Name Summary ClusterSnapshot [jvm] data class ClusterSnapshot (hosts: List < String >, self: String ) ConsistentHashing [jvm] @Singleton class ConsistentHashing @Injectconstructor(hashFunction: HashFunction, mod: Long , virtualPoints: Int ) : ClusterMapper EventRouter [jvm] interface EventRouter EventRouterTester [jvm] class EventRouterTester @Injectconstructor EventRouterTestingModule [jvm] class EventRouterTestingModule : KAbstractModule KubernetesHealthCheck [jvm] @Singleton class KubernetesHealthCheck @Injectconstructor : HealthCheck Listener [jvm] interface Listener < T : Any > RealEventRouterModule [jvm] class RealEventRouterModule (deployment: Deployment) : KAbstractModule SocketEvent [jvm] sealed class SocketEvent SocketEventJsonAdapter [jvm] object SocketEventJsonAdapter Subscription [jvm] interface Subscription < T : Any > Topic [jvm] interface Topic < T : Any >","title":"Package misk.eventrouter - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/#package-miskeventrouter","text":"","title":"Package misk.eventrouter"},{"location":"0.x/misk-eventrouter/misk.eventrouter/#types","text":"Name Summary ClusterSnapshot [jvm] data class ClusterSnapshot (hosts: List < String >, self: String ) ConsistentHashing [jvm] @Singleton class ConsistentHashing @Injectconstructor(hashFunction: HashFunction, mod: Long , virtualPoints: Int ) : ClusterMapper EventRouter [jvm] interface EventRouter EventRouterTester [jvm] class EventRouterTester @Injectconstructor EventRouterTestingModule [jvm] class EventRouterTestingModule : KAbstractModule KubernetesHealthCheck [jvm] @Singleton class KubernetesHealthCheck @Injectconstructor : HealthCheck Listener [jvm] interface Listener < T : Any > RealEventRouterModule [jvm] class RealEventRouterModule (deployment: Deployment) : KAbstractModule SocketEvent [jvm] sealed class SocketEvent SocketEventJsonAdapter [jvm] object SocketEventJsonAdapter Subscription [jvm] interface Subscription < T : Any > Topic [jvm] interface Topic < T : Any >","title":"Types"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/","text":"// misk-eventrouter / misk.eventrouter / ClusterSnapshot ClusterSnapshot \u00b6 [jvm]\\ data class ClusterSnapshot (hosts: List < String >, self: String ) Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary hosts [jvm] val hosts : List < String > self [jvm] val self : String","title":"ClusterSnapshot - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/#clustersnapshot","text":"[jvm]\\ data class ClusterSnapshot (hosts: List < String >, self: String )","title":"ClusterSnapshot"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/#properties","text":"Name Summary hosts [jvm] val hosts : List < String > self [jvm] val self : String","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/-cluster-snapshot/","text":"// misk-eventrouter / misk.eventrouter / ClusterSnapshot / ClusterSnapshot ClusterSnapshot \u00b6 [jvm]\\ fun ClusterSnapshot (hosts: List < String >, self: String )","title":"ClusterSnapshot - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/-cluster-snapshot/#clustersnapshot","text":"[jvm]\\ fun ClusterSnapshot (hosts: List < String >, self: String )","title":"ClusterSnapshot"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/hosts/","text":"// misk-eventrouter / misk.eventrouter / ClusterSnapshot / hosts hosts \u00b6 [jvm]\\ val hosts : List < String >","title":"hosts - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/hosts/#hosts","text":"[jvm]\\ val hosts : List < String >","title":"hosts"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/self/","text":"// misk-eventrouter / misk.eventrouter / ClusterSnapshot / self self \u00b6 [jvm]\\ val self : String","title":"self - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/self/#self","text":"[jvm]\\ val self : String","title":"self"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/to-string/","text":"// misk-eventrouter / misk.eventrouter / ClusterSnapshot / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-cluster-snapshot/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-consistent-hashing/","text":"// misk-eventrouter / misk.eventrouter / ConsistentHashing ConsistentHashing \u00b6 [jvm]\\ @Singleton class ConsistentHashing @Injectconstructor(hashFunction: HashFunction, mod: Long , virtualPoints: Int ) : ClusterMapper Functions \u00b6 Name Summary topicToHost [jvm] open override fun topicToHost (clusterSnapshot: ClusterSnapshot , topic: String ): String","title":"ConsistentHashing - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-consistent-hashing/#consistenthashing","text":"[jvm]\\ @Singleton class ConsistentHashing @Injectconstructor(hashFunction: HashFunction, mod: Long , virtualPoints: Int ) : ClusterMapper","title":"ConsistentHashing"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-consistent-hashing/#functions","text":"Name Summary topicToHost [jvm] open override fun topicToHost (clusterSnapshot: ClusterSnapshot , topic: String ): String","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-consistent-hashing/-consistent-hashing/","text":"// misk-eventrouter / misk.eventrouter / ConsistentHashing / ConsistentHashing ConsistentHashing \u00b6 [jvm]\\ @Inject fun ConsistentHashing (hashFunction: HashFunction = Hashing.murmur3_32(), mod: Long = 65536, virtualPoints: Int = 16)","title":"ConsistentHashing - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-consistent-hashing/-consistent-hashing/#consistenthashing","text":"[jvm]\\ @Inject fun ConsistentHashing (hashFunction: HashFunction = Hashing.murmur3_32(), mod: Long = 65536, virtualPoints: Int = 16)","title":"ConsistentHashing"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-consistent-hashing/topic-to-host/","text":"// misk-eventrouter / misk.eventrouter / ConsistentHashing / topicToHost topicToHost \u00b6 [jvm]\\ open override fun topicToHost (clusterSnapshot: ClusterSnapshot , topic: String ): String","title":"topicToHost - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-consistent-hashing/topic-to-host/#topictohost","text":"[jvm]\\ open override fun topicToHost (clusterSnapshot: ClusterSnapshot , topic: String ): String","title":"topicToHost"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router/","text":"// misk-eventrouter / misk.eventrouter / EventRouter EventRouter \u00b6 [jvm]\\ interface EventRouter Functions \u00b6 Name Summary getTopic [jvm] abstract fun < T : Any > getTopic (name: String ): Topic < T >","title":"EventRouter - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router/#eventrouter","text":"[jvm]\\ interface EventRouter","title":"EventRouter"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router/#functions","text":"Name Summary getTopic [jvm] abstract fun < T : Any > getTopic (name: String ): Topic < T >","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router/get-topic/","text":"// misk-eventrouter / misk.eventrouter / EventRouter / getTopic getTopic \u00b6 [jvm]\\ abstract fun < T : Any > getTopic (name: String ): Topic < T >","title":"getTopic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router/get-topic/#gettopic","text":"[jvm]\\ abstract fun < T : Any > getTopic (name: String ): Topic < T >","title":"getTopic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-tester/","text":"// misk-eventrouter / misk.eventrouter / EventRouterTester EventRouterTester \u00b6 [jvm]\\ class EventRouterTester @Injectconstructor Functions \u00b6 Name Summary processEverything [jvm] fun processEverything ()","title":"EventRouterTester - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-tester/#eventroutertester","text":"[jvm]\\ class EventRouterTester @Injectconstructor","title":"EventRouterTester"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-tester/#functions","text":"Name Summary processEverything [jvm] fun processEverything ()","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-tester/-event-router-tester/","text":"// misk-eventrouter / misk.eventrouter / EventRouterTester / EventRouterTester EventRouterTester \u00b6 [jvm]\\ @Inject fun EventRouterTester ()","title":"EventRouterTester - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-tester/-event-router-tester/#eventroutertester","text":"[jvm]\\ @Inject fun EventRouterTester ()","title":"EventRouterTester"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-tester/process-everything/","text":"// misk-eventrouter / misk.eventrouter / EventRouterTester / processEverything processEverything \u00b6 [jvm]\\ fun processEverything ()","title":"processEverything - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-tester/process-everything/#processeverything","text":"[jvm]\\ fun processEverything ()","title":"processEverything"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/","text":"// misk-eventrouter / misk.eventrouter / EventRouterTestingModule EventRouterTestingModule \u00b6 [jvm]\\ class EventRouterTestingModule : KAbstractModule Parameters \u00b6 jvm distributed true if the caller may create multiple instances of EventRouter. In this case the caller is responsible for calling EventRouter.joinCluster() on each. Constructors \u00b6 EventRouterTestingModule [jvm] fun EventRouterTestingModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder distributed [jvm] val distributed : Boolean","title":"EventRouterTestingModule - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/#eventroutertestingmodule","text":"[jvm]\\ class EventRouterTestingModule : KAbstractModule","title":"EventRouterTestingModule"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/#parameters","text":"jvm distributed true if the caller may create multiple instances of EventRouter. In this case the caller is responsible for calling EventRouter.joinCluster() on each.","title":"Parameters"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/#constructors","text":"EventRouterTestingModule [jvm] fun EventRouterTestingModule ()","title":"Constructors"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/#properties","text":"Name Summary binder [jvm] val binder : Binder distributed [jvm] val distributed : Boolean","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/-event-router-testing-module/","text":"// misk-eventrouter / misk.eventrouter / EventRouterTestingModule / EventRouterTestingModule EventRouterTestingModule \u00b6 [jvm]\\ fun EventRouterTestingModule ()","title":"EventRouterTestingModule - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/-event-router-testing-module/#eventroutertestingmodule","text":"[jvm]\\ fun EventRouterTestingModule ()","title":"EventRouterTestingModule"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/distributed/","text":"// misk-eventrouter / misk.eventrouter / EventRouterTestingModule / distributed distributed \u00b6 [jvm]\\ val distributed : Boolean","title":"distributed - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-event-router-testing-module/distributed/#distributed","text":"[jvm]\\ val distributed : Boolean","title":"distributed"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-kubernetes-health-check/","text":"// misk-eventrouter / misk.eventrouter / KubernetesHealthCheck KubernetesHealthCheck \u00b6 [jvm]\\ @Singleton class KubernetesHealthCheck @Injectconstructor : HealthCheck Functions \u00b6 Name Summary status [jvm] open override fun status (): HealthStatus","title":"KubernetesHealthCheck - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-kubernetes-health-check/#kuberneteshealthcheck","text":"[jvm]\\ @Singleton class KubernetesHealthCheck @Injectconstructor : HealthCheck","title":"KubernetesHealthCheck"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-kubernetes-health-check/#functions","text":"Name Summary status [jvm] open override fun status (): HealthStatus","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-kubernetes-health-check/-kubernetes-health-check/","text":"// misk-eventrouter / misk.eventrouter / KubernetesHealthCheck / KubernetesHealthCheck KubernetesHealthCheck \u00b6 [jvm]\\ @Inject fun KubernetesHealthCheck ()","title":"KubernetesHealthCheck - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-kubernetes-health-check/-kubernetes-health-check/#kuberneteshealthcheck","text":"[jvm]\\ @Inject fun KubernetesHealthCheck ()","title":"KubernetesHealthCheck"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-kubernetes-health-check/status/","text":"// misk-eventrouter / misk.eventrouter / KubernetesHealthCheck / status status \u00b6 [jvm]\\ open override fun status (): HealthStatus","title":"status - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-kubernetes-health-check/status/#status","text":"[jvm]\\ open override fun status (): HealthStatus","title":"status"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/","text":"// misk-eventrouter / misk.eventrouter / Listener Listener \u00b6 [jvm]\\ interface Listener < T : Any > Functions \u00b6 Name Summary onClose [jvm] abstract fun onClose (subscription: Subscription < T >) onEvent [jvm] abstract fun onEvent (subscription: Subscription < T >, event: T ) onOpen [jvm] abstract fun onOpen (subscription: Subscription < T >)","title":"Listener - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/#listener","text":"[jvm]\\ interface Listener < T : Any >","title":"Listener"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/#functions","text":"Name Summary onClose [jvm] abstract fun onClose (subscription: Subscription < T >) onEvent [jvm] abstract fun onEvent (subscription: Subscription < T >, event: T ) onOpen [jvm] abstract fun onOpen (subscription: Subscription < T >)","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/on-close/","text":"// misk-eventrouter / misk.eventrouter / Listener / onClose onClose \u00b6 [jvm]\\ abstract fun onClose (subscription: Subscription < T >)","title":"onClose - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/on-close/#onclose","text":"[jvm]\\ abstract fun onClose (subscription: Subscription < T >)","title":"onClose"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/on-event/","text":"// misk-eventrouter / misk.eventrouter / Listener / onEvent onEvent \u00b6 [jvm]\\ abstract fun onEvent (subscription: Subscription < T >, event: T )","title":"onEvent - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/on-event/#onevent","text":"[jvm]\\ abstract fun onEvent (subscription: Subscription < T >, event: T )","title":"onEvent"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/on-open/","text":"// misk-eventrouter / misk.eventrouter / Listener / onOpen onOpen \u00b6 [jvm]\\ abstract fun onOpen (subscription: Subscription < T >)","title":"onOpen - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-listener/on-open/#onopen","text":"[jvm]\\ abstract fun onOpen (subscription: Subscription < T >)","title":"onOpen"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/","text":"// misk-eventrouter / misk.eventrouter / RealEventRouterModule RealEventRouterModule \u00b6 [jvm]\\ class RealEventRouterModule (deployment: Deployment) : KAbstractModule Functions \u00b6 Name Summary actionExecutor [jvm] @Provides @Singleton fun actionExecutor (): ExecutorService addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) kubernetesExecutor [jvm] @Provides @Singleton fun kubernetesExecutor (): ExecutorService requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) subscriberExecutor [jvm] @Provides @Singleton fun subscriberExecutor (): ExecutorService Properties \u00b6 Name Summary binder [jvm] val binder : Binder deployment [jvm] val deployment : Deployment","title":"RealEventRouterModule - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/#realeventroutermodule","text":"[jvm]\\ class RealEventRouterModule (deployment: Deployment) : KAbstractModule","title":"RealEventRouterModule"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/#functions","text":"Name Summary actionExecutor [jvm] @Provides @Singleton fun actionExecutor (): ExecutorService addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) kubernetesExecutor [jvm] @Provides @Singleton fun kubernetesExecutor (): ExecutorService requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) subscriberExecutor [jvm] @Provides @Singleton fun subscriberExecutor (): ExecutorService","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/#properties","text":"Name Summary binder [jvm] val binder : Binder deployment [jvm] val deployment : Deployment","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/-real-event-router-module/","text":"// misk-eventrouter / misk.eventrouter / RealEventRouterModule / RealEventRouterModule RealEventRouterModule \u00b6 [jvm]\\ fun RealEventRouterModule (deployment: Deployment)","title":"RealEventRouterModule - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/-real-event-router-module/#realeventroutermodule","text":"[jvm]\\ fun RealEventRouterModule (deployment: Deployment)","title":"RealEventRouterModule"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/action-executor/","text":"// misk-eventrouter / misk.eventrouter / RealEventRouterModule / actionExecutor actionExecutor \u00b6 [jvm]\\ @Provides @Singleton fun actionExecutor (): ExecutorService","title":"actionExecutor - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/action-executor/#actionexecutor","text":"[jvm]\\ @Provides @Singleton fun actionExecutor (): ExecutorService","title":"actionExecutor"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/deployment/","text":"// misk-eventrouter / misk.eventrouter / RealEventRouterModule / deployment deployment \u00b6 [jvm]\\ val deployment : Deployment","title":"deployment - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/deployment/#deployment","text":"[jvm]\\ val deployment : Deployment","title":"deployment"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/kubernetes-executor/","text":"// misk-eventrouter / misk.eventrouter / RealEventRouterModule / kubernetesExecutor kubernetesExecutor \u00b6 [jvm]\\ @Provides @Singleton fun kubernetesExecutor (): ExecutorService","title":"kubernetesExecutor - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/kubernetes-executor/#kubernetesexecutor","text":"[jvm]\\ @Provides @Singleton fun kubernetesExecutor (): ExecutorService","title":"kubernetesExecutor"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/subscriber-executor/","text":"// misk-eventrouter / misk.eventrouter / RealEventRouterModule / subscriberExecutor subscriberExecutor \u00b6 [jvm]\\ @Provides @Singleton fun subscriberExecutor (): ExecutorService","title":"subscriberExecutor - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-real-event-router-module/subscriber-executor/#subscriberexecutor","text":"[jvm]\\ @Provides @Singleton fun subscriberExecutor (): ExecutorService","title":"subscriberExecutor"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent SocketEvent \u00b6 [jvm]\\ sealed class SocketEvent Types \u00b6 Name Summary Ack [jvm] data class Ack (topic: String ) : SocketEvent Event [jvm] data class Event (topic: String , message: String ) : SocketEvent Subscribe [jvm] data class Subscribe (topic: String ) : SocketEvent UnknownItem [jvm] object UnknownItem : SocketEvent Unsubscribe [jvm] data class Unsubscribe (topic: String ) : SocketEvent Inheritors \u00b6 Name Event Subscribe Unsubscribe Ack UnknownItem","title":"SocketEvent - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/#socketevent","text":"[jvm]\\ sealed class SocketEvent","title":"SocketEvent"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/#types","text":"Name Summary Ack [jvm] data class Ack (topic: String ) : SocketEvent Event [jvm] data class Event (topic: String , message: String ) : SocketEvent Subscribe [jvm] data class Subscribe (topic: String ) : SocketEvent UnknownItem [jvm] object UnknownItem : SocketEvent Unsubscribe [jvm] data class Unsubscribe (topic: String ) : SocketEvent","title":"Types"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/#inheritors","text":"Name Event Subscribe Unsubscribe Ack UnknownItem","title":"Inheritors"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-ack/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Ack Ack \u00b6 [jvm]\\ data class Ack (topic: String ) : SocketEvent Properties \u00b6 Name Summary topic [jvm] val topic : String","title":"Ack - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-ack/#ack","text":"[jvm]\\ data class Ack (topic: String ) : SocketEvent","title":"Ack"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-ack/#properties","text":"Name Summary topic [jvm] val topic : String","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-ack/-ack/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Ack / Ack Ack \u00b6 [jvm]\\ fun Ack (topic: String )","title":"Ack - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-ack/-ack/#ack","text":"[jvm]\\ fun Ack (topic: String )","title":"Ack"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-ack/topic/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Ack / topic topic \u00b6 [jvm]\\ val topic : String","title":"topic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-ack/topic/#topic","text":"[jvm]\\ val topic : String","title":"topic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Event Event \u00b6 [jvm]\\ data class Event (topic: String , message: String ) : SocketEvent Properties \u00b6 Name Summary message [jvm] val message : String topic [jvm] val topic : String","title":"Event - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/#event","text":"[jvm]\\ data class Event (topic: String , message: String ) : SocketEvent","title":"Event"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/#properties","text":"Name Summary message [jvm] val message : String topic [jvm] val topic : String","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/-event/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Event / Event Event \u00b6 [jvm]\\ fun Event (topic: String , message: String )","title":"Event - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/-event/#event","text":"[jvm]\\ fun Event (topic: String , message: String )","title":"Event"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/message/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Event / message message \u00b6 [jvm]\\ val message : String","title":"message - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/message/#message","text":"[jvm]\\ val message : String","title":"message"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/topic/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Event / topic topic \u00b6 [jvm]\\ val topic : String","title":"topic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-event/topic/#topic","text":"[jvm]\\ val topic : String","title":"topic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-subscribe/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Subscribe Subscribe \u00b6 [jvm]\\ data class Subscribe (topic: String ) : SocketEvent Properties \u00b6 Name Summary topic [jvm] val topic : String","title":"Subscribe - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-subscribe/#subscribe","text":"[jvm]\\ data class Subscribe (topic: String ) : SocketEvent","title":"Subscribe"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-subscribe/#properties","text":"Name Summary topic [jvm] val topic : String","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-subscribe/-subscribe/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Subscribe / Subscribe Subscribe \u00b6 [jvm]\\ fun Subscribe (topic: String )","title":"Subscribe - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-subscribe/-subscribe/#subscribe","text":"[jvm]\\ fun Subscribe (topic: String )","title":"Subscribe"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-subscribe/topic/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Subscribe / topic topic \u00b6 [jvm]\\ val topic : String","title":"topic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-subscribe/topic/#topic","text":"[jvm]\\ val topic : String","title":"topic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unknown-item/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / UnknownItem UnknownItem \u00b6 [jvm]\\ object UnknownItem : SocketEvent","title":"UnknownItem - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unknown-item/#unknownitem","text":"[jvm]\\ object UnknownItem : SocketEvent","title":"UnknownItem"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unsubscribe/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Unsubscribe Unsubscribe \u00b6 [jvm]\\ data class Unsubscribe (topic: String ) : SocketEvent Properties \u00b6 Name Summary topic [jvm] val topic : String","title":"Unsubscribe - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unsubscribe/#unsubscribe","text":"[jvm]\\ data class Unsubscribe (topic: String ) : SocketEvent","title":"Unsubscribe"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unsubscribe/#properties","text":"Name Summary topic [jvm] val topic : String","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unsubscribe/-unsubscribe/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Unsubscribe / Unsubscribe Unsubscribe \u00b6 [jvm]\\ fun Unsubscribe (topic: String )","title":"Unsubscribe - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unsubscribe/-unsubscribe/#unsubscribe","text":"[jvm]\\ fun Unsubscribe (topic: String )","title":"Unsubscribe"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unsubscribe/topic/","text":"// misk-eventrouter / misk.eventrouter / SocketEvent / Unsubscribe / topic topic \u00b6 [jvm]\\ val topic : String","title":"topic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event/-unsubscribe/topic/#topic","text":"[jvm]\\ val topic : String","title":"topic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter SocketEventJsonAdapter \u00b6 [jvm]\\ object SocketEventJsonAdapter Types \u00b6 Name Summary SocketEventJson [jvm] data class SocketEventJson (type: String , topic: String ?, message: String ?) Functions \u00b6 Name Summary fromJson [jvm] fun fromJson (json: SocketEventJsonAdapter.SocketEventJson ): SocketEvent toJson [jvm] fun toJson (item: SocketEvent ): SocketEventJsonAdapter.SocketEventJson","title":"SocketEventJsonAdapter - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/#socketeventjsonadapter","text":"[jvm]\\ object SocketEventJsonAdapter","title":"SocketEventJsonAdapter"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/#types","text":"Name Summary SocketEventJson [jvm] data class SocketEventJson (type: String , topic: String ?, message: String ?)","title":"Types"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/#functions","text":"Name Summary fromJson [jvm] fun fromJson (json: SocketEventJsonAdapter.SocketEventJson ): SocketEvent toJson [jvm] fun toJson (item: SocketEvent ): SocketEventJsonAdapter.SocketEventJson","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/from-json/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter / fromJson fromJson \u00b6 [jvm]\\ fun fromJson (json: SocketEventJsonAdapter.SocketEventJson ): SocketEvent","title":"fromJson - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/from-json/#fromjson","text":"[jvm]\\ fun fromJson (json: SocketEventJsonAdapter.SocketEventJson ): SocketEvent","title":"fromJson"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/to-json/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter / toJson toJson \u00b6 [jvm]\\ fun toJson (item: SocketEvent ): SocketEventJsonAdapter.SocketEventJson","title":"toJson - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/to-json/#tojson","text":"[jvm]\\ fun toJson (item: SocketEvent ): SocketEventJsonAdapter.SocketEventJson","title":"toJson"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter / SocketEventJson SocketEventJson \u00b6 [jvm]\\ data class SocketEventJson (type: String , topic: String ?, message: String ?) Properties \u00b6 Name Summary message [jvm] val message : String ? topic [jvm] val topic : String ? type [jvm] val type : String","title":"SocketEventJson - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/#socketeventjson","text":"[jvm]\\ data class SocketEventJson (type: String , topic: String ?, message: String ?)","title":"SocketEventJson"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/#properties","text":"Name Summary message [jvm] val message : String ? topic [jvm] val topic : String ? type [jvm] val type : String","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/-socket-event-json/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter / SocketEventJson / SocketEventJson SocketEventJson \u00b6 [jvm]\\ fun SocketEventJson (type: String , topic: String ?, message: String ?)","title":"SocketEventJson - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/-socket-event-json/#socketeventjson","text":"[jvm]\\ fun SocketEventJson (type: String , topic: String ?, message: String ?)","title":"SocketEventJson"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/message/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter / SocketEventJson / message message \u00b6 [jvm]\\ val message : String ?","title":"message - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/message/#message","text":"[jvm]\\ val message : String ?","title":"message"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/topic/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter / SocketEventJson / topic topic \u00b6 [jvm]\\ val topic : String ?","title":"topic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/topic/#topic","text":"[jvm]\\ val topic : String ?","title":"topic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/type/","text":"// misk-eventrouter / misk.eventrouter / SocketEventJsonAdapter / SocketEventJson / type type \u00b6 [jvm]\\ val type : String","title":"type - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-socket-event-json-adapter/-socket-event-json/type/#type","text":"[jvm]\\ val type : String","title":"type"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/","text":"// misk-eventrouter / misk.eventrouter / Subscription Subscription \u00b6 [jvm]\\ interface Subscription < T : Any > Functions \u00b6 Name Summary cancel [jvm] abstract fun cancel () Properties \u00b6 Name Summary topic [jvm] abstract val topic : Topic < T >","title":"Subscription - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/#subscription","text":"[jvm]\\ interface Subscription < T : Any >","title":"Subscription"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/#functions","text":"Name Summary cancel [jvm] abstract fun cancel ()","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/#properties","text":"Name Summary topic [jvm] abstract val topic : Topic < T >","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/cancel/","text":"// misk-eventrouter / misk.eventrouter / Subscription / cancel cancel \u00b6 [jvm]\\ abstract fun cancel ()","title":"cancel - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/cancel/#cancel","text":"[jvm]\\ abstract fun cancel ()","title":"cancel"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/topic/","text":"// misk-eventrouter / misk.eventrouter / Subscription / topic topic \u00b6 [jvm]\\ abstract val topic : Topic < T >","title":"topic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-subscription/topic/#topic","text":"[jvm]\\ abstract val topic : Topic < T >","title":"topic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/","text":"// misk-eventrouter / misk.eventrouter / Topic Topic \u00b6 [jvm]\\ interface Topic < T : Any > Functions \u00b6 Name Summary publish [jvm] abstract fun publish (event: T ) subscribe [jvm] abstract fun subscribe (listener: Listener < T >): Subscription < T > Properties \u00b6 Name Summary name [jvm] abstract val name : String","title":"Topic - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/#topic","text":"[jvm]\\ interface Topic < T : Any >","title":"Topic"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/#functions","text":"Name Summary publish [jvm] abstract fun publish (event: T ) subscribe [jvm] abstract fun subscribe (listener: Listener < T >): Subscription < T >","title":"Functions"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/#properties","text":"Name Summary name [jvm] abstract val name : String","title":"Properties"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/name/","text":"// misk-eventrouter / misk.eventrouter / Topic / name name \u00b6 [jvm]\\ abstract val name : String","title":"name - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/name/#name","text":"[jvm]\\ abstract val name : String","title":"name"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/publish/","text":"// misk-eventrouter / misk.eventrouter / Topic / publish publish \u00b6 [jvm]\\ abstract fun publish (event: T )","title":"publish - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/publish/#publish","text":"[jvm]\\ abstract fun publish (event: T )","title":"publish"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/subscribe/","text":"// misk-eventrouter / misk.eventrouter / Topic / subscribe subscribe \u00b6 [jvm]\\ abstract fun subscribe (listener: Listener < T >): Subscription < T >","title":"subscribe - Misk"},{"location":"0.x/misk-eventrouter/misk.eventrouter/-topic/subscribe/#subscribe","text":"[jvm]\\ abstract fun subscribe (listener: Listener < T >): Subscription < T >","title":"subscribe"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb Package misk.exceptions.dynamodb \u00b6 Types \u00b6 Name Summary ClientExecutionTimeoutExceptionMapper [jvm] class ClientExecutionTimeoutExceptionMapper @Injectconstructor : ExceptionMapper<ClientExecutionTimeoutException> Maps ClientExecutionTimeoutException to 503 responses because the exception is concurrency related DynamoDbExceptionMapperModule [jvm] class DynamoDbExceptionMapperModule : KAbstractModule TransactionCanceledExceptionMapper [jvm] class TransactionCanceledExceptionMapper @Injectconstructor : ExceptionMapper<TransactionCanceledException> Maps certain TransactionCanceledExceptionMapper to 503 responses when the exception is concurrency related","title":"Package misk.exceptions.dynamodb - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/#package-miskexceptionsdynamodb","text":"","title":"Package misk.exceptions.dynamodb"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/#types","text":"Name Summary ClientExecutionTimeoutExceptionMapper [jvm] class ClientExecutionTimeoutExceptionMapper @Injectconstructor : ExceptionMapper<ClientExecutionTimeoutException> Maps ClientExecutionTimeoutException to 503 responses because the exception is concurrency related DynamoDbExceptionMapperModule [jvm] class DynamoDbExceptionMapperModule : KAbstractModule TransactionCanceledExceptionMapper [jvm] class TransactionCanceledExceptionMapper @Injectconstructor : ExceptionMapper<TransactionCanceledException> Maps certain TransactionCanceledExceptionMapper to 503 responses when the exception is concurrency related","title":"Types"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / ClientExecutionTimeoutExceptionMapper ClientExecutionTimeoutExceptionMapper \u00b6 [jvm]\\ class ClientExecutionTimeoutExceptionMapper @Injectconstructor : ExceptionMapper<ClientExecutionTimeoutException> Maps ClientExecutionTimeoutException to 503 responses because the exception is concurrency related Constructors \u00b6 ClientExecutionTimeoutExceptionMapper [jvm] @Inject fun ClientExecutionTimeoutExceptionMapper () Functions \u00b6 Name Summary canHandle [jvm] open override fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open fun loggingLevel (th: ClientExecutionTimeoutException): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: ClientExecutionTimeoutException): GrpcErrorResponse? toResponse [jvm] open override fun toResponse (th: ClientExecutionTimeoutException): Response<ResponseBody>","title":"ClientExecutionTimeoutExceptionMapper - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/#clientexecutiontimeoutexceptionmapper","text":"[jvm]\\ class ClientExecutionTimeoutExceptionMapper @Injectconstructor : ExceptionMapper<ClientExecutionTimeoutException> Maps ClientExecutionTimeoutException to 503 responses because the exception is concurrency related","title":"ClientExecutionTimeoutExceptionMapper"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/#constructors","text":"ClientExecutionTimeoutExceptionMapper [jvm] @Inject fun ClientExecutionTimeoutExceptionMapper ()","title":"Constructors"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/#functions","text":"Name Summary canHandle [jvm] open override fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open fun loggingLevel (th: ClientExecutionTimeoutException): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: ClientExecutionTimeoutException): GrpcErrorResponse? toResponse [jvm] open override fun toResponse (th: ClientExecutionTimeoutException): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/-client-execution-timeout-exception-mapper/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / ClientExecutionTimeoutExceptionMapper / ClientExecutionTimeoutExceptionMapper ClientExecutionTimeoutExceptionMapper \u00b6 [jvm]\\ @Inject fun ClientExecutionTimeoutExceptionMapper ()","title":"ClientExecutionTimeoutExceptionMapper - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/-client-execution-timeout-exception-mapper/#clientexecutiontimeoutexceptionmapper","text":"[jvm]\\ @Inject fun ClientExecutionTimeoutExceptionMapper ()","title":"ClientExecutionTimeoutExceptionMapper"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/can-handle/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / ClientExecutionTimeoutExceptionMapper / canHandle canHandle \u00b6 [jvm]\\ open override fun canHandle (th: Throwable ): Boolean","title":"canHandle - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/can-handle/#canhandle","text":"[jvm]\\ open override fun canHandle (th: Throwable ): Boolean","title":"canHandle"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/to-response/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / ClientExecutionTimeoutExceptionMapper / toResponse toResponse \u00b6 [jvm]\\ open override fun toResponse (th: ClientExecutionTimeoutException): Response<ResponseBody>","title":"toResponse - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-client-execution-timeout-exception-mapper/to-response/#toresponse","text":"[jvm]\\ open override fun toResponse (th: ClientExecutionTimeoutException): Response<ResponseBody>","title":"toResponse"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-dynamo-db-exception-mapper-module/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / DynamoDbExceptionMapperModule DynamoDbExceptionMapperModule \u00b6 [jvm]\\ class DynamoDbExceptionMapperModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"DynamoDbExceptionMapperModule - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-dynamo-db-exception-mapper-module/#dynamodbexceptionmappermodule","text":"[jvm]\\ class DynamoDbExceptionMapperModule : KAbstractModule","title":"DynamoDbExceptionMapperModule"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-dynamo-db-exception-mapper-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-dynamo-db-exception-mapper-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-dynamo-db-exception-mapper-module/-dynamo-db-exception-mapper-module/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / DynamoDbExceptionMapperModule / DynamoDbExceptionMapperModule DynamoDbExceptionMapperModule \u00b6 [jvm]\\ fun DynamoDbExceptionMapperModule ()","title":"DynamoDbExceptionMapperModule - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-dynamo-db-exception-mapper-module/-dynamo-db-exception-mapper-module/#dynamodbexceptionmappermodule","text":"[jvm]\\ fun DynamoDbExceptionMapperModule ()","title":"DynamoDbExceptionMapperModule"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / TransactionCanceledExceptionMapper TransactionCanceledExceptionMapper \u00b6 [jvm]\\ class TransactionCanceledExceptionMapper @Injectconstructor : ExceptionMapper<TransactionCanceledException> Maps certain TransactionCanceledExceptionMapper to 503 responses when the exception is concurrency related Constructors \u00b6 TransactionCanceledExceptionMapper [jvm] @Inject fun TransactionCanceledExceptionMapper () Functions \u00b6 Name Summary canHandle [jvm] open override fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open override fun loggingLevel (th: TransactionCanceledException): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: TransactionCanceledException): GrpcErrorResponse? toResponse [jvm] open override fun toResponse (th: TransactionCanceledException): Response<ResponseBody>","title":"TransactionCanceledExceptionMapper - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/#transactioncanceledexceptionmapper","text":"[jvm]\\ class TransactionCanceledExceptionMapper @Injectconstructor : ExceptionMapper<TransactionCanceledException> Maps certain TransactionCanceledExceptionMapper to 503 responses when the exception is concurrency related","title":"TransactionCanceledExceptionMapper"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/#constructors","text":"TransactionCanceledExceptionMapper [jvm] @Inject fun TransactionCanceledExceptionMapper ()","title":"Constructors"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/#functions","text":"Name Summary canHandle [jvm] open override fun canHandle (th: Throwable ): Boolean loggingLevel [jvm] open override fun loggingLevel (th: TransactionCanceledException): Level toGrpcResponse [jvm] open fun toGrpcResponse (th: TransactionCanceledException): GrpcErrorResponse? toResponse [jvm] open override fun toResponse (th: TransactionCanceledException): Response<ResponseBody>","title":"Functions"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/-transaction-canceled-exception-mapper/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / TransactionCanceledExceptionMapper / TransactionCanceledExceptionMapper TransactionCanceledExceptionMapper \u00b6 [jvm]\\ @Inject fun TransactionCanceledExceptionMapper ()","title":"TransactionCanceledExceptionMapper - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/-transaction-canceled-exception-mapper/#transactioncanceledexceptionmapper","text":"[jvm]\\ @Inject fun TransactionCanceledExceptionMapper ()","title":"TransactionCanceledExceptionMapper"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/can-handle/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / TransactionCanceledExceptionMapper / canHandle canHandle \u00b6 [jvm]\\ open override fun canHandle (th: Throwable ): Boolean","title":"canHandle - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/can-handle/#canhandle","text":"[jvm]\\ open override fun canHandle (th: Throwable ): Boolean","title":"canHandle"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/logging-level/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / TransactionCanceledExceptionMapper / loggingLevel loggingLevel \u00b6 [jvm]\\ open override fun loggingLevel (th: TransactionCanceledException): Level","title":"loggingLevel - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/logging-level/#logginglevel","text":"[jvm]\\ open override fun loggingLevel (th: TransactionCanceledException): Level","title":"loggingLevel"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/to-response/","text":"// misk-exceptions-dynamodb / misk.exceptions.dynamodb / TransactionCanceledExceptionMapper / toResponse toResponse \u00b6 [jvm]\\ open override fun toResponse (th: TransactionCanceledException): Response<ResponseBody>","title":"toResponse - Misk"},{"location":"0.x/misk-exceptions-dynamodb/misk.exceptions.dynamodb/-transaction-canceled-exception-mapper/to-response/#toresponse","text":"[jvm]\\ open override fun toResponse (th: TransactionCanceledException): Response<ResponseBody>","title":"toResponse"},{"location":"0.x/misk-feature/misk.feature/","text":"// misk-feature / misk.feature Package misk.feature \u00b6 Types \u00b6 Name Summary Attributes [jvm] class Attributes @ JvmOverloads constructor(text: Map < String , String >, number: Map < String , Number >?, anonymous: Boolean ) : Attributes DynamicConfig [jvm] interface DynamicConfig Interface for evaluating dynamic flags. Dynamic flags are similar to feature flags, but they don\u2019t support different variations for different keys. Feature [jvm] class Feature (name: String ) : Feature FeatureFlags [jvm] interface FeatureFlags Interface for evaluating feature flags. FeatureService [jvm] interface FeatureService : Service Marker interface to integrate with the misk service graph. TrackerReference [jvm] interface TrackerReference : TrackerReference Functions \u00b6 Name Summary getEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . getEnum (feature: Feature ): T inline fun < T : Enum < T >> FeatureFlags . getEnum (feature: Feature , key: String , attributes: Attributes = Attributes()): T getJson [jvm] inline fun < T > DynamicConfig . getJson (feature: Feature ): T inline fun < T > FeatureFlags . getJson (feature: Feature , key: String , attributes: Attributes = Attributes()): T toMisk [jvm] fun TrackerReference. toMisk (): TrackerReference trackEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . trackEnum (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T : Enum < T >> FeatureFlags . trackEnum (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference trackJson [jvm] inline fun < T > DynamicConfig . trackJson (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T > FeatureFlags . trackJson (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"Package misk.feature - Misk"},{"location":"0.x/misk-feature/misk.feature/#package-miskfeature","text":"","title":"Package misk.feature"},{"location":"0.x/misk-feature/misk.feature/#types","text":"Name Summary Attributes [jvm] class Attributes @ JvmOverloads constructor(text: Map < String , String >, number: Map < String , Number >?, anonymous: Boolean ) : Attributes DynamicConfig [jvm] interface DynamicConfig Interface for evaluating dynamic flags. Dynamic flags are similar to feature flags, but they don\u2019t support different variations for different keys. Feature [jvm] class Feature (name: String ) : Feature FeatureFlags [jvm] interface FeatureFlags Interface for evaluating feature flags. FeatureService [jvm] interface FeatureService : Service Marker interface to integrate with the misk service graph. TrackerReference [jvm] interface TrackerReference : TrackerReference","title":"Types"},{"location":"0.x/misk-feature/misk.feature/#functions","text":"Name Summary getEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . getEnum (feature: Feature ): T inline fun < T : Enum < T >> FeatureFlags . getEnum (feature: Feature , key: String , attributes: Attributes = Attributes()): T getJson [jvm] inline fun < T > DynamicConfig . getJson (feature: Feature ): T inline fun < T > FeatureFlags . getJson (feature: Feature , key: String , attributes: Attributes = Attributes()): T toMisk [jvm] fun TrackerReference. toMisk (): TrackerReference trackEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . trackEnum (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T : Enum < T >> FeatureFlags . trackEnum (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference trackJson [jvm] inline fun < T > DynamicConfig . trackJson (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T > FeatureFlags . trackJson (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"Functions"},{"location":"0.x/misk-feature/misk.feature/get-enum/","text":"// misk-feature / misk.feature / getEnum getEnum \u00b6 [jvm]\\ inline fun < T : Enum < T >> DynamicConfig . getEnum (feature: Feature ): T inline fun < T : Enum < T >> FeatureFlags . getEnum (feature: Feature , key: String , attributes: Attributes = Attributes()): T","title":"getEnum - Misk"},{"location":"0.x/misk-feature/misk.feature/get-enum/#getenum","text":"[jvm]\\ inline fun < T : Enum < T >> DynamicConfig . getEnum (feature: Feature ): T inline fun < T : Enum < T >> FeatureFlags . getEnum (feature: Feature , key: String , attributes: Attributes = Attributes()): T","title":"getEnum"},{"location":"0.x/misk-feature/misk.feature/get-json/","text":"// misk-feature / misk.feature / getJson getJson \u00b6 [jvm]\\ inline fun < T > DynamicConfig . getJson (feature: Feature ): T inline fun < T > FeatureFlags . getJson (feature: Feature , key: String , attributes: Attributes = Attributes()): T","title":"getJson - Misk"},{"location":"0.x/misk-feature/misk.feature/get-json/#getjson","text":"[jvm]\\ inline fun < T > DynamicConfig . getJson (feature: Feature ): T inline fun < T > FeatureFlags . getJson (feature: Feature , key: String , attributes: Attributes = Attributes()): T","title":"getJson"},{"location":"0.x/misk-feature/misk.feature/to-misk/","text":"// misk-feature / misk.feature / toMisk toMisk \u00b6 [jvm]\\ fun TrackerReference. toMisk (): TrackerReference","title":"toMisk - Misk"},{"location":"0.x/misk-feature/misk.feature/to-misk/#tomisk","text":"[jvm]\\ fun TrackerReference. toMisk (): TrackerReference","title":"toMisk"},{"location":"0.x/misk-feature/misk.feature/track-enum/","text":"// misk-feature / misk.feature / trackEnum trackEnum \u00b6 [jvm]\\ inline fun < T : Enum < T >> DynamicConfig . trackEnum (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T : Enum < T >> FeatureFlags . trackEnum (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum - Misk"},{"location":"0.x/misk-feature/misk.feature/track-enum/#trackenum","text":"[jvm]\\ inline fun < T : Enum < T >> DynamicConfig . trackEnum (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T : Enum < T >> FeatureFlags . trackEnum (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum"},{"location":"0.x/misk-feature/misk.feature/track-json/","text":"// misk-feature / misk.feature / trackJson trackJson \u00b6 [jvm]\\ inline fun < T > DynamicConfig . trackJson (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T > FeatureFlags . trackJson (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson - Misk"},{"location":"0.x/misk-feature/misk.feature/track-json/#trackjson","text":"[jvm]\\ inline fun < T > DynamicConfig . trackJson (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference inline fun < T > FeatureFlags . trackJson (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson"},{"location":"0.x/misk-feature/misk.feature/-attributes/","text":"// misk-feature / misk.feature / Attributes Attributes \u00b6 [jvm]\\ class Attributes @ JvmOverloads constructor(text: Map < String , String >, number: Map < String , Number >?, anonymous: Boolean ) : Attributes Functions \u00b6 Name Summary copy [jvm] fun copy (text: Map < String , String >, number: Map < String , Number >?, anonymous: Boolean ): Attributes equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String with [jvm] fun with (name: String , value: Number ): Attributes fun with (name: String , value: String ): Attributes Properties \u00b6 Name Summary anonymous [jvm] val anonymous : Boolean number [jvm] val number : Map < String , Number >? text [jvm] val text : Map < String , String >","title":"Attributes - Misk"},{"location":"0.x/misk-feature/misk.feature/-attributes/#attributes","text":"[jvm]\\ class Attributes @ JvmOverloads constructor(text: Map < String , String >, number: Map < String , Number >?, anonymous: Boolean ) : Attributes","title":"Attributes"},{"location":"0.x/misk-feature/misk.feature/-attributes/#functions","text":"Name Summary copy [jvm] fun copy (text: Map < String , String >, number: Map < String , Number >?, anonymous: Boolean ): Attributes equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String with [jvm] fun with (name: String , value: Number ): Attributes fun with (name: String , value: String ): Attributes","title":"Functions"},{"location":"0.x/misk-feature/misk.feature/-attributes/#properties","text":"Name Summary anonymous [jvm] val anonymous : Boolean number [jvm] val number : Map < String , Number >? text [jvm] val text : Map < String , String >","title":"Properties"},{"location":"0.x/misk-feature/misk.feature/-attributes/-attributes/","text":"// misk-feature / misk.feature / Attributes / Attributes Attributes \u00b6 [jvm]\\ @ JvmOverloads fun Attributes (text: Map < String , String > = mapOf(), number: Map < String , Number >? = null, anonymous: Boolean = false)","title":"Attributes - Misk"},{"location":"0.x/misk-feature/misk.feature/-attributes/-attributes/#attributes","text":"[jvm]\\ @ JvmOverloads fun Attributes (text: Map < String , String > = mapOf(), number: Map < String , Number >? = null, anonymous: Boolean = false)","title":"Attributes"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/","text":"// misk-feature / misk.feature / DynamicConfig DynamicConfig \u00b6 [jvm]\\ interface DynamicConfig Interface for evaluating dynamic flags. Dynamic flags are similar to feature flags, but they don\u2019t support different variations for different keys. Functions \u00b6 Name Summary getBoolean [jvm] abstract fun getBoolean (feature: Feature ): Boolean Returns the value of a boolean dynamic flag. getDouble [jvm] abstract fun getDouble (feature: Feature ): Double Returns the value of a double dynamic flag. getEnum [jvm] abstract fun < T : Enum < T >> getEnum (feature: Feature , clazz: Class < T >): T Returns the value of an enumerated dynamic flag. getInt [jvm] abstract fun getInt (feature: Feature ): Int Returns the value of an integer dynamic flag. getJson [jvm] abstract fun < T > getJson (feature: Feature , clazz: Class < T >): T Returns the value of a JSON dynamic flag. getString [jvm] abstract fun getString (feature: Feature ): String Returns the value of a string dynamic flag. trackBoolean [jvm] abstract fun trackBoolean (feature: Feature , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a boolean dynamic config tracker which will be invoked whenever the boolean dynamic config changes value. trackDouble [jvm] abstract fun trackDouble (feature: Feature , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a double dynamic config tracker which will be invoked whenever the double dynamic config changes value. trackEnum [jvm] abstract fun < T : Enum < T >> trackEnum (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a enum dynamic config tracker which will be invoked whenever the enum dynamic config changes value. trackInt [jvm] abstract fun trackInt (feature: Feature , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a integer dynamic config tracker which will be invoked whenever the integer dynamic config changes value. trackJson [jvm] abstract fun < T > trackJson (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a json dynamic config tracker which will be invoked whenever the json dynamic config changes value. trackString [jvm] abstract fun trackString (feature: Feature , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a string dynamic config tracker which will be invoked whenever the string dynamic config changes value. Extensions \u00b6 Name Summary getEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . getEnum (feature: Feature ): T getJson [jvm] inline fun < T > DynamicConfig . getJson (feature: Feature ): T trackEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . trackEnum (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference trackJson [jvm] inline fun < T > DynamicConfig . trackJson (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"DynamicConfig - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/#dynamicconfig","text":"[jvm]\\ interface DynamicConfig Interface for evaluating dynamic flags. Dynamic flags are similar to feature flags, but they don\u2019t support different variations for different keys.","title":"DynamicConfig"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/#functions","text":"Name Summary getBoolean [jvm] abstract fun getBoolean (feature: Feature ): Boolean Returns the value of a boolean dynamic flag. getDouble [jvm] abstract fun getDouble (feature: Feature ): Double Returns the value of a double dynamic flag. getEnum [jvm] abstract fun < T : Enum < T >> getEnum (feature: Feature , clazz: Class < T >): T Returns the value of an enumerated dynamic flag. getInt [jvm] abstract fun getInt (feature: Feature ): Int Returns the value of an integer dynamic flag. getJson [jvm] abstract fun < T > getJson (feature: Feature , clazz: Class < T >): T Returns the value of a JSON dynamic flag. getString [jvm] abstract fun getString (feature: Feature ): String Returns the value of a string dynamic flag. trackBoolean [jvm] abstract fun trackBoolean (feature: Feature , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a boolean dynamic config tracker which will be invoked whenever the boolean dynamic config changes value. trackDouble [jvm] abstract fun trackDouble (feature: Feature , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a double dynamic config tracker which will be invoked whenever the double dynamic config changes value. trackEnum [jvm] abstract fun < T : Enum < T >> trackEnum (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a enum dynamic config tracker which will be invoked whenever the enum dynamic config changes value. trackInt [jvm] abstract fun trackInt (feature: Feature , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a integer dynamic config tracker which will be invoked whenever the integer dynamic config changes value. trackJson [jvm] abstract fun < T > trackJson (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a json dynamic config tracker which will be invoked whenever the json dynamic config changes value. trackString [jvm] abstract fun trackString (feature: Feature , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a string dynamic config tracker which will be invoked whenever the string dynamic config changes value.","title":"Functions"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/#extensions","text":"Name Summary getEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . getEnum (feature: Feature ): T getJson [jvm] inline fun < T > DynamicConfig . getJson (feature: Feature ): T trackEnum [jvm] inline fun < T : Enum < T >> DynamicConfig . trackEnum (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference trackJson [jvm] inline fun < T > DynamicConfig . trackJson (feature: Feature , executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"Extensions"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-boolean/","text":"// misk-feature / misk.feature / DynamicConfig / getBoolean getBoolean \u00b6 [jvm]\\ abstract fun getBoolean (feature: Feature ): Boolean Returns the value of a boolean dynamic flag.","title":"getBoolean - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-boolean/#getboolean","text":"[jvm]\\ abstract fun getBoolean (feature: Feature ): Boolean Returns the value of a boolean dynamic flag.","title":"getBoolean"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-double/","text":"// misk-feature / misk.feature / DynamicConfig / getDouble getDouble \u00b6 [jvm]\\ abstract fun getDouble (feature: Feature ): Double Returns the value of a double dynamic flag.","title":"getDouble - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-double/#getdouble","text":"[jvm]\\ abstract fun getDouble (feature: Feature ): Double Returns the value of a double dynamic flag.","title":"getDouble"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-enum/","text":"// misk-feature / misk.feature / DynamicConfig / getEnum getEnum \u00b6 [jvm]\\ abstract fun < T : Enum < T >> getEnum (feature: Feature , clazz: Class < T >): T Returns the value of an enumerated dynamic flag.","title":"getEnum - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-enum/#getenum","text":"[jvm]\\ abstract fun < T : Enum < T >> getEnum (feature: Feature , clazz: Class < T >): T Returns the value of an enumerated dynamic flag.","title":"getEnum"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-int/","text":"// misk-feature / misk.feature / DynamicConfig / getInt getInt \u00b6 [jvm]\\ abstract fun getInt (feature: Feature ): Int Returns the value of an integer dynamic flag.","title":"getInt - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-int/#getint","text":"[jvm]\\ abstract fun getInt (feature: Feature ): Int Returns the value of an integer dynamic flag.","title":"getInt"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-json/","text":"// misk-feature / misk.feature / DynamicConfig / getJson getJson \u00b6 [jvm]\\ abstract fun < T > getJson (feature: Feature , clazz: Class < T >): T Returns the value of a JSON dynamic flag.","title":"getJson - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-json/#getjson","text":"[jvm]\\ abstract fun < T > getJson (feature: Feature , clazz: Class < T >): T Returns the value of a JSON dynamic flag.","title":"getJson"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-string/","text":"// misk-feature / misk.feature / DynamicConfig / getString getString \u00b6 [jvm]\\ abstract fun getString (feature: Feature ): String Returns the value of a string dynamic flag.","title":"getString - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/get-string/#getstring","text":"[jvm]\\ abstract fun getString (feature: Feature ): String Returns the value of a string dynamic flag.","title":"getString"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-boolean/","text":"// misk-feature / misk.feature / DynamicConfig / trackBoolean trackBoolean \u00b6 [jvm]\\ abstract fun trackBoolean (feature: Feature , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a boolean dynamic config tracker which will be invoked whenever the boolean dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackBoolean - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-boolean/#trackboolean","text":"[jvm]\\ abstract fun trackBoolean (feature: Feature , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a boolean dynamic config tracker which will be invoked whenever the boolean dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackBoolean"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-double/","text":"// misk-feature / misk.feature / DynamicConfig / trackDouble trackDouble \u00b6 [jvm]\\ abstract fun trackDouble (feature: Feature , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a double dynamic config tracker which will be invoked whenever the double dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackDouble - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-double/#trackdouble","text":"[jvm]\\ abstract fun trackDouble (feature: Feature , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a double dynamic config tracker which will be invoked whenever the double dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackDouble"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-enum/","text":"// misk-feature / misk.feature / DynamicConfig / trackEnum trackEnum \u00b6 [jvm]\\ abstract fun < T : Enum < T >> trackEnum (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a enum dynamic config tracker which will be invoked whenever the enum dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackEnum - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-enum/#trackenum","text":"[jvm]\\ abstract fun < T : Enum < T >> trackEnum (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a enum dynamic config tracker which will be invoked whenever the enum dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackEnum"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-int/","text":"// misk-feature / misk.feature / DynamicConfig / trackInt trackInt \u00b6 [jvm]\\ abstract fun trackInt (feature: Feature , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a integer dynamic config tracker which will be invoked whenever the integer dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackInt - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-int/#trackint","text":"[jvm]\\ abstract fun trackInt (feature: Feature , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a integer dynamic config tracker which will be invoked whenever the integer dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackInt"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-json/","text":"// misk-feature / misk.feature / DynamicConfig / trackJson trackJson \u00b6 [jvm]\\ abstract fun < T > trackJson (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a json dynamic config tracker which will be invoked whenever the json dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackJson - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-json/#trackjson","text":"[jvm]\\ abstract fun < T > trackJson (feature: Feature , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a json dynamic config tracker which will be invoked whenever the json dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackJson"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-string/","text":"// misk-feature / misk.feature / DynamicConfig / trackString trackString \u00b6 [jvm]\\ abstract fun trackString (feature: Feature , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a string dynamic config tracker which will be invoked whenever the string dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackString - Misk"},{"location":"0.x/misk-feature/misk.feature/-dynamic-config/track-string/#trackstring","text":"[jvm]\\ abstract fun trackString (feature: Feature , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a string dynamic config tracker which will be invoked whenever the string dynamic config changes value. Returns a tracker reference which can be used to un-register the tracker.","title":"trackString"},{"location":"0.x/misk-feature/misk.feature/-feature/","text":"// misk-feature / misk.feature / Feature Feature \u00b6 [jvm]\\ class Feature (name: String ) : Feature Functions \u00b6 Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String","title":"Feature - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature/#feature","text":"[jvm]\\ class Feature (name: String ) : Feature","title":"Feature"},{"location":"0.x/misk-feature/misk.feature/-feature/#functions","text":"Name Summary equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-feature/misk.feature/-feature/#properties","text":"Name Summary name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-feature/misk.feature/-feature/-feature/","text":"// misk-feature / misk.feature / Feature / Feature Feature \u00b6 [jvm]\\ fun Feature (name: String )","title":"Feature - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature/-feature/#feature","text":"[jvm]\\ fun Feature (name: String )","title":"Feature"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/","text":"// misk-feature / misk.feature / FeatureFlags FeatureFlags \u00b6 [jvm]\\ interface FeatureFlags Interface for evaluating feature flags. Functions \u00b6 Name Summary get [jvm] abstract fun get (flag: BooleanFeatureFlag): Boolean Calculates the value of a boolean feature flag [jvm] abstract fun get (flag: DoubleFeatureFlag): Double Calculates the value of a double feature flag [jvm] abstract fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T Calculates the value of an enum feature flag [jvm] abstract fun get (flag: IntFeatureFlag): Int Calculates the value of an int feature flag [jvm] abstract fun < T : Any > get (flag: JsonFeatureFlag< T >): T Calculates the value of a json feature flag [jvm] abstract fun get (flag: StringFeatureFlag): String Calculates the value of a string feature flag getBoolean [jvm] open fun getBoolean (feature: Feature , key: String ): Boolean [jvm] abstract fun getBoolean (feature: Feature , key: String , attributes: Attributes = Attributes()): Boolean Calculates the value of an boolean feature flag for the given key and attributes. getDouble [jvm] open fun getDouble (feature: Feature , key: String ): Double [jvm] abstract fun getDouble (feature: Feature , key: String , attributes: Attributes = Attributes()): Double Calculates the value of a double feature flag for the given key and attributes. getEnum [jvm] open fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >): T [jvm] abstract fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of an enumerated feature flag for the given key and attributes. getInt [jvm] open fun getInt (feature: Feature , key: String ): Int [jvm] abstract fun getInt (feature: Feature , key: String , attributes: Attributes = Attributes()): Int Calculates the value of an integer feature flag for the given key and attributes. getJson [jvm] open fun < T > getJson (feature: Feature , key: String , clazz: Class < T >): T [jvm] abstract fun < T > getJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of a JSON feature flag for the given key and attributes. getString [jvm] open fun getString (feature: Feature , key: String ): String [jvm] abstract fun getString (feature: Feature , key: String , attributes: Attributes = Attributes()): String Calculates the value of a string feature flag for the given key and attributes. trackBoolean [jvm] open fun trackBoolean (feature: Feature , key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference [jvm] abstract fun trackBoolean (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a tracker for the value of a boolean feature flag for the given key and attributes. trackDouble [jvm] open fun trackDouble (feature: Feature , key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference [jvm] abstract fun trackDouble (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a tracker for the value of a double feature flag for the given key and attributes. trackEnum [jvm] open fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference [jvm] abstract fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of an enumerated feature flag for the given key and attributes. trackInt [jvm] open fun trackInt (feature: Feature , key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference [jvm] abstract fun trackInt (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a tracker for the value of an integer feature flag for the given key and attributes. trackJson [jvm] open fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference [jvm] abstract fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of a JSON feature flag for the given key and attributes. trackString [jvm] open fun trackString (feature: Feature , key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference [jvm] abstract fun trackString (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a tracker for the value of a string feature flag for the given key and attributes. Extensions \u00b6 Name Summary getEnum [jvm] inline fun < T : Enum < T >> FeatureFlags . getEnum (feature: Feature , key: String , attributes: Attributes = Attributes()): T getJson [jvm] inline fun < T > FeatureFlags . getJson (feature: Feature , key: String , attributes: Attributes = Attributes()): T trackEnum [jvm] inline fun < T : Enum < T >> FeatureFlags . trackEnum (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference trackJson [jvm] inline fun < T > FeatureFlags . trackJson (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"FeatureFlags - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/#featureflags","text":"[jvm]\\ interface FeatureFlags Interface for evaluating feature flags.","title":"FeatureFlags"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/#functions","text":"Name Summary get [jvm] abstract fun get (flag: BooleanFeatureFlag): Boolean Calculates the value of a boolean feature flag [jvm] abstract fun get (flag: DoubleFeatureFlag): Double Calculates the value of a double feature flag [jvm] abstract fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T Calculates the value of an enum feature flag [jvm] abstract fun get (flag: IntFeatureFlag): Int Calculates the value of an int feature flag [jvm] abstract fun < T : Any > get (flag: JsonFeatureFlag< T >): T Calculates the value of a json feature flag [jvm] abstract fun get (flag: StringFeatureFlag): String Calculates the value of a string feature flag getBoolean [jvm] open fun getBoolean (feature: Feature , key: String ): Boolean [jvm] abstract fun getBoolean (feature: Feature , key: String , attributes: Attributes = Attributes()): Boolean Calculates the value of an boolean feature flag for the given key and attributes. getDouble [jvm] open fun getDouble (feature: Feature , key: String ): Double [jvm] abstract fun getDouble (feature: Feature , key: String , attributes: Attributes = Attributes()): Double Calculates the value of a double feature flag for the given key and attributes. getEnum [jvm] open fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >): T [jvm] abstract fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of an enumerated feature flag for the given key and attributes. getInt [jvm] open fun getInt (feature: Feature , key: String ): Int [jvm] abstract fun getInt (feature: Feature , key: String , attributes: Attributes = Attributes()): Int Calculates the value of an integer feature flag for the given key and attributes. getJson [jvm] open fun < T > getJson (feature: Feature , key: String , clazz: Class < T >): T [jvm] abstract fun < T > getJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of a JSON feature flag for the given key and attributes. getString [jvm] open fun getString (feature: Feature , key: String ): String [jvm] abstract fun getString (feature: Feature , key: String , attributes: Attributes = Attributes()): String Calculates the value of a string feature flag for the given key and attributes. trackBoolean [jvm] open fun trackBoolean (feature: Feature , key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference [jvm] abstract fun trackBoolean (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a tracker for the value of a boolean feature flag for the given key and attributes. trackDouble [jvm] open fun trackDouble (feature: Feature , key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference [jvm] abstract fun trackDouble (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a tracker for the value of a double feature flag for the given key and attributes. trackEnum [jvm] open fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference [jvm] abstract fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of an enumerated feature flag for the given key and attributes. trackInt [jvm] open fun trackInt (feature: Feature , key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference [jvm] abstract fun trackInt (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a tracker for the value of an integer feature flag for the given key and attributes. trackJson [jvm] open fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference [jvm] abstract fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of a JSON feature flag for the given key and attributes. trackString [jvm] open fun trackString (feature: Feature , key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference [jvm] abstract fun trackString (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a tracker for the value of a string feature flag for the given key and attributes.","title":"Functions"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/#extensions","text":"Name Summary getEnum [jvm] inline fun < T : Enum < T >> FeatureFlags . getEnum (feature: Feature , key: String , attributes: Attributes = Attributes()): T getJson [jvm] inline fun < T > FeatureFlags . getJson (feature: Feature , key: String , attributes: Attributes = Attributes()): T trackEnum [jvm] inline fun < T : Enum < T >> FeatureFlags . trackEnum (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference trackJson [jvm] inline fun < T > FeatureFlags . trackJson (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , noinline tracker: ( T ) -> Unit ): TrackerReference","title":"Extensions"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-boolean/","text":"// misk-feature / misk.feature / FeatureFlags / getBoolean getBoolean \u00b6 [jvm]\\ abstract fun getBoolean (feature: Feature , key: String , attributes: Attributes = Attributes()): Boolean Calculates the value of an boolean feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getBoolean (feature: Feature , key: String ): Boolean","title":"getBoolean - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-boolean/#getboolean","text":"[jvm]\\ abstract fun getBoolean (feature: Feature , key: String , attributes: Attributes = Attributes()): Boolean Calculates the value of an boolean feature flag for the given key and attributes.","title":"getBoolean"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-boolean/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getBoolean (feature: Feature , key: String ): Boolean","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-double/","text":"// misk-feature / misk.feature / FeatureFlags / getDouble getDouble \u00b6 [jvm]\\ abstract fun getDouble (feature: Feature , key: String , attributes: Attributes = Attributes()): Double Calculates the value of a double feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getDouble (feature: Feature , key: String ): Double","title":"getDouble - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-double/#getdouble","text":"[jvm]\\ abstract fun getDouble (feature: Feature , key: String , attributes: Attributes = Attributes()): Double Calculates the value of a double feature flag for the given key and attributes.","title":"getDouble"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-double/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getDouble (feature: Feature , key: String ): Double","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-enum/","text":"// misk-feature / misk.feature / FeatureFlags / getEnum getEnum \u00b6 [jvm]\\ abstract fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of an enumerated feature flag for the given key and attributes. Parameters \u00b6 jvm feature name of the feature flag to evaluate. key unique primary key for the entity the flag should be evaluated against. clazz the enum type. attributes additional attributes to provide to flag evaluation. Throws \u00b6 kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value. [jvm]\\ open fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >): T","title":"getEnum - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-enum/#getenum","text":"[jvm]\\ abstract fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of an enumerated feature flag for the given key and attributes.","title":"getEnum"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-enum/#parameters","text":"jvm feature name of the feature flag to evaluate. key unique primary key for the entity the flag should be evaluated against. clazz the enum type. attributes additional attributes to provide to flag evaluation.","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-enum/#throws","text":"kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value. [jvm]\\ open fun < T : Enum < T >> getEnum (feature: Feature , key: String , clazz: Class < T >): T","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-int/","text":"// misk-feature / misk.feature / FeatureFlags / getInt getInt \u00b6 [jvm]\\ abstract fun getInt (feature: Feature , key: String , attributes: Attributes = Attributes()): Int Calculates the value of an integer feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getInt (feature: Feature , key: String ): Int","title":"getInt - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-int/#getint","text":"[jvm]\\ abstract fun getInt (feature: Feature , key: String , attributes: Attributes = Attributes()): Int Calculates the value of an integer feature flag for the given key and attributes.","title":"getInt"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-int/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getInt (feature: Feature , key: String ): Int","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-json/","text":"// misk-feature / misk.feature / FeatureFlags / getJson getJson \u00b6 [jvm]\\ abstract fun < T > getJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of a JSON feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details Parameters \u00b6 jvm clazz the type to convert the JSON string into. It is expected that a Moshi type adapter is registered with the impl. [jvm]\\ open fun < T > getJson (feature: Feature , key: String , clazz: Class < T >): T","title":"getJson - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-json/#getjson","text":"[jvm]\\ abstract fun < T > getJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes()): T Calculates the value of a JSON feature flag for the given key and attributes.","title":"getJson"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-json/#see-also","text":"jvm misk.feature.FeatureFlags for param details","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-json/#parameters","text":"jvm clazz the type to convert the JSON string into. It is expected that a Moshi type adapter is registered with the impl. [jvm]\\ open fun < T > getJson (feature: Feature , key: String , clazz: Class < T >): T","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-string/","text":"// misk-feature / misk.feature / FeatureFlags / getString getString \u00b6 [jvm]\\ abstract fun getString (feature: Feature , key: String , attributes: Attributes = Attributes()): String Calculates the value of a string feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getString (feature: Feature , key: String ): String","title":"getString - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-string/#getstring","text":"[jvm]\\ abstract fun getString (feature: Feature , key: String , attributes: Attributes = Attributes()): String Calculates the value of a string feature flag for the given key and attributes.","title":"getString"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get-string/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun getString (feature: Feature , key: String ): String","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/","text":"// misk-feature / misk.feature / FeatureFlags / get get \u00b6 [jvm]\\ abstract fun get (flag: BooleanFeatureFlag): Boolean Calculates the value of a boolean feature flag Parameters \u00b6 jvm flag the feature flag to evaluate Throws \u00b6 kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun get (flag: StringFeatureFlag): String Calculates the value of a string feature flag Parameters \u00b6 jvm flag the feature flag to evaluate Throws \u00b6 kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun get (flag: IntFeatureFlag): Int Calculates the value of an int feature flag Parameters \u00b6 jvm flag the feature flag to evaluate Throws \u00b6 kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun get (flag: DoubleFeatureFlag): Double Calculates the value of a double feature flag Parameters \u00b6 jvm flag the feature flag to evaluate Throws \u00b6 kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T Calculates the value of an enum feature flag Parameters \u00b6 jvm flag the feature flag to evaluate Throws \u00b6 kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value. [jvm]\\ abstract fun < T : Any > get (flag: JsonFeatureFlag< T >): T Calculates the value of a json feature flag Parameters \u00b6 jvm flag the feature flag to evaluate Throws \u00b6 kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value.","title":"get - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#get","text":"[jvm]\\ abstract fun get (flag: BooleanFeatureFlag): Boolean Calculates the value of a boolean feature flag","title":"get"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#parameters","text":"jvm flag the feature flag to evaluate","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#throws","text":"kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun get (flag: StringFeatureFlag): String Calculates the value of a string feature flag","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#parameters_1","text":"jvm flag the feature flag to evaluate","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#throws_1","text":"kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun get (flag: IntFeatureFlag): Int Calculates the value of an int feature flag","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#parameters_2","text":"jvm flag the feature flag to evaluate","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#throws_2","text":"kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun get (flag: DoubleFeatureFlag): Double Calculates the value of a double feature flag","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#parameters_3","text":"jvm flag the feature flag to evaluate","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#throws_3","text":"kotlin.RuntimeException if the service is unavailable. [jvm]\\ abstract fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T Calculates the value of an enum feature flag","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#parameters_4","text":"jvm flag the feature flag to evaluate","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#throws_4","text":"kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value. [jvm]\\ abstract fun < T : Any > get (flag: JsonFeatureFlag< T >): T Calculates the value of a json feature flag","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#parameters_5","text":"jvm flag the feature flag to evaluate","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/get/#throws_5","text":"kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value.","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-boolean/","text":"// misk-feature / misk.feature / FeatureFlags / trackBoolean trackBoolean \u00b6 [jvm]\\ abstract fun trackBoolean (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a tracker for the value of a boolean feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackBoolean (feature: Feature , key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"trackBoolean - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-boolean/#trackboolean","text":"[jvm]\\ abstract fun trackBoolean (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference Registers a tracker for the value of a boolean feature flag for the given key and attributes.","title":"trackBoolean"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-boolean/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackBoolean (feature: Feature , key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-double/","text":"// misk-feature / misk.feature / FeatureFlags / trackDouble trackDouble \u00b6 [jvm]\\ abstract fun trackDouble (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a tracker for the value of a double feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackDouble (feature: Feature , key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"trackDouble - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-double/#trackdouble","text":"[jvm]\\ abstract fun trackDouble (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference Registers a tracker for the value of a double feature flag for the given key and attributes.","title":"trackDouble"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-double/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackDouble (feature: Feature , key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-enum/","text":"// misk-feature / misk.feature / FeatureFlags / trackEnum trackEnum \u00b6 [jvm]\\ abstract fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of an enumerated feature flag for the given key and attributes. Return \u00b6 a reference to the registered tracker allowing to un-register it Parameters \u00b6 jvm feature name of the feature flag to evaluate. key unique primary key for the entity the flag should be evaluated against. clazz the enum type. attributes additional attributes to provide to flag evaluation. tracker a tracker to be registered for processing of changed values Throws \u00b6 kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value. [jvm]\\ open fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-enum/#trackenum","text":"[jvm]\\ abstract fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of an enumerated feature flag for the given key and attributes.","title":"trackEnum"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-enum/#return","text":"a reference to the registered tracker allowing to un-register it","title":"Return"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-enum/#parameters","text":"jvm feature name of the feature flag to evaluate. key unique primary key for the entity the flag should be evaluated against. clazz the enum type. attributes additional attributes to provide to flag evaluation. tracker a tracker to be registered for processing of changed values","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-enum/#throws","text":"kotlin.RuntimeException if the service is unavailable. kotlin.IllegalStateException if the flag is off with no default value. [jvm]\\ open fun < T : Enum < T >> trackEnum (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"Throws"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-int/","text":"// misk-feature / misk.feature / FeatureFlags / trackInt trackInt \u00b6 [jvm]\\ abstract fun trackInt (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a tracker for the value of an integer feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackInt (feature: Feature , key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"trackInt - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-int/#trackint","text":"[jvm]\\ abstract fun trackInt (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference Registers a tracker for the value of an integer feature flag for the given key and attributes.","title":"trackInt"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-int/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackInt (feature: Feature , key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-json/","text":"// misk-feature / misk.feature / FeatureFlags / trackJson trackJson \u00b6 [jvm]\\ abstract fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of a JSON feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details Parameters \u00b6 jvm clazz the type to convert the JSON string into. It is expected that a Moshi type adapter is registered with the impl. [jvm]\\ open fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-json/#trackjson","text":"[jvm]\\ abstract fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, attributes: Attributes = Attributes(), executor: Executor , tracker: ( T ) -> Unit ): TrackerReference Registers a tracker for the value of a JSON feature flag for the given key and attributes.","title":"trackJson"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-json/#see-also","text":"jvm misk.feature.FeatureFlags for param details","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-json/#parameters","text":"jvm clazz the type to convert the JSON string into. It is expected that a Moshi type adapter is registered with the impl. [jvm]\\ open fun < T > trackJson (feature: Feature , key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"Parameters"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-string/","text":"// misk-feature / misk.feature / FeatureFlags / trackString trackString \u00b6 [jvm]\\ abstract fun trackString (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a tracker for the value of a string feature flag for the given key and attributes. See also \u00b6 jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackString (feature: Feature , key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"trackString - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-string/#trackstring","text":"[jvm]\\ abstract fun trackString (feature: Feature , key: String , attributes: Attributes = Attributes(), executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Registers a tracker for the value of a string feature flag for the given key and attributes.","title":"trackString"},{"location":"0.x/misk-feature/misk.feature/-feature-flags/track-string/#see-also","text":"jvm misk.feature.FeatureFlags for param details [jvm]\\ open fun trackString (feature: Feature , key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"See also"},{"location":"0.x/misk-feature/misk.feature/-feature-service/","text":"// misk-feature / misk.feature / FeatureService FeatureService \u00b6 [jvm]\\ interface FeatureService : Service Marker interface to integrate with the misk service graph. Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"FeatureService - Misk"},{"location":"0.x/misk-feature/misk.feature/-feature-service/#featureservice","text":"[jvm]\\ interface FeatureService : Service Marker interface to integrate with the misk service graph.","title":"FeatureService"},{"location":"0.x/misk-feature/misk.feature/-feature-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-feature/misk.feature/-tracker-reference/","text":"// misk-feature / misk.feature / TrackerReference TrackerReference \u00b6 [jvm]\\ interface TrackerReference : TrackerReference Functions \u00b6 Name Summary unregister [jvm] abstract fun unregister ()","title":"TrackerReference - Misk"},{"location":"0.x/misk-feature/misk.feature/-tracker-reference/#trackerreference","text":"[jvm]\\ interface TrackerReference : TrackerReference","title":"TrackerReference"},{"location":"0.x/misk-feature/misk.feature/-tracker-reference/#functions","text":"Name Summary unregister [jvm] abstract fun unregister ()","title":"Functions"},{"location":"0.x/misk-feature-testing/misk.feature.testing/","text":"// misk-feature-testing / misk.feature.testing Package misk.feature.testing \u00b6 Types \u00b6 Name Summary FakeFeatureFlags [jvm] @Singleton class FakeFeatureFlags @Injectconstructor(delegate: FakeFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService, DynamicConfig In-memory test implementation of FeatureFlags that allows flags to be overridden. FakeFeatureFlagsModule [jvm] class FakeFeatureFlagsModule (qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FakeFeatureFlags that allows tests to override values. FakeFeatureFlagsOverrideModule [jvm] class FakeFeatureFlagsOverrideModule : KAbstractModule Install defaults for FakeFeatureFlags . This module can be install many times, allowing for feature flag overrides to be modular and scoped to the module the flag is used in.","title":"Package misk.feature.testing - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/#package-miskfeaturetesting","text":"","title":"Package misk.feature.testing"},{"location":"0.x/misk-feature-testing/misk.feature.testing/#types","text":"Name Summary FakeFeatureFlags [jvm] @Singleton class FakeFeatureFlags @Injectconstructor(delegate: FakeFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService, DynamicConfig In-memory test implementation of FeatureFlags that allows flags to be overridden. FakeFeatureFlagsModule [jvm] class FakeFeatureFlagsModule (qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FakeFeatureFlags that allows tests to override values. FakeFeatureFlagsOverrideModule [jvm] class FakeFeatureFlagsOverrideModule : KAbstractModule Install defaults for FakeFeatureFlags . This module can be install many times, allowing for feature flag overrides to be modular and scoped to the module the flag is used in.","title":"Types"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags FakeFeatureFlags \u00b6 [jvm]\\ @Singleton class FakeFeatureFlags @Injectconstructor(delegate: FakeFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService, DynamicConfig In-memory test implementation of FeatureFlags that allows flags to be overridden. Constructors \u00b6 FakeFeatureFlags [jvm] @Inject fun FakeFeatureFlags (delegate: FakeFeatureFlags) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable get [jvm] open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun get (flag: IntFeatureFlag): Int open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T open override fun get (flag: StringFeatureFlag): String getBoolean [jvm] open override fun getBoolean (feature: Feature): Boolean open fun getBoolean (feature: Feature, key: String ): Boolean open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean getDouble [jvm] open override fun getDouble (feature: Feature): Double open fun getDouble (feature: Feature, key: String ): Double open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double getEnum [jvm] open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T open fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >): T open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getInt [jvm] open override fun getInt (feature: Feature): Int open fun getInt (feature: Feature, key: String ): Int open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int getJson [jvm] open override fun < T > getJson (feature: Feature, clazz: Class < T >): T open fun < T > getJson (feature: Feature, key: String , clazz: Class < T >): T open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getString [jvm] open override fun getString (feature: Feature): String open fun getString (feature: Feature, key: String ): String open override fun getString (feature: Feature, key: String , attributes: Attributes): String isRunning [jvm] override fun isRunning (): Boolean override [jvm] inline fun < Flag : JsonFeatureFlag< T >, T : Any > override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : EnumFeatureFlag< T >, T : Enum < T >> override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : BooleanFeatureFlag> override (value: Boolean , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : DoubleFeatureFlag> override (value: Double , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : IntFeatureFlag> override (value: Int , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : StringFeatureFlag> override (value: String , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags fun < T > override (feature: Feature, value: T ) fun override (feature: Feature, value: Boolean ) fun override (feature: Feature, value: Double ) fun override (feature: Feature, value: Enum <*>) fun override (feature: Feature, value: Int ) fun override (feature: Feature, value: String ) fun < T > override (feature: Feature, value: T , clazz: Class < T >) overrideAny [jvm] fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T ): FakeFeatureFlags fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T , matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags overrideJson [jvm] inline fun < T > overrideJson (feature: Feature, value: T ) overrideJsonString [jvm] fun overrideJsonString (feature: Feature, json: String ) overrideKey [jvm] fun < T > overrideKey (feature: Feature, key: String , value: T , clazz: Class < T >) @ JvmOverloads fun < T > overrideKey (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Boolean , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Double , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Enum <*>, attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Int , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: String , attributes: Attributes = defaultAttributes) overrideKeyJson [jvm] @ JvmOverloads inline fun < T > overrideKeyJson (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes) reset [jvm] fun reset () serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String trackBoolean [jvm] open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open fun trackBoolean (feature: Feature, key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference trackDouble [jvm] open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open fun trackDouble (feature: Feature, key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference trackEnum [jvm] open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackInt [jvm] open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open fun trackInt (feature: Feature, key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference trackJson [jvm] open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackString [jvm] open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open fun trackString (feature: Feature, key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference Properties \u00b6 Name Summary delegate [jvm] val delegate : FakeFeatureFlags","title":"FakeFeatureFlags - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/#fakefeatureflags","text":"[jvm]\\ @Singleton class FakeFeatureFlags @Injectconstructor(delegate: FakeFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService, DynamicConfig In-memory test implementation of FeatureFlags that allows flags to be overridden.","title":"FakeFeatureFlags"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/#constructors","text":"FakeFeatureFlags [jvm] @Inject fun FakeFeatureFlags (delegate: FakeFeatureFlags)","title":"Constructors"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable get [jvm] open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun get (flag: IntFeatureFlag): Int open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T open override fun get (flag: StringFeatureFlag): String getBoolean [jvm] open override fun getBoolean (feature: Feature): Boolean open fun getBoolean (feature: Feature, key: String ): Boolean open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean getDouble [jvm] open override fun getDouble (feature: Feature): Double open fun getDouble (feature: Feature, key: String ): Double open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double getEnum [jvm] open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T open fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >): T open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getInt [jvm] open override fun getInt (feature: Feature): Int open fun getInt (feature: Feature, key: String ): Int open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int getJson [jvm] open override fun < T > getJson (feature: Feature, clazz: Class < T >): T open fun < T > getJson (feature: Feature, key: String , clazz: Class < T >): T open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getString [jvm] open override fun getString (feature: Feature): String open fun getString (feature: Feature, key: String ): String open override fun getString (feature: Feature, key: String , attributes: Attributes): String isRunning [jvm] override fun isRunning (): Boolean override [jvm] inline fun < Flag : JsonFeatureFlag< T >, T : Any > override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : EnumFeatureFlag< T >, T : Enum < T >> override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : BooleanFeatureFlag> override (value: Boolean , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : DoubleFeatureFlag> override (value: Double , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : IntFeatureFlag> override (value: Int , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : StringFeatureFlag> override (value: String , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags fun < T > override (feature: Feature, value: T ) fun override (feature: Feature, value: Boolean ) fun override (feature: Feature, value: Double ) fun override (feature: Feature, value: Enum <*>) fun override (feature: Feature, value: Int ) fun override (feature: Feature, value: String ) fun < T > override (feature: Feature, value: T , clazz: Class < T >) overrideAny [jvm] fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T ): FakeFeatureFlags fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T , matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags overrideJson [jvm] inline fun < T > overrideJson (feature: Feature, value: T ) overrideJsonString [jvm] fun overrideJsonString (feature: Feature, json: String ) overrideKey [jvm] fun < T > overrideKey (feature: Feature, key: String , value: T , clazz: Class < T >) @ JvmOverloads fun < T > overrideKey (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Boolean , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Double , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Enum <*>, attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Int , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: String , attributes: Attributes = defaultAttributes) overrideKeyJson [jvm] @ JvmOverloads inline fun < T > overrideKeyJson (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes) reset [jvm] fun reset () serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String trackBoolean [jvm] open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open fun trackBoolean (feature: Feature, key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference trackDouble [jvm] open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open fun trackDouble (feature: Feature, key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference trackEnum [jvm] open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackInt [jvm] open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open fun trackInt (feature: Feature, key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference trackJson [jvm] open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackString [jvm] open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open fun trackString (feature: Feature, key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"Functions"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/#properties","text":"Name Summary delegate [jvm] val delegate : FakeFeatureFlags","title":"Properties"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-fake-feature-flags/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / FakeFeatureFlags FakeFeatureFlags \u00b6 [jvm]\\ @Inject fun FakeFeatureFlags (delegate: FakeFeatureFlags)","title":"FakeFeatureFlags - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-fake-feature-flags/#fakefeatureflags","text":"[jvm]\\ @Inject fun FakeFeatureFlags (delegate: FakeFeatureFlags)","title":"FakeFeatureFlags"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/delegate/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / delegate delegate \u00b6 [jvm]\\ val delegate : FakeFeatureFlags","title":"delegate - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/delegate/#delegate","text":"[jvm]\\ val delegate : FakeFeatureFlags","title":"delegate"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-boolean/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / getBoolean getBoolean \u00b6 [jvm]\\ open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean open override fun getBoolean (feature: Feature): Boolean","title":"getBoolean - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-boolean/#getboolean","text":"[jvm]\\ open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean open override fun getBoolean (feature: Feature): Boolean","title":"getBoolean"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-double/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / getDouble getDouble \u00b6 [jvm]\\ open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double open override fun getDouble (feature: Feature): Double","title":"getDouble - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-double/#getdouble","text":"[jvm]\\ open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double open override fun getDouble (feature: Feature): Double","title":"getDouble"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-enum/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / getEnum getEnum \u00b6 [jvm]\\ open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T","title":"getEnum - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-enum/#getenum","text":"[jvm]\\ open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T","title":"getEnum"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-int/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / getInt getInt \u00b6 [jvm]\\ open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int open override fun getInt (feature: Feature): Int","title":"getInt - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-int/#getint","text":"[jvm]\\ open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int open override fun getInt (feature: Feature): Int","title":"getInt"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-json/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / getJson getJson \u00b6 [jvm]\\ open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T open override fun < T > getJson (feature: Feature, clazz: Class < T >): T","title":"getJson - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-json/#getjson","text":"[jvm]\\ open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T open override fun < T > getJson (feature: Feature, clazz: Class < T >): T","title":"getJson"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-string/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / getString getString \u00b6 [jvm]\\ open override fun getString (feature: Feature, key: String , attributes: Attributes): String open override fun getString (feature: Feature): String","title":"getString - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get-string/#getstring","text":"[jvm]\\ open override fun getString (feature: Feature, key: String , attributes: Attributes): String open override fun getString (feature: Feature): String","title":"getString"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / get get \u00b6 [jvm]\\ open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: StringFeatureFlag): String open override fun get (flag: IntFeatureFlag): Int open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T","title":"get - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/get/#get","text":"[jvm]\\ open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: StringFeatureFlag): String open override fun get (flag: IntFeatureFlag): Int open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T","title":"get"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-any/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / overrideAny overrideAny \u00b6 [jvm]\\ fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T ): FakeFeatureFlags fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T , matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags","title":"overrideAny - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-any/#overrideany","text":"[jvm]\\ fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T ): FakeFeatureFlags fun < T : Any , Flag : FeatureFlag<in T >> overrideAny (clazz: Class <out FeatureFlag< T >>, value: T , matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags","title":"overrideAny"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-json-string/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / overrideJsonString overrideJsonString \u00b6 [jvm]\\ fun overrideJsonString (feature: Feature, json: String )","title":"overrideJsonString - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-json-string/#overridejsonstring","text":"[jvm]\\ fun overrideJsonString (feature: Feature, json: String )","title":"overrideJsonString"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-json/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / overrideJson overrideJson \u00b6 [jvm]\\ inline fun < T > overrideJson (feature: Feature, value: T )","title":"overrideJson - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-json/#overridejson","text":"[jvm]\\ inline fun < T > overrideJson (feature: Feature, value: T )","title":"overrideJson"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-key-json/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / overrideKeyJson overrideKeyJson \u00b6 [jvm]\\ @ JvmOverloads inline fun < T > overrideKeyJson (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes)","title":"overrideKeyJson - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-key-json/#overridekeyjson","text":"[jvm]\\ @ JvmOverloads inline fun < T > overrideKeyJson (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes)","title":"overrideKeyJson"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-key/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / overrideKey overrideKey \u00b6 [jvm]\\ @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Boolean , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Double , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Int , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: String , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Enum <*>, attributes: Attributes = defaultAttributes) fun < T > overrideKey (feature: Feature, key: String , value: T , clazz: Class < T >) @ JvmOverloads fun < T > overrideKey (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes)","title":"overrideKey - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override-key/#overridekey","text":"[jvm]\\ @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Boolean , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Double , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Int , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: String , attributes: Attributes = defaultAttributes) @ JvmOverloads fun overrideKey (feature: Feature, key: String , value: Enum <*>, attributes: Attributes = defaultAttributes) fun < T > overrideKey (feature: Feature, key: String , value: T , clazz: Class < T >) @ JvmOverloads fun < T > overrideKey (feature: Feature, key: String , value: T , attributes: Attributes = defaultAttributes)","title":"overrideKey"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / override override \u00b6 [jvm]\\ inline fun < Flag : BooleanFeatureFlag> override (value: Boolean , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : StringFeatureFlag> override (value: String , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : IntFeatureFlag> override (value: Int , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : DoubleFeatureFlag> override (value: Double , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : JsonFeatureFlag< T >, T : Any > override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : EnumFeatureFlag< T >, T : Enum < T >> override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags fun override (feature: Feature, value: Boolean ) fun override (feature: Feature, value: Double ) fun override (feature: Feature, value: Int ) fun override (feature: Feature, value: String ) fun override (feature: Feature, value: Enum <*>) fun < T > override (feature: Feature, value: T ) fun < T > override (feature: Feature, value: T , clazz: Class < T >)","title":"override - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/override/#override","text":"[jvm]\\ inline fun < Flag : BooleanFeatureFlag> override (value: Boolean , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : StringFeatureFlag> override (value: String , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : IntFeatureFlag> override (value: Int , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : DoubleFeatureFlag> override (value: Double , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : JsonFeatureFlag< T >, T : Any > override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags inline fun < Flag : EnumFeatureFlag< T >, T : Enum < T >> override (value: T , noinline matcher: ( Flag ) -> Boolean = { _ -> true }): FakeFeatureFlags fun override (feature: Feature, value: Boolean ) fun override (feature: Feature, value: Double ) fun override (feature: Feature, value: Int ) fun override (feature: Feature, value: String ) fun override (feature: Feature, value: Enum <*>) fun < T > override (feature: Feature, value: T ) fun < T > override (feature: Feature, value: T , clazz: Class < T >)","title":"override"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/reset/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / reset reset \u00b6 [jvm]\\ fun reset ()","title":"reset - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/reset/#reset","text":"[jvm]\\ fun reset ()","title":"reset"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-boolean/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / trackBoolean trackBoolean \u00b6 [jvm]\\ open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"trackBoolean - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-boolean/#trackboolean","text":"[jvm]\\ open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"trackBoolean"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-double/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / trackDouble trackDouble \u00b6 [jvm]\\ open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"trackDouble - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-double/#trackdouble","text":"[jvm]\\ open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"trackDouble"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-enum/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / trackEnum trackEnum \u00b6 [jvm]\\ open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-enum/#trackenum","text":"[jvm]\\ open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-int/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / trackInt trackInt \u00b6 [jvm]\\ open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"trackInt - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-int/#trackint","text":"[jvm]\\ open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"trackInt"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-json/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / trackJson trackJson \u00b6 [jvm]\\ open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-json/#trackjson","text":"[jvm]\\ open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-string/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / trackString trackString \u00b6 [jvm]\\ open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"trackString - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/track-string/#trackstring","text":"[jvm]\\ open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"trackString"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-companion/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary defaultAttributes [jvm] val defaultAttributes : Attributes KEY [jvm] const val KEY : String","title":"Companion - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-companion/#properties","text":"Name Summary defaultAttributes [jvm] val defaultAttributes : Attributes KEY [jvm] const val KEY : String","title":"Properties"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-companion/-k-e-y/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / Companion / KEY KEY \u00b6 [jvm]\\ const val KEY : String","title":"KEY - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-companion/-k-e-y/#key","text":"[jvm]\\ const val KEY : String","title":"KEY"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-companion/default-attributes/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlags / Companion / defaultAttributes defaultAttributes \u00b6 [jvm]\\ val defaultAttributes : Attributes","title":"defaultAttributes - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags/-companion/default-attributes/#defaultattributes","text":"[jvm]\\ val defaultAttributes : Attributes","title":"defaultAttributes"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsModule FakeFeatureFlagsModule \u00b6 [jvm]\\ class FakeFeatureFlagsModule (qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FakeFeatureFlags that allows tests to override values. To define overrides (especially test defaults) use FakeFeatureFlagsOverrideModule . In a given misk service\u2019s test setup, there is one FakeFeatureFlagsModule installed and many FakeFeatureFlagsOverrideModule installed. Constructors \u00b6 FakeFeatureFlagsModule [jvm] fun FakeFeatureFlagsModule (qualifier: KClass <out Annotation >? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) withOverrides [jvm] fun withOverrides (lambda: FakeFeatureFlags .() -> Unit ): FakeFeatureFlagsModule Add overrides for the feature flags. Allows flags to be overridden at module instantiation instead of within individual test classes. Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeFeatureFlagsModule - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/#fakefeatureflagsmodule","text":"[jvm]\\ class FakeFeatureFlagsModule (qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FakeFeatureFlags that allows tests to override values. To define overrides (especially test defaults) use FakeFeatureFlagsOverrideModule . In a given misk service\u2019s test setup, there is one FakeFeatureFlagsModule installed and many FakeFeatureFlagsOverrideModule installed.","title":"FakeFeatureFlagsModule"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/#constructors","text":"FakeFeatureFlagsModule [jvm] fun FakeFeatureFlagsModule (qualifier: KClass <out Annotation >? = null)","title":"Constructors"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) withOverrides [jvm] fun withOverrides (lambda: FakeFeatureFlags .() -> Unit ): FakeFeatureFlagsModule Add overrides for the feature flags. Allows flags to be overridden at module instantiation instead of within individual test classes.","title":"Functions"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/-fake-feature-flags-module/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsModule / FakeFeatureFlagsModule FakeFeatureFlagsModule \u00b6 [jvm]\\ fun FakeFeatureFlagsModule (qualifier: KClass <out Annotation >? = null)","title":"FakeFeatureFlagsModule - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/-fake-feature-flags-module/#fakefeatureflagsmodule","text":"[jvm]\\ fun FakeFeatureFlagsModule (qualifier: KClass <out Annotation >? = null)","title":"FakeFeatureFlagsModule"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/with-overrides/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsModule / withOverrides withOverrides \u00b6 [jvm]\\ fun withOverrides (lambda: FakeFeatureFlags .() -> Unit ): FakeFeatureFlagsModule Add overrides for the feature flags. Allows flags to be overridden at module instantiation instead of within individual test classes. Usage: install(FakeFeatureFlagsModule().withOverrides {\\ override(Feature(\u201cfoo\u201d), true)\\ }) For overriding in many modules see FakeFeatureFlagsOverrideModule","title":"withOverrides - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-module/with-overrides/#withoverrides","text":"[jvm]\\ fun withOverrides (lambda: FakeFeatureFlags .() -> Unit ): FakeFeatureFlagsModule Add overrides for the feature flags. Allows flags to be overridden at module instantiation instead of within individual test classes. Usage: install(FakeFeatureFlagsModule().withOverrides {\\ override(Feature(\u201cfoo\u201d), true)\\ }) For overriding in many modules see FakeFeatureFlagsOverrideModule","title":"withOverrides"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsOverrideModule FakeFeatureFlagsOverrideModule \u00b6 [jvm]\\ class FakeFeatureFlagsOverrideModule : KAbstractModule Install defaults for FakeFeatureFlags . This module can be install many times, allowing for feature flag overrides to be modular and scoped to the module the flag is used in. In any module use: install(FakeFeatureFlagsModuleOverrideModule {\\ override(Feature(\u201cfoo\u201d), true)\\ overrideJsonString(Feature(\u201cbar\u201d), \u201c{ \"target\": 0.1 }\u201d)\\ }) Constructors \u00b6 FakeFeatureFlagsOverrideModule [jvm] fun FakeFeatureFlagsOverrideModule (qualifier: KClass <out Annotation >? = null, overrideLambda: FakeFeatureFlags .() -> Unit ) Types \u00b6 Name Summary FakeFeatureFlagsOverride [jvm] class FakeFeatureFlagsOverride (overrideLambda: FakeFeatureFlags .() -> Unit ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeFeatureFlagsOverrideModule - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/#fakefeatureflagsoverridemodule","text":"[jvm]\\ class FakeFeatureFlagsOverrideModule : KAbstractModule Install defaults for FakeFeatureFlags . This module can be install many times, allowing for feature flag overrides to be modular and scoped to the module the flag is used in. In any module use: install(FakeFeatureFlagsModuleOverrideModule {\\ override(Feature(\u201cfoo\u201d), true)\\ overrideJsonString(Feature(\u201cbar\u201d), \u201c{ \"target\": 0.1 }\u201d)\\ })","title":"FakeFeatureFlagsOverrideModule"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/#constructors","text":"FakeFeatureFlagsOverrideModule [jvm] fun FakeFeatureFlagsOverrideModule (qualifier: KClass <out Annotation >? = null, overrideLambda: FakeFeatureFlags .() -> Unit )","title":"Constructors"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/#types","text":"Name Summary FakeFeatureFlagsOverride [jvm] class FakeFeatureFlagsOverride (overrideLambda: FakeFeatureFlags .() -> Unit )","title":"Types"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override-module/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsOverrideModule / FakeFeatureFlagsOverrideModule FakeFeatureFlagsOverrideModule \u00b6 [jvm]\\ fun FakeFeatureFlagsOverrideModule (qualifier: KClass <out Annotation >? = null, overrideLambda: FakeFeatureFlags .() -> Unit )","title":"FakeFeatureFlagsOverrideModule - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override-module/#fakefeatureflagsoverridemodule","text":"[jvm]\\ fun FakeFeatureFlagsOverrideModule (qualifier: KClass <out Annotation >? = null, overrideLambda: FakeFeatureFlags .() -> Unit )","title":"FakeFeatureFlagsOverrideModule"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsOverrideModule / FakeFeatureFlagsOverride FakeFeatureFlagsOverride \u00b6 [jvm]\\ class FakeFeatureFlagsOverride (overrideLambda: FakeFeatureFlags .() -> Unit ) Properties \u00b6 Name Summary overrideLambda [jvm] val overrideLambda : FakeFeatureFlags .() -> Unit","title":"FakeFeatureFlagsOverride - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override/#fakefeatureflagsoverride","text":"[jvm]\\ class FakeFeatureFlagsOverride (overrideLambda: FakeFeatureFlags .() -> Unit )","title":"FakeFeatureFlagsOverride"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override/#properties","text":"Name Summary overrideLambda [jvm] val overrideLambda : FakeFeatureFlags .() -> Unit","title":"Properties"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override/-fake-feature-flags-override/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsOverrideModule / FakeFeatureFlagsOverride / FakeFeatureFlagsOverride FakeFeatureFlagsOverride \u00b6 [jvm]\\ fun FakeFeatureFlagsOverride (overrideLambda: FakeFeatureFlags .() -> Unit )","title":"FakeFeatureFlagsOverride - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override/-fake-feature-flags-override/#fakefeatureflagsoverride","text":"[jvm]\\ fun FakeFeatureFlagsOverride (overrideLambda: FakeFeatureFlags .() -> Unit )","title":"FakeFeatureFlagsOverride"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override/override-lambda/","text":"// misk-feature-testing / misk.feature.testing / FakeFeatureFlagsOverrideModule / FakeFeatureFlagsOverride / overrideLambda overrideLambda \u00b6 [jvm]\\ val overrideLambda : FakeFeatureFlags .() -> Unit","title":"overrideLambda - Misk"},{"location":"0.x/misk-feature-testing/misk.feature.testing/-fake-feature-flags-override-module/-fake-feature-flags-override/override-lambda/#overridelambda","text":"[jvm]\\ val overrideLambda : FakeFeatureFlags .() -> Unit","title":"overrideLambda"},{"location":"0.x/misk-gcp/misk.cloud.gcp/","text":"// misk-gcp / misk.cloud.gcp Package misk.cloud.gcp \u00b6 Types \u00b6 Name Summary GoogleCloudModule [jvm] class GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig ) : KAbstractModule Installs support for talking to real GCP services, either direct or via emulator TransportConfig [jvm] data class TransportConfig (connect_timeout_ms: Int , read_timeout_ms: Int , host: String ?) Transport configuration for GCP services.","title":"Package misk.cloud.gcp - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/#package-miskcloudgcp","text":"","title":"Package misk.cloud.gcp"},{"location":"0.x/misk-gcp/misk.cloud.gcp/#types","text":"Name Summary GoogleCloudModule [jvm] class GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig ) : KAbstractModule Installs support for talking to real GCP services, either direct or via emulator TransportConfig [jvm] data class TransportConfig (connect_timeout_ms: Int , read_timeout_ms: Int , host: String ?) Transport configuration for GCP services.","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/","text":"// misk-gcp / misk.cloud.gcp / GoogleCloudModule GoogleCloudModule \u00b6 [jvm]\\ class GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig ) : KAbstractModule Installs support for talking to real GCP services, either direct or via emulator Constructors \u00b6 GoogleCloudModule [jvm] fun GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideCloudDatastore [jvm] @Provides fun provideCloudDatastore (credentials: Credentials, config: DatastoreConfig ): Datastore provideCloudStorage [jvm] @Provides fun provideCloudStorage (credentials: Credentials, config: StorageConfig ): Storage provideServiceCredentials [jvm] @Provides fun provideServiceCredentials (deployment: Deployment): Credentials requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"GoogleCloudModule - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/#googlecloudmodule","text":"[jvm]\\ class GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig ) : KAbstractModule Installs support for talking to real GCP services, either direct or via emulator","title":"GoogleCloudModule"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/#constructors","text":"GoogleCloudModule [jvm] fun GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig )","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideCloudDatastore [jvm] @Provides fun provideCloudDatastore (credentials: Credentials, config: DatastoreConfig ): Datastore provideCloudStorage [jvm] @Provides fun provideCloudStorage (credentials: Credentials, config: StorageConfig ): Storage provideServiceCredentials [jvm] @Provides fun provideServiceCredentials (deployment: Deployment): Credentials requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/-google-cloud-module/","text":"// misk-gcp / misk.cloud.gcp / GoogleCloudModule / GoogleCloudModule GoogleCloudModule \u00b6 [jvm]\\ fun GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig )","title":"GoogleCloudModule - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/-google-cloud-module/#googlecloudmodule","text":"[jvm]\\ fun GoogleCloudModule (datastoreConfig: DatastoreConfig , storageConfig: StorageConfig )","title":"GoogleCloudModule"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/provide-cloud-datastore/","text":"// misk-gcp / misk.cloud.gcp / GoogleCloudModule / provideCloudDatastore provideCloudDatastore \u00b6 [jvm]\\ @Provides fun provideCloudDatastore (credentials: Credentials, config: DatastoreConfig ): Datastore","title":"provideCloudDatastore - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/provide-cloud-datastore/#provideclouddatastore","text":"[jvm]\\ @Provides fun provideCloudDatastore (credentials: Credentials, config: DatastoreConfig ): Datastore","title":"provideCloudDatastore"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/provide-cloud-storage/","text":"// misk-gcp / misk.cloud.gcp / GoogleCloudModule / provideCloudStorage provideCloudStorage \u00b6 [jvm]\\ @Provides fun provideCloudStorage (credentials: Credentials, config: StorageConfig ): Storage","title":"provideCloudStorage - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/provide-cloud-storage/#providecloudstorage","text":"[jvm]\\ @Provides fun provideCloudStorage (credentials: Credentials, config: StorageConfig ): Storage","title":"provideCloudStorage"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/provide-service-credentials/","text":"// misk-gcp / misk.cloud.gcp / GoogleCloudModule / provideServiceCredentials provideServiceCredentials \u00b6 [jvm]\\ @Provides fun provideServiceCredentials (deployment: Deployment): Credentials","title":"provideServiceCredentials - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-google-cloud-module/provide-service-credentials/#provideservicecredentials","text":"[jvm]\\ @Provides fun provideServiceCredentials (deployment: Deployment): Credentials","title":"provideServiceCredentials"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/","text":"// misk-gcp / misk.cloud.gcp / TransportConfig TransportConfig \u00b6 [jvm]\\ data class TransportConfig (connect_timeout_ms: Int , read_timeout_ms: Int , host: String ?) Transport configuration for GCP services. Constructors \u00b6 TransportConfig [jvm] fun TransportConfig (connect_timeout_ms: Int = -1, read_timeout_ms: Int = -1, host: String ? = null) Properties \u00b6 Name Summary connect_timeout_ms [jvm] val connect_timeout_ms : Int host [jvm] val host : String ? = null read_timeout_ms [jvm] val read_timeout_ms : Int","title":"TransportConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/#transportconfig","text":"[jvm]\\ data class TransportConfig (connect_timeout_ms: Int , read_timeout_ms: Int , host: String ?) Transport configuration for GCP services.","title":"TransportConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/#constructors","text":"TransportConfig [jvm] fun TransportConfig (connect_timeout_ms: Int = -1, read_timeout_ms: Int = -1, host: String ? = null)","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/#properties","text":"Name Summary connect_timeout_ms [jvm] val connect_timeout_ms : Int host [jvm] val host : String ? = null read_timeout_ms [jvm] val read_timeout_ms : Int","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/-transport-config/","text":"// misk-gcp / misk.cloud.gcp / TransportConfig / TransportConfig TransportConfig \u00b6 [jvm]\\ fun TransportConfig (connect_timeout_ms: Int = -1, read_timeout_ms: Int = -1, host: String ? = null)","title":"TransportConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/-transport-config/#transportconfig","text":"[jvm]\\ fun TransportConfig (connect_timeout_ms: Int = -1, read_timeout_ms: Int = -1, host: String ? = null)","title":"TransportConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/connect_timeout_ms/","text":"// misk-gcp / misk.cloud.gcp / TransportConfig / connect_timeout_ms connect_timeout_ms \u00b6 [jvm]\\ val connect_timeout_ms : Int","title":"connect_timeout_ms - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/connect_timeout_ms/#connect_timeout_ms","text":"[jvm]\\ val connect_timeout_ms : Int","title":"connect_timeout_ms"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/host/","text":"// misk-gcp / misk.cloud.gcp / TransportConfig / host host \u00b6 [jvm]\\ val host : String ? = null","title":"host - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/host/#host","text":"[jvm]\\ val host : String ? = null","title":"host"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/read_timeout_ms/","text":"// misk-gcp / misk.cloud.gcp / TransportConfig / read_timeout_ms read_timeout_ms \u00b6 [jvm]\\ val read_timeout_ms : Int","title":"read_timeout_ms - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp/-transport-config/read_timeout_ms/#read_timeout_ms","text":"[jvm]\\ val read_timeout_ms : Int","title":"read_timeout_ms"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/","text":"// misk-gcp / misk.cloud.gcp.datastore Package misk.cloud.gcp.datastore \u00b6 Types \u00b6 Name Summary DatastoreConfig [jvm] data class DatastoreConfig (transport: TransportConfig ) : Config Configuration for talking to Google datastore Keys [jvm] object Keys Functions \u00b6 Name Summary asList [jvm] fun < T > QueryResults< T >. asList (): List < T > getByteString [jvm] fun Entity. getByteString (name: String ): ByteString getProto [jvm] fun < T > Entity. getProto (name: String , protoAdapter: ProtoAdapter< T >): T set [jvm] fun Entity.Builder. set (name: String , bytes: ByteString): Entity.Builder toByteString [jvm] fun Blob. toByteString (): ByteString","title":"Package misk.cloud.gcp.datastore - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/#package-miskcloudgcpdatastore","text":"","title":"Package misk.cloud.gcp.datastore"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/#types","text":"Name Summary DatastoreConfig [jvm] data class DatastoreConfig (transport: TransportConfig ) : Config Configuration for talking to Google datastore Keys [jvm] object Keys","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/#functions","text":"Name Summary asList [jvm] fun < T > QueryResults< T >. asList (): List < T > getByteString [jvm] fun Entity. getByteString (name: String ): ByteString getProto [jvm] fun < T > Entity. getProto (name: String , protoAdapter: ProtoAdapter< T >): T set [jvm] fun Entity.Builder. set (name: String , bytes: ByteString): Entity.Builder toByteString [jvm] fun Blob. toByteString (): ByteString","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/as-list/","text":"// misk-gcp / misk.cloud.gcp.datastore / asList asList \u00b6 [jvm]\\ fun < T > QueryResults< T >. asList (): List < T >","title":"asList - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/as-list/#aslist","text":"[jvm]\\ fun < T > QueryResults< T >. asList (): List < T >","title":"asList"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/get-byte-string/","text":"// misk-gcp / misk.cloud.gcp.datastore / getByteString getByteString \u00b6 [jvm]\\ fun Entity. getByteString (name: String ): ByteString","title":"getByteString - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/get-byte-string/#getbytestring","text":"[jvm]\\ fun Entity. getByteString (name: String ): ByteString","title":"getByteString"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/get-proto/","text":"// misk-gcp / misk.cloud.gcp.datastore / getProto getProto \u00b6 [jvm]\\ fun < T > Entity. getProto (name: String , protoAdapter: ProtoAdapter< T >): T","title":"getProto - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/get-proto/#getproto","text":"[jvm]\\ fun < T > Entity. getProto (name: String , protoAdapter: ProtoAdapter< T >): T","title":"getProto"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/set/","text":"// misk-gcp / misk.cloud.gcp.datastore / set set \u00b6 [jvm]\\ fun Entity.Builder. set (name: String , bytes: ByteString): Entity.Builder","title":"set - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/set/#set","text":"[jvm]\\ fun Entity.Builder. set (name: String , bytes: ByteString): Entity.Builder","title":"set"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/to-byte-string/","text":"// misk-gcp / misk.cloud.gcp.datastore / toByteString toByteString \u00b6 [jvm]\\ fun Blob. toByteString (): ByteString","title":"toByteString - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/to-byte-string/#tobytestring","text":"[jvm]\\ fun Blob. toByteString (): ByteString","title":"toByteString"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/","text":"// misk-gcp / misk.cloud.gcp.datastore / DatastoreConfig DatastoreConfig \u00b6 [jvm]\\ data class DatastoreConfig (transport: TransportConfig ) : Config Configuration for talking to Google datastore Constructors \u00b6 DatastoreConfig [jvm] fun DatastoreConfig (transport: TransportConfig = TransportConfig()) Properties \u00b6 Name Summary transport [jvm] val transport : TransportConfig","title":"DatastoreConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/#datastoreconfig","text":"[jvm]\\ data class DatastoreConfig (transport: TransportConfig ) : Config Configuration for talking to Google datastore","title":"DatastoreConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/#constructors","text":"DatastoreConfig [jvm] fun DatastoreConfig (transport: TransportConfig = TransportConfig())","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/#properties","text":"Name Summary transport [jvm] val transport : TransportConfig","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/-datastore-config/","text":"// misk-gcp / misk.cloud.gcp.datastore / DatastoreConfig / DatastoreConfig DatastoreConfig \u00b6 [jvm]\\ fun DatastoreConfig (transport: TransportConfig = TransportConfig())","title":"DatastoreConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/-datastore-config/#datastoreconfig","text":"[jvm]\\ fun DatastoreConfig (transport: TransportConfig = TransportConfig())","title":"DatastoreConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/transport/","text":"// misk-gcp / misk.cloud.gcp.datastore / DatastoreConfig / transport transport \u00b6 [jvm]\\ val transport : TransportConfig","title":"transport - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-datastore-config/transport/#transport","text":"[jvm]\\ val transport : TransportConfig","title":"transport"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-keys/","text":"// misk-gcp / misk.cloud.gcp.datastore / Keys Keys \u00b6 [jvm]\\ object Keys Functions \u00b6 Name Summary newKey [jvm] fun newKey (projectId: String , kind: String , id: Long ): Key fun newKey (projectId: String , kind: String , name: String ): Key","title":"Keys - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-keys/#keys","text":"[jvm]\\ object Keys","title":"Keys"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-keys/#functions","text":"Name Summary newKey [jvm] fun newKey (projectId: String , kind: String , id: Long ): Key fun newKey (projectId: String , kind: String , name: String ): Key","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-keys/new-key/","text":"// misk-gcp / misk.cloud.gcp.datastore / Keys / newKey newKey \u00b6 [jvm]\\ fun newKey (projectId: String , kind: String , id: Long ): Key fun newKey (projectId: String , kind: String , name: String ): Key","title":"newKey - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.datastore/-keys/new-key/#newkey","text":"[jvm]\\ fun newKey (projectId: String , kind: String , id: Long ): Key fun newKey (projectId: String , kind: String , name: String ): Key","title":"newKey"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/","text":"// misk-gcp / misk.cloud.gcp.logging Package misk.cloud.gcp.logging \u00b6 Types \u00b6 Name Summary StackDriverLoggingConfig [jvm] data class StackDriverLoggingConfig (flush_level: Level, filter_level: Level, resource_type: String ?, log: String ) : Config","title":"Package misk.cloud.gcp.logging - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/#package-miskcloudgcplogging","text":"","title":"Package misk.cloud.gcp.logging"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/#types","text":"Name Summary StackDriverLoggingConfig [jvm] data class StackDriverLoggingConfig (flush_level: Level, filter_level: Level, resource_type: String ?, log: String ) : Config","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/","text":"// misk-gcp / misk.cloud.gcp.logging / StackDriverLoggingConfig StackDriverLoggingConfig \u00b6 [jvm]\\ data class StackDriverLoggingConfig (flush_level: Level, filter_level: Level, resource_type: String ?, log: String ) : Config Properties \u00b6 Name Summary filter_level [jvm] val filter_level : Level flush_level [jvm] val flush_level : Level log [jvm] val log : String resource_type [jvm] val resource_type : String ?","title":"StackDriverLoggingConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/#stackdriverloggingconfig","text":"[jvm]\\ data class StackDriverLoggingConfig (flush_level: Level, filter_level: Level, resource_type: String ?, log: String ) : Config","title":"StackDriverLoggingConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/#properties","text":"Name Summary filter_level [jvm] val filter_level : Level flush_level [jvm] val flush_level : Level log [jvm] val log : String resource_type [jvm] val resource_type : String ?","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/-stack-driver-logging-config/","text":"// misk-gcp / misk.cloud.gcp.logging / StackDriverLoggingConfig / StackDriverLoggingConfig StackDriverLoggingConfig \u00b6 [jvm]\\ fun StackDriverLoggingConfig (flush_level: Level = Level.ERROR, filter_level: Level = Level.INFO, resource_type: String ?, log: String = \u201cjava.log\u201d)","title":"StackDriverLoggingConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/-stack-driver-logging-config/#stackdriverloggingconfig","text":"[jvm]\\ fun StackDriverLoggingConfig (flush_level: Level = Level.ERROR, filter_level: Level = Level.INFO, resource_type: String ?, log: String = \u201cjava.log\u201d)","title":"StackDriverLoggingConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/filter_level/","text":"// misk-gcp / misk.cloud.gcp.logging / StackDriverLoggingConfig / filter_level filter_level \u00b6 [jvm]\\ val filter_level : Level","title":"filter_level - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/filter_level/#filter_level","text":"[jvm]\\ val filter_level : Level","title":"filter_level"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/flush_level/","text":"// misk-gcp / misk.cloud.gcp.logging / StackDriverLoggingConfig / flush_level flush_level \u00b6 [jvm]\\ val flush_level : Level","title":"flush_level - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/flush_level/#flush_level","text":"[jvm]\\ val flush_level : Level","title":"flush_level"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/log/","text":"// misk-gcp / misk.cloud.gcp.logging / StackDriverLoggingConfig / log log \u00b6 [jvm]\\ val log : String","title":"log - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/log/#log","text":"[jvm]\\ val log : String","title":"log"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/resource_type/","text":"// misk-gcp / misk.cloud.gcp.logging / StackDriverLoggingConfig / resource_type resource_type \u00b6 [jvm]\\ val resource_type : String ?","title":"resource_type - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.logging/-stack-driver-logging-config/resource_type/#resource_type","text":"[jvm]\\ val resource_type : String ?","title":"resource_type"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/","text":"// misk-gcp / misk.cloud.gcp.security.keys Package misk.cloud.gcp.security.keys \u00b6 Types \u00b6 Name Summary GcpKeyLocation [jvm] data class GcpKeyLocation (location: String , key_ring: String , key_name: String ) GcpKeyManagementModule [jvm] class GcpKeyManagementModule (config: GcpKmsConfig ) : KAbstractModule GcpKmsConfig [jvm] data class GcpKmsConfig (project_id: String , key_locations: Map < String , GcpKeyLocation >) : Config","title":"Package misk.cloud.gcp.security.keys - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/#package-miskcloudgcpsecuritykeys","text":"","title":"Package misk.cloud.gcp.security.keys"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/#types","text":"Name Summary GcpKeyLocation [jvm] data class GcpKeyLocation (location: String , key_ring: String , key_name: String ) GcpKeyManagementModule [jvm] class GcpKeyManagementModule (config: GcpKmsConfig ) : KAbstractModule GcpKmsConfig [jvm] data class GcpKmsConfig (project_id: String , key_locations: Map < String , GcpKeyLocation >) : Config","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyLocation GcpKeyLocation \u00b6 [jvm]\\ data class GcpKeyLocation (location: String , key_ring: String , key_name: String ) Properties \u00b6 Name Summary key_name [jvm] val key_name : String key_ring [jvm] val key_ring : String location [jvm] val location : String path [jvm] val path : String","title":"GcpKeyLocation - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/#gcpkeylocation","text":"[jvm]\\ data class GcpKeyLocation (location: String , key_ring: String , key_name: String )","title":"GcpKeyLocation"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/#properties","text":"Name Summary key_name [jvm] val key_name : String key_ring [jvm] val key_ring : String location [jvm] val location : String path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/-gcp-key-location/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyLocation / GcpKeyLocation GcpKeyLocation \u00b6 [jvm]\\ fun GcpKeyLocation (location: String , key_ring: String , key_name: String )","title":"GcpKeyLocation - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/-gcp-key-location/#gcpkeylocation","text":"[jvm]\\ fun GcpKeyLocation (location: String , key_ring: String , key_name: String )","title":"GcpKeyLocation"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/key_name/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyLocation / key_name key_name \u00b6 [jvm]\\ val key_name : String","title":"key_name - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/key_name/#key_name","text":"[jvm]\\ val key_name : String","title":"key_name"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/key_ring/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyLocation / key_ring key_ring \u00b6 [jvm]\\ val key_ring : String","title":"key_ring - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/key_ring/#key_ring","text":"[jvm]\\ val key_ring : String","title":"key_ring"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/location/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyLocation / location location \u00b6 [jvm]\\ val location : String","title":"location - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/location/#location","text":"[jvm]\\ val location : String","title":"location"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/path/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyLocation / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-location/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyManagementModule GcpKeyManagementModule \u00b6 [jvm]\\ class GcpKeyManagementModule (config: GcpKmsConfig ) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) providesKms [jvm] @Provides @Singleton fun providesKms (appName: String ): CloudKMS requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"GcpKeyManagementModule - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/#gcpkeymanagementmodule","text":"[jvm]\\ class GcpKeyManagementModule (config: GcpKmsConfig ) : KAbstractModule","title":"GcpKeyManagementModule"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) providesKms [jvm] @Provides @Singleton fun providesKms (appName: String ): CloudKMS requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/-gcp-key-management-module/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyManagementModule / GcpKeyManagementModule GcpKeyManagementModule \u00b6 [jvm]\\ fun GcpKeyManagementModule (config: GcpKmsConfig )","title":"GcpKeyManagementModule - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/-gcp-key-management-module/#gcpkeymanagementmodule","text":"[jvm]\\ fun GcpKeyManagementModule (config: GcpKmsConfig )","title":"GcpKeyManagementModule"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/provides-kms/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKeyManagementModule / providesKms providesKms \u00b6 [jvm]\\ @Provides @Singleton fun providesKms (appName: String ): CloudKMS","title":"providesKms - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-key-management-module/provides-kms/#provideskms","text":"[jvm]\\ @Provides @Singleton fun providesKms (appName: String ): CloudKMS","title":"providesKms"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKmsConfig GcpKmsConfig \u00b6 [jvm]\\ data class GcpKmsConfig (project_id: String , key_locations: Map < String , GcpKeyLocation >) : Config Properties \u00b6 Name Summary key_locations [jvm] val key_locations : Map < String , GcpKeyLocation > project_id [jvm] val project_id : String","title":"GcpKmsConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/#gcpkmsconfig","text":"[jvm]\\ data class GcpKmsConfig (project_id: String , key_locations: Map < String , GcpKeyLocation >) : Config","title":"GcpKmsConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/#properties","text":"Name Summary key_locations [jvm] val key_locations : Map < String , GcpKeyLocation > project_id [jvm] val project_id : String","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/-gcp-kms-config/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKmsConfig / GcpKmsConfig GcpKmsConfig \u00b6 [jvm]\\ fun GcpKmsConfig (project_id: String , key_locations: Map < String , GcpKeyLocation >)","title":"GcpKmsConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/-gcp-kms-config/#gcpkmsconfig","text":"[jvm]\\ fun GcpKmsConfig (project_id: String , key_locations: Map < String , GcpKeyLocation >)","title":"GcpKmsConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/key_locations/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKmsConfig / key_locations key_locations \u00b6 [jvm]\\ val key_locations : Map < String , GcpKeyLocation >","title":"key_locations - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/key_locations/#key_locations","text":"[jvm]\\ val key_locations : Map < String , GcpKeyLocation >","title":"key_locations"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/project_id/","text":"// misk-gcp / misk.cloud.gcp.security.keys / GcpKmsConfig / project_id project_id \u00b6 [jvm]\\ val project_id : String","title":"project_id - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.security.keys/-gcp-kms-config/project_id/#project_id","text":"[jvm]\\ val project_id : String","title":"project_id"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/","text":"// misk-gcp / misk.cloud.gcp.spanner Package misk.cloud.gcp.spanner \u00b6 Types \u00b6 Name Summary GoogleSpannerModule [jvm] class GoogleSpannerModule (spannerConfig: SpannerConfig ) : KAbstractModule GoogleSpannerModule provides a Google Spanner client for your app. GoogleSpannerService [jvm] class GoogleSpannerService @Injectconstructor(spanner: Spanner) : AbstractIdleService SpannerConfig [jvm] data class SpannerConfig (credentials: Credentials?, database: String , emulator: SpannerEmulatorConfig , instance_id: String , project_id: String ) : Config Configuration for talking to Google datastore SpannerEmulatorConfig [jvm] data class SpannerEmulatorConfig (enabled: Boolean , hostname: String , port: Int ) Options for configuring the Spanner emulator.","title":"Package misk.cloud.gcp.spanner - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/#package-miskcloudgcpspanner","text":"","title":"Package misk.cloud.gcp.spanner"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/#types","text":"Name Summary GoogleSpannerModule [jvm] class GoogleSpannerModule (spannerConfig: SpannerConfig ) : KAbstractModule GoogleSpannerModule provides a Google Spanner client for your app. GoogleSpannerService [jvm] class GoogleSpannerService @Injectconstructor(spanner: Spanner) : AbstractIdleService SpannerConfig [jvm] data class SpannerConfig (credentials: Credentials?, database: String , emulator: SpannerEmulatorConfig , instance_id: String , project_id: String ) : Config Configuration for talking to Google datastore SpannerEmulatorConfig [jvm] data class SpannerEmulatorConfig (enabled: Boolean , hostname: String , port: Int ) Options for configuring the Spanner emulator.","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/","text":"// misk-gcp / misk.cloud.gcp.spanner / GoogleSpannerModule GoogleSpannerModule \u00b6 [jvm]\\ class GoogleSpannerModule (spannerConfig: SpannerConfig ) : KAbstractModule GoogleSpannerModule provides a Google Spanner client for your app. For testing, install the emulator Constructors \u00b6 GoogleSpannerModule [jvm] fun GoogleSpannerModule (spannerConfig: SpannerConfig ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideCloudSpanner [jvm] @Provides fun provideCloudSpanner (config: SpannerConfig ): Spanner requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"GoogleSpannerModule - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/#googlespannermodule","text":"[jvm]\\ class GoogleSpannerModule (spannerConfig: SpannerConfig ) : KAbstractModule GoogleSpannerModule provides a Google Spanner client for your app. For testing, install the emulator","title":"GoogleSpannerModule"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/#constructors","text":"GoogleSpannerModule [jvm] fun GoogleSpannerModule (spannerConfig: SpannerConfig )","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideCloudSpanner [jvm] @Provides fun provideCloudSpanner (config: SpannerConfig ): Spanner requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/-google-spanner-module/","text":"// misk-gcp / misk.cloud.gcp.spanner / GoogleSpannerModule / GoogleSpannerModule GoogleSpannerModule \u00b6 [jvm]\\ fun GoogleSpannerModule (spannerConfig: SpannerConfig )","title":"GoogleSpannerModule - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/-google-spanner-module/#googlespannermodule","text":"[jvm]\\ fun GoogleSpannerModule (spannerConfig: SpannerConfig )","title":"GoogleSpannerModule"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/provide-cloud-spanner/","text":"// misk-gcp / misk.cloud.gcp.spanner / GoogleSpannerModule / provideCloudSpanner provideCloudSpanner \u00b6 [jvm]\\ @Provides fun provideCloudSpanner (config: SpannerConfig ): Spanner","title":"provideCloudSpanner - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-module/provide-cloud-spanner/#providecloudspanner","text":"[jvm]\\ @Provides fun provideCloudSpanner (config: SpannerConfig ): Spanner","title":"provideCloudSpanner"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/","text":"// misk-gcp / misk.cloud.gcp.spanner / GoogleSpannerService GoogleSpannerService \u00b6 [jvm]\\ class GoogleSpannerService @Injectconstructor(spanner: Spanner) : AbstractIdleService Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"GoogleSpannerService - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/#googlespannerservice","text":"[jvm]\\ class GoogleSpannerService @Injectconstructor(spanner: Spanner) : AbstractIdleService","title":"GoogleSpannerService"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/-google-spanner-service/","text":"// misk-gcp / misk.cloud.gcp.spanner / GoogleSpannerService / GoogleSpannerService GoogleSpannerService \u00b6 [jvm]\\ @Inject fun GoogleSpannerService (spanner: Spanner)","title":"GoogleSpannerService - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/-google-spanner-service/#googlespannerservice","text":"[jvm]\\ @Inject fun GoogleSpannerService (spanner: Spanner)","title":"GoogleSpannerService"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/-companion/","text":"// misk-gcp / misk.cloud.gcp.spanner / GoogleSpannerService / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-google-spanner-service/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerConfig SpannerConfig \u00b6 [jvm]\\ data class SpannerConfig (credentials: Credentials?, database: String , emulator: SpannerEmulatorConfig , instance_id: String , project_id: String ) : Config Configuration for talking to Google datastore Constructors \u00b6 SpannerConfig [jvm] fun SpannerConfig (credentials: Credentials? = null, database: String , emulator: SpannerEmulatorConfig = SpannerEmulatorConfig(), instance_id: String , project_id: String ) Properties \u00b6 Name Summary credentials [jvm] val credentials : Credentials? = null A set of Google Cloud credentials to use for making requests to Spanner. database [jvm] val database : String Name of the database to connect to within the Spanner instance. emulator [jvm] val emulator : SpannerEmulatorConfig Configuration for the included Spanner emulator. instance_id [jvm] val instance_id : String ID of the Spanner instance to connect to. project_id [jvm] val project_id : String ID of the GCP project the Spanner instance is located in.","title":"SpannerConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/#spannerconfig","text":"[jvm]\\ data class SpannerConfig (credentials: Credentials?, database: String , emulator: SpannerEmulatorConfig , instance_id: String , project_id: String ) : Config Configuration for talking to Google datastore","title":"SpannerConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/#constructors","text":"SpannerConfig [jvm] fun SpannerConfig (credentials: Credentials? = null, database: String , emulator: SpannerEmulatorConfig = SpannerEmulatorConfig(), instance_id: String , project_id: String )","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/#properties","text":"Name Summary credentials [jvm] val credentials : Credentials? = null A set of Google Cloud credentials to use for making requests to Spanner. database [jvm] val database : String Name of the database to connect to within the Spanner instance. emulator [jvm] val emulator : SpannerEmulatorConfig Configuration for the included Spanner emulator. instance_id [jvm] val instance_id : String ID of the Spanner instance to connect to. project_id [jvm] val project_id : String ID of the GCP project the Spanner instance is located in.","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/-spanner-config/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerConfig / SpannerConfig SpannerConfig \u00b6 [jvm]\\ fun SpannerConfig (credentials: Credentials? = null, database: String , emulator: SpannerEmulatorConfig = SpannerEmulatorConfig(), instance_id: String , project_id: String )","title":"SpannerConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/-spanner-config/#spannerconfig","text":"[jvm]\\ fun SpannerConfig (credentials: Credentials? = null, database: String , emulator: SpannerEmulatorConfig = SpannerEmulatorConfig(), instance_id: String , project_id: String )","title":"SpannerConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/credentials/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerConfig / credentials credentials \u00b6 [jvm]\\ val credentials : Credentials? = null A set of Google Cloud credentials to use for making requests to Spanner. If you have special behavior around managing service credentials in production environments, this is the place to configure that. Note: We will attempt to automatically grab credentials from the environment where applicable, or ignore setting credentials for emulator development.","title":"credentials - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/credentials/#credentials","text":"[jvm]\\ val credentials : Credentials? = null A set of Google Cloud credentials to use for making requests to Spanner. If you have special behavior around managing service credentials in production environments, this is the place to configure that. Note: We will attempt to automatically grab credentials from the environment where applicable, or ignore setting credentials for emulator development.","title":"credentials"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/database/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerConfig / database database \u00b6 [jvm]\\ val database : String Name of the database to connect to within the Spanner instance.","title":"database - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/database/#database","text":"[jvm]\\ val database : String Name of the database to connect to within the Spanner instance.","title":"database"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/emulator/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerConfig / emulator emulator \u00b6 [jvm]\\ val emulator : SpannerEmulatorConfig Configuration for the included Spanner emulator.","title":"emulator - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/emulator/#emulator","text":"[jvm]\\ val emulator : SpannerEmulatorConfig Configuration for the included Spanner emulator.","title":"emulator"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/instance_id/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerConfig / instance_id instance_id \u00b6 [jvm]\\ val instance_id : String ID of the Spanner instance to connect to. Note: your local dev instance ID doesn\u2019t have to be related to an actual Spanner instance - any string will do.","title":"instance_id - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/instance_id/#instance_id","text":"[jvm]\\ val instance_id : String ID of the Spanner instance to connect to. Note: your local dev instance ID doesn\u2019t have to be related to an actual Spanner instance - any string will do.","title":"instance_id"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/project_id/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerConfig / project_id project_id \u00b6 [jvm]\\ val project_id : String ID of the GCP project the Spanner instance is located in. Note: your local dev project ID doesn\u2019t have to be related to an actual GCP project - any string will do.","title":"project_id - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-config/project_id/#project_id","text":"[jvm]\\ val project_id : String ID of the GCP project the Spanner instance is located in. Note: your local dev project ID doesn\u2019t have to be related to an actual GCP project - any string will do.","title":"project_id"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerEmulatorConfig SpannerEmulatorConfig \u00b6 [jvm]\\ data class SpannerEmulatorConfig (enabled: Boolean , hostname: String , port: Int ) Options for configuring the Spanner emulator. Constructors \u00b6 SpannerEmulatorConfig [jvm] fun SpannerEmulatorConfig (enabled: Boolean = false, hostname: String = \u201clocalhost\u201d, port: Int = 9010) Properties \u00b6 Name Summary enabled [jvm] val enabled : Boolean = false Whether or not to start the Spanner emulator when the GoogleSpannerModule is installed. hostname [jvm] val hostname : String The hostname where the Spanner emulator is hosted. In almost all cases, this should be left as \u201clocalhost\u201d. port [jvm] val port : Int = 9010 The port where the Spanner emulator\u2019s gRPC port is hosted.","title":"SpannerEmulatorConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/#spanneremulatorconfig","text":"[jvm]\\ data class SpannerEmulatorConfig (enabled: Boolean , hostname: String , port: Int ) Options for configuring the Spanner emulator.","title":"SpannerEmulatorConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/#constructors","text":"SpannerEmulatorConfig [jvm] fun SpannerEmulatorConfig (enabled: Boolean = false, hostname: String = \u201clocalhost\u201d, port: Int = 9010)","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/#properties","text":"Name Summary enabled [jvm] val enabled : Boolean = false Whether or not to start the Spanner emulator when the GoogleSpannerModule is installed. hostname [jvm] val hostname : String The hostname where the Spanner emulator is hosted. In almost all cases, this should be left as \u201clocalhost\u201d. port [jvm] val port : Int = 9010 The port where the Spanner emulator\u2019s gRPC port is hosted.","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/-spanner-emulator-config/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerEmulatorConfig / SpannerEmulatorConfig SpannerEmulatorConfig \u00b6 [jvm]\\ fun SpannerEmulatorConfig (enabled: Boolean = false, hostname: String = \u201clocalhost\u201d, port: Int = 9010)","title":"SpannerEmulatorConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/-spanner-emulator-config/#spanneremulatorconfig","text":"[jvm]\\ fun SpannerEmulatorConfig (enabled: Boolean = false, hostname: String = \u201clocalhost\u201d, port: Int = 9010)","title":"SpannerEmulatorConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/enabled/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerEmulatorConfig / enabled enabled \u00b6 [jvm]\\ val enabled : Boolean = false Whether or not to start the Spanner emulator when the GoogleSpannerModule is installed.","title":"enabled - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/enabled/#enabled","text":"[jvm]\\ val enabled : Boolean = false Whether or not to start the Spanner emulator when the GoogleSpannerModule is installed.","title":"enabled"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/hostname/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerEmulatorConfig / hostname hostname \u00b6 [jvm]\\ val hostname : String The hostname where the Spanner emulator is hosted. In almost all cases, this should be left as \u201clocalhost\u201d.","title":"hostname - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/hostname/#hostname","text":"[jvm]\\ val hostname : String The hostname where the Spanner emulator is hosted. In almost all cases, this should be left as \u201clocalhost\u201d.","title":"hostname"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/port/","text":"// misk-gcp / misk.cloud.gcp.spanner / SpannerEmulatorConfig / port port \u00b6 [jvm]\\ val port : Int = 9010 The port where the Spanner emulator\u2019s gRPC port is hosted. By default, Spanner emulators run a gRPC port on 9010 and a REST / HTTP port on 9020. When spinning up an emulator, we will automatically reserve this port \u201c+ 10\u201d as the REST / HTTP port for Docker to bind to.","title":"port - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.spanner/-spanner-emulator-config/port/#port","text":"[jvm]\\ val port : Int = 9010 The port where the Spanner emulator\u2019s gRPC port is hosted. By default, Spanner emulators run a gRPC port on 9010 and a REST / HTTP port on 9020. When spinning up an emulator, we will automatically reserve this port \u201c+ 10\u201d as the REST / HTTP port for Docker to bind to.","title":"port"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/","text":"// misk-gcp / misk.cloud.gcp.storage Package misk.cloud.gcp.storage \u00b6 Types \u00b6 Name Summary BaseCustomStorageRpc [jvm] abstract class BaseCustomStorageRpc : StorageRpc Base for custom storage implementations. Most operations on custom storage are unsupported; only those minimal methods requiring implementation are left abstract. LocalStorageConfig [jvm] data class LocalStorageConfig (data_dir: String ) Configuration for local (emulated) storage LocalStorageRpc [jvm] class LocalStorageRpc (root: Path , moshi: Moshi) : BaseCustomStorageRpc Implementation of StorageRpc that is backed by local disk storage. Useful for running in development mode on local machines, since there is no GCS emulator available. Files are stored with the generation version appended as an extension suffix, with a symlink existing for the latest generation. To preserve GCS atomicity semantics, progressive uploads are handled by storing the interim uploaded data in a temporary file based off the latest generation, then doing a rename to the new generation once the upload is complete. StorageConfig [jvm] data class StorageConfig (use_local_storage: Boolean , local_storage: LocalStorageConfig ?, transport: TransportConfig ) : Config Configuration for talking to Google Cloud Storage Functions \u00b6 Name Summary compareTo [jvm] fun BlobId. compareTo (other: BlobId): Int forEachChunk [jvm] fun ReadChannel. forEachChunk (buffer: ByteBuffer , action: ( ByteBuffer , Int ) -> Unit ) Runs the given block for each chunk on a given channel [jvm] fun ReadChannel. forEachChunk (chunkSize: Int , action: ( ByteBuffer , Int ) -> Unit ) toList [jvm] fun < T > Page< T >. toList (): List < T > withLock [jvm] fun < T > FileChannel . withLock (shared: Boolean , action: () -> T ): T Properties \u00b6 Name Summary blobIds [jvm] val Page<Blob>. blobIds : List <BlobId>","title":"Package misk.cloud.gcp.storage - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/#package-miskcloudgcpstorage","text":"","title":"Package misk.cloud.gcp.storage"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/#types","text":"Name Summary BaseCustomStorageRpc [jvm] abstract class BaseCustomStorageRpc : StorageRpc Base for custom storage implementations. Most operations on custom storage are unsupported; only those minimal methods requiring implementation are left abstract. LocalStorageConfig [jvm] data class LocalStorageConfig (data_dir: String ) Configuration for local (emulated) storage LocalStorageRpc [jvm] class LocalStorageRpc (root: Path , moshi: Moshi) : BaseCustomStorageRpc Implementation of StorageRpc that is backed by local disk storage. Useful for running in development mode on local machines, since there is no GCS emulator available. Files are stored with the generation version appended as an extension suffix, with a symlink existing for the latest generation. To preserve GCS atomicity semantics, progressive uploads are handled by storing the interim uploaded data in a temporary file based off the latest generation, then doing a rename to the new generation once the upload is complete. StorageConfig [jvm] data class StorageConfig (use_local_storage: Boolean , local_storage: LocalStorageConfig ?, transport: TransportConfig ) : Config Configuration for talking to Google Cloud Storage","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/#functions","text":"Name Summary compareTo [jvm] fun BlobId. compareTo (other: BlobId): Int forEachChunk [jvm] fun ReadChannel. forEachChunk (buffer: ByteBuffer , action: ( ByteBuffer , Int ) -> Unit ) Runs the given block for each chunk on a given channel [jvm] fun ReadChannel. forEachChunk (chunkSize: Int , action: ( ByteBuffer , Int ) -> Unit ) toList [jvm] fun < T > Page< T >. toList (): List < T > withLock [jvm] fun < T > FileChannel . withLock (shared: Boolean , action: () -> T ): T","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/#properties","text":"Name Summary blobIds [jvm] val Page<Blob>. blobIds : List <BlobId>","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/blob-ids/","text":"// misk-gcp / misk.cloud.gcp.storage / blobIds blobIds \u00b6 [jvm]\\ val Page<Blob>. blobIds : List <BlobId> Return \u00b6 a list containing just the ids of the blobs in the page","title":"blobIds - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/blob-ids/#blobids","text":"[jvm]\\ val Page<Blob>. blobIds : List <BlobId>","title":"blobIds"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/blob-ids/#return","text":"a list containing just the ids of the blobs in the page","title":"Return"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/compare-to/","text":"// misk-gcp / misk.cloud.gcp.storage / compareTo compareTo \u00b6 [jvm]\\ fun BlobId. compareTo (other: BlobId): Int Return \u00b6 compares one blob id to another; orders by bucket, then name, then generation","title":"compareTo - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/compare-to/#compareto","text":"[jvm]\\ fun BlobId. compareTo (other: BlobId): Int","title":"compareTo"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/compare-to/#return","text":"compares one blob id to another; orders by bucket, then name, then generation","title":"Return"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/for-each-chunk/","text":"// misk-gcp / misk.cloud.gcp.storage / forEachChunk forEachChunk \u00b6 [jvm]\\ fun ReadChannel. forEachChunk (buffer: ByteBuffer , action: ( ByteBuffer , Int ) -> Unit ) Runs the given block for each chunk on a given channel [jvm]\\ fun ReadChannel. forEachChunk (chunkSize: Int , action: ( ByteBuffer , Int ) -> Unit )","title":"forEachChunk - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/for-each-chunk/#foreachchunk","text":"[jvm]\\ fun ReadChannel. forEachChunk (buffer: ByteBuffer , action: ( ByteBuffer , Int ) -> Unit ) Runs the given block for each chunk on a given channel [jvm]\\ fun ReadChannel. forEachChunk (chunkSize: Int , action: ( ByteBuffer , Int ) -> Unit )","title":"forEachChunk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/to-list/","text":"// misk-gcp / misk.cloud.gcp.storage / toList toList \u00b6 [jvm]\\ fun < T > Page< T >. toList (): List < T > Return \u00b6 a list containing all of the elements in this page","title":"toList - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/to-list/#tolist","text":"[jvm]\\ fun < T > Page< T >. toList (): List < T >","title":"toList"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/to-list/#return","text":"a list containing all of the elements in this page","title":"Return"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/with-lock/","text":"// misk-gcp / misk.cloud.gcp.storage / withLock withLock \u00b6 [jvm]\\ fun < T > FileChannel . withLock (shared: Boolean , action: () -> T ): T","title":"withLock - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/with-lock/#withlock","text":"[jvm]\\ fun < T > FileChannel . withLock (shared: Boolean , action: () -> T ): T","title":"withLock"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc BaseCustomStorageRpc \u00b6 [jvm]\\ abstract class BaseCustomStorageRpc : StorageRpc Base for custom storage implementations. Most operations on custom storage are unsupported; only those minimal methods requiring implementation are left abstract. Constructors \u00b6 BaseCustomStorageRpc [jvm] fun BaseCustomStorageRpc () Functions \u00b6 Name Summary compose [jvm] open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject continueRewrite [jvm] open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse create [jvm] open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket abstract fun create (p0: StorageObject, p1: InputStream , p2: MutableMap <StorageRpc.Option, *>): StorageObject createAcl [jvm] open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl createBatch [jvm] open override fun createBatch (): RpcBatch createDefaultAcl [jvm] open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl createHmacKey [jvm] open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey createNotification [jvm] open override fun createNotification (bucket: String ?, notification: Notification?): Notification delete [jvm] abstract fun delete (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): Boolean open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean deleteAcl [jvm] open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean deleteDefaultAcl [jvm] open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean deleteHmacKey [jvm] open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?) deleteNotification [jvm] open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean get [jvm] abstract operator fun get (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): StorageObject open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? getAcl [jvm] open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl getCurrentUploadOffset [jvm] open override fun getCurrentUploadOffset (p0: String ?): Long getDefaultAcl [jvm] open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl getHmacKey [jvm] open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata getIamPolicy [jvm] open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy getServiceAccount [jvm] open override fun getServiceAccount (projectId: String ?): ServiceAccount list [jvm] open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>> abstract fun list (p0: String , p1: MutableMap <StorageRpc.Option, *>): Tuple< String , MutableIterable <StorageObject>> listAcls [jvm] open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl> listDefaultAcls [jvm] open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl> listHmacKeys [jvm] open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>> listNotifications [jvm] open override fun listNotifications (bucket: String ?): List <Notification> load [jvm] abstract fun load (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): ByteArray lockRetentionPolicy [jvm] open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket open [jvm] open override fun open (signedURL: String ?): String abstract fun open (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): String openRewrite [jvm] abstract fun openRewrite (p0: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse patch [jvm] open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? patchAcl [jvm] open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl patchDefaultAcl [jvm] open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl read [jvm] abstract fun read (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>, p2: Long , p3: OutputStream ): Long open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray > setIamPolicy [jvm] open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy testIamPermissions [jvm] open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse updateHmacKey [jvm] open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata write [jvm] abstract fun write (p0: String , p1: ByteArray , p2: Int , p3: Long , p4: Int , p5: Boolean ) writeWithResponse [jvm] open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject Inheritors \u00b6 Name LocalStorageRpc","title":"BaseCustomStorageRpc - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/#basecustomstoragerpc","text":"[jvm]\\ abstract class BaseCustomStorageRpc : StorageRpc Base for custom storage implementations. Most operations on custom storage are unsupported; only those minimal methods requiring implementation are left abstract.","title":"BaseCustomStorageRpc"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/#constructors","text":"BaseCustomStorageRpc [jvm] fun BaseCustomStorageRpc ()","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/#functions","text":"Name Summary compose [jvm] open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject continueRewrite [jvm] open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse create [jvm] open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket abstract fun create (p0: StorageObject, p1: InputStream , p2: MutableMap <StorageRpc.Option, *>): StorageObject createAcl [jvm] open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl createBatch [jvm] open override fun createBatch (): RpcBatch createDefaultAcl [jvm] open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl createHmacKey [jvm] open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey createNotification [jvm] open override fun createNotification (bucket: String ?, notification: Notification?): Notification delete [jvm] abstract fun delete (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): Boolean open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean deleteAcl [jvm] open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean deleteDefaultAcl [jvm] open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean deleteHmacKey [jvm] open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?) deleteNotification [jvm] open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean get [jvm] abstract operator fun get (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): StorageObject open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? getAcl [jvm] open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl getCurrentUploadOffset [jvm] open override fun getCurrentUploadOffset (p0: String ?): Long getDefaultAcl [jvm] open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl getHmacKey [jvm] open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata getIamPolicy [jvm] open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy getServiceAccount [jvm] open override fun getServiceAccount (projectId: String ?): ServiceAccount list [jvm] open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>> abstract fun list (p0: String , p1: MutableMap <StorageRpc.Option, *>): Tuple< String , MutableIterable <StorageObject>> listAcls [jvm] open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl> listDefaultAcls [jvm] open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl> listHmacKeys [jvm] open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>> listNotifications [jvm] open override fun listNotifications (bucket: String ?): List <Notification> load [jvm] abstract fun load (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): ByteArray lockRetentionPolicy [jvm] open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket open [jvm] open override fun open (signedURL: String ?): String abstract fun open (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>): String openRewrite [jvm] abstract fun openRewrite (p0: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse patch [jvm] open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? patchAcl [jvm] open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl patchDefaultAcl [jvm] open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl read [jvm] abstract fun read (p0: StorageObject, p1: MutableMap <StorageRpc.Option, *>, p2: Long , p3: OutputStream ): Long open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray > setIamPolicy [jvm] open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy testIamPermissions [jvm] open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse updateHmacKey [jvm] open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata write [jvm] abstract fun write (p0: String , p1: ByteArray , p2: Int , p3: Long , p4: Int , p5: Boolean ) writeWithResponse [jvm] open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/#inheritors","text":"Name LocalStorageRpc","title":"Inheritors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/-base-custom-storage-rpc/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / BaseCustomStorageRpc BaseCustomStorageRpc \u00b6 [jvm]\\ fun BaseCustomStorageRpc ()","title":"BaseCustomStorageRpc - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/-base-custom-storage-rpc/#basecustomstoragerpc","text":"[jvm]\\ fun BaseCustomStorageRpc ()","title":"BaseCustomStorageRpc"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/compose/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / compose compose \u00b6 [jvm]\\ open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject","title":"compose - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/compose/#compose","text":"[jvm]\\ open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject","title":"compose"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/continue-rewrite/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / continueRewrite continueRewrite \u00b6 [jvm]\\ open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse","title":"continueRewrite - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/continue-rewrite/#continuerewrite","text":"[jvm]\\ open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse","title":"continueRewrite"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / createAcl createAcl \u00b6 [jvm]\\ open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"createAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-acl/#createacl","text":"[jvm]\\ open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"createAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-batch/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / createBatch createBatch \u00b6 [jvm]\\ open override fun createBatch (): RpcBatch","title":"createBatch - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-batch/#createbatch","text":"[jvm]\\ open override fun createBatch (): RpcBatch","title":"createBatch"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-default-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / createDefaultAcl createDefaultAcl \u00b6 [jvm]\\ open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"createDefaultAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-default-acl/#createdefaultacl","text":"[jvm]\\ open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"createDefaultAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-hmac-key/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / createHmacKey createHmacKey \u00b6 [jvm]\\ open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey","title":"createHmacKey - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-hmac-key/#createhmackey","text":"[jvm]\\ open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey","title":"createHmacKey"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-notification/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / createNotification createNotification \u00b6 [jvm]\\ open override fun createNotification (bucket: String ?, notification: Notification?): Notification","title":"createNotification - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create-notification/#createnotification","text":"[jvm]\\ open override fun createNotification (bucket: String ?, notification: Notification?): Notification","title":"createNotification"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / create create \u00b6 [jvm]\\ open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket","title":"create - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/create/#create","text":"[jvm]\\ open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket","title":"create"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / deleteAcl deleteAcl \u00b6 [jvm]\\ open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean","title":"deleteAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-acl/#deleteacl","text":"[jvm]\\ open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean","title":"deleteAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-default-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / deleteDefaultAcl deleteDefaultAcl \u00b6 [jvm]\\ open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean","title":"deleteDefaultAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-default-acl/#deletedefaultacl","text":"[jvm]\\ open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean","title":"deleteDefaultAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-hmac-key/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / deleteHmacKey deleteHmacKey \u00b6 [jvm]\\ open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?)","title":"deleteHmacKey - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-hmac-key/#deletehmackey","text":"[jvm]\\ open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?)","title":"deleteHmacKey"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-notification/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / deleteNotification deleteNotification \u00b6 [jvm]\\ open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean","title":"deleteNotification - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete-notification/#deletenotification","text":"[jvm]\\ open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean","title":"deleteNotification"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / delete delete \u00b6 [jvm]\\ open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean","title":"delete - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/delete/#delete","text":"[jvm]\\ open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean","title":"delete"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / getAcl getAcl \u00b6 [jvm]\\ open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl","title":"getAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-acl/#getacl","text":"[jvm]\\ open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl","title":"getAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-current-upload-offset/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / getCurrentUploadOffset getCurrentUploadOffset \u00b6 [jvm]\\ open override fun getCurrentUploadOffset (p0: String ?): Long","title":"getCurrentUploadOffset - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-current-upload-offset/#getcurrentuploadoffset","text":"[jvm]\\ open override fun getCurrentUploadOffset (p0: String ?): Long","title":"getCurrentUploadOffset"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-default-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / getDefaultAcl getDefaultAcl \u00b6 [jvm]\\ open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl","title":"getDefaultAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-default-acl/#getdefaultacl","text":"[jvm]\\ open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl","title":"getDefaultAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-hmac-key/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / getHmacKey getHmacKey \u00b6 [jvm]\\ open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata","title":"getHmacKey - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-hmac-key/#gethmackey","text":"[jvm]\\ open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata","title":"getHmacKey"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-iam-policy/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / getIamPolicy getIamPolicy \u00b6 [jvm]\\ open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy","title":"getIamPolicy - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-iam-policy/#getiampolicy","text":"[jvm]\\ open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy","title":"getIamPolicy"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-service-account/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / getServiceAccount getServiceAccount \u00b6 [jvm]\\ open override fun getServiceAccount (projectId: String ?): ServiceAccount","title":"getServiceAccount - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get-service-account/#getserviceaccount","text":"[jvm]\\ open override fun getServiceAccount (projectId: String ?): ServiceAccount","title":"getServiceAccount"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / get get \u00b6 [jvm]\\ open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket?","title":"get - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/get/#get","text":"[jvm]\\ open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket?","title":"get"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-acls/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / listAcls listAcls \u00b6 [jvm]\\ open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl>","title":"listAcls - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-acls/#listacls","text":"[jvm]\\ open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl>","title":"listAcls"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-default-acls/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / listDefaultAcls listDefaultAcls \u00b6 [jvm]\\ open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl>","title":"listDefaultAcls - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-default-acls/#listdefaultacls","text":"[jvm]\\ open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl>","title":"listDefaultAcls"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-hmac-keys/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / listHmacKeys listHmacKeys \u00b6 [jvm]\\ open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>>","title":"listHmacKeys - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-hmac-keys/#listhmackeys","text":"[jvm]\\ open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>>","title":"listHmacKeys"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-notifications/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / listNotifications listNotifications \u00b6 [jvm]\\ open override fun listNotifications (bucket: String ?): List <Notification>","title":"listNotifications - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list-notifications/#listnotifications","text":"[jvm]\\ open override fun listNotifications (bucket: String ?): List <Notification>","title":"listNotifications"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / list list \u00b6 [jvm]\\ open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>>","title":"list - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/list/#list","text":"[jvm]\\ open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>>","title":"list"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/lock-retention-policy/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / lockRetentionPolicy lockRetentionPolicy \u00b6 [jvm]\\ open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket","title":"lockRetentionPolicy - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/lock-retention-policy/#lockretentionpolicy","text":"[jvm]\\ open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket","title":"lockRetentionPolicy"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/open/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / open open \u00b6 [jvm]\\ open override fun open (signedURL: String ?): String","title":"open - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/open/#open","text":"[jvm]\\ open override fun open (signedURL: String ?): String","title":"open"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/patch-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / patchAcl patchAcl \u00b6 [jvm]\\ open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"patchAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/patch-acl/#patchacl","text":"[jvm]\\ open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"patchAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/patch-default-acl/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / patchDefaultAcl patchDefaultAcl \u00b6 [jvm]\\ open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"patchDefaultAcl - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/patch-default-acl/#patchdefaultacl","text":"[jvm]\\ open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl","title":"patchDefaultAcl"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/patch/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / patch patch \u00b6 [jvm]\\ open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject?","title":"patch - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/patch/#patch","text":"[jvm]\\ open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject?","title":"patch"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/read/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / read read \u00b6 [jvm]\\ open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray >","title":"read - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/read/#read","text":"[jvm]\\ open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray >","title":"read"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/set-iam-policy/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / setIamPolicy setIamPolicy \u00b6 [jvm]\\ open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy","title":"setIamPolicy - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/set-iam-policy/#setiampolicy","text":"[jvm]\\ open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy","title":"setIamPolicy"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/test-iam-permissions/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / testIamPermissions testIamPermissions \u00b6 [jvm]\\ open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse","title":"testIamPermissions - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/test-iam-permissions/#testiampermissions","text":"[jvm]\\ open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse","title":"testIamPermissions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/update-hmac-key/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / updateHmacKey updateHmacKey \u00b6 [jvm]\\ open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata","title":"updateHmacKey - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/update-hmac-key/#updatehmackey","text":"[jvm]\\ open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata","title":"updateHmacKey"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/write-with-response/","text":"// misk-gcp / misk.cloud.gcp.storage / BaseCustomStorageRpc / writeWithResponse writeWithResponse \u00b6 [jvm]\\ open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject","title":"writeWithResponse - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-base-custom-storage-rpc/write-with-response/#writewithresponse","text":"[jvm]\\ open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject","title":"writeWithResponse"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageConfig LocalStorageConfig \u00b6 [jvm]\\ data class LocalStorageConfig (data_dir: String ) Configuration for local (emulated) storage Constructors \u00b6 LocalStorageConfig [jvm] fun LocalStorageConfig (data_dir: String ) Properties \u00b6 Name Summary data_dir [jvm] val data_dir : String","title":"LocalStorageConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/#localstorageconfig","text":"[jvm]\\ data class LocalStorageConfig (data_dir: String ) Configuration for local (emulated) storage","title":"LocalStorageConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/#constructors","text":"LocalStorageConfig [jvm] fun LocalStorageConfig (data_dir: String )","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/#properties","text":"Name Summary data_dir [jvm] val data_dir : String","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/-local-storage-config/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageConfig / LocalStorageConfig LocalStorageConfig \u00b6 [jvm]\\ fun LocalStorageConfig (data_dir: String )","title":"LocalStorageConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/-local-storage-config/#localstorageconfig","text":"[jvm]\\ fun LocalStorageConfig (data_dir: String )","title":"LocalStorageConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/data_dir/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageConfig / data_dir data_dir \u00b6 [jvm]\\ val data_dir : String","title":"data_dir - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-config/data_dir/#data_dir","text":"[jvm]\\ val data_dir : String","title":"data_dir"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc LocalStorageRpc \u00b6 [jvm]\\ class LocalStorageRpc (root: Path , moshi: Moshi) : BaseCustomStorageRpc Implementation of StorageRpc that is backed by local disk storage. Useful for running in development mode on local machines, since there is no GCS emulator available. Files are stored with the generation version appended as an extension suffix, with a symlink existing for the latest generation. To preserve GCS atomicity semantics, progressive uploads are handled by storing the interim uploaded data in a temporary file based off the latest generation, then doing a rename to the new generation once the upload is complete. The implementation uses file locks to support multiple local processes accessing the same storage directory. Whenever a blob is updated, the local store will acquire an exclusive lock on a corresponding lock file, releasing that lock when the update is complete (or when the process dies). It\u2019s slightly more complicated since we need to deal with the possibility that writer stops partway through without the process failing; in those cases we don\u2019t want to prevent subsequent updates from other processes. Write process: on open acquire a read lock read metadata constraints, and create a new target metadata object for the next generation release read lock create a new temp file for receiving the update generate an upload id, save the temp file location + target metadata + constraints in-memory associated with the upload id on write write to the temp file for that upload id on finish acquire a write lock, read the latest metadata for the blob and re-check constraints to make sure nothing changed underneath (e.g. a concurrent upload for that blob did not complete) copy from the temp file to a new file in the content directory, appending the new generation number. This is done as an atomic move + overwrite write updated metadata to the metadata file. This is done as an atomic move + overwrite. Until this is complete, the new version of the content is not accessible to readers. release the write lock remove the content file for the prior generation If a writer fails between open and finish, all that happens is we have abandoned temp files If a writer fails after moving the temp file to the contents directory but before updating the metadata, then we have a bad content file for that generation sitting in the content directory. Since the metadata hasn\u2019t been updated with the new generation, this content is not readable, and a subsequent write will overwrite it. If a writer fails after updating the metadata but before removing the prior generation content file, we\u2019ll have left an abandoned content file. A garbage collection process can be run to clean these up eventually Read process acquire a read lock read the metadata for the blob and check constraints (including etag) read the raw bytes from the content file release the read lock Clients use etags to detect when a blob is updated while a progressive download is in place; the etag returned from a prior read is sent in subsequent reads. We simply use the generation number as the etag value. Constructors \u00b6 LocalStorageRpc [jvm] fun LocalStorageRpc (root: Path , moshi: Moshi = defaultKotlinMoshi) Functions \u00b6 Name Summary compose [jvm] open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject continueRewrite [jvm] open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse create [jvm] open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject? createAcl [jvm] open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl createBatch [jvm] open override fun createBatch (): RpcBatch createDefaultAcl [jvm] open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl createHmacKey [jvm] open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey createNotification [jvm] open override fun createNotification (bucket: String ?, notification: Notification?): Notification delete [jvm] open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean deleteAcl [jvm] open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean deleteDefaultAcl [jvm] open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean deleteHmacKey [jvm] open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?) deleteNotification [jvm] open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean get [jvm] open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? getAcl [jvm] open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl getCurrentUploadOffset [jvm] open override fun getCurrentUploadOffset (p0: String ?): Long getDefaultAcl [jvm] open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl getHmacKey [jvm] open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata getIamPolicy [jvm] open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy getServiceAccount [jvm] open override fun getServiceAccount (projectId: String ?): ServiceAccount list [jvm] open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>> open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>> listAcls [jvm] open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl> listDefaultAcls [jvm] open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl> listHmacKeys [jvm] open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>> listNotifications [jvm] open override fun listNotifications (bucket: String ?): List <Notification> load [jvm] open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray lockRetentionPolicy [jvm] open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket open [jvm] open override fun open (signedURL: String ?): String open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String openRewrite [jvm] open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse patch [jvm] open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? patchAcl [jvm] open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl patchDefaultAcl [jvm] open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl read [jvm] open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray > open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long setIamPolicy [jvm] open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy testIamPermissions [jvm] open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse updateHmacKey [jvm] open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata write [jvm] open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean ) writeWithResponse [jvm] open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject","title":"LocalStorageRpc - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/#localstoragerpc","text":"[jvm]\\ class LocalStorageRpc (root: Path , moshi: Moshi) : BaseCustomStorageRpc Implementation of StorageRpc that is backed by local disk storage. Useful for running in development mode on local machines, since there is no GCS emulator available. Files are stored with the generation version appended as an extension suffix, with a symlink existing for the latest generation. To preserve GCS atomicity semantics, progressive uploads are handled by storing the interim uploaded data in a temporary file based off the latest generation, then doing a rename to the new generation once the upload is complete. The implementation uses file locks to support multiple local processes accessing the same storage directory. Whenever a blob is updated, the local store will acquire an exclusive lock on a corresponding lock file, releasing that lock when the update is complete (or when the process dies). It\u2019s slightly more complicated since we need to deal with the possibility that writer stops partway through without the process failing; in those cases we don\u2019t want to prevent subsequent updates from other processes. Write process: on open acquire a read lock read metadata constraints, and create a new target metadata object for the next generation release read lock create a new temp file for receiving the update generate an upload id, save the temp file location + target metadata + constraints in-memory associated with the upload id on write write to the temp file for that upload id on finish acquire a write lock, read the latest metadata for the blob and re-check constraints to make sure nothing changed underneath (e.g. a concurrent upload for that blob did not complete) copy from the temp file to a new file in the content directory, appending the new generation number. This is done as an atomic move + overwrite write updated metadata to the metadata file. This is done as an atomic move + overwrite. Until this is complete, the new version of the content is not accessible to readers. release the write lock remove the content file for the prior generation If a writer fails between open and finish, all that happens is we have abandoned temp files If a writer fails after moving the temp file to the contents directory but before updating the metadata, then we have a bad content file for that generation sitting in the content directory. Since the metadata hasn\u2019t been updated with the new generation, this content is not readable, and a subsequent write will overwrite it. If a writer fails after updating the metadata but before removing the prior generation content file, we\u2019ll have left an abandoned content file. A garbage collection process can be run to clean these up eventually Read process acquire a read lock read the metadata for the blob and check constraints (including etag) read the raw bytes from the content file release the read lock Clients use etags to detect when a blob is updated while a progressive download is in place; the etag returned from a prior read is sent in subsequent reads. We simply use the generation number as the etag value.","title":"LocalStorageRpc"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/#constructors","text":"LocalStorageRpc [jvm] fun LocalStorageRpc (root: Path , moshi: Moshi = defaultKotlinMoshi)","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/#functions","text":"Name Summary compose [jvm] open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject continueRewrite [jvm] open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse create [jvm] open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject? createAcl [jvm] open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl createBatch [jvm] open override fun createBatch (): RpcBatch createDefaultAcl [jvm] open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl createHmacKey [jvm] open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey createNotification [jvm] open override fun createNotification (bucket: String ?, notification: Notification?): Notification delete [jvm] open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean deleteAcl [jvm] open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean deleteDefaultAcl [jvm] open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean deleteHmacKey [jvm] open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?) deleteNotification [jvm] open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean get [jvm] open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? getAcl [jvm] open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl getCurrentUploadOffset [jvm] open override fun getCurrentUploadOffset (p0: String ?): Long getDefaultAcl [jvm] open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl getHmacKey [jvm] open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata getIamPolicy [jvm] open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy getServiceAccount [jvm] open override fun getServiceAccount (projectId: String ?): ServiceAccount list [jvm] open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>> open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>> listAcls [jvm] open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl> listDefaultAcls [jvm] open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl> listHmacKeys [jvm] open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>> listNotifications [jvm] open override fun listNotifications (bucket: String ?): List <Notification> load [jvm] open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray lockRetentionPolicy [jvm] open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket open [jvm] open override fun open (signedURL: String ?): String open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String openRewrite [jvm] open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse patch [jvm] open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? patchAcl [jvm] open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl patchDefaultAcl [jvm] open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl read [jvm] open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray > open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long setIamPolicy [jvm] open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy testIamPermissions [jvm] open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse updateHmacKey [jvm] open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata write [jvm] open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean ) writeWithResponse [jvm] open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/-local-storage-rpc/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / LocalStorageRpc LocalStorageRpc \u00b6 [jvm]\\ fun LocalStorageRpc (root: Path , moshi: Moshi = defaultKotlinMoshi)","title":"LocalStorageRpc - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/-local-storage-rpc/#localstoragerpc","text":"[jvm]\\ fun LocalStorageRpc (root: Path , moshi: Moshi = defaultKotlinMoshi)","title":"LocalStorageRpc"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/create/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / create create \u00b6 [jvm]\\ open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject?","title":"create - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/create/#create","text":"[jvm]\\ open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject?","title":"create"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/delete/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / delete delete \u00b6 [jvm]\\ open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean","title":"delete - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/delete/#delete","text":"[jvm]\\ open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean","title":"delete"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/get/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / get get \u00b6 [jvm]\\ open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject?","title":"get - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/get/#get","text":"[jvm]\\ open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject?","title":"get"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/list/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / list list \u00b6 [jvm]\\ open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>>","title":"list - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/list/#list","text":"[jvm]\\ open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>>","title":"list"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/load/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / load load \u00b6 [jvm]\\ open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray","title":"load - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/load/#load","text":"[jvm]\\ open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray","title":"load"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/open-rewrite/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / openRewrite openRewrite \u00b6 [jvm]\\ open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse","title":"openRewrite - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/open-rewrite/#openrewrite","text":"[jvm]\\ open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse","title":"openRewrite"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/open/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / open open \u00b6 [jvm]\\ open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String","title":"open - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/open/#open","text":"[jvm]\\ open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String","title":"open"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/read/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / read read \u00b6 [jvm]\\ open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long","title":"read - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/read/#read","text":"[jvm]\\ open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long","title":"read"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/write/","text":"// misk-gcp / misk.cloud.gcp.storage / LocalStorageRpc / write write \u00b6 [jvm]\\ open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean )","title":"write - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-local-storage-rpc/write/#write","text":"[jvm]\\ open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean )","title":"write"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/","text":"// misk-gcp / misk.cloud.gcp.storage / StorageConfig StorageConfig \u00b6 [jvm]\\ data class StorageConfig (use_local_storage: Boolean , local_storage: LocalStorageConfig ?, transport: TransportConfig ) : Config Configuration for talking to Google Cloud Storage Constructors \u00b6 StorageConfig [jvm] fun StorageConfig (use_local_storage: Boolean = false, local_storage: LocalStorageConfig ? = null, transport: TransportConfig = TransportConfig()) Properties \u00b6 Name Summary local_storage [jvm] val local_storage : LocalStorageConfig ? = null transport [jvm] val transport : TransportConfig use_local_storage [jvm] val use_local_storage : Boolean = false","title":"StorageConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/#storageconfig","text":"[jvm]\\ data class StorageConfig (use_local_storage: Boolean , local_storage: LocalStorageConfig ?, transport: TransportConfig ) : Config Configuration for talking to Google Cloud Storage","title":"StorageConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/#constructors","text":"StorageConfig [jvm] fun StorageConfig (use_local_storage: Boolean = false, local_storage: LocalStorageConfig ? = null, transport: TransportConfig = TransportConfig())","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/#properties","text":"Name Summary local_storage [jvm] val local_storage : LocalStorageConfig ? = null transport [jvm] val transport : TransportConfig use_local_storage [jvm] val use_local_storage : Boolean = false","title":"Properties"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/-storage-config/","text":"// misk-gcp / misk.cloud.gcp.storage / StorageConfig / StorageConfig StorageConfig \u00b6 [jvm]\\ fun StorageConfig (use_local_storage: Boolean = false, local_storage: LocalStorageConfig ? = null, transport: TransportConfig = TransportConfig())","title":"StorageConfig - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/-storage-config/#storageconfig","text":"[jvm]\\ fun StorageConfig (use_local_storage: Boolean = false, local_storage: LocalStorageConfig ? = null, transport: TransportConfig = TransportConfig())","title":"StorageConfig"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/local_storage/","text":"// misk-gcp / misk.cloud.gcp.storage / StorageConfig / local_storage local_storage \u00b6 [jvm]\\ val local_storage : LocalStorageConfig ? = null","title":"local_storage - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/local_storage/#local_storage","text":"[jvm]\\ val local_storage : LocalStorageConfig ? = null","title":"local_storage"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/transport/","text":"// misk-gcp / misk.cloud.gcp.storage / StorageConfig / transport transport \u00b6 [jvm]\\ val transport : TransportConfig","title":"transport - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/transport/#transport","text":"[jvm]\\ val transport : TransportConfig","title":"transport"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/use_local_storage/","text":"// misk-gcp / misk.cloud.gcp.storage / StorageConfig / use_local_storage use_local_storage \u00b6 [jvm]\\ val use_local_storage : Boolean = false","title":"use_local_storage - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.storage/-storage-config/use_local_storage/#use_local_storage","text":"[jvm]\\ val use_local_storage : Boolean = false","title":"use_local_storage"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/","text":"// misk-gcp / misk.cloud.gcp.tracing Package misk.cloud.gcp.tracing \u00b6 Types \u00b6 Name Summary TracingLoggingEnhancer [jvm] class TracingLoggingEnhancer : LoggingEnhancer Add this enhancer to your project\u2019s Logback configuration to add trace ids to logs generated by GCP\u2019s LoggingAppender","title":"Package misk.cloud.gcp.tracing - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/#package-miskcloudgcptracing","text":"","title":"Package misk.cloud.gcp.tracing"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/#types","text":"Name Summary TracingLoggingEnhancer [jvm] class TracingLoggingEnhancer : LoggingEnhancer Add this enhancer to your project\u2019s Logback configuration to add trace ids to logs generated by GCP\u2019s LoggingAppender","title":"Types"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/","text":"// misk-gcp / misk.cloud.gcp.tracing / TracingLoggingEnhancer TracingLoggingEnhancer \u00b6 [jvm]\\ class TracingLoggingEnhancer : LoggingEnhancer Add this enhancer to your project\u2019s Logback configuration to add trace ids to logs generated by GCP\u2019s LoggingAppender Constructors \u00b6 TracingLoggingEnhancer [jvm] fun TracingLoggingEnhancer () Functions \u00b6 Name Summary enhanceLogEntry [jvm] open override fun enhanceLogEntry (builder: LogEntry.Builder) fun enhanceLogEntry (tracer: Tracer, builder: LogEntry.Builder)","title":"TracingLoggingEnhancer - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/#tracingloggingenhancer","text":"[jvm]\\ class TracingLoggingEnhancer : LoggingEnhancer Add this enhancer to your project\u2019s Logback configuration to add trace ids to logs generated by GCP\u2019s LoggingAppender","title":"TracingLoggingEnhancer"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/#constructors","text":"TracingLoggingEnhancer [jvm] fun TracingLoggingEnhancer ()","title":"Constructors"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/#functions","text":"Name Summary enhanceLogEntry [jvm] open override fun enhanceLogEntry (builder: LogEntry.Builder) fun enhanceLogEntry (tracer: Tracer, builder: LogEntry.Builder)","title":"Functions"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/-tracing-logging-enhancer/","text":"// misk-gcp / misk.cloud.gcp.tracing / TracingLoggingEnhancer / TracingLoggingEnhancer TracingLoggingEnhancer \u00b6 [jvm]\\ fun TracingLoggingEnhancer ()","title":"TracingLoggingEnhancer - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/-tracing-logging-enhancer/#tracingloggingenhancer","text":"[jvm]\\ fun TracingLoggingEnhancer ()","title":"TracingLoggingEnhancer"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/enhance-log-entry/","text":"// misk-gcp / misk.cloud.gcp.tracing / TracingLoggingEnhancer / enhanceLogEntry enhanceLogEntry \u00b6 [jvm]\\ open override fun enhanceLogEntry (builder: LogEntry.Builder) fun enhanceLogEntry (tracer: Tracer, builder: LogEntry.Builder)","title":"enhanceLogEntry - Misk"},{"location":"0.x/misk-gcp/misk.cloud.gcp.tracing/-tracing-logging-enhancer/enhance-log-entry/#enhancelogentry","text":"[jvm]\\ open override fun enhanceLogEntry (builder: LogEntry.Builder) fun enhanceLogEntry (tracer: Tracer, builder: LogEntry.Builder)","title":"enhanceLogEntry"},{"location":"0.x/misk-gcp/misk.logging/","text":"// misk-gcp / misk.logging Package misk.logging \u00b6 Functions \u00b6 Name Summary enableStackDriverLogging [jvm] fun enableStackDriverLogging (config: StackDriverLoggingConfig ) Configures Misk to send application logs to StackDriver. If credentials are required to send logging, set the GOOGLE_APPLICATION_CREDENTIALS environment variable with the path to the JSON credentials.","title":"Package misk.logging - Misk"},{"location":"0.x/misk-gcp/misk.logging/#package-misklogging","text":"","title":"Package misk.logging"},{"location":"0.x/misk-gcp/misk.logging/#functions","text":"Name Summary enableStackDriverLogging [jvm] fun enableStackDriverLogging (config: StackDriverLoggingConfig ) Configures Misk to send application logs to StackDriver. If credentials are required to send logging, set the GOOGLE_APPLICATION_CREDENTIALS environment variable with the path to the JSON credentials.","title":"Functions"},{"location":"0.x/misk-gcp/misk.logging/enable-stack-driver-logging/","text":"// misk-gcp / misk.logging / enableStackDriverLogging enableStackDriverLogging \u00b6 [jvm]\\ fun enableStackDriverLogging (config: StackDriverLoggingConfig ) Configures Misk to send application logs to StackDriver. If credentials are required to send logging, set the GOOGLE_APPLICATION_CREDENTIALS environment variable with the path to the JSON credentials.","title":"enableStackDriverLogging - Misk"},{"location":"0.x/misk-gcp/misk.logging/enable-stack-driver-logging/#enablestackdriverlogging","text":"[jvm]\\ fun enableStackDriverLogging (config: StackDriverLoggingConfig ) Configures Misk to send application logs to StackDriver. If credentials are required to send logging, set the GOOGLE_APPLICATION_CREDENTIALS environment variable with the path to the JSON credentials.","title":"enableStackDriverLogging"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore Package misk.cloud.gcp.datastore \u00b6 Types \u00b6 Name Summary FakeDatastoreModule [jvm] class FakeDatastoreModule : KAbstractModule Installs a version of the Datastore that works off an in-memory local store","title":"Package misk.cloud.gcp.datastore - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/#package-miskcloudgcpdatastore","text":"","title":"Package misk.cloud.gcp.datastore"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/#types","text":"Name Summary FakeDatastoreModule [jvm] class FakeDatastoreModule : KAbstractModule Installs a version of the Datastore that works off an in-memory local store","title":"Types"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore / FakeDatastoreModule FakeDatastoreModule \u00b6 [jvm]\\ class FakeDatastoreModule : KAbstractModule Installs a version of the Datastore that works off an in-memory local store Constructors \u00b6 FakeDatastoreModule [jvm] fun FakeDatastoreModule () Types \u00b6 Name Summary Companion [jvm] object Companion FakeDatastoreService [jvm] class FakeDatastoreService @Injectconstructor(datastoreHelper: LocalDatastoreHelper) : AbstractIdleService Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideDatastore [jvm] @Provides fun provideDatastore (datastoreHelper: LocalDatastoreHelper): Datastore provideDatastoreHelper [jvm] @Provides fun provideDatastoreHelper (): LocalDatastoreHelper requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeDatastoreModule - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/#fakedatastoremodule","text":"[jvm]\\ class FakeDatastoreModule : KAbstractModule Installs a version of the Datastore that works off an in-memory local store","title":"FakeDatastoreModule"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/#constructors","text":"FakeDatastoreModule [jvm] fun FakeDatastoreModule ()","title":"Constructors"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/#types","text":"Name Summary Companion [jvm] object Companion FakeDatastoreService [jvm] class FakeDatastoreService @Injectconstructor(datastoreHelper: LocalDatastoreHelper) : AbstractIdleService","title":"Types"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideDatastore [jvm] @Provides fun provideDatastore (datastoreHelper: LocalDatastoreHelper): Datastore provideDatastoreHelper [jvm] @Provides fun provideDatastoreHelper (): LocalDatastoreHelper requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-fake-datastore-module/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore / FakeDatastoreModule / FakeDatastoreModule FakeDatastoreModule \u00b6 [jvm]\\ fun FakeDatastoreModule ()","title":"FakeDatastoreModule - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-fake-datastore-module/#fakedatastoremodule","text":"[jvm]\\ fun FakeDatastoreModule ()","title":"FakeDatastoreModule"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/provide-datastore-helper/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore / FakeDatastoreModule / provideDatastoreHelper provideDatastoreHelper \u00b6 [jvm]\\ @Provides fun provideDatastoreHelper (): LocalDatastoreHelper","title":"provideDatastoreHelper - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/provide-datastore-helper/#providedatastorehelper","text":"[jvm]\\ @Provides fun provideDatastoreHelper (): LocalDatastoreHelper","title":"provideDatastoreHelper"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/provide-datastore/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore / FakeDatastoreModule / provideDatastore provideDatastore \u00b6 [jvm]\\ @Provides fun provideDatastore (datastoreHelper: LocalDatastoreHelper): Datastore","title":"provideDatastore - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/provide-datastore/#providedatastore","text":"[jvm]\\ @Provides fun provideDatastore (datastoreHelper: LocalDatastoreHelper): Datastore","title":"provideDatastore"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-companion/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore / FakeDatastoreModule / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-fake-datastore-service/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore / FakeDatastoreModule / FakeDatastoreService FakeDatastoreService \u00b6 [jvm]\\ class FakeDatastoreService @Injectconstructor(datastoreHelper: LocalDatastoreHelper) : AbstractIdleService Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"FakeDatastoreService - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-fake-datastore-service/#fakedatastoreservice","text":"[jvm]\\ class FakeDatastoreService @Injectconstructor(datastoreHelper: LocalDatastoreHelper) : AbstractIdleService","title":"FakeDatastoreService"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-fake-datastore-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-fake-datastore-service/-fake-datastore-service/","text":"// misk-gcp-testing / misk.cloud.gcp.datastore / FakeDatastoreModule / FakeDatastoreService / FakeDatastoreService FakeDatastoreService \u00b6 [jvm]\\ @Inject fun FakeDatastoreService (datastoreHelper: LocalDatastoreHelper)","title":"FakeDatastoreService - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.datastore/-fake-datastore-module/-fake-datastore-service/-fake-datastore-service/#fakedatastoreservice","text":"[jvm]\\ @Inject fun FakeDatastoreService (datastoreHelper: LocalDatastoreHelper)","title":"FakeDatastoreService"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner Package misk.cloud.gcp.spanner \u00b6 Types \u00b6 Name Summary GoogleSpannerEmulator [jvm] @Singleton class GoogleSpannerEmulator @Injectconstructor(config: SpannerConfig) : AbstractIdleService GoogleSpannerEmulatorModule [jvm] class GoogleSpannerEmulatorModule (config: SpannerConfig) : KAbstractModule Runs an in-memory version of Google Spanner using Docker.","title":"Package misk.cloud.gcp.spanner - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/#package-miskcloudgcpspanner","text":"","title":"Package misk.cloud.gcp.spanner"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/#types","text":"Name Summary GoogleSpannerEmulator [jvm] @Singleton class GoogleSpannerEmulator @Injectconstructor(config: SpannerConfig) : AbstractIdleService GoogleSpannerEmulatorModule [jvm] class GoogleSpannerEmulatorModule (config: SpannerConfig) : KAbstractModule Runs an in-memory version of Google Spanner using Docker.","title":"Types"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator GoogleSpannerEmulator \u00b6 [jvm]\\ @Singleton class GoogleSpannerEmulator @Injectconstructor(config: SpannerConfig) : AbstractIdleService Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) clearTables [jvm] fun clearTables () executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean pullImage [jvm] fun pullImage () Pulls a Docker container containing the Google Spanner emulator. serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary config [jvm] val config : SpannerConfig","title":"GoogleSpannerEmulator - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/#googlespanneremulator","text":"[jvm]\\ @Singleton class GoogleSpannerEmulator @Injectconstructor(config: SpannerConfig) : AbstractIdleService","title":"GoogleSpannerEmulator"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) clearTables [jvm] fun clearTables () executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean pullImage [jvm] fun pullImage () Pulls a Docker container containing the Google Spanner emulator. serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/#properties","text":"Name Summary config [jvm] val config : SpannerConfig","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-google-spanner-emulator/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / GoogleSpannerEmulator GoogleSpannerEmulator \u00b6 [jvm]\\ @Inject fun GoogleSpannerEmulator (config: SpannerConfig)","title":"GoogleSpannerEmulator - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-google-spanner-emulator/#googlespanneremulator","text":"[jvm]\\ @Inject fun GoogleSpannerEmulator (config: SpannerConfig)","title":"GoogleSpannerEmulator"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/clear-tables/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / clearTables clearTables \u00b6 [jvm]\\ fun clearTables ()","title":"clearTables - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/clear-tables/#cleartables","text":"[jvm]\\ fun clearTables ()","title":"clearTables"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/config/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / config config \u00b6 [jvm]\\ val config : SpannerConfig","title":"config - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/config/#config","text":"[jvm]\\ val config : SpannerConfig","title":"config"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/pull-image/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / pullImage pullImage \u00b6 [jvm]\\ fun pullImage () Pulls a Docker container containing the Google Spanner emulator.","title":"pullImage - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/pull-image/#pullimage","text":"[jvm]\\ fun pullImage () Pulls a Docker container containing the Google Spanner emulator.","title":"pullImage"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary pullImage [jvm] fun pullImage () Properties \u00b6 Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String defaultDockerClientConfig [jvm] val defaultDockerClientConfig : DefaultDockerClientConfig docker [jvm] val docker : DockerClient httpClient [jvm] val httpClient : ApacheDockerHttpClient IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/#functions","text":"Name Summary pullImage [jvm] fun pullImage ()","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/#properties","text":"Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String defaultDockerClientConfig [jvm] val defaultDockerClientConfig : DefaultDockerClientConfig docker [jvm] val docker : DockerClient httpClient [jvm] val httpClient : ApacheDockerHttpClient IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion / CONTAINER_NAME CONTAINER_NAME \u00b6 [jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/#container_name","text":"[jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/-i-m-a-g-e/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion / IMAGE IMAGE \u00b6 [jvm]\\ const val IMAGE : String","title":"IMAGE - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/-i-m-a-g-e/#image","text":"[jvm]\\ const val IMAGE : String","title":"IMAGE"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/default-docker-client-config/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion / defaultDockerClientConfig defaultDockerClientConfig \u00b6 [jvm]\\ val defaultDockerClientConfig : DefaultDockerClientConfig","title":"defaultDockerClientConfig - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/default-docker-client-config/#defaultdockerclientconfig","text":"[jvm]\\ val defaultDockerClientConfig : DefaultDockerClientConfig","title":"defaultDockerClientConfig"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/docker/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion / docker docker \u00b6 [jvm]\\ val docker : DockerClient","title":"docker - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/docker/#docker","text":"[jvm]\\ val docker : DockerClient","title":"docker"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/http-client/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion / httpClient httpClient \u00b6 [jvm]\\ val httpClient : ApacheDockerHttpClient","title":"httpClient - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/http-client/#httpclient","text":"[jvm]\\ val httpClient : ApacheDockerHttpClient","title":"httpClient"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/logger/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/pull-image/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulator / Companion / pullImage pullImage \u00b6 [jvm]\\ fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator/-companion/pull-image/#pullimage","text":"[jvm]\\ fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator-module/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulatorModule GoogleSpannerEmulatorModule \u00b6 [jvm]\\ class GoogleSpannerEmulatorModule (config: SpannerConfig) : KAbstractModule Runs an in-memory version of Google Spanner using Docker. Constructors \u00b6 GoogleSpannerEmulatorModule [jvm] fun GoogleSpannerEmulatorModule (config: SpannerConfig) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"GoogleSpannerEmulatorModule - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator-module/#googlespanneremulatormodule","text":"[jvm]\\ class GoogleSpannerEmulatorModule (config: SpannerConfig) : KAbstractModule Runs an in-memory version of Google Spanner using Docker.","title":"GoogleSpannerEmulatorModule"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator-module/#constructors","text":"GoogleSpannerEmulatorModule [jvm] fun GoogleSpannerEmulatorModule (config: SpannerConfig)","title":"Constructors"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator-module/-google-spanner-emulator-module/","text":"// misk-gcp-testing / misk.cloud.gcp.spanner / GoogleSpannerEmulatorModule / GoogleSpannerEmulatorModule GoogleSpannerEmulatorModule \u00b6 [jvm]\\ fun GoogleSpannerEmulatorModule (config: SpannerConfig)","title":"GoogleSpannerEmulatorModule - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.spanner/-google-spanner-emulator-module/-google-spanner-emulator-module/#googlespanneremulatormodule","text":"[jvm]\\ fun GoogleSpannerEmulatorModule (config: SpannerConfig)","title":"GoogleSpannerEmulatorModule"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/","text":"// misk-gcp-testing / misk.cloud.gcp.storage Package misk.cloud.gcp.storage \u00b6 Types \u00b6 Name Summary FakeStorageModule [jvm] class FakeStorageModule : KAbstractModule Installs an embeddable version of Storage that works in-memory InMemoryStorageRpc [jvm] class InMemoryStorageRpc : BaseCustomStorageRpc Implementation of StorageRpc that keeps all of its data purely in-memory, useful primarily for tests. This implementation is fully thread safe. Functions \u00b6 Name Summary check [jvm] fun Map <StorageRpc.Option, *>. check (obj: StorageObject?): StorageObject?","title":"Package misk.cloud.gcp.storage - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/#package-miskcloudgcpstorage","text":"","title":"Package misk.cloud.gcp.storage"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/#types","text":"Name Summary FakeStorageModule [jvm] class FakeStorageModule : KAbstractModule Installs an embeddable version of Storage that works in-memory InMemoryStorageRpc [jvm] class InMemoryStorageRpc : BaseCustomStorageRpc Implementation of StorageRpc that keeps all of its data purely in-memory, useful primarily for tests. This implementation is fully thread safe.","title":"Types"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/#functions","text":"Name Summary check [jvm] fun Map <StorageRpc.Option, *>. check (obj: StorageObject?): StorageObject?","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/check/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / check check \u00b6 [jvm]\\ fun Map <StorageRpc.Option, *>. check (obj: StorageObject?): StorageObject?","title":"check - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/check/#check","text":"[jvm]\\ fun Map <StorageRpc.Option, *>. check (obj: StorageObject?): StorageObject?","title":"check"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / FakeStorageModule FakeStorageModule \u00b6 [jvm]\\ class FakeStorageModule : KAbstractModule Installs an embeddable version of Storage that works in-memory Constructors \u00b6 FakeStorageModule [jvm] fun FakeStorageModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideStorage [jvm] @Provides fun provideStorage (): Storage requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeStorageModule - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/#fakestoragemodule","text":"[jvm]\\ class FakeStorageModule : KAbstractModule Installs an embeddable version of Storage that works in-memory","title":"FakeStorageModule"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/#constructors","text":"FakeStorageModule [jvm] fun FakeStorageModule ()","title":"Constructors"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideStorage [jvm] @Provides fun provideStorage (): Storage requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/-fake-storage-module/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / FakeStorageModule / FakeStorageModule FakeStorageModule \u00b6 [jvm]\\ fun FakeStorageModule ()","title":"FakeStorageModule - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/-fake-storage-module/#fakestoragemodule","text":"[jvm]\\ fun FakeStorageModule ()","title":"FakeStorageModule"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/provide-storage/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / FakeStorageModule / provideStorage provideStorage \u00b6 [jvm]\\ @Provides fun provideStorage (): Storage","title":"provideStorage - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-fake-storage-module/provide-storage/#providestorage","text":"[jvm]\\ @Provides fun provideStorage (): Storage","title":"provideStorage"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc InMemoryStorageRpc \u00b6 [jvm]\\ class InMemoryStorageRpc : BaseCustomStorageRpc Implementation of StorageRpc that keeps all of its data purely in-memory, useful primarily for tests. This implementation is fully thread safe. Constructors \u00b6 InMemoryStorageRpc [jvm] fun InMemoryStorageRpc () Functions \u00b6 Name Summary compose [jvm] open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject continueRewrite [jvm] open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse create [jvm] open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject? createAcl [jvm] open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl createBatch [jvm] open override fun createBatch (): RpcBatch createDefaultAcl [jvm] open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl createHmacKey [jvm] open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey createNotification [jvm] open override fun createNotification (bucket: String ?, notification: Notification?): Notification delete [jvm] open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean deleteAcl [jvm] open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean deleteDefaultAcl [jvm] open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean deleteHmacKey [jvm] open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?) deleteNotification [jvm] open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean get [jvm] open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? getAcl [jvm] open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl getCurrentUploadOffset [jvm] open override fun getCurrentUploadOffset (p0: String ?): Long getDefaultAcl [jvm] open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl getHmacKey [jvm] open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata getIamPolicy [jvm] open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy getServiceAccount [jvm] open override fun getServiceAccount (projectId: String ?): ServiceAccount list [jvm] open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>> open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>> listAcls [jvm] open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl> listDefaultAcls [jvm] open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl> listHmacKeys [jvm] open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>> listNotifications [jvm] open override fun listNotifications (bucket: String ?): List <Notification> load [jvm] open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray lockRetentionPolicy [jvm] open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket open [jvm] open override fun open (signedURL: String ?): String open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String openRewrite [jvm] open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse patch [jvm] open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? patchAcl [jvm] open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl patchDefaultAcl [jvm] open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl read [jvm] open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray > open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long setIamPolicy [jvm] open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy testIamPermissions [jvm] open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse updateHmacKey [jvm] open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata write [jvm] open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean ) writeWithResponse [jvm] open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject","title":"InMemoryStorageRpc - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/#inmemorystoragerpc","text":"[jvm]\\ class InMemoryStorageRpc : BaseCustomStorageRpc Implementation of StorageRpc that keeps all of its data purely in-memory, useful primarily for tests. This implementation is fully thread safe.","title":"InMemoryStorageRpc"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/#constructors","text":"InMemoryStorageRpc [jvm] fun InMemoryStorageRpc ()","title":"Constructors"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/#functions","text":"Name Summary compose [jvm] open override fun compose (sources: Iterable <StorageObject>?, target: StorageObject?, targetOptions: Map <StorageRpc.Option, *>?): StorageObject continueRewrite [jvm] open override fun continueRewrite (previousResponse: StorageRpc.RewriteResponse): StorageRpc.RewriteResponse create [jvm] open override fun create (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject? createAcl [jvm] open override fun createAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun createAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl createBatch [jvm] open override fun createBatch (): RpcBatch createDefaultAcl [jvm] open override fun createDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl createHmacKey [jvm] open override fun createHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKey createNotification [jvm] open override fun createNotification (bucket: String ?, notification: Notification?): Notification delete [jvm] open override fun delete (bucket: Bucket, options: Map <StorageRpc.Option, *>): Boolean open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean deleteAcl [jvm] open override fun deleteAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): Boolean open override fun deleteAcl (bucket: String ?, object: String ?, generation: Long ?, entity: String ?): Boolean deleteDefaultAcl [jvm] open override fun deleteDefaultAcl (bucket: String ?, entity: String ?): Boolean deleteHmacKey [jvm] open override fun deleteHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?) deleteNotification [jvm] open override fun deleteNotification (bucket: String ?, notification: String ?): Boolean get [jvm] open operator override fun get (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? getAcl [jvm] open override fun getAcl (bucket: String ?, entity: String ?, options: Map <StorageRpc.Option, *>?): BucketAccessControl open override fun getAcl (bucket: String ?, obj: String ?, generation: Long ?, entity: String ?): ObjectAccessControl getCurrentUploadOffset [jvm] open override fun getCurrentUploadOffset (p0: String ?): Long getDefaultAcl [jvm] open override fun getDefaultAcl (bucket: String ?, entity: String ?): ObjectAccessControl getHmacKey [jvm] open override fun getHmacKey (p0: String ?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata getIamPolicy [jvm] open override fun getIamPolicy (bucket: String ?, options: Map <StorageRpc.Option, *>?): Policy getServiceAccount [jvm] open override fun getServiceAccount (projectId: String ?): ServiceAccount list [jvm] open override fun list (options: Map <StorageRpc.Option, *>?): Tuple< String , Iterable <Bucket>> open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>> listAcls [jvm] open override fun listAcls (bucket: String ?, options: Map <StorageRpc.Option, *>?): List <BucketAccessControl> open override fun listAcls (bucket: String ?, obj: String ?, generation: Long ?): List <ObjectAccessControl> listDefaultAcls [jvm] open override fun listDefaultAcls (bucket: String ?): MutableList <ObjectAccessControl> listHmacKeys [jvm] open override fun listHmacKeys (p0: MutableMap <StorageRpc.Option, *>?): Tuple< String , MutableIterable <HmacKeyMetadata>> listNotifications [jvm] open override fun listNotifications (bucket: String ?): List <Notification> load [jvm] open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray lockRetentionPolicy [jvm] open override fun lockRetentionPolicy (bucket: Bucket?, options: Map <StorageRpc.Option, *>?): Bucket open [jvm] open override fun open (signedURL: String ?): String open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String openRewrite [jvm] open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse patch [jvm] open override fun patch (bucket: Bucket, options: Map <StorageRpc.Option, *>): Bucket? open override fun patch (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject? patchAcl [jvm] open override fun patchAcl (acl: ObjectAccessControl?): ObjectAccessControl open override fun patchAcl (acl: BucketAccessControl?, options: Map <StorageRpc.Option, *>?): BucketAccessControl patchDefaultAcl [jvm] open override fun patchDefaultAcl (acl: ObjectAccessControl?): ObjectAccessControl read [jvm] open override fun read (from: StorageObject?, options: Map <StorageRpc.Option, *>?, position: Long , bytes: Int ): Tuple< String , ByteArray > open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long setIamPolicy [jvm] open override fun setIamPolicy (bucket: String ?, policy: Policy?, options: Map <StorageRpc.Option, *>?): Policy testIamPermissions [jvm] open override fun testIamPermissions (bucket: String , permissions: List < String >, options: Map <StorageRpc.Option, *>): TestIamPermissionsResponse updateHmacKey [jvm] open override fun updateHmacKey (p0: HmacKeyMetadata?, p1: MutableMap <StorageRpc.Option, *>?): HmacKeyMetadata write [jvm] open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean ) writeWithResponse [jvm] open override fun writeWithResponse (p0: String ?, p1: ByteArray ?, p2: Int , p3: Long , p4: Int , p5: Boolean ): StorageObject","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/-in-memory-storage-rpc/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / InMemoryStorageRpc InMemoryStorageRpc \u00b6 [jvm]\\ fun InMemoryStorageRpc ()","title":"InMemoryStorageRpc - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/-in-memory-storage-rpc/#inmemorystoragerpc","text":"[jvm]\\ fun InMemoryStorageRpc ()","title":"InMemoryStorageRpc"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/create/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / create create \u00b6 [jvm]\\ open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject?","title":"create - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/create/#create","text":"[jvm]\\ open override fun create (obj: StorageObject, content: InputStream , options: Map <StorageRpc.Option, *>): StorageObject?","title":"create"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/delete/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / delete delete \u00b6 [jvm]\\ open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean","title":"delete - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/delete/#delete","text":"[jvm]\\ open override fun delete (obj: StorageObject, options: Map <StorageRpc.Option, *>): Boolean","title":"delete"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/get/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / get get \u00b6 [jvm]\\ open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject?","title":"get - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/get/#get","text":"[jvm]\\ open operator override fun get (obj: StorageObject, options: Map <StorageRpc.Option, *>): StorageObject?","title":"get"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/list/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / list list \u00b6 [jvm]\\ open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>>","title":"list - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/list/#list","text":"[jvm]\\ open override fun list (bucket: String , options: Map <StorageRpc.Option, *>): Tuple< String , Iterable <StorageObject>>","title":"list"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/load/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / load load \u00b6 [jvm]\\ open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray","title":"load - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/load/#load","text":"[jvm]\\ open override fun load (obj: StorageObject, options: Map <StorageRpc.Option, *>): ByteArray","title":"load"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/open-rewrite/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / openRewrite openRewrite \u00b6 [jvm]\\ open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse","title":"openRewrite - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/open-rewrite/#openrewrite","text":"[jvm]\\ open override fun openRewrite (request: StorageRpc.RewriteRequest): StorageRpc.RewriteResponse","title":"openRewrite"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/open/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / open open \u00b6 [jvm]\\ open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String","title":"open - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/open/#open","text":"[jvm]\\ open override fun open (obj: StorageObject, options: Map <StorageRpc.Option, *>): String","title":"open"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/read/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / read read \u00b6 [jvm]\\ open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long","title":"read - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/read/#read","text":"[jvm]\\ open override fun read (from: StorageObject, options: Map <StorageRpc.Option, *>, zposition: Long , outputStream: OutputStream ): Long","title":"read"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/write/","text":"// misk-gcp-testing / misk.cloud.gcp.storage / InMemoryStorageRpc / write write \u00b6 [jvm]\\ open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean )","title":"write - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.storage/-in-memory-storage-rpc/write/#write","text":"[jvm]\\ open override fun write (uploadId: String , toWrite: ByteArray , toWriteOffset: Int , destOffset: Long , length: Int , last: Boolean )","title":"write"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/","text":"// misk-gcp-testing / misk.cloud.gcp.testing Package misk.cloud.gcp.testing \u00b6 Types \u00b6 Name Summary Body [jvm] open class Body FakeHttpRequest [jvm] class FakeHttpRequest (method: String , url: String , router: ( FakeHttpRequest ) -> FakeHttpResponse ) : LowLevelHttpRequest FakeHttpResponse [jvm] typealias FakeHttpResponse = MockLowLevelHttpResponse FakeHttpRouter [jvm] class FakeHttpRouter (router: ( FakeHttpRequest ) -> FakeHttpResponse ) : HttpTransport Functions \u00b6 Name Summary setJsonContent [jvm] fun FakeHttpResponse . setJsonContent (item: Any ): FakeHttpResponse","title":"Package misk.cloud.gcp.testing - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/#package-miskcloudgcptesting","text":"","title":"Package misk.cloud.gcp.testing"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/#types","text":"Name Summary Body [jvm] open class Body FakeHttpRequest [jvm] class FakeHttpRequest (method: String , url: String , router: ( FakeHttpRequest ) -> FakeHttpResponse ) : LowLevelHttpRequest FakeHttpResponse [jvm] typealias FakeHttpResponse = MockLowLevelHttpResponse FakeHttpRouter [jvm] class FakeHttpRouter (router: ( FakeHttpRequest ) -> FakeHttpResponse ) : HttpTransport","title":"Types"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/#functions","text":"Name Summary setJsonContent [jvm] fun FakeHttpResponse . setJsonContent (item: Any ): FakeHttpResponse","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/set-json-content/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / setJsonContent setJsonContent \u00b6 [jvm]\\ fun FakeHttpResponse . setJsonContent (item: Any ): FakeHttpResponse","title":"setJsonContent - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/set-json-content/#setjsoncontent","text":"[jvm]\\ fun FakeHttpResponse . setJsonContent (item: Any ): FakeHttpResponse","title":"setJsonContent"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / Body Body \u00b6 [jvm]\\ open class Body Constructors \u00b6 Body [jvm] open fun Body () Body [jvm] open fun Body (@ Nonnull message: String ) Properties \u00b6 Name Summary message [jvm] private open var message : String","title":"Body - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/#body","text":"[jvm]\\ open class Body","title":"Body"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/#constructors","text":"Body [jvm] open fun Body () Body [jvm] open fun Body (@ Nonnull message: String )","title":"Constructors"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/#properties","text":"Name Summary message [jvm] private open var message : String","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/-body/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / Body / Body Body \u00b6 [jvm]\\ open fun Body () open fun Body (@ Nonnull message: String )","title":"Body - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/-body/#body","text":"[jvm]\\ open fun Body () open fun Body (@ Nonnull message: String )","title":"Body"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/message/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / Body / message message \u00b6 [jvm]\\ private open var message : String","title":"message - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-body/message/#message","text":"[jvm]\\ private open var message : String","title":"message"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest FakeHttpRequest \u00b6 [jvm]\\ class FakeHttpRequest (method: String , url: String , router: ( FakeHttpRequest ) -> FakeHttpResponse ) : LowLevelHttpRequest Functions \u00b6 Name Summary addHeader [jvm] open override fun addHeader (name: String , value: String ) execute [jvm] open override fun execute (): MockLowLevelHttpResponse getContentEncoding [jvm] fun getContentEncoding (): String getContentLength [jvm] fun getContentLength (): Long getContentType [jvm] fun getContentType (): String getStreamingContent [jvm] fun getStreamingContent (): StreamingContent header [jvm] fun header (name: String ): String ? jsonContent [jvm] inline fun < T : Any > jsonContent (): T ? setContentEncoding [jvm] fun setContentEncoding (p0: String ) setContentLength [jvm] fun setContentLength (p0: Long ) setContentType [jvm] fun setContentType (p0: String ) setStreamingContent [jvm] fun setStreamingContent (p0: StreamingContent) setTimeout [jvm] open fun setTimeout (p0: Int , p1: Int ) setWriteTimeout [jvm] open fun setWriteTimeout (p0: Int ) Properties \u00b6 Name Summary content [jvm] val content : ByteArray ? method [jvm] val method : String stringContent [jvm] val stringContent : String ? url [jvm] val url : String","title":"FakeHttpRequest - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/#fakehttprequest","text":"[jvm]\\ class FakeHttpRequest (method: String , url: String , router: ( FakeHttpRequest ) -> FakeHttpResponse ) : LowLevelHttpRequest","title":"FakeHttpRequest"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/#functions","text":"Name Summary addHeader [jvm] open override fun addHeader (name: String , value: String ) execute [jvm] open override fun execute (): MockLowLevelHttpResponse getContentEncoding [jvm] fun getContentEncoding (): String getContentLength [jvm] fun getContentLength (): Long getContentType [jvm] fun getContentType (): String getStreamingContent [jvm] fun getStreamingContent (): StreamingContent header [jvm] fun header (name: String ): String ? jsonContent [jvm] inline fun < T : Any > jsonContent (): T ? setContentEncoding [jvm] fun setContentEncoding (p0: String ) setContentLength [jvm] fun setContentLength (p0: Long ) setContentType [jvm] fun setContentType (p0: String ) setStreamingContent [jvm] fun setStreamingContent (p0: StreamingContent) setTimeout [jvm] open fun setTimeout (p0: Int , p1: Int ) setWriteTimeout [jvm] open fun setWriteTimeout (p0: Int )","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/#properties","text":"Name Summary content [jvm] val content : ByteArray ? method [jvm] val method : String stringContent [jvm] val stringContent : String ? url [jvm] val url : String","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/-fake-http-request/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / FakeHttpRequest FakeHttpRequest \u00b6 [jvm]\\ fun FakeHttpRequest (method: String , url: String , router: ( FakeHttpRequest ) -> FakeHttpResponse )","title":"FakeHttpRequest - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/-fake-http-request/#fakehttprequest","text":"[jvm]\\ fun FakeHttpRequest (method: String , url: String , router: ( FakeHttpRequest ) -> FakeHttpResponse )","title":"FakeHttpRequest"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/add-header/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / addHeader addHeader \u00b6 [jvm]\\ open override fun addHeader (name: String , value: String )","title":"addHeader - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/add-header/#addheader","text":"[jvm]\\ open override fun addHeader (name: String , value: String )","title":"addHeader"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/content/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / content content \u00b6 [jvm]\\ val content : ByteArray ?","title":"content - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/content/#content","text":"[jvm]\\ val content : ByteArray ?","title":"content"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/execute/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / execute execute \u00b6 [jvm]\\ open override fun execute (): MockLowLevelHttpResponse","title":"execute - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/execute/#execute","text":"[jvm]\\ open override fun execute (): MockLowLevelHttpResponse","title":"execute"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/header/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / header header \u00b6 [jvm]\\ fun header (name: String ): String ?","title":"header - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/header/#header","text":"[jvm]\\ fun header (name: String ): String ?","title":"header"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/json-content/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / jsonContent jsonContent \u00b6 [jvm]\\ inline fun < T : Any > jsonContent (): T ?","title":"jsonContent - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/json-content/#jsoncontent","text":"[jvm]\\ inline fun < T : Any > jsonContent (): T ?","title":"jsonContent"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/method/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / method method \u00b6 [jvm]\\ val method : String","title":"method - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/method/#method","text":"[jvm]\\ val method : String","title":"method"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/string-content/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / stringContent stringContent \u00b6 [jvm]\\ val stringContent : String ?","title":"stringContent - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/string-content/#stringcontent","text":"[jvm]\\ val stringContent : String ?","title":"stringContent"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/url/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRequest / url url \u00b6 [jvm]\\ val url : String","title":"url - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-request/url/#url","text":"[jvm]\\ val url : String","title":"url"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRouter FakeHttpRouter \u00b6 [jvm]\\ class FakeHttpRouter (router: ( FakeHttpRequest ) -> FakeHttpResponse ) : HttpTransport Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary buildRequest [jvm] open fun buildRequest (): HttpRequest createRequestFactory [jvm] fun createRequestFactory (): HttpRequestFactory fun createRequestFactory (p0: HttpRequestInitializer): HttpRequestFactory isMtls [jvm] open fun isMtls (): Boolean shutdown [jvm] open fun shutdown () supportsMethod [jvm] open fun supportsMethod (p0: String ): Boolean Properties \u00b6 Name Summary router [jvm] val router : ( FakeHttpRequest ) -> FakeHttpResponse","title":"FakeHttpRouter - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/#fakehttprouter","text":"[jvm]\\ class FakeHttpRouter (router: ( FakeHttpRequest ) -> FakeHttpResponse ) : HttpTransport","title":"FakeHttpRouter"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/#functions","text":"Name Summary buildRequest [jvm] open fun buildRequest (): HttpRequest createRequestFactory [jvm] fun createRequestFactory (): HttpRequestFactory fun createRequestFactory (p0: HttpRequestInitializer): HttpRequestFactory isMtls [jvm] open fun isMtls (): Boolean shutdown [jvm] open fun shutdown () supportsMethod [jvm] open fun supportsMethod (p0: String ): Boolean","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/#properties","text":"Name Summary router [jvm] val router : ( FakeHttpRequest ) -> FakeHttpResponse","title":"Properties"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-fake-http-router/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRouter / FakeHttpRouter FakeHttpRouter \u00b6 [jvm]\\ fun FakeHttpRouter (router: ( FakeHttpRequest ) -> FakeHttpResponse )","title":"FakeHttpRouter - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-fake-http-router/#fakehttprouter","text":"[jvm]\\ fun FakeHttpRouter (router: ( FakeHttpRequest ) -> FakeHttpResponse )","title":"FakeHttpRouter"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/router/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRouter / router router \u00b6 [jvm]\\ val router : ( FakeHttpRequest ) -> FakeHttpResponse","title":"router - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/router/#router","text":"[jvm]\\ val router : ( FakeHttpRequest ) -> FakeHttpResponse","title":"router"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRouter / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary respondWithError [jvm] fun respondWithError (statusCode: Int ): MockLowLevelHttpResponse respondWithJson [jvm] fun respondWithJson (item: Any ): MockLowLevelHttpResponse respondWithText [jvm] fun respondWithText (text: String ): MockLowLevelHttpResponse fun respondWithText (statusCode: Int , text: String ): MockLowLevelHttpResponse","title":"Companion - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/#functions","text":"Name Summary respondWithError [jvm] fun respondWithError (statusCode: Int ): MockLowLevelHttpResponse respondWithJson [jvm] fun respondWithJson (item: Any ): MockLowLevelHttpResponse respondWithText [jvm] fun respondWithText (text: String ): MockLowLevelHttpResponse fun respondWithText (statusCode: Int , text: String ): MockLowLevelHttpResponse","title":"Functions"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/respond-with-error/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRouter / Companion / respondWithError respondWithError \u00b6 [jvm]\\ fun respondWithError (statusCode: Int ): MockLowLevelHttpResponse","title":"respondWithError - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/respond-with-error/#respondwitherror","text":"[jvm]\\ fun respondWithError (statusCode: Int ): MockLowLevelHttpResponse","title":"respondWithError"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/respond-with-json/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRouter / Companion / respondWithJson respondWithJson \u00b6 [jvm]\\ fun respondWithJson (item: Any ): MockLowLevelHttpResponse","title":"respondWithJson - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/respond-with-json/#respondwithjson","text":"[jvm]\\ fun respondWithJson (item: Any ): MockLowLevelHttpResponse","title":"respondWithJson"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/respond-with-text/","text":"// misk-gcp-testing / misk.cloud.gcp.testing / FakeHttpRouter / Companion / respondWithText respondWithText \u00b6 [jvm]\\ fun respondWithText (text: String ): MockLowLevelHttpResponse fun respondWithText (statusCode: Int , text: String ): MockLowLevelHttpResponse","title":"respondWithText - Misk"},{"location":"0.x/misk-gcp-testing/misk.cloud.gcp.testing/-fake-http-router/-companion/respond-with-text/#respondwithtext","text":"[jvm]\\ fun respondWithText (text: String ): MockLowLevelHttpResponse fun respondWithText (statusCode: Int , text: String ): MockLowLevelHttpResponse","title":"respondWithText"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/","text":"// misk-grpc-reflect / misk.grpc.reflect Package misk.grpc.reflect \u00b6 Types \u00b6 Name Summary GrpcReflectModule [jvm] class GrpcReflectModule : KAbstractModule Implements gRPC reflect for all gRPC actions installed in this Misk application. ServerReflectionApi [jvm] class ServerReflectionApi @Injectconstructor(reflector: SchemaReflector) : WebAction","title":"Package misk.grpc.reflect - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/#package-miskgrpcreflect","text":"","title":"Package misk.grpc.reflect"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/#types","text":"Name Summary GrpcReflectModule [jvm] class GrpcReflectModule : KAbstractModule Implements gRPC reflect for all gRPC actions installed in this Misk application. ServerReflectionApi [jvm] class ServerReflectionApi @Injectconstructor(reflector: SchemaReflector) : WebAction","title":"Types"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/","text":"// misk-grpc-reflect / misk.grpc.reflect / GrpcReflectModule GrpcReflectModule \u00b6 [jvm]\\ class GrpcReflectModule : KAbstractModule Implements gRPC reflect for all gRPC actions installed in this Misk application. This relies on .proto files being included in the .jar file. If they\u2019re missing, reflection won\u2019t work for them. Constructors \u00b6 GrpcReflectModule [jvm] fun GrpcReflectModule () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideSchema [jvm] @Provides @Singleton fun provideSchema (webActions: List <WebActionEntry>): Schema Interrogate the installed gRPC actions and create a Wire schema from that. provideServiceReflector [jvm] @Provides @Singleton fun provideServiceReflector (schema: Schema): SchemaReflector requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"GrpcReflectModule - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/#grpcreflectmodule","text":"[jvm]\\ class GrpcReflectModule : KAbstractModule Implements gRPC reflect for all gRPC actions installed in this Misk application. This relies on .proto files being included in the .jar file. If they\u2019re missing, reflection won\u2019t work for them.","title":"GrpcReflectModule"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/#constructors","text":"GrpcReflectModule [jvm] fun GrpcReflectModule ()","title":"Constructors"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideSchema [jvm] @Provides @Singleton fun provideSchema (webActions: List <WebActionEntry>): Schema Interrogate the installed gRPC actions and create a Wire schema from that. provideServiceReflector [jvm] @Provides @Singleton fun provideServiceReflector (schema: Schema): SchemaReflector requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/-grpc-reflect-module/","text":"// misk-grpc-reflect / misk.grpc.reflect / GrpcReflectModule / GrpcReflectModule GrpcReflectModule \u00b6 [jvm]\\ fun GrpcReflectModule ()","title":"GrpcReflectModule - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/-grpc-reflect-module/#grpcreflectmodule","text":"[jvm]\\ fun GrpcReflectModule ()","title":"GrpcReflectModule"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/provide-schema/","text":"// misk-grpc-reflect / misk.grpc.reflect / GrpcReflectModule / provideSchema provideSchema \u00b6 [jvm]\\ @Provides @Singleton fun provideSchema (webActions: List <WebActionEntry>): Schema Interrogate the installed gRPC actions and create a Wire schema from that.","title":"provideSchema - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/provide-schema/#provideschema","text":"[jvm]\\ @Provides @Singleton fun provideSchema (webActions: List <WebActionEntry>): Schema Interrogate the installed gRPC actions and create a Wire schema from that.","title":"provideSchema"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/provide-service-reflector/","text":"// misk-grpc-reflect / misk.grpc.reflect / GrpcReflectModule / provideServiceReflector provideServiceReflector \u00b6 [jvm]\\ @Provides @Singleton fun provideServiceReflector (schema: Schema): SchemaReflector","title":"provideServiceReflector - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/provide-service-reflector/#provideservicereflector","text":"[jvm]\\ @Provides @Singleton fun provideServiceReflector (schema: Schema): SchemaReflector","title":"provideServiceReflector"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/-companion/","text":"// misk-grpc-reflect / misk.grpc.reflect / GrpcReflectModule / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-grpc-reflect-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-server-reflection-api/","text":"// misk-grpc-reflect / misk.grpc.reflect / ServerReflectionApi ServerReflectionApi \u00b6 [jvm]\\ class ServerReflectionApi @Injectconstructor(reflector: SchemaReflector) : WebAction Functions \u00b6 Name Summary ServerReflectionInfo [jvm] open fun ServerReflectionInfo (requests: MessageSource<ServerReflectionRequest>, responses: MessageSink<ServerReflectionResponse>)","title":"ServerReflectionApi - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-server-reflection-api/#serverreflectionapi","text":"[jvm]\\ class ServerReflectionApi @Injectconstructor(reflector: SchemaReflector) : WebAction","title":"ServerReflectionApi"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-server-reflection-api/#functions","text":"Name Summary ServerReflectionInfo [jvm] open fun ServerReflectionInfo (requests: MessageSource<ServerReflectionRequest>, responses: MessageSink<ServerReflectionResponse>)","title":"Functions"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-server-reflection-api/-server-reflection-api/","text":"// misk-grpc-reflect / misk.grpc.reflect / ServerReflectionApi / ServerReflectionApi ServerReflectionApi \u00b6 [jvm]\\ @Inject fun ServerReflectionApi (reflector: SchemaReflector)","title":"ServerReflectionApi - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-server-reflection-api/-server-reflection-api/#serverreflectionapi","text":"[jvm]\\ @Inject fun ServerReflectionApi (reflector: SchemaReflector)","title":"ServerReflectionApi"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-server-reflection-api/-server-reflection-info/","text":"// misk-grpc-reflect / misk.grpc.reflect / ServerReflectionApi / ServerReflectionInfo ServerReflectionInfo \u00b6 [jvm]\\ open fun ServerReflectionInfo (requests: MessageSource<ServerReflectionRequest>, responses: MessageSink<ServerReflectionResponse>)","title":"ServerReflectionInfo - Misk"},{"location":"0.x/misk-grpc-reflect/misk.grpc.reflect/-server-reflection-api/-server-reflection-info/#serverreflectioninfo","text":"[jvm]\\ open fun ServerReflectionInfo (requests: MessageSource<ServerReflectionRequest>, responses: MessageSink<ServerReflectionResponse>)","title":"ServerReflectionInfo"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/","text":"// misk-grpc-tests / misk.grpc.miskclient Package misk.grpc.miskclient \u00b6 Types \u00b6 Name Summary MiskGrpcClientModule [jvm] class MiskGrpcClientModule (url: HttpUrl) : KAbstractModule RouteGuideCallCounter [jvm] @Singleton class RouteGuideCallCounter @Injectconstructor : ClientNetworkInterceptor.Factory Sample network interceptor to confirm they\u2019re executed for outbound gRPC calls.","title":"Package misk.grpc.miskclient - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/#package-miskgrpcmiskclient","text":"","title":"Package misk.grpc.miskclient"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/#types","text":"Name Summary MiskGrpcClientModule [jvm] class MiskGrpcClientModule (url: HttpUrl) : KAbstractModule RouteGuideCallCounter [jvm] @Singleton class RouteGuideCallCounter @Injectconstructor : ClientNetworkInterceptor.Factory Sample network interceptor to confirm they\u2019re executed for outbound gRPC calls.","title":"Types"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/","text":"// misk-grpc-tests / misk.grpc.miskclient / MiskGrpcClientModule MiskGrpcClientModule \u00b6 [jvm]\\ class MiskGrpcClientModule (url: HttpUrl) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideHttpClientsConfig [jvm] @Provides @Singleton fun provideHttpClientsConfig (): HttpClientsConfig requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder url [jvm] val url : HttpUrl","title":"MiskGrpcClientModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/#miskgrpcclientmodule","text":"[jvm]\\ class MiskGrpcClientModule (url: HttpUrl) : KAbstractModule","title":"MiskGrpcClientModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideHttpClientsConfig [jvm] @Provides @Singleton fun provideHttpClientsConfig (): HttpClientsConfig requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder url [jvm] val url : HttpUrl","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/-misk-grpc-client-module/","text":"// misk-grpc-tests / misk.grpc.miskclient / MiskGrpcClientModule / MiskGrpcClientModule MiskGrpcClientModule \u00b6 [jvm]\\ fun MiskGrpcClientModule (url: HttpUrl)","title":"MiskGrpcClientModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/-misk-grpc-client-module/#miskgrpcclientmodule","text":"[jvm]\\ fun MiskGrpcClientModule (url: HttpUrl)","title":"MiskGrpcClientModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/provide-http-clients-config/","text":"// misk-grpc-tests / misk.grpc.miskclient / MiskGrpcClientModule / provideHttpClientsConfig provideHttpClientsConfig \u00b6 [jvm]\\ @Provides @Singleton fun provideHttpClientsConfig (): HttpClientsConfig","title":"provideHttpClientsConfig - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/provide-http-clients-config/#providehttpclientsconfig","text":"[jvm]\\ @Provides @Singleton fun provideHttpClientsConfig (): HttpClientsConfig","title":"provideHttpClientsConfig"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/url/","text":"// misk-grpc-tests / misk.grpc.miskclient / MiskGrpcClientModule / url url \u00b6 [jvm]\\ val url : HttpUrl","title":"url - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-misk-grpc-client-module/url/#url","text":"[jvm]\\ val url : HttpUrl","title":"url"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/","text":"// misk-grpc-tests / misk.grpc.miskclient / RouteGuideCallCounter RouteGuideCallCounter \u00b6 [jvm]\\ @Singleton class RouteGuideCallCounter @Injectconstructor : ClientNetworkInterceptor.Factory Sample network interceptor to confirm they\u2019re executed for outbound gRPC calls. Constructors \u00b6 RouteGuideCallCounter [jvm] @Inject fun RouteGuideCallCounter () Functions \u00b6 Name Summary counter [jvm] fun counter (name: String ): AtomicInteger create [jvm] open override fun create (action: ClientAction): ClientNetworkInterceptor? Properties \u00b6 Name Summary actionNameToCount [jvm] val actionNameToCount : MutableMap < String , AtomicInteger >","title":"RouteGuideCallCounter - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/#routeguidecallcounter","text":"[jvm]\\ @Singleton class RouteGuideCallCounter @Injectconstructor : ClientNetworkInterceptor.Factory Sample network interceptor to confirm they\u2019re executed for outbound gRPC calls.","title":"RouteGuideCallCounter"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/#constructors","text":"RouteGuideCallCounter [jvm] @Inject fun RouteGuideCallCounter ()","title":"Constructors"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/#functions","text":"Name Summary counter [jvm] fun counter (name: String ): AtomicInteger create [jvm] open override fun create (action: ClientAction): ClientNetworkInterceptor?","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/#properties","text":"Name Summary actionNameToCount [jvm] val actionNameToCount : MutableMap < String , AtomicInteger >","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/-route-guide-call-counter/","text":"// misk-grpc-tests / misk.grpc.miskclient / RouteGuideCallCounter / RouteGuideCallCounter RouteGuideCallCounter \u00b6 [jvm]\\ @Inject fun RouteGuideCallCounter ()","title":"RouteGuideCallCounter - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/-route-guide-call-counter/#routeguidecallcounter","text":"[jvm]\\ @Inject fun RouteGuideCallCounter ()","title":"RouteGuideCallCounter"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/action-name-to-count/","text":"// misk-grpc-tests / misk.grpc.miskclient / RouteGuideCallCounter / actionNameToCount actionNameToCount \u00b6 [jvm]\\ val actionNameToCount : MutableMap < String , AtomicInteger >","title":"actionNameToCount - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/action-name-to-count/#actionnametocount","text":"[jvm]\\ val actionNameToCount : MutableMap < String , AtomicInteger >","title":"actionNameToCount"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/counter/","text":"// misk-grpc-tests / misk.grpc.miskclient / RouteGuideCallCounter / counter counter \u00b6 [jvm]\\ fun counter (name: String ): AtomicInteger","title":"counter - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/counter/#counter","text":"[jvm]\\ fun counter (name: String ): AtomicInteger","title":"counter"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/create/","text":"// misk-grpc-tests / misk.grpc.miskclient / RouteGuideCallCounter / create create \u00b6 [jvm]\\ open override fun create (action: ClientAction): ClientNetworkInterceptor?","title":"create - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskclient/-route-guide-call-counter/create/#create","text":"[jvm]\\ open override fun create (action: ClientAction): ClientNetworkInterceptor?","title":"create"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/","text":"// misk-grpc-tests / misk.grpc.miskserver Package misk.grpc.miskserver \u00b6 Types \u00b6 Name Summary GetFeatureGrpcAction [jvm] class GetFeatureGrpcAction @Injectconstructor : WebAction RouteChatGrpcAction [jvm] @Singleton class RouteChatGrpcAction @Injectconstructor : WebAction RouteGuideMiskServiceModule [jvm] class RouteGuideMiskServiceModule : KAbstractModule A module that runs a Misk gRPC server: Wire protos and a Jetty backend.","title":"Package misk.grpc.miskserver - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/#package-miskgrpcmiskserver","text":"","title":"Package misk.grpc.miskserver"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/#types","text":"Name Summary GetFeatureGrpcAction [jvm] class GetFeatureGrpcAction @Injectconstructor : WebAction RouteChatGrpcAction [jvm] @Singleton class RouteChatGrpcAction @Injectconstructor : WebAction RouteGuideMiskServiceModule [jvm] class RouteGuideMiskServiceModule : KAbstractModule A module that runs a Misk gRPC server: Wire protos and a Jetty backend.","title":"Types"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-get-feature-grpc-action/","text":"// misk-grpc-tests / misk.grpc.miskserver / GetFeatureGrpcAction GetFeatureGrpcAction \u00b6 [jvm]\\ class GetFeatureGrpcAction @Injectconstructor : WebAction Functions \u00b6 Name Summary GetFeature [jvm] open fun GetFeature (request: <ERROR CLASS>): <ERROR CLASS>","title":"GetFeatureGrpcAction - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-get-feature-grpc-action/#getfeaturegrpcaction","text":"[jvm]\\ class GetFeatureGrpcAction @Injectconstructor : WebAction","title":"GetFeatureGrpcAction"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-get-feature-grpc-action/#functions","text":"Name Summary GetFeature [jvm] open fun GetFeature (request: <ERROR CLASS>): <ERROR CLASS>","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-get-feature-grpc-action/-get-feature-grpc-action/","text":"// misk-grpc-tests / misk.grpc.miskserver / GetFeatureGrpcAction / GetFeatureGrpcAction GetFeatureGrpcAction \u00b6 [jvm]\\ @Inject fun GetFeatureGrpcAction ()","title":"GetFeatureGrpcAction - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-get-feature-grpc-action/-get-feature-grpc-action/#getfeaturegrpcaction","text":"[jvm]\\ @Inject fun GetFeatureGrpcAction ()","title":"GetFeatureGrpcAction"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-get-feature-grpc-action/-get-feature/","text":"// misk-grpc-tests / misk.grpc.miskserver / GetFeatureGrpcAction / GetFeature GetFeature \u00b6 [jvm]\\ open fun GetFeature (request: <ERROR CLASS>): <ERROR CLASS>","title":"GetFeature - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-get-feature-grpc-action/-get-feature/#getfeature","text":"[jvm]\\ open fun GetFeature (request: <ERROR CLASS>): <ERROR CLASS>","title":"GetFeature"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/","text":"// misk-grpc-tests / misk.grpc.miskserver / RouteChatGrpcAction RouteChatGrpcAction \u00b6 [jvm]\\ @Singleton class RouteChatGrpcAction @Injectconstructor : WebAction Functions \u00b6 Name Summary RouteChat [jvm] open fun RouteChat (request: MessageSource<<ERROR CLASS>>, response: MessageSink<<ERROR CLASS>>) Properties \u00b6 Name Summary welcomeMessage [jvm] var welcomeMessage : String ? = null","title":"RouteChatGrpcAction - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/#routechatgrpcaction","text":"[jvm]\\ @Singleton class RouteChatGrpcAction @Injectconstructor : WebAction","title":"RouteChatGrpcAction"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/#functions","text":"Name Summary RouteChat [jvm] open fun RouteChat (request: MessageSource<<ERROR CLASS>>, response: MessageSink<<ERROR CLASS>>)","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/#properties","text":"Name Summary welcomeMessage [jvm] var welcomeMessage : String ? = null","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/-route-chat-grpc-action/","text":"// misk-grpc-tests / misk.grpc.miskserver / RouteChatGrpcAction / RouteChatGrpcAction RouteChatGrpcAction \u00b6 [jvm]\\ @Inject fun RouteChatGrpcAction ()","title":"RouteChatGrpcAction - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/-route-chat-grpc-action/#routechatgrpcaction","text":"[jvm]\\ @Inject fun RouteChatGrpcAction ()","title":"RouteChatGrpcAction"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/-route-chat/","text":"// misk-grpc-tests / misk.grpc.miskserver / RouteChatGrpcAction / RouteChat RouteChat \u00b6 [jvm]\\ open fun RouteChat (request: MessageSource<<ERROR CLASS>>, response: MessageSink<<ERROR CLASS>>)","title":"RouteChat - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/-route-chat/#routechat","text":"[jvm]\\ open fun RouteChat (request: MessageSource<<ERROR CLASS>>, response: MessageSink<<ERROR CLASS>>)","title":"RouteChat"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/welcome-message/","text":"// misk-grpc-tests / misk.grpc.miskserver / RouteChatGrpcAction / welcomeMessage welcomeMessage \u00b6 [jvm]\\ var welcomeMessage : String ? = null","title":"welcomeMessage - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-chat-grpc-action/welcome-message/#welcomemessage","text":"[jvm]\\ var welcomeMessage : String ? = null","title":"welcomeMessage"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/","text":"// misk-grpc-tests / misk.grpc.miskserver / RouteGuideMiskServiceModule RouteGuideMiskServiceModule \u00b6 [jvm]\\ class RouteGuideMiskServiceModule : KAbstractModule A module that runs a Misk gRPC server: Wire protos and a Jetty backend. Constructors \u00b6 RouteGuideMiskServiceModule [jvm] fun RouteGuideMiskServiceModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideServerUrl [jvm] @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (jetty: JettyService): HttpUrl requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RouteGuideMiskServiceModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/#routeguidemiskservicemodule","text":"[jvm]\\ class RouteGuideMiskServiceModule : KAbstractModule A module that runs a Misk gRPC server: Wire protos and a Jetty backend.","title":"RouteGuideMiskServiceModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/#constructors","text":"RouteGuideMiskServiceModule [jvm] fun RouteGuideMiskServiceModule ()","title":"Constructors"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideServerUrl [jvm] @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (jetty: JettyService): HttpUrl requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/-route-guide-misk-service-module/","text":"// misk-grpc-tests / misk.grpc.miskserver / RouteGuideMiskServiceModule / RouteGuideMiskServiceModule RouteGuideMiskServiceModule \u00b6 [jvm]\\ fun RouteGuideMiskServiceModule ()","title":"RouteGuideMiskServiceModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/-route-guide-misk-service-module/#routeguidemiskservicemodule","text":"[jvm]\\ fun RouteGuideMiskServiceModule ()","title":"RouteGuideMiskServiceModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/provide-server-url/","text":"// misk-grpc-tests / misk.grpc.miskserver / RouteGuideMiskServiceModule / provideServerUrl provideServerUrl \u00b6 [jvm]\\ @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (jetty: JettyService): HttpUrl","title":"provideServerUrl - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.miskserver/-route-guide-misk-service-module/provide-server-url/#provideserverurl","text":"[jvm]\\ @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (jetty: JettyService): HttpUrl","title":"provideServerUrl"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/","text":"// misk-grpc-tests / misk.grpc.protocclient Package misk.grpc.protocclient \u00b6 Types \u00b6 Name Summary GrpcChannelFactory [jvm] @Singleton class GrpcChannelFactory @Injectconstructor(resourceLoader: ResourceLoader) ProtocGrpcClientModule [jvm] class ProtocGrpcClientModule : KAbstractModule","title":"Package misk.grpc.protocclient - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/#package-miskgrpcprotocclient","text":"","title":"Package misk.grpc.protocclient"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/#types","text":"Name Summary GrpcChannelFactory [jvm] @Singleton class GrpcChannelFactory @Injectconstructor(resourceLoader: ResourceLoader) ProtocGrpcClientModule [jvm] class ProtocGrpcClientModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/","text":"// misk-grpc-tests / misk.grpc.protocclient / GrpcChannelFactory GrpcChannelFactory \u00b6 [jvm]\\ @Singleton class GrpcChannelFactory @Injectconstructor(resourceLoader: ResourceLoader) Functions \u00b6 Name Summary createClientChannel [jvm] fun createClientChannel (serverAddress: SocketAddress , serverCertResource: String = \u201cclasspath:/ssl/server_cert.pem\u201d): ManagedChannel Properties \u00b6 Name Summary resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"GrpcChannelFactory - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/#grpcchannelfactory","text":"[jvm]\\ @Singleton class GrpcChannelFactory @Injectconstructor(resourceLoader: ResourceLoader)","title":"GrpcChannelFactory"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/#functions","text":"Name Summary createClientChannel [jvm] fun createClientChannel (serverAddress: SocketAddress , serverCertResource: String = \u201cclasspath:/ssl/server_cert.pem\u201d): ManagedChannel","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/#properties","text":"Name Summary resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/-grpc-channel-factory/","text":"// misk-grpc-tests / misk.grpc.protocclient / GrpcChannelFactory / GrpcChannelFactory GrpcChannelFactory \u00b6 [jvm]\\ @Inject fun GrpcChannelFactory (resourceLoader: ResourceLoader)","title":"GrpcChannelFactory - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/-grpc-channel-factory/#grpcchannelfactory","text":"[jvm]\\ @Inject fun GrpcChannelFactory (resourceLoader: ResourceLoader)","title":"GrpcChannelFactory"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/create-client-channel/","text":"// misk-grpc-tests / misk.grpc.protocclient / GrpcChannelFactory / createClientChannel createClientChannel \u00b6 [jvm]\\ fun createClientChannel (serverAddress: SocketAddress , serverCertResource: String = \u201cclasspath:/ssl/server_cert.pem\u201d): ManagedChannel","title":"createClientChannel - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/create-client-channel/#createclientchannel","text":"[jvm]\\ fun createClientChannel (serverAddress: SocketAddress , serverCertResource: String = \u201cclasspath:/ssl/server_cert.pem\u201d): ManagedChannel","title":"createClientChannel"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/resource-loader/","text":"// misk-grpc-tests / misk.grpc.protocclient / GrpcChannelFactory / resourceLoader resourceLoader \u00b6 [jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-grpc-channel-factory/resource-loader/#resourceloader","text":"[jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/","text":"// misk-grpc-tests / misk.grpc.protocclient / ProtocGrpcClientModule ProtocGrpcClientModule \u00b6 [jvm]\\ class ProtocGrpcClientModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideChannel [jvm] @Provides @Singleton fun provideChannel (@Named(value = \u201cgrpc server\u201d)url: HttpUrl, grpcChannelFactory: GrpcChannelFactory ): ManagedChannel requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ProtocGrpcClientModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/#protocgrpcclientmodule","text":"[jvm]\\ class ProtocGrpcClientModule : KAbstractModule","title":"ProtocGrpcClientModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideChannel [jvm] @Provides @Singleton fun provideChannel (@Named(value = \u201cgrpc server\u201d)url: HttpUrl, grpcChannelFactory: GrpcChannelFactory ): ManagedChannel requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/-protoc-grpc-client-module/","text":"// misk-grpc-tests / misk.grpc.protocclient / ProtocGrpcClientModule / ProtocGrpcClientModule ProtocGrpcClientModule \u00b6 [jvm]\\ fun ProtocGrpcClientModule ()","title":"ProtocGrpcClientModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/-protoc-grpc-client-module/#protocgrpcclientmodule","text":"[jvm]\\ fun ProtocGrpcClientModule ()","title":"ProtocGrpcClientModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/provide-channel/","text":"// misk-grpc-tests / misk.grpc.protocclient / ProtocGrpcClientModule / provideChannel provideChannel \u00b6 [jvm]\\ @Provides @Singleton fun provideChannel (@Named(value = \u201cgrpc server\u201d)url: HttpUrl, grpcChannelFactory: GrpcChannelFactory ): ManagedChannel","title":"provideChannel - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocclient/-protoc-grpc-client-module/provide-channel/#providechannel","text":"[jvm]\\ @Provides @Singleton fun provideChannel (@Named(value = \u201cgrpc server\u201d)url: HttpUrl, grpcChannelFactory: GrpcChannelFactory ): ManagedChannel","title":"provideChannel"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/","text":"// misk-grpc-tests / misk.grpc.protocserver Package misk.grpc.protocserver \u00b6 Types \u00b6 Name Summary ProtocGrpcService [jvm] @Singleton class ProtocGrpcService @Injectconstructor(services: List <BindableService>, resourceLoader: ResourceLoader) : AbstractIdleService Runs a standard gRPC server: generated protoc protos and a Netty backend. This isn\u2019t how Misk does gRPC, but it should be useful to confirm interoperability. RouteGuideProtocServiceModule [jvm] class RouteGuideProtocServiceModule : KAbstractModule A module that runs a standard gRPC server: generated protoc protos and a Netty backend.","title":"Package misk.grpc.protocserver - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/#package-miskgrpcprotocserver","text":"","title":"Package misk.grpc.protocserver"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/#types","text":"Name Summary ProtocGrpcService [jvm] @Singleton class ProtocGrpcService @Injectconstructor(services: List <BindableService>, resourceLoader: ResourceLoader) : AbstractIdleService Runs a standard gRPC server: generated protoc protos and a Netty backend. This isn\u2019t how Misk does gRPC, but it should be useful to confirm interoperability. RouteGuideProtocServiceModule [jvm] class RouteGuideProtocServiceModule : KAbstractModule A module that runs a standard gRPC server: generated protoc protos and a Netty backend.","title":"Types"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/","text":"// misk-grpc-tests / misk.grpc.protocserver / ProtocGrpcService ProtocGrpcService \u00b6 [jvm]\\ @Singleton class ProtocGrpcService @Injectconstructor(services: List <BindableService>, resourceLoader: ResourceLoader) : AbstractIdleService Runs a standard gRPC server: generated protoc protos and a Netty backend. This isn\u2019t how Misk does gRPC, but it should be useful to confirm interoperability. Constructors \u00b6 ProtocGrpcService [jvm] @Inject fun ProtocGrpcService (services: List <BindableService>, resourceLoader: ResourceLoader) Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary server [jvm] lateinit var server : Server url [jvm] val url : HttpUrl","title":"ProtocGrpcService - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/#protocgrpcservice","text":"[jvm]\\ @Singleton class ProtocGrpcService @Injectconstructor(services: List <BindableService>, resourceLoader: ResourceLoader) : AbstractIdleService Runs a standard gRPC server: generated protoc protos and a Netty backend. This isn\u2019t how Misk does gRPC, but it should be useful to confirm interoperability.","title":"ProtocGrpcService"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/#constructors","text":"ProtocGrpcService [jvm] @Inject fun ProtocGrpcService (services: List <BindableService>, resourceLoader: ResourceLoader)","title":"Constructors"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/#properties","text":"Name Summary server [jvm] lateinit var server : Server url [jvm] val url : HttpUrl","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/-protoc-grpc-service/","text":"// misk-grpc-tests / misk.grpc.protocserver / ProtocGrpcService / ProtocGrpcService ProtocGrpcService \u00b6 [jvm]\\ @Inject fun ProtocGrpcService (services: List <BindableService>, resourceLoader: ResourceLoader)","title":"ProtocGrpcService - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/-protoc-grpc-service/#protocgrpcservice","text":"[jvm]\\ @Inject fun ProtocGrpcService (services: List <BindableService>, resourceLoader: ResourceLoader)","title":"ProtocGrpcService"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/server/","text":"// misk-grpc-tests / misk.grpc.protocserver / ProtocGrpcService / server server \u00b6 [jvm]\\ lateinit var server : Server","title":"server - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/server/#server","text":"[jvm]\\ lateinit var server : Server","title":"server"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/url/","text":"// misk-grpc-tests / misk.grpc.protocserver / ProtocGrpcService / url url \u00b6 [jvm]\\ val url : HttpUrl","title":"url - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-protoc-grpc-service/url/#url","text":"[jvm]\\ val url : HttpUrl","title":"url"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/","text":"// misk-grpc-tests / misk.grpc.protocserver / RouteGuideProtocServiceModule RouteGuideProtocServiceModule \u00b6 [jvm]\\ class RouteGuideProtocServiceModule : KAbstractModule A module that runs a standard gRPC server: generated protoc protos and a Netty backend. Constructors \u00b6 RouteGuideProtocServiceModule [jvm] fun RouteGuideProtocServiceModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideServerUrl [jvm] @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (protocGrpcService: ProtocGrpcService ): HttpUrl requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RouteGuideProtocServiceModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/#routeguideprotocservicemodule","text":"[jvm]\\ class RouteGuideProtocServiceModule : KAbstractModule A module that runs a standard gRPC server: generated protoc protos and a Netty backend.","title":"RouteGuideProtocServiceModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/#constructors","text":"RouteGuideProtocServiceModule [jvm] fun RouteGuideProtocServiceModule ()","title":"Constructors"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideServerUrl [jvm] @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (protocGrpcService: ProtocGrpcService ): HttpUrl requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/-route-guide-protoc-service-module/","text":"// misk-grpc-tests / misk.grpc.protocserver / RouteGuideProtocServiceModule / RouteGuideProtocServiceModule RouteGuideProtocServiceModule \u00b6 [jvm]\\ fun RouteGuideProtocServiceModule ()","title":"RouteGuideProtocServiceModule - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/-route-guide-protoc-service-module/#routeguideprotocservicemodule","text":"[jvm]\\ fun RouteGuideProtocServiceModule ()","title":"RouteGuideProtocServiceModule"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/provide-server-url/","text":"// misk-grpc-tests / misk.grpc.protocserver / RouteGuideProtocServiceModule / provideServerUrl provideServerUrl \u00b6 [jvm]\\ @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (protocGrpcService: ProtocGrpcService ): HttpUrl","title":"provideServerUrl - Misk"},{"location":"0.x/misk-grpc-tests/misk.grpc.protocserver/-route-guide-protoc-service-module/provide-server-url/#provideserverurl","text":"[jvm]\\ @Provides @Named(value = \u201cgrpc server\u201d) fun provideServerUrl (protocGrpcService: ProtocGrpcService ): HttpUrl","title":"provideServerUrl"},{"location":"0.x/misk-hibernate/misk.hibernate/","text":"// misk-hibernate / misk.hibernate Package misk.hibernate \u00b6 Types \u00b6 Name Summary BindPolicy [jvm] enum BindPolicy : Enum < BindPolicy > Control how we register listeners. Check [jvm] typealias Check = misk.jdbc.Check Constraint [jvm] annotation class Constraint (path: String , operator: Operator ) Annotates a function on a subinterface of Query to indicate which column (or path of columns) it constrains and using which operator. DbChild [jvm] interface DbChild < R : DbRoot < R >, T : DbChild < R , T >> : DbSharded < R , T > Marker interface for sharded entities that stay with their root inside an entity group. Entity group children will always stay inside the same shard regardless of shard splits and so on. That means transactions inside an entity group is always safe. A typical sharding strategy has a DbCustomer as a root and all of the entities that belong to that customer as children. DbEntity [jvm] interface DbEntity < T : DbEntity < T >> Marker interface for persistent entities. Ensures that only persistent entities can be passed into Session methods. DbRoot [jvm] interface DbRoot < T : DbRoot < T >> : DbSharded < T , T > Marker interface for sharded entity group roots. Entity group roots are spread out across shards they can also have children in the form of DbChild subclasses that always stay in the same shard as their roots. A typical root is for example DbCustomer. DbSharded [jvm] interface DbSharded < R : DbRoot < R >, T : DbSharded < R , T >> : DbEntity < T > Marker interface for sharded persistent entities. Do not subclass directly, instead subclass either DbRoot for entity group roots or DbChild for entity group children. DbTimestampedEntity [jvm] interface DbTimestampedEntity This complements DbEntity for entities that keep updated_at and created_at timestamps. DbUnsharded [jvm] interface DbUnsharded < T : DbUnsharded < T >> : DbEntity < T > Marker interface for persistent entities that have a bounded growth and do not require sharding. Fetch [jvm] annotation class Fetch (path: String , joinType: JoinType) Annotates a function on a subinterface of Query to specify that the association at the given path should be fetched in a single query. The type of join used will be specified by joinType. Gid [jvm] @Embeddable data class Gid < R : DbRoot < R >, T : DbSharded < R , T >>(rootId: Id < R >, id: Id < T >) : Serializable Entity group id, maps to two long columns one for the root id and one for the row GidGenerator [jvm] class GidGenerator : AbstractPostInsertGenerator, Configurable HibernateEntityModule [jvm] abstract class HibernateEntityModule (qualifier: KClass <out Annotation >) : KAbstractModule Binds hibernate entities and event listeners intended for the Transacter annotated by qualifier. HibernateModule [jvm] class HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig?, databasePool: DatabasePool) : KAbstractModule Id [jvm] data class Id < T : DbEntity < T >>(id: Long ) : Serializable , Comparable < Id < T >> Type-safe persistent identifier, mapped to a long column. IdType [jvm] class IdType : UserType, ResultSetIdentifierConsumer Binds Id<*> in the DB to a bigint in MySQL. JsonColumn [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class JsonColumn Put this on a column field to get Hibernate to persist it as JSON using Moshi. It will use the injector\u2019s configured Moshi instance. Use misk.moshi.MoshiModule to customize. Operator [jvm] enum Operator : Enum < Operator > OrBuilder [jvm] interface OrBuilder < Q : Query <*>> This functional interface accepts a set of options. Each option lambda is executed within the scope of a query. It is inappropriate to call methods like list() and uniqueResult() on this query. Order [jvm] annotation class Order (path: String , asc: Boolean ) Annotates a function on a subinterface of Query to indicate which columns to order the the selected columns. Path [jvm] data class Path (schema: String ?, table: String ?, column: String ?) PostCommitHookFailedException [jvm] class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook Projection [jvm] interface Projection Marker interface for query projections. Property [jvm] annotation class Property (path: String ) Annotates a parameter of a Projection data class to indicate which column (or path of columns) to populate the parameter with. ProtoColumn [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class ProtoColumn Put this on a column field for a class generated by Wire to get Hibernate to persist with protobuf serialization. Query [jvm] interface Query < T > Base class for SQL queries. RetryTransactionException [jvm] class RetryTransactionException (message: String ?, cause: Throwable ?) : Exception Thrown to explicitly trigger a retry, subject to retry limits and config such as noRetries(). SecretColumn [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class SecretColumn (keyName: String , indexable: Boolean ) SecretColumn is an annotation used to get Hibernate to encrypt a field before writing it to the database. Select [jvm] annotation class Select (path: String ) Annotates a function on a subinterface of Query to execute a SELECT query. Functions with this annotation must return a List to fetch multiple rows results, or a regular type to fetch a unique result. Session [jvm] interface Session : Session Transacter [jvm] interface Transacter Provides explicit block-based transaction demarcation. TransacterService [jvm] interface TransacterService : Service Marker interface for services that provide database transactors. TransformedType [jvm] @ Target (allowedTargets = [ AnnotationTarget.ANNOTATION_CLASS ]) annotation class TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>) TransformedType is a meta-annotation for assigning arbitrary transformers to entity fields. Use it to annotate attributes that will mark a field to be transformed. Transformer [jvm] abstract class Transformer (context: TransformerContext ) TransformerContext [jvm] data class TransformerContext (tableName: String , columnName: String , arguments: Map < String , >, field: KClass < >) ValidationReport [jvm] data class ValidationReport (schemas: Set < String >, tables: Set < String >, columns: Set < String >) VitessDialect [jvm] class VitessDialect : MySQL57Dialect Functions \u00b6 Name Summary allowFullScatter [jvm] inline fun < T , Q : Query < T >> Q . allowFullScatter (): Q allowTableScan [jvm] inline fun < T , Q : Query < T >> Q . allowTableScan (): Q constraint [jvm] fun < T , Q : Query < T >> Q . constraint (block: CriteriaBuilder.(root: Root<*>) -> Predicate): Q Equivalent to Query.addConstraint, but takes the CriteriaBuilder as a receiver and returns this. This may be easier to use with method chaining. failSafeRead [jvm] fun < T > Transacter . failSafeRead (block: (session: Session ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm] fun < T > Transacter . failSafeRead (shard: Shard, block: (session: Session ) -> T ): T getByType [jvm] fun ResultSet . getByType (klass: KClass <*>?, columnLabel: String ): Serializable ? load [jvm] inline fun < T : DbEntity < T >> Session . load (id: Id < T >): T loadOrNull [jvm] inline fun < T : DbEntity < T >> Session . loadOrNull (id: Id < T >): T ? loadSharded [jvm] inline fun < R : DbRoot < R >, S : DbSharded < R , S >> Session . loadSharded (gid: Gid < R , S >): S newQuery [jvm] inline fun < T : Query <*>> Query.Factory . newQuery (): T or [jvm] inline fun < T , Q : Query < T >> Q . or (lambda: OrBuilder < Q >.() -> Unit ): Q Collects options that are all OR\u2019d together. If any are true the predicate matches. setByType [jvm] fun PreparedStatement . setByType (klass: KClass <*>?, index: Int , value: Any ) shards [jvm] fun Transacter . shards (): Set <Shard> fun Transacter . shards (keyspace: Keyspace): Collection <Shard> transaction [jvm] fun < T > Transacter . transaction (shard: Shard, block: (session: Session ) -> T ): T Commits a transaction with operations of block .","title":"Package misk.hibernate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/#package-miskhibernate","text":"","title":"Package misk.hibernate"},{"location":"0.x/misk-hibernate/misk.hibernate/#types","text":"Name Summary BindPolicy [jvm] enum BindPolicy : Enum < BindPolicy > Control how we register listeners. Check [jvm] typealias Check = misk.jdbc.Check Constraint [jvm] annotation class Constraint (path: String , operator: Operator ) Annotates a function on a subinterface of Query to indicate which column (or path of columns) it constrains and using which operator. DbChild [jvm] interface DbChild < R : DbRoot < R >, T : DbChild < R , T >> : DbSharded < R , T > Marker interface for sharded entities that stay with their root inside an entity group. Entity group children will always stay inside the same shard regardless of shard splits and so on. That means transactions inside an entity group is always safe. A typical sharding strategy has a DbCustomer as a root and all of the entities that belong to that customer as children. DbEntity [jvm] interface DbEntity < T : DbEntity < T >> Marker interface for persistent entities. Ensures that only persistent entities can be passed into Session methods. DbRoot [jvm] interface DbRoot < T : DbRoot < T >> : DbSharded < T , T > Marker interface for sharded entity group roots. Entity group roots are spread out across shards they can also have children in the form of DbChild subclasses that always stay in the same shard as their roots. A typical root is for example DbCustomer. DbSharded [jvm] interface DbSharded < R : DbRoot < R >, T : DbSharded < R , T >> : DbEntity < T > Marker interface for sharded persistent entities. Do not subclass directly, instead subclass either DbRoot for entity group roots or DbChild for entity group children. DbTimestampedEntity [jvm] interface DbTimestampedEntity This complements DbEntity for entities that keep updated_at and created_at timestamps. DbUnsharded [jvm] interface DbUnsharded < T : DbUnsharded < T >> : DbEntity < T > Marker interface for persistent entities that have a bounded growth and do not require sharding. Fetch [jvm] annotation class Fetch (path: String , joinType: JoinType) Annotates a function on a subinterface of Query to specify that the association at the given path should be fetched in a single query. The type of join used will be specified by joinType. Gid [jvm] @Embeddable data class Gid < R : DbRoot < R >, T : DbSharded < R , T >>(rootId: Id < R >, id: Id < T >) : Serializable Entity group id, maps to two long columns one for the root id and one for the row GidGenerator [jvm] class GidGenerator : AbstractPostInsertGenerator, Configurable HibernateEntityModule [jvm] abstract class HibernateEntityModule (qualifier: KClass <out Annotation >) : KAbstractModule Binds hibernate entities and event listeners intended for the Transacter annotated by qualifier. HibernateModule [jvm] class HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig?, databasePool: DatabasePool) : KAbstractModule Id [jvm] data class Id < T : DbEntity < T >>(id: Long ) : Serializable , Comparable < Id < T >> Type-safe persistent identifier, mapped to a long column. IdType [jvm] class IdType : UserType, ResultSetIdentifierConsumer Binds Id<*> in the DB to a bigint in MySQL. JsonColumn [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class JsonColumn Put this on a column field to get Hibernate to persist it as JSON using Moshi. It will use the injector\u2019s configured Moshi instance. Use misk.moshi.MoshiModule to customize. Operator [jvm] enum Operator : Enum < Operator > OrBuilder [jvm] interface OrBuilder < Q : Query <*>> This functional interface accepts a set of options. Each option lambda is executed within the scope of a query. It is inappropriate to call methods like list() and uniqueResult() on this query. Order [jvm] annotation class Order (path: String , asc: Boolean ) Annotates a function on a subinterface of Query to indicate which columns to order the the selected columns. Path [jvm] data class Path (schema: String ?, table: String ?, column: String ?) PostCommitHookFailedException [jvm] class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook Projection [jvm] interface Projection Marker interface for query projections. Property [jvm] annotation class Property (path: String ) Annotates a parameter of a Projection data class to indicate which column (or path of columns) to populate the parameter with. ProtoColumn [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class ProtoColumn Put this on a column field for a class generated by Wire to get Hibernate to persist with protobuf serialization. Query [jvm] interface Query < T > Base class for SQL queries. RetryTransactionException [jvm] class RetryTransactionException (message: String ?, cause: Throwable ?) : Exception Thrown to explicitly trigger a retry, subject to retry limits and config such as noRetries(). SecretColumn [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class SecretColumn (keyName: String , indexable: Boolean ) SecretColumn is an annotation used to get Hibernate to encrypt a field before writing it to the database. Select [jvm] annotation class Select (path: String ) Annotates a function on a subinterface of Query to execute a SELECT query. Functions with this annotation must return a List to fetch multiple rows results, or a regular type to fetch a unique result. Session [jvm] interface Session : Session Transacter [jvm] interface Transacter Provides explicit block-based transaction demarcation. TransacterService [jvm] interface TransacterService : Service Marker interface for services that provide database transactors. TransformedType [jvm] @ Target (allowedTargets = [ AnnotationTarget.ANNOTATION_CLASS ]) annotation class TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>) TransformedType is a meta-annotation for assigning arbitrary transformers to entity fields. Use it to annotate attributes that will mark a field to be transformed. Transformer [jvm] abstract class Transformer (context: TransformerContext ) TransformerContext [jvm] data class TransformerContext (tableName: String , columnName: String , arguments: Map < String , >, field: KClass < >) ValidationReport [jvm] data class ValidationReport (schemas: Set < String >, tables: Set < String >, columns: Set < String >) VitessDialect [jvm] class VitessDialect : MySQL57Dialect","title":"Types"},{"location":"0.x/misk-hibernate/misk.hibernate/#functions","text":"Name Summary allowFullScatter [jvm] inline fun < T , Q : Query < T >> Q . allowFullScatter (): Q allowTableScan [jvm] inline fun < T , Q : Query < T >> Q . allowTableScan (): Q constraint [jvm] fun < T , Q : Query < T >> Q . constraint (block: CriteriaBuilder.(root: Root<*>) -> Predicate): Q Equivalent to Query.addConstraint, but takes the CriteriaBuilder as a receiver and returns this. This may be easier to use with method chaining. failSafeRead [jvm] fun < T > Transacter . failSafeRead (block: (session: Session ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm] fun < T > Transacter . failSafeRead (shard: Shard, block: (session: Session ) -> T ): T getByType [jvm] fun ResultSet . getByType (klass: KClass <*>?, columnLabel: String ): Serializable ? load [jvm] inline fun < T : DbEntity < T >> Session . load (id: Id < T >): T loadOrNull [jvm] inline fun < T : DbEntity < T >> Session . loadOrNull (id: Id < T >): T ? loadSharded [jvm] inline fun < R : DbRoot < R >, S : DbSharded < R , S >> Session . loadSharded (gid: Gid < R , S >): S newQuery [jvm] inline fun < T : Query <*>> Query.Factory . newQuery (): T or [jvm] inline fun < T , Q : Query < T >> Q . or (lambda: OrBuilder < Q >.() -> Unit ): Q Collects options that are all OR\u2019d together. If any are true the predicate matches. setByType [jvm] fun PreparedStatement . setByType (klass: KClass <*>?, index: Int , value: Any ) shards [jvm] fun Transacter . shards (): Set <Shard> fun Transacter . shards (keyspace: Keyspace): Collection <Shard> transaction [jvm] fun < T > Transacter . transaction (shard: Shard, block: (session: Session ) -> T ): T Commits a transaction with operations of block .","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/allow-full-scatter/","text":"// misk-hibernate / misk.hibernate / allowFullScatter allowFullScatter \u00b6 [jvm]\\ inline fun < T , Q : Query < T >> Q . allowFullScatter (): Q","title":"allowFullScatter - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/allow-full-scatter/#allowfullscatter","text":"[jvm]\\ inline fun < T , Q : Query < T >> Q . allowFullScatter (): Q","title":"allowFullScatter"},{"location":"0.x/misk-hibernate/misk.hibernate/allow-table-scan/","text":"// misk-hibernate / misk.hibernate / allowTableScan allowTableScan \u00b6 [jvm]\\ inline fun < T , Q : Query < T >> Q . allowTableScan (): Q","title":"allowTableScan - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/allow-table-scan/#allowtablescan","text":"[jvm]\\ inline fun < T , Q : Query < T >> Q . allowTableScan (): Q","title":"allowTableScan"},{"location":"0.x/misk-hibernate/misk.hibernate/constraint/","text":"// misk-hibernate / misk.hibernate / constraint constraint \u00b6 [jvm]\\ fun < T , Q : Query < T >> Q . constraint (block: CriteriaBuilder.(root: Root<*>) -> Predicate): Q Equivalent to Query.addConstraint, but takes the CriteriaBuilder as a receiver and returns this. This may be easier to use with method chaining. The root parameter should be used to select which property of the target entity to match against. queryFactory.newQuery<OperatorsMovieQuery>()\\ .constraint { root -> like(root.get(\u201cname\u201d), \u201cJurassic%\u201d) }\\ .count(session)","title":"constraint - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/constraint/#constraint","text":"[jvm]\\ fun < T , Q : Query < T >> Q . constraint (block: CriteriaBuilder.(root: Root<*>) -> Predicate): Q Equivalent to Query.addConstraint, but takes the CriteriaBuilder as a receiver and returns this. This may be easier to use with method chaining. The root parameter should be used to select which property of the target entity to match against. queryFactory.newQuery<OperatorsMovieQuery>()\\ .constraint { root -> like(root.get(\u201cname\u201d), \u201cJurassic%\u201d) }\\ .count(session)","title":"constraint"},{"location":"0.x/misk-hibernate/misk.hibernate/fail-safe-read/","text":"// misk-hibernate / misk.hibernate / failSafeRead failSafeRead \u00b6 [jvm]\\ fun < T > Transacter . failSafeRead (block: (session: Session ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm]\\ fun < T > Transacter . failSafeRead (shard: Shard, block: (session: Session ) -> T ): T","title":"failSafeRead - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/fail-safe-read/#failsaferead","text":"[jvm]\\ fun < T > Transacter . failSafeRead (block: (session: Session ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm]\\ fun < T > Transacter . failSafeRead (shard: Shard, block: (session: Session ) -> T ): T","title":"failSafeRead"},{"location":"0.x/misk-hibernate/misk.hibernate/get-by-type/","text":"// misk-hibernate / misk.hibernate / getByType getByType \u00b6 [jvm]\\ fun ResultSet . getByType (klass: KClass <*>?, columnLabel: String ): Serializable ?","title":"getByType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/get-by-type/#getbytype","text":"[jvm]\\ fun ResultSet . getByType (klass: KClass <*>?, columnLabel: String ): Serializable ?","title":"getByType"},{"location":"0.x/misk-hibernate/misk.hibernate/load-or-null/","text":"// misk-hibernate / misk.hibernate / loadOrNull loadOrNull \u00b6 [jvm]\\ inline fun < T : DbEntity < T >> Session . loadOrNull (id: Id < T >): T ?","title":"loadOrNull - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/load-or-null/#loadornull","text":"[jvm]\\ inline fun < T : DbEntity < T >> Session . loadOrNull (id: Id < T >): T ?","title":"loadOrNull"},{"location":"0.x/misk-hibernate/misk.hibernate/load-sharded/","text":"// misk-hibernate / misk.hibernate / loadSharded loadSharded \u00b6 [jvm]\\ inline fun < R : DbRoot < R >, S : DbSharded < R , S >> Session . loadSharded (gid: Gid < R , S >): S","title":"loadSharded - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/load-sharded/#loadsharded","text":"[jvm]\\ inline fun < R : DbRoot < R >, S : DbSharded < R , S >> Session . loadSharded (gid: Gid < R , S >): S","title":"loadSharded"},{"location":"0.x/misk-hibernate/misk.hibernate/load/","text":"// misk-hibernate / misk.hibernate / load load \u00b6 [jvm]\\ inline fun < T : DbEntity < T >> Session . load (id: Id < T >): T","title":"load - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/load/#load","text":"[jvm]\\ inline fun < T : DbEntity < T >> Session . load (id: Id < T >): T","title":"load"},{"location":"0.x/misk-hibernate/misk.hibernate/new-query/","text":"// misk-hibernate / misk.hibernate / newQuery newQuery \u00b6 [jvm]\\ inline fun < T : Query <*>> Query.Factory . newQuery (): T","title":"newQuery - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/new-query/#newquery","text":"[jvm]\\ inline fun < T : Query <*>> Query.Factory . newQuery (): T","title":"newQuery"},{"location":"0.x/misk-hibernate/misk.hibernate/or/","text":"// misk-hibernate / misk.hibernate / or or \u00b6 [jvm]\\ inline fun < T , Q : Query < T >> Q . or (lambda: OrBuilder < Q >.() -> Unit ): Q Collects options that are all OR\u2019d together. If any are true the predicate matches. queryFactory.newQuery<OperatorsMovieQuery>()\\ .or {\\ option { name(\u201cRocky 1\u201d) }\\ option { name(\u201cRocky 3\u201d) }\\ }\\ .list() Each option has a list of constraints that are themselves AND\u2019d together.","title":"or - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/or/#or","text":"[jvm]\\ inline fun < T , Q : Query < T >> Q . or (lambda: OrBuilder < Q >.() -> Unit ): Q Collects options that are all OR\u2019d together. If any are true the predicate matches. queryFactory.newQuery<OperatorsMovieQuery>()\\ .or {\\ option { name(\u201cRocky 1\u201d) }\\ option { name(\u201cRocky 3\u201d) }\\ }\\ .list() Each option has a list of constraints that are themselves AND\u2019d together.","title":"or"},{"location":"0.x/misk-hibernate/misk.hibernate/set-by-type/","text":"// misk-hibernate / misk.hibernate / setByType setByType \u00b6 [jvm]\\ fun PreparedStatement . setByType (klass: KClass <*>?, index: Int , value: Any )","title":"setByType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/set-by-type/#setbytype","text":"[jvm]\\ fun PreparedStatement . setByType (klass: KClass <*>?, index: Int , value: Any )","title":"setByType"},{"location":"0.x/misk-hibernate/misk.hibernate/shards/","text":"// misk-hibernate / misk.hibernate / shards shards \u00b6 [jvm]\\ fun Transacter . shards (): Set <Shard> fun Transacter . shards (keyspace: Keyspace): Collection <Shard>","title":"shards - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/shards/#shards","text":"[jvm]\\ fun Transacter . shards (): Set <Shard> fun Transacter . shards (keyspace: Keyspace): Collection <Shard>","title":"shards"},{"location":"0.x/misk-hibernate/misk.hibernate/transaction/","text":"// misk-hibernate / misk.hibernate / transaction transaction \u00b6 [jvm]\\ fun < T > Transacter . transaction (shard: Shard, block: (session: Session ) -> T ): T Commits a transaction with operations of block . New objects must be persisted with an explicit call to Session.save . Updates are performed implicitly by modifying objects returned from a query. For example if we were to save a new movie to a movie database, and update the revenue of an existing movie: transacter.transaction { session ->\\ // Saving a new entity to the database needs an explicit call.\\ val starWars = DbMovie(name = \u201cStar Wars\u201d, year = \u201c1977\u201d, revenue = 775_400_000)\\ session.save(starWars)\\ \\ // Updating a movie from the database is done by modifying the object.\\ // Changes are saved implicitly.\\ val movie: DbMovie = queryFactory.newQuery<MovieQuery>().id(id).uniqueResult(session)!!\\ movie.revenue = 100_000_000\\ }","title":"transaction - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/transaction/#transaction","text":"[jvm]\\ fun < T > Transacter . transaction (shard: Shard, block: (session: Session ) -> T ): T Commits a transaction with operations of block . New objects must be persisted with an explicit call to Session.save . Updates are performed implicitly by modifying objects returned from a query. For example if we were to save a new movie to a movie database, and update the revenue of an existing movie: transacter.transaction { session ->\\ // Saving a new entity to the database needs an explicit call.\\ val starWars = DbMovie(name = \u201cStar Wars\u201d, year = \u201c1977\u201d, revenue = 775_400_000)\\ session.save(starWars)\\ \\ // Updating a movie from the database is done by modifying the object.\\ // Changes are saved implicitly.\\ val movie: DbMovie = queryFactory.newQuery<MovieQuery>().id(id).uniqueResult(session)!!\\ movie.revenue = 100_000_000\\ }","title":"transaction"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/","text":"// misk-hibernate / misk.hibernate / BindPolicy BindPolicy \u00b6 [jvm]\\ enum BindPolicy : Enum < BindPolicy > Control how we register listeners. Entries \u00b6 APPEND [jvm] APPEND () REPLACE [jvm] REPLACE () PREPEND [jvm] PREPEND () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"BindPolicy - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/#bindpolicy","text":"[jvm]\\ enum BindPolicy : Enum < BindPolicy > Control how we register listeners.","title":"BindPolicy"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/#entries","text":"APPEND [jvm] APPEND () REPLACE [jvm] REPLACE () PREPEND [jvm] PREPEND ()","title":"Entries"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-a-p-p-e-n-d/","text":"// misk-hibernate / misk.hibernate / BindPolicy / APPEND APPEND \u00b6 [jvm]\\ APPEND () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"APPEND - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-a-p-p-e-n-d/#append","text":"[jvm]\\ APPEND ()","title":"APPEND"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-a-p-p-e-n-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-p-r-e-p-e-n-d/","text":"// misk-hibernate / misk.hibernate / BindPolicy / PREPEND PREPEND \u00b6 [jvm]\\ PREPEND () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PREPEND - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-p-r-e-p-e-n-d/#prepend","text":"[jvm]\\ PREPEND ()","title":"PREPEND"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-p-r-e-p-e-n-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-r-e-p-l-a-c-e/","text":"// misk-hibernate / misk.hibernate / BindPolicy / REPLACE REPLACE \u00b6 [jvm]\\ REPLACE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"REPLACE - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-r-e-p-l-a-c-e/#replace","text":"[jvm]\\ REPLACE ()","title":"REPLACE"},{"location":"0.x/misk-hibernate/misk.hibernate/-bind-policy/-r-e-p-l-a-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/","text":"// misk-hibernate / misk.hibernate / Constraint Constraint \u00b6 [jvm]\\ annotation class Constraint (path: String , operator: Operator ) Annotates a function on a subinterface of Query to indicate which column (or path of columns) it constrains and using which operator. Constructors \u00b6 Constraint [jvm] fun Constraint (path: String , operator: Operator = Operator.EQ) Properties \u00b6 Name Summary operator [jvm] val operator : Operator path [jvm] val path : String","title":"Constraint - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/#constraint","text":"[jvm]\\ annotation class Constraint (path: String , operator: Operator ) Annotates a function on a subinterface of Query to indicate which column (or path of columns) it constrains and using which operator.","title":"Constraint"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/#constructors","text":"Constraint [jvm] fun Constraint (path: String , operator: Operator = Operator.EQ)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/#properties","text":"Name Summary operator [jvm] val operator : Operator path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/-constraint/","text":"// misk-hibernate / misk.hibernate / Constraint / Constraint Constraint \u00b6 [jvm]\\ fun Constraint (path: String , operator: Operator = Operator.EQ)","title":"Constraint - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/-constraint/#constraint","text":"[jvm]\\ fun Constraint (path: String , operator: Operator = Operator.EQ)","title":"Constraint"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/operator/","text":"// misk-hibernate / misk.hibernate / Constraint / operator operator \u00b6 [jvm]\\ val operator : Operator","title":"operator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/operator/#operator","text":"[jvm]\\ val operator : Operator","title":"operator"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/path/","text":"// misk-hibernate / misk.hibernate / Constraint / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-constraint/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-child/","text":"// misk-hibernate / misk.hibernate / DbChild DbChild \u00b6 [jvm]\\ interface DbChild < R : DbRoot < R >, T : DbChild < R , T >> : DbSharded < R , T > Marker interface for sharded entities that stay with their root inside an entity group. Entity group children will always stay inside the same shard regardless of shard splits and so on. That means transactions inside an entity group is always safe. A typical sharding strategy has a DbCustomer as a root and all of the entities that belong to that customer as children. Properties \u00b6 Name Summary gid [jvm] abstract val gid : Gid < R , T > id [jvm] open override val id : Id < T > rootId [jvm] abstract val rootId : Id < R >","title":"DbChild - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-child/#dbchild","text":"[jvm]\\ interface DbChild < R : DbRoot < R >, T : DbChild < R , T >> : DbSharded < R , T > Marker interface for sharded entities that stay with their root inside an entity group. Entity group children will always stay inside the same shard regardless of shard splits and so on. That means transactions inside an entity group is always safe. A typical sharding strategy has a DbCustomer as a root and all of the entities that belong to that customer as children.","title":"DbChild"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-child/#properties","text":"Name Summary gid [jvm] abstract val gid : Gid < R , T > id [jvm] open override val id : Id < T > rootId [jvm] abstract val rootId : Id < R >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-child/id/","text":"// misk-hibernate / misk.hibernate / DbChild / id id \u00b6 [jvm]\\ open override val id : Id < T >","title":"id - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-child/id/#id","text":"[jvm]\\ open override val id : Id < T >","title":"id"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-entity/","text":"// misk-hibernate / misk.hibernate / DbEntity DbEntity \u00b6 [jvm]\\ interface DbEntity < T : DbEntity < T >> Marker interface for persistent entities. Ensures that only persistent entities can be passed into Session methods. Properties \u00b6 Name Summary id [jvm] abstract val id : Id < T > Inheritors \u00b6 Name DbSharded DbUnsharded","title":"DbEntity - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-entity/#dbentity","text":"[jvm]\\ interface DbEntity < T : DbEntity < T >> Marker interface for persistent entities. Ensures that only persistent entities can be passed into Session methods.","title":"DbEntity"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-entity/#properties","text":"Name Summary id [jvm] abstract val id : Id < T >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-entity/#inheritors","text":"Name DbSharded DbUnsharded","title":"Inheritors"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-entity/id/","text":"// misk-hibernate / misk.hibernate / DbEntity / id id \u00b6 [jvm]\\ abstract val id : Id < T >","title":"id - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-entity/id/#id","text":"[jvm]\\ abstract val id : Id < T >","title":"id"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-root/","text":"// misk-hibernate / misk.hibernate / DbRoot DbRoot \u00b6 [jvm]\\ interface DbRoot < T : DbRoot < T >> : DbSharded < T , T > Marker interface for sharded entity group roots. Entity group roots are spread out across shards they can also have children in the form of DbChild subclasses that always stay in the same shard as their roots. A typical root is for example DbCustomer. Properties \u00b6 Name Summary gid [jvm] open override val gid : Gid < T , T > id [jvm] abstract val id : Id < T > rootId [jvm] open override val rootId : Id < T >","title":"DbRoot - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-root/#dbroot","text":"[jvm]\\ interface DbRoot < T : DbRoot < T >> : DbSharded < T , T > Marker interface for sharded entity group roots. Entity group roots are spread out across shards they can also have children in the form of DbChild subclasses that always stay in the same shard as their roots. A typical root is for example DbCustomer.","title":"DbRoot"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-root/#properties","text":"Name Summary gid [jvm] open override val gid : Gid < T , T > id [jvm] abstract val id : Id < T > rootId [jvm] open override val rootId : Id < T >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-root/gid/","text":"// misk-hibernate / misk.hibernate / DbRoot / gid gid \u00b6 [jvm]\\ open override val gid : Gid < T , T >","title":"gid - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-root/gid/#gid","text":"[jvm]\\ open override val gid : Gid < T , T >","title":"gid"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-root/root-id/","text":"// misk-hibernate / misk.hibernate / DbRoot / rootId rootId \u00b6 [jvm]\\ open override val rootId : Id < T >","title":"rootId - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-root/root-id/#rootid","text":"[jvm]\\ open override val rootId : Id < T >","title":"rootId"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/","text":"// misk-hibernate / misk.hibernate / DbSharded DbSharded \u00b6 [jvm]\\ interface DbSharded < R : DbRoot < R >, T : DbSharded < R , T >> : DbEntity < T > Marker interface for sharded persistent entities. Do not subclass directly, instead subclass either DbRoot for entity group roots or DbChild for entity group children. Properties \u00b6 Name Summary gid [jvm] abstract val gid : Gid < R , T > id [jvm] abstract val id : Id < T > rootId [jvm] abstract val rootId : Id < R > Inheritors \u00b6 Name DbChild DbRoot","title":"DbSharded - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/#dbsharded","text":"[jvm]\\ interface DbSharded < R : DbRoot < R >, T : DbSharded < R , T >> : DbEntity < T > Marker interface for sharded persistent entities. Do not subclass directly, instead subclass either DbRoot for entity group roots or DbChild for entity group children.","title":"DbSharded"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/#properties","text":"Name Summary gid [jvm] abstract val gid : Gid < R , T > id [jvm] abstract val id : Id < T > rootId [jvm] abstract val rootId : Id < R >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/#inheritors","text":"Name DbChild DbRoot","title":"Inheritors"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/gid/","text":"// misk-hibernate / misk.hibernate / DbSharded / gid gid \u00b6 [jvm]\\ abstract val gid : Gid < R , T >","title":"gid - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/gid/#gid","text":"[jvm]\\ abstract val gid : Gid < R , T >","title":"gid"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/root-id/","text":"// misk-hibernate / misk.hibernate / DbSharded / rootId rootId \u00b6 [jvm]\\ abstract val rootId : Id < R >","title":"rootId - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-sharded/root-id/#rootid","text":"[jvm]\\ abstract val rootId : Id < R >","title":"rootId"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-timestamped-entity/","text":"// misk-hibernate / misk.hibernate / DbTimestampedEntity DbTimestampedEntity \u00b6 [jvm]\\ interface DbTimestampedEntity This complements DbEntity for entities that keep updated_at and created_at timestamps. Misk uses the application\u2019s clock time to set created_at and updated_at . We prefer the application\u2019s (ie. JVM\u2019s) clock over the database\u2019s clock because only the application\u2019s clock can be faked in tests. To use timestamped entities first add two columns in your CREATE TABLE statement. You may also add an optional index on updated_at: CREATE TABLE movies(\\ id bigint NOT NULL PRIMARY KEY AUTO_INCREMENT,\\ created_at timestamp(3) NOT NULL DEFAULT NOW(3),\\ updated_at timestamp(3) NOT NULL DEFAULT NOW(3) ON UPDATE NOW(3),\\ \u2026\\ KEY idx_updated_at ( updated_at )\\ ); The above SQL uses timestamp(3) and NOW(3) to get millisecond precision which interoperates nicely with Java. Although we declare DEFAULT NOW(3) and ON UPDATE NOW(3), these don\u2019t apply to writes from Hibernate because it always provides a value explicitly. Next implement this interface and add the following declarations to your entity class: @Entity\\ @Table(name = \u201cmovies\u201d)\\ class DbMovie() : DbEntity<DbMovie>, DbTimestampedEntity {\\ \\ \u2026\\ \\ @Column\\ override lateinit var updated_at: Instant\\ \\ @Column\\ override lateinit var created_at: Instant\\ \\ \u2026\\ \\ } The timestamp listener will automatically populate these values on save and update. (Incidentally, the @Columns are not marked nullable = false because the timestamp listener is triggered after the nullability check.) Properties \u00b6 Name Summary created_at [jvm] abstract var created_at : Instant updated_at [jvm] abstract var updated_at : Instant","title":"DbTimestampedEntity - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-timestamped-entity/#dbtimestampedentity","text":"[jvm]\\ interface DbTimestampedEntity This complements DbEntity for entities that keep updated_at and created_at timestamps. Misk uses the application\u2019s clock time to set created_at and updated_at . We prefer the application\u2019s (ie. JVM\u2019s) clock over the database\u2019s clock because only the application\u2019s clock can be faked in tests. To use timestamped entities first add two columns in your CREATE TABLE statement. You may also add an optional index on updated_at: CREATE TABLE movies(\\ id bigint NOT NULL PRIMARY KEY AUTO_INCREMENT,\\ created_at timestamp(3) NOT NULL DEFAULT NOW(3),\\ updated_at timestamp(3) NOT NULL DEFAULT NOW(3) ON UPDATE NOW(3),\\ \u2026\\ KEY idx_updated_at ( updated_at )\\ ); The above SQL uses timestamp(3) and NOW(3) to get millisecond precision which interoperates nicely with Java. Although we declare DEFAULT NOW(3) and ON UPDATE NOW(3), these don\u2019t apply to writes from Hibernate because it always provides a value explicitly. Next implement this interface and add the following declarations to your entity class: @Entity\\ @Table(name = \u201cmovies\u201d)\\ class DbMovie() : DbEntity<DbMovie>, DbTimestampedEntity {\\ \\ \u2026\\ \\ @Column\\ override lateinit var updated_at: Instant\\ \\ @Column\\ override lateinit var created_at: Instant\\ \\ \u2026\\ \\ } The timestamp listener will automatically populate these values on save and update. (Incidentally, the @Columns are not marked nullable = false because the timestamp listener is triggered after the nullability check.)","title":"DbTimestampedEntity"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-timestamped-entity/#properties","text":"Name Summary created_at [jvm] abstract var created_at : Instant updated_at [jvm] abstract var updated_at : Instant","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-timestamped-entity/created_at/","text":"// misk-hibernate / misk.hibernate / DbTimestampedEntity / created_at created_at \u00b6 [jvm]\\ abstract var created_at : Instant","title":"created_at - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-timestamped-entity/created_at/#created_at","text":"[jvm]\\ abstract var created_at : Instant","title":"created_at"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-timestamped-entity/updated_at/","text":"// misk-hibernate / misk.hibernate / DbTimestampedEntity / updated_at updated_at \u00b6 [jvm]\\ abstract var updated_at : Instant","title":"updated_at - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-timestamped-entity/updated_at/#updated_at","text":"[jvm]\\ abstract var updated_at : Instant","title":"updated_at"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-unsharded/","text":"// misk-hibernate / misk.hibernate / DbUnsharded DbUnsharded \u00b6 [jvm]\\ interface DbUnsharded < T : DbUnsharded < T >> : DbEntity < T > Marker interface for persistent entities that have a bounded growth and do not require sharding. Properties \u00b6 Name Summary id [jvm] abstract val id : Id < T >","title":"DbUnsharded - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-unsharded/#dbunsharded","text":"[jvm]\\ interface DbUnsharded < T : DbUnsharded < T >> : DbEntity < T > Marker interface for persistent entities that have a bounded growth and do not require sharding.","title":"DbUnsharded"},{"location":"0.x/misk-hibernate/misk.hibernate/-db-unsharded/#properties","text":"Name Summary id [jvm] abstract val id : Id < T >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/","text":"// misk-hibernate / misk.hibernate / Fetch Fetch \u00b6 [jvm]\\ annotation class Fetch (path: String , joinType: JoinType) Annotates a function on a subinterface of Query to specify that the association at the given path should be fetched in a single query. The type of join used will be specified by joinType. Constructors \u00b6 Fetch [jvm] fun Fetch (path: String = \u201c\u201d, joinType: JoinType = LEFT) Properties \u00b6 Name Summary joinType [jvm] val joinType : JoinType path [jvm] val path : String","title":"Fetch - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/#fetch","text":"[jvm]\\ annotation class Fetch (path: String , joinType: JoinType) Annotates a function on a subinterface of Query to specify that the association at the given path should be fetched in a single query. The type of join used will be specified by joinType.","title":"Fetch"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/#constructors","text":"Fetch [jvm] fun Fetch (path: String = \u201c\u201d, joinType: JoinType = LEFT)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/#properties","text":"Name Summary joinType [jvm] val joinType : JoinType path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/-fetch/","text":"// misk-hibernate / misk.hibernate / Fetch / Fetch Fetch \u00b6 [jvm]\\ fun Fetch (path: String = \u201c\u201d, joinType: JoinType = LEFT)","title":"Fetch - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/-fetch/#fetch","text":"[jvm]\\ fun Fetch (path: String = \u201c\u201d, joinType: JoinType = LEFT)","title":"Fetch"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/join-type/","text":"// misk-hibernate / misk.hibernate / Fetch / joinType joinType \u00b6 [jvm]\\ val joinType : JoinType","title":"joinType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/join-type/#jointype","text":"[jvm]\\ val joinType : JoinType","title":"joinType"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/path/","text":"// misk-hibernate / misk.hibernate / Fetch / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-fetch/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/","text":"// misk-hibernate / misk.hibernate / Gid Gid \u00b6 [jvm]\\ @Embeddable data class Gid < R : DbRoot < R >, T : DbSharded < R , T >>(rootId: Id < R >, id: Id < T >) : Serializable Entity group id, maps to two long columns one for the root id and one for the row Constructors \u00b6 Gid [jvm] fun < R : DbRoot < R >, T : DbSharded < R , T >> Gid (rootId: Id < R >, id: Id < T >) Functions \u00b6 Name Summary shardKey [jvm] fun shardKey (): Shard.Key toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary id [jvm] val id : Id < T > rootId [jvm] val rootId : Id < R >","title":"Gid - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/#gid","text":"[jvm]\\ @Embeddable data class Gid < R : DbRoot < R >, T : DbSharded < R , T >>(rootId: Id < R >, id: Id < T >) : Serializable Entity group id, maps to two long columns one for the root id and one for the row","title":"Gid"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/#constructors","text":"Gid [jvm] fun < R : DbRoot < R >, T : DbSharded < R , T >> Gid (rootId: Id < R >, id: Id < T >)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/#functions","text":"Name Summary shardKey [jvm] fun shardKey (): Shard.Key toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/#properties","text":"Name Summary id [jvm] val id : Id < T > rootId [jvm] val rootId : Id < R >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/-gid/","text":"// misk-hibernate / misk.hibernate / Gid / Gid Gid \u00b6 [jvm]\\ fun < R : DbRoot < R >, T : DbSharded < R , T >> Gid (rootId: Id < R >, id: Id < T >)","title":"Gid - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/-gid/#gid","text":"[jvm]\\ fun < R : DbRoot < R >, T : DbSharded < R , T >> Gid (rootId: Id < R >, id: Id < T >)","title":"Gid"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/id/","text":"// misk-hibernate / misk.hibernate / Gid / id id \u00b6 [jvm]\\ val id : Id < T >","title":"id - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/id/#id","text":"[jvm]\\ val id : Id < T >","title":"id"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/root-id/","text":"// misk-hibernate / misk.hibernate / Gid / rootId rootId \u00b6 [jvm]\\ val rootId : Id < R >","title":"rootId - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/root-id/#rootid","text":"[jvm]\\ val rootId : Id < R >","title":"rootId"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/shard-key/","text":"// misk-hibernate / misk.hibernate / Gid / shardKey shardKey \u00b6 [jvm]\\ fun shardKey (): Shard.Key","title":"shardKey - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/shard-key/#shardkey","text":"[jvm]\\ fun shardKey (): Shard.Key","title":"shardKey"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/to-string/","text":"// misk-hibernate / misk.hibernate / Gid / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/","text":"// misk-hibernate / misk.hibernate / GidGenerator GidGenerator \u00b6 [jvm]\\ class GidGenerator : AbstractPostInsertGenerator, Configurable Functions \u00b6 Name Summary configure [jvm] open override fun configure (type: Type, params: Properties , serviceRegistry: ServiceRegistry) determineBulkInsertionIdentifierGenerationSelectFragment [jvm] open override fun determineBulkInsertionIdentifierGenerationSelectFragment (p0: Dialect): String generate [jvm] open override fun generate (p0: SharedSessionContractImplementor, p1: Any ): Serializable getInsertGeneratedIdentifierDelegate [jvm] open override fun getInsertGeneratedIdentifierDelegate (persister: PostInsertIdentityPersister, dialect: Dialect, isGetGeneratedKeysEnabled: Boolean ): InsertGeneratedIdentifierDelegate supportsBulkInsertionIdentifierGeneration [jvm] open override fun supportsBulkInsertionIdentifierGeneration (): Boolean supportsJdbcBatchInserts [jvm] open override fun supportsJdbcBatchInserts (): Boolean","title":"GidGenerator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/#gidgenerator","text":"[jvm]\\ class GidGenerator : AbstractPostInsertGenerator, Configurable","title":"GidGenerator"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/#functions","text":"Name Summary configure [jvm] open override fun configure (type: Type, params: Properties , serviceRegistry: ServiceRegistry) determineBulkInsertionIdentifierGenerationSelectFragment [jvm] open override fun determineBulkInsertionIdentifierGenerationSelectFragment (p0: Dialect): String generate [jvm] open override fun generate (p0: SharedSessionContractImplementor, p1: Any ): Serializable getInsertGeneratedIdentifierDelegate [jvm] open override fun getInsertGeneratedIdentifierDelegate (persister: PostInsertIdentityPersister, dialect: Dialect, isGetGeneratedKeysEnabled: Boolean ): InsertGeneratedIdentifierDelegate supportsBulkInsertionIdentifierGeneration [jvm] open override fun supportsBulkInsertionIdentifierGeneration (): Boolean supportsJdbcBatchInserts [jvm] open override fun supportsJdbcBatchInserts (): Boolean","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/-gid-generator/","text":"// misk-hibernate / misk.hibernate / GidGenerator / GidGenerator GidGenerator \u00b6 [jvm]\\ fun GidGenerator ()","title":"GidGenerator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/-gid-generator/#gidgenerator","text":"[jvm]\\ fun GidGenerator ()","title":"GidGenerator"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/configure/","text":"// misk-hibernate / misk.hibernate / GidGenerator / configure configure \u00b6 [jvm]\\ open override fun configure (type: Type, params: Properties , serviceRegistry: ServiceRegistry)","title":"configure - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/configure/#configure","text":"[jvm]\\ open override fun configure (type: Type, params: Properties , serviceRegistry: ServiceRegistry)","title":"configure"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/get-insert-generated-identifier-delegate/","text":"// misk-hibernate / misk.hibernate / GidGenerator / getInsertGeneratedIdentifierDelegate getInsertGeneratedIdentifierDelegate \u00b6 [jvm]\\ open override fun getInsertGeneratedIdentifierDelegate (persister: PostInsertIdentityPersister, dialect: Dialect, isGetGeneratedKeysEnabled: Boolean ): InsertGeneratedIdentifierDelegate","title":"getInsertGeneratedIdentifierDelegate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-gid-generator/get-insert-generated-identifier-delegate/#getinsertgeneratedidentifierdelegate","text":"[jvm]\\ open override fun getInsertGeneratedIdentifierDelegate (persister: PostInsertIdentityPersister, dialect: Dialect, isGetGeneratedKeysEnabled: Boolean ): InsertGeneratedIdentifierDelegate","title":"getInsertGeneratedIdentifierDelegate"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/","text":"// misk-hibernate / misk.hibernate / HibernateEntityModule HibernateEntityModule \u00b6 [jvm]\\ abstract class HibernateEntityModule (qualifier: KClass <out Annotation >) : KAbstractModule Binds hibernate entities and event listeners intended for the Transacter annotated by qualifier. Constructors \u00b6 HibernateEntityModule [jvm] fun HibernateEntityModule (qualifier: KClass <out Annotation >) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureHibernate [jvm] abstract fun configureHibernate () convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"HibernateEntityModule - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/#hibernateentitymodule","text":"[jvm]\\ abstract class HibernateEntityModule (qualifier: KClass <out Annotation >) : KAbstractModule Binds hibernate entities and event listeners intended for the Transacter annotated by qualifier.","title":"HibernateEntityModule"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/#constructors","text":"HibernateEntityModule [jvm] fun HibernateEntityModule (qualifier: KClass <out Annotation >)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) configureHibernate [jvm] abstract fun configureHibernate () convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/-hibernate-entity-module/","text":"// misk-hibernate / misk.hibernate / HibernateEntityModule / HibernateEntityModule HibernateEntityModule \u00b6 [jvm]\\ fun HibernateEntityModule (qualifier: KClass <out Annotation >)","title":"HibernateEntityModule - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/-hibernate-entity-module/#hibernateentitymodule","text":"[jvm]\\ fun HibernateEntityModule (qualifier: KClass <out Annotation >)","title":"HibernateEntityModule"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/configure-hibernate/","text":"// misk-hibernate / misk.hibernate / HibernateEntityModule / configureHibernate configureHibernate \u00b6 [jvm]\\ abstract fun configureHibernate ()","title":"configureHibernate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-entity-module/configure-hibernate/#configurehibernate","text":"[jvm]\\ abstract fun configureHibernate ()","title":"configureHibernate"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/","text":"// misk-hibernate / misk.hibernate / HibernateModule HibernateModule \u00b6 [jvm]\\ class HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig?, databasePool: DatabasePool) : KAbstractModule Constructors \u00b6 HibernateModule [jvm] fun HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, databasePool: DatabasePool = RealDatabasePool) HibernateModule [jvm] fun HibernateModule (qualifier: KClass <out Annotation >, readerQualifier: KClass <out Annotation >, cluster: DataSourceClusterConfig, databasePool: DatabasePool = RealDatabasePool) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder config [jvm] val config : DataSourceConfig databasePool [jvm] val databasePool : DatabasePool readerConfig [jvm] val readerConfig : DataSourceConfig?","title":"HibernateModule - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/#hibernatemodule","text":"[jvm]\\ class HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig?, databasePool: DatabasePool) : KAbstractModule","title":"HibernateModule"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/#constructors","text":"HibernateModule [jvm] fun HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, databasePool: DatabasePool = RealDatabasePool) HibernateModule [jvm] fun HibernateModule (qualifier: KClass <out Annotation >, readerQualifier: KClass <out Annotation >, cluster: DataSourceClusterConfig, databasePool: DatabasePool = RealDatabasePool)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/#properties","text":"Name Summary binder [jvm] val binder : Binder config [jvm] val config : DataSourceConfig databasePool [jvm] val databasePool : DatabasePool readerConfig [jvm] val readerConfig : DataSourceConfig?","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/-hibernate-module/","text":"// misk-hibernate / misk.hibernate / HibernateModule / HibernateModule HibernateModule \u00b6 [jvm]\\ fun HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, databasePool: DatabasePool = RealDatabasePool) fun HibernateModule (qualifier: KClass <out Annotation >, readerQualifier: KClass <out Annotation >, cluster: DataSourceClusterConfig, databasePool: DatabasePool = RealDatabasePool) fun HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig?, databasePool: DatabasePool = RealDatabasePool)","title":"HibernateModule - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/-hibernate-module/#hibernatemodule","text":"[jvm]\\ fun HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, databasePool: DatabasePool = RealDatabasePool) fun HibernateModule (qualifier: KClass <out Annotation >, readerQualifier: KClass <out Annotation >, cluster: DataSourceClusterConfig, databasePool: DatabasePool = RealDatabasePool) fun HibernateModule (qualifier: KClass <out Annotation >, config: DataSourceConfig, readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig?, databasePool: DatabasePool = RealDatabasePool)","title":"HibernateModule"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/config/","text":"// misk-hibernate / misk.hibernate / HibernateModule / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/database-pool/","text":"// misk-hibernate / misk.hibernate / HibernateModule / databasePool databasePool \u00b6 [jvm]\\ val databasePool : DatabasePool","title":"databasePool - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/database-pool/#databasepool","text":"[jvm]\\ val databasePool : DatabasePool","title":"databasePool"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/reader-config/","text":"// misk-hibernate / misk.hibernate / HibernateModule / readerConfig readerConfig \u00b6 [jvm]\\ val readerConfig : DataSourceConfig?","title":"readerConfig - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-hibernate-module/reader-config/#readerconfig","text":"[jvm]\\ val readerConfig : DataSourceConfig?","title":"readerConfig"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/","text":"// misk-hibernate / misk.hibernate / Id Id \u00b6 [jvm]\\ data class Id < T : DbEntity < T >>(id: Long ) : Serializable , Comparable < Id < T >> Type-safe persistent identifier, mapped to a long column. Constructors \u00b6 Id [jvm] fun Id (id: Long ) Functions \u00b6 Name Summary compareTo [jvm] open operator override fun compareTo (other: Id < T >): Int shardKey [jvm] fun shardKey (): Shard.Key toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary id [jvm] val id : Long","title":"Id - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/#id","text":"[jvm]\\ data class Id < T : DbEntity < T >>(id: Long ) : Serializable , Comparable < Id < T >> Type-safe persistent identifier, mapped to a long column.","title":"Id"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/#constructors","text":"Id [jvm] fun Id (id: Long )","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/#functions","text":"Name Summary compareTo [jvm] open operator override fun compareTo (other: Id < T >): Int shardKey [jvm] fun shardKey (): Shard.Key toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/#properties","text":"Name Summary id [jvm] val id : Long","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/-id/","text":"// misk-hibernate / misk.hibernate / Id / Id Id \u00b6 [jvm]\\ fun Id (id: Long )","title":"Id - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/-id/#id","text":"[jvm]\\ fun Id (id: Long )","title":"Id"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/compare-to/","text":"// misk-hibernate / misk.hibernate / Id / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: Id < T >): Int","title":"compareTo - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: Id < T >): Int","title":"compareTo"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/id/","text":"// misk-hibernate / misk.hibernate / Id / id id \u00b6 [jvm]\\ val id : Long","title":"id - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/id/#id","text":"[jvm]\\ val id : Long","title":"id"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/shard-key/","text":"// misk-hibernate / misk.hibernate / Id / shardKey shardKey \u00b6 [jvm]\\ fun shardKey (): Shard.Key","title":"shardKey - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/shard-key/#shardkey","text":"[jvm]\\ fun shardKey (): Shard.Key","title":"shardKey"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/to-string/","text":"// misk-hibernate / misk.hibernate / Id / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/","text":"// misk-hibernate / misk.hibernate / IdType IdType \u00b6 [jvm]\\ class IdType : UserType, ResultSetIdentifierConsumer Binds Id<*> in the DB to a bigint in MySQL. Constructors \u00b6 IdType [jvm] fun IdType () Functions \u00b6 Name Summary assemble [jvm] open override fun assemble (cached: Serializable , owner: Any ?): Any consumeIdentifier [jvm] open override fun consumeIdentifier (resultSet: ResultSet ): Serializable deepCopy [jvm] open override fun deepCopy (value: Any ?): Any ? disassemble [jvm] open override fun disassemble (value: Any ?): Long equals [jvm] open override fun equals (x: Any ?, y: Any ?): Boolean hashCode [jvm] open override fun hashCode (x: Any ?): Int isMutable [jvm] open override fun isMutable (): Boolean nullSafeGet [jvm] open override fun nullSafeGet (rs: ResultSet , names: Array <out String >, session: SharedSessionContractImplementor?, owner: Any ?): Any ? nullSafeSet [jvm] open override fun nullSafeSet (st: PreparedStatement , value: Any ?, index: Int , session: SharedSessionContractImplementor?) replace [jvm] open override fun replace (original: Any , target: Any , owner: Any ?): Any returnedClass [jvm] open override fun returnedClass (): Class < Id <*>> sqlTypes [jvm] open override fun sqlTypes (): IntArray","title":"IdType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/#idtype","text":"[jvm]\\ class IdType : UserType, ResultSetIdentifierConsumer Binds Id<*> in the DB to a bigint in MySQL.","title":"IdType"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/#constructors","text":"IdType [jvm] fun IdType ()","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/#functions","text":"Name Summary assemble [jvm] open override fun assemble (cached: Serializable , owner: Any ?): Any consumeIdentifier [jvm] open override fun consumeIdentifier (resultSet: ResultSet ): Serializable deepCopy [jvm] open override fun deepCopy (value: Any ?): Any ? disassemble [jvm] open override fun disassemble (value: Any ?): Long equals [jvm] open override fun equals (x: Any ?, y: Any ?): Boolean hashCode [jvm] open override fun hashCode (x: Any ?): Int isMutable [jvm] open override fun isMutable (): Boolean nullSafeGet [jvm] open override fun nullSafeGet (rs: ResultSet , names: Array <out String >, session: SharedSessionContractImplementor?, owner: Any ?): Any ? nullSafeSet [jvm] open override fun nullSafeSet (st: PreparedStatement , value: Any ?, index: Int , session: SharedSessionContractImplementor?) replace [jvm] open override fun replace (original: Any , target: Any , owner: Any ?): Any returnedClass [jvm] open override fun returnedClass (): Class < Id <*>> sqlTypes [jvm] open override fun sqlTypes (): IntArray","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/-id-type/","text":"// misk-hibernate / misk.hibernate / IdType / IdType IdType \u00b6 [jvm]\\ fun IdType ()","title":"IdType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/-id-type/#idtype","text":"[jvm]\\ fun IdType ()","title":"IdType"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/assemble/","text":"// misk-hibernate / misk.hibernate / IdType / assemble assemble \u00b6 [jvm]\\ open override fun assemble (cached: Serializable , owner: Any ?): Any","title":"assemble - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/assemble/#assemble","text":"[jvm]\\ open override fun assemble (cached: Serializable , owner: Any ?): Any","title":"assemble"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/consume-identifier/","text":"// misk-hibernate / misk.hibernate / IdType / consumeIdentifier consumeIdentifier \u00b6 [jvm]\\ open override fun consumeIdentifier (resultSet: ResultSet ): Serializable","title":"consumeIdentifier - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/consume-identifier/#consumeidentifier","text":"[jvm]\\ open override fun consumeIdentifier (resultSet: ResultSet ): Serializable","title":"consumeIdentifier"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/deep-copy/","text":"// misk-hibernate / misk.hibernate / IdType / deepCopy deepCopy \u00b6 [jvm]\\ open override fun deepCopy (value: Any ?): Any ?","title":"deepCopy - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/deep-copy/#deepcopy","text":"[jvm]\\ open override fun deepCopy (value: Any ?): Any ?","title":"deepCopy"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/disassemble/","text":"// misk-hibernate / misk.hibernate / IdType / disassemble disassemble \u00b6 [jvm]\\ open override fun disassemble (value: Any ?): Long","title":"disassemble - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/disassemble/#disassemble","text":"[jvm]\\ open override fun disassemble (value: Any ?): Long","title":"disassemble"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/equals/","text":"// misk-hibernate / misk.hibernate / IdType / equals equals \u00b6 [jvm]\\ open override fun equals (x: Any ?, y: Any ?): Boolean","title":"equals - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/equals/#equals","text":"[jvm]\\ open override fun equals (x: Any ?, y: Any ?): Boolean","title":"equals"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/hash-code/","text":"// misk-hibernate / misk.hibernate / IdType / hashCode hashCode \u00b6 [jvm]\\ open override fun hashCode (x: Any ?): Int","title":"hashCode - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/hash-code/#hashcode","text":"[jvm]\\ open override fun hashCode (x: Any ?): Int","title":"hashCode"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/is-mutable/","text":"// misk-hibernate / misk.hibernate / IdType / isMutable isMutable \u00b6 [jvm]\\ open override fun isMutable (): Boolean","title":"isMutable - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/is-mutable/#ismutable","text":"[jvm]\\ open override fun isMutable (): Boolean","title":"isMutable"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/null-safe-get/","text":"// misk-hibernate / misk.hibernate / IdType / nullSafeGet nullSafeGet \u00b6 [jvm]\\ open override fun nullSafeGet (rs: ResultSet , names: Array <out String >, session: SharedSessionContractImplementor?, owner: Any ?): Any ?","title":"nullSafeGet - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/null-safe-get/#nullsafeget","text":"[jvm]\\ open override fun nullSafeGet (rs: ResultSet , names: Array <out String >, session: SharedSessionContractImplementor?, owner: Any ?): Any ?","title":"nullSafeGet"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/null-safe-set/","text":"// misk-hibernate / misk.hibernate / IdType / nullSafeSet nullSafeSet \u00b6 [jvm]\\ open override fun nullSafeSet (st: PreparedStatement , value: Any ?, index: Int , session: SharedSessionContractImplementor?)","title":"nullSafeSet - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/null-safe-set/#nullsafeset","text":"[jvm]\\ open override fun nullSafeSet (st: PreparedStatement , value: Any ?, index: Int , session: SharedSessionContractImplementor?)","title":"nullSafeSet"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/replace/","text":"// misk-hibernate / misk.hibernate / IdType / replace replace \u00b6 [jvm]\\ open override fun replace (original: Any , target: Any , owner: Any ?): Any","title":"replace - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/replace/#replace","text":"[jvm]\\ open override fun replace (original: Any , target: Any , owner: Any ?): Any","title":"replace"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/returned-class/","text":"// misk-hibernate / misk.hibernate / IdType / returnedClass returnedClass \u00b6 [jvm]\\ open override fun returnedClass (): Class < Id <*>>","title":"returnedClass - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/returned-class/#returnedclass","text":"[jvm]\\ open override fun returnedClass (): Class < Id <*>>","title":"returnedClass"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/sql-types/","text":"// misk-hibernate / misk.hibernate / IdType / sqlTypes sqlTypes \u00b6 [jvm]\\ open override fun sqlTypes (): IntArray","title":"sqlTypes - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-id-type/sql-types/#sqltypes","text":"[jvm]\\ open override fun sqlTypes (): IntArray","title":"sqlTypes"},{"location":"0.x/misk-hibernate/misk.hibernate/-json-column/","text":"// misk-hibernate / misk.hibernate / JsonColumn JsonColumn \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class JsonColumn Put this on a column field to get Hibernate to persist it as JSON using Moshi. It will use the injector\u2019s configured Moshi instance. Use misk.moshi.MoshiModule to customize. It is an error to put this annotation on a mutable field. We don\u2019t defensively copy these when we read them out of the database. Constructors \u00b6 JsonColumn [jvm] fun JsonColumn ()","title":"JsonColumn - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-json-column/#jsoncolumn","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class JsonColumn Put this on a column field to get Hibernate to persist it as JSON using Moshi. It will use the injector\u2019s configured Moshi instance. Use misk.moshi.MoshiModule to customize. It is an error to put this annotation on a mutable field. We don\u2019t defensively copy these when we read them out of the database.","title":"JsonColumn"},{"location":"0.x/misk-hibernate/misk.hibernate/-json-column/#constructors","text":"JsonColumn [jvm] fun JsonColumn ()","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-json-column/-json-column/","text":"// misk-hibernate / misk.hibernate / JsonColumn / JsonColumn JsonColumn \u00b6 [jvm]\\ fun JsonColumn ()","title":"JsonColumn - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-json-column/-json-column/#jsoncolumn","text":"[jvm]\\ fun JsonColumn ()","title":"JsonColumn"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/","text":"// misk-hibernate / misk.hibernate / Operator Operator \u00b6 [jvm]\\ enum Operator : Enum < Operator > Entries \u00b6 IS_NULL [jvm] IS_NULL () a IS NULL IS_NOT_NULL [jvm] IS_NOT_NULL () a IS NOT NULL NOT_IN [jvm] NOT_IN () a NOT IN (b1, b2, b3, \u2026) IN [jvm] IN () a IN (b1, b2, b3, \u2026) NE [jvm] NE () a != b GT [jvm] GT () a > b GE [jvm] GE () a >= b EQ_OR_IS_NULL [jvm] EQ_OR_IS_NULL () a = b if b is not null, a is null if b is null EQ [jvm] EQ () a = b LE [jvm] LE () a <= b LT [jvm] LT () a < b Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Operator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/#operator","text":"[jvm]\\ enum Operator : Enum < Operator >","title":"Operator"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/#entries","text":"IS_NULL [jvm] IS_NULL () a IS NULL IS_NOT_NULL [jvm] IS_NOT_NULL () a IS NOT NULL NOT_IN [jvm] NOT_IN () a NOT IN (b1, b2, b3, \u2026) IN [jvm] IN () a IN (b1, b2, b3, \u2026) NE [jvm] NE () a != b GT [jvm] GT () a > b GE [jvm] GE () a >= b EQ_OR_IS_NULL [jvm] EQ_OR_IS_NULL () a = b if b is not null, a is null if b is null EQ [jvm] EQ () a = b LE [jvm] LE () a <= b LT [jvm] LT () a < b","title":"Entries"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-e-q/","text":"// misk-hibernate / misk.hibernate / Operator / EQ EQ \u00b6 [jvm]\\ EQ () a = b Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"EQ - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-e-q/#eq","text":"[jvm]\\ EQ () a = b","title":"EQ"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-e-q/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-e-q_-o-r_-i-s_-n-u-l-l/","text":"// misk-hibernate / misk.hibernate / Operator / EQ_OR_IS_NULL EQ_OR_IS_NULL \u00b6 [jvm]\\ EQ_OR_IS_NULL () a = b if b is not null, a is null if b is null Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"EQ_OR_IS_NULL - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-e-q_-o-r_-i-s_-n-u-l-l/#eq_or_is_null","text":"[jvm]\\ EQ_OR_IS_NULL () a = b if b is not null, a is null if b is null","title":"EQ_OR_IS_NULL"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-e-q_-o-r_-i-s_-n-u-l-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-g-e/","text":"// misk-hibernate / misk.hibernate / Operator / GE GE \u00b6 [jvm]\\ GE () a >= b Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"GE - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-g-e/#ge","text":"[jvm]\\ GE () a >= b","title":"GE"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-g-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-g-t/","text":"// misk-hibernate / misk.hibernate / Operator / GT GT \u00b6 [jvm]\\ GT () a > b Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"GT - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-g-t/#gt","text":"[jvm]\\ GT () a > b","title":"GT"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-g-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-n/","text":"// misk-hibernate / misk.hibernate / Operator / IN IN \u00b6 [jvm]\\ IN () a IN (b1, b2, b3, \u2026) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"IN - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-n/#in","text":"[jvm]\\ IN () a IN (b1, b2, b3, \u2026)","title":"IN"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-s_-n-o-t_-n-u-l-l/","text":"// misk-hibernate / misk.hibernate / Operator / IS_NOT_NULL IS_NOT_NULL \u00b6 [jvm]\\ IS_NOT_NULL () a IS NOT NULL Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"IS_NOT_NULL - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-s_-n-o-t_-n-u-l-l/#is_not_null","text":"[jvm]\\ IS_NOT_NULL () a IS NOT NULL","title":"IS_NOT_NULL"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-s_-n-o-t_-n-u-l-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-s_-n-u-l-l/","text":"// misk-hibernate / misk.hibernate / Operator / IS_NULL IS_NULL \u00b6 [jvm]\\ IS_NULL () a IS NULL Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"IS_NULL - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-s_-n-u-l-l/#is_null","text":"[jvm]\\ IS_NULL () a IS NULL","title":"IS_NULL"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-i-s_-n-u-l-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-l-e/","text":"// misk-hibernate / misk.hibernate / Operator / LE LE \u00b6 [jvm]\\ LE () a <= b Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"LE - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-l-e/#le","text":"[jvm]\\ LE () a <= b","title":"LE"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-l-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-l-t/","text":"// misk-hibernate / misk.hibernate / Operator / LT LT \u00b6 [jvm]\\ LT () a < b Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"LT - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-l-t/#lt","text":"[jvm]\\ LT () a < b","title":"LT"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-l-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-n-e/","text":"// misk-hibernate / misk.hibernate / Operator / NE NE \u00b6 [jvm]\\ NE () a != b Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"NE - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-n-e/#ne","text":"[jvm]\\ NE () a != b","title":"NE"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-n-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-n-o-t_-i-n/","text":"// misk-hibernate / misk.hibernate / Operator / NOT_IN NOT_IN \u00b6 [jvm]\\ NOT_IN () a NOT IN (b1, b2, b3, \u2026) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"NOT_IN - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-n-o-t_-i-n/#not_in","text":"[jvm]\\ NOT_IN () a NOT IN (b1, b2, b3, \u2026)","title":"NOT_IN"},{"location":"0.x/misk-hibernate/misk.hibernate/-operator/-n-o-t_-i-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-or-builder/","text":"// misk-hibernate / misk.hibernate / OrBuilder OrBuilder \u00b6 [jvm]\\ interface OrBuilder < Q : Query <*>> This functional interface accepts a set of options. Each option lambda is executed within the scope of a query. It is inappropriate to call methods like list() and uniqueResult() on this query. Functions \u00b6 Name Summary option [jvm] abstract fun option (lambda: Q .() -> Unit )","title":"OrBuilder - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-or-builder/#orbuilder","text":"[jvm]\\ interface OrBuilder < Q : Query <*>> This functional interface accepts a set of options. Each option lambda is executed within the scope of a query. It is inappropriate to call methods like list() and uniqueResult() on this query.","title":"OrBuilder"},{"location":"0.x/misk-hibernate/misk.hibernate/-or-builder/#functions","text":"Name Summary option [jvm] abstract fun option (lambda: Q .() -> Unit )","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-or-builder/option/","text":"// misk-hibernate / misk.hibernate / OrBuilder / option option \u00b6 [jvm]\\ abstract fun option (lambda: Q .() -> Unit )","title":"option - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-or-builder/option/#option","text":"[jvm]\\ abstract fun option (lambda: Q .() -> Unit )","title":"option"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/","text":"// misk-hibernate / misk.hibernate / Order Order \u00b6 [jvm]\\ annotation class Order (path: String , asc: Boolean ) Annotates a function on a subinterface of Query to indicate which columns to order the the selected columns. Constructors \u00b6 Order [jvm] fun Order (path: String , asc: Boolean = true) Properties \u00b6 Name Summary asc [jvm] val asc : Boolean = true path [jvm] val path : String","title":"Order - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/#order","text":"[jvm]\\ annotation class Order (path: String , asc: Boolean ) Annotates a function on a subinterface of Query to indicate which columns to order the the selected columns.","title":"Order"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/#constructors","text":"Order [jvm] fun Order (path: String , asc: Boolean = true)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/#properties","text":"Name Summary asc [jvm] val asc : Boolean = true path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/-order/","text":"// misk-hibernate / misk.hibernate / Order / Order Order \u00b6 [jvm]\\ fun Order (path: String , asc: Boolean = true)","title":"Order - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/-order/#order","text":"[jvm]\\ fun Order (path: String , asc: Boolean = true)","title":"Order"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/asc/","text":"// misk-hibernate / misk.hibernate / Order / asc asc \u00b6 [jvm]\\ val asc : Boolean = true","title":"asc - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/asc/#asc","text":"[jvm]\\ val asc : Boolean = true","title":"asc"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/path/","text":"// misk-hibernate / misk.hibernate / Order / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-order/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/","text":"// misk-hibernate / misk.hibernate / Path Path \u00b6 [jvm]\\ data class Path (schema: String ?, table: String ?, column: String ?) Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary column [jvm] val column : String ? schema [jvm] val schema : String ? table [jvm] val table : String ?","title":"Path - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/#path","text":"[jvm]\\ data class Path (schema: String ?, table: String ?, column: String ?)","title":"Path"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/#properties","text":"Name Summary column [jvm] val column : String ? schema [jvm] val schema : String ? table [jvm] val table : String ?","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/-path/","text":"// misk-hibernate / misk.hibernate / Path / Path Path \u00b6 [jvm]\\ fun Path (schema: String ?, table: String ?, column: String ?)","title":"Path - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/-path/#path","text":"[jvm]\\ fun Path (schema: String ?, table: String ?, column: String ?)","title":"Path"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/column/","text":"// misk-hibernate / misk.hibernate / Path / column column \u00b6 [jvm]\\ val column : String ?","title":"column - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/column/#column","text":"[jvm]\\ val column : String ?","title":"column"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/schema/","text":"// misk-hibernate / misk.hibernate / Path / schema schema \u00b6 [jvm]\\ val schema : String ?","title":"schema - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/schema/#schema","text":"[jvm]\\ val schema : String ?","title":"schema"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/table/","text":"// misk-hibernate / misk.hibernate / Path / table table \u00b6 [jvm]\\ val table : String ?","title":"table - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/table/#table","text":"[jvm]\\ val table : String ?","title":"table"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/to-string/","text":"// misk-hibernate / misk.hibernate / Path / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-path/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-hibernate/misk.hibernate/-post-commit-hook-failed-exception/","text":"// misk-hibernate / misk.hibernate / PostCommitHookFailedException PostCommitHookFailedException \u00b6 [jvm]\\ class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook Constructors \u00b6 PostCommitHookFailedException [jvm] fun PostCommitHookFailedException (cause: Throwable ) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"PostCommitHookFailedException - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-post-commit-hook-failed-exception/#postcommithookfailedexception","text":"[jvm]\\ class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook","title":"PostCommitHookFailedException"},{"location":"0.x/misk-hibernate/misk.hibernate/-post-commit-hook-failed-exception/#constructors","text":"PostCommitHookFailedException [jvm] fun PostCommitHookFailedException (cause: Throwable )","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-post-commit-hook-failed-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-post-commit-hook-failed-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-post-commit-hook-failed-exception/-post-commit-hook-failed-exception/","text":"// misk-hibernate / misk.hibernate / PostCommitHookFailedException / PostCommitHookFailedException PostCommitHookFailedException \u00b6 [jvm]\\ fun PostCommitHookFailedException (cause: Throwable )","title":"PostCommitHookFailedException - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-post-commit-hook-failed-exception/-post-commit-hook-failed-exception/#postcommithookfailedexception","text":"[jvm]\\ fun PostCommitHookFailedException (cause: Throwable )","title":"PostCommitHookFailedException"},{"location":"0.x/misk-hibernate/misk.hibernate/-projection/","text":"// misk-hibernate / misk.hibernate / Projection Projection \u00b6 [jvm]\\ interface Projection Marker interface for query projections.","title":"Projection - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-projection/#projection","text":"[jvm]\\ interface Projection Marker interface for query projections.","title":"Projection"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/","text":"// misk-hibernate / misk.hibernate / Property Property \u00b6 [jvm]\\ annotation class Property (path: String ) Annotates a parameter of a Projection data class to indicate which column (or path of columns) to populate the parameter with. Constructors \u00b6 Property [jvm] fun Property (path: String ) Properties \u00b6 Name Summary path [jvm] val path : String","title":"Property - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/#property","text":"[jvm]\\ annotation class Property (path: String ) Annotates a parameter of a Projection data class to indicate which column (or path of columns) to populate the parameter with.","title":"Property"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/#constructors","text":"Property [jvm] fun Property (path: String )","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/#properties","text":"Name Summary path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/-property/","text":"// misk-hibernate / misk.hibernate / Property / Property Property \u00b6 [jvm]\\ fun Property (path: String )","title":"Property - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/-property/#property","text":"[jvm]\\ fun Property (path: String )","title":"Property"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/path/","text":"// misk-hibernate / misk.hibernate / Property / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-property/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-hibernate/misk.hibernate/-proto-column/","text":"// misk-hibernate / misk.hibernate / ProtoColumn ProtoColumn \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class ProtoColumn Put this on a column field for a class generated by Wire to get Hibernate to persist with protobuf serialization. There is no defensive copy when reading from the database as protobufs are assumed to be immutable. Constructors \u00b6 ProtoColumn [jvm] fun ProtoColumn ()","title":"ProtoColumn - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-proto-column/#protocolumn","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class ProtoColumn Put this on a column field for a class generated by Wire to get Hibernate to persist with protobuf serialization. There is no defensive copy when reading from the database as protobufs are assumed to be immutable.","title":"ProtoColumn"},{"location":"0.x/misk-hibernate/misk.hibernate/-proto-column/#constructors","text":"ProtoColumn [jvm] fun ProtoColumn ()","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-proto-column/-proto-column/","text":"// misk-hibernate / misk.hibernate / ProtoColumn / ProtoColumn ProtoColumn \u00b6 [jvm]\\ fun ProtoColumn ()","title":"ProtoColumn - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-proto-column/-proto-column/#protocolumn","text":"[jvm]\\ fun ProtoColumn ()","title":"ProtoColumn"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/","text":"// misk-hibernate / misk.hibernate / Query Query \u00b6 [jvm]\\ interface Query < T > Base class for SQL queries. Types \u00b6 Name Summary Factory [jvm] interface Factory Creates instances of queries. Functions \u00b6 Name Summary addJpaConstraint [jvm] abstract fun addJpaConstraint (block: (root: Root<*>, builder: CriteriaBuilder) -> Predicate) Constrain a query by operating directly on the JPA criteria builder. clone [jvm] abstract fun < Q : Query <*>> clone (): Q count [jvm] abstract fun count (session: Session ): Long Returns the number of rows that match the query. delete [jvm] abstract fun delete (session: Session ): Int Returns the number of entities deleted. disableCheck [jvm] abstract fun disableCheck (check: Check ) dynamicAddConstraint [jvm] abstract fun dynamicAddConstraint (path: String , operator: Operator , value: Any ? = null) Constrain a query using a path known only at runtime. dynamicAddFetch [jvm] abstract fun dynamicAddFetch (path: String , joinType: JoinType) Fetch the given path as a join, using the given joinType dynamicAddOrder [jvm] abstract fun dynamicAddOrder (path: String , asc: Boolean ) dynamicList [jvm] abstract fun dynamicList (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < List < Any ?>> Manual projections are returned as a list of rows containing a list of cells. [jvm] abstract fun dynamicList (session: Session , projectedPaths: List < String >): List < List < Any ?>> dynamicUniqueResult [jvm] abstract fun dynamicUniqueResult (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < Any ?>? Manual projections are returned as a list of cells. Returns null if there were no results. [jvm] abstract fun dynamicUniqueResult (session: Session , projectedPaths: List < String >): List < Any ?>? list [jvm] abstract fun list (session: Session ): List < T > newOrBuilder [jvm] abstract fun < T : Query <*>> newOrBuilder (): OrBuilder < T > uniqueResult [jvm] abstract fun uniqueResult (session: Session ): T ? Asserts that there is either zero or one results. Properties \u00b6 Name Summary firstResult [jvm] abstract var firstResult : Int Set the first row to retrieve. The default is 0. maxRows [jvm] abstract var maxRows : Int How many rows to return. Must be -1 or in range 1..10_000.","title":"Query - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/#query","text":"[jvm]\\ interface Query < T > Base class for SQL queries.","title":"Query"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/#types","text":"Name Summary Factory [jvm] interface Factory Creates instances of queries.","title":"Types"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/#functions","text":"Name Summary addJpaConstraint [jvm] abstract fun addJpaConstraint (block: (root: Root<*>, builder: CriteriaBuilder) -> Predicate) Constrain a query by operating directly on the JPA criteria builder. clone [jvm] abstract fun < Q : Query <*>> clone (): Q count [jvm] abstract fun count (session: Session ): Long Returns the number of rows that match the query. delete [jvm] abstract fun delete (session: Session ): Int Returns the number of entities deleted. disableCheck [jvm] abstract fun disableCheck (check: Check ) dynamicAddConstraint [jvm] abstract fun dynamicAddConstraint (path: String , operator: Operator , value: Any ? = null) Constrain a query using a path known only at runtime. dynamicAddFetch [jvm] abstract fun dynamicAddFetch (path: String , joinType: JoinType) Fetch the given path as a join, using the given joinType dynamicAddOrder [jvm] abstract fun dynamicAddOrder (path: String , asc: Boolean ) dynamicList [jvm] abstract fun dynamicList (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < List < Any ?>> Manual projections are returned as a list of rows containing a list of cells. [jvm] abstract fun dynamicList (session: Session , projectedPaths: List < String >): List < List < Any ?>> dynamicUniqueResult [jvm] abstract fun dynamicUniqueResult (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < Any ?>? Manual projections are returned as a list of cells. Returns null if there were no results. [jvm] abstract fun dynamicUniqueResult (session: Session , projectedPaths: List < String >): List < Any ?>? list [jvm] abstract fun list (session: Session ): List < T > newOrBuilder [jvm] abstract fun < T : Query <*>> newOrBuilder (): OrBuilder < T > uniqueResult [jvm] abstract fun uniqueResult (session: Session ): T ? Asserts that there is either zero or one results.","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/#properties","text":"Name Summary firstResult [jvm] abstract var firstResult : Int Set the first row to retrieve. The default is 0. maxRows [jvm] abstract var maxRows : Int How many rows to return. Must be -1 or in range 1..10_000.","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/add-jpa-constraint/","text":"// misk-hibernate / misk.hibernate / Query / addJpaConstraint addJpaConstraint \u00b6 [jvm]\\ abstract fun addJpaConstraint (block: (root: Root<*>, builder: CriteriaBuilder) -> Predicate) Constrain a query by operating directly on the JPA criteria builder.","title":"addJpaConstraint - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/add-jpa-constraint/#addjpaconstraint","text":"[jvm]\\ abstract fun addJpaConstraint (block: (root: Root<*>, builder: CriteriaBuilder) -> Predicate) Constrain a query by operating directly on the JPA criteria builder.","title":"addJpaConstraint"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/clone/","text":"// misk-hibernate / misk.hibernate / Query / clone clone \u00b6 [jvm]\\ abstract fun < Q : Query <*>> clone (): Q","title":"clone - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/clone/#clone","text":"[jvm]\\ abstract fun < Q : Query <*>> clone (): Q","title":"clone"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/count/","text":"// misk-hibernate / misk.hibernate / Query / count count \u00b6 [jvm]\\ abstract fun count (session: Session ): Long Returns the number of rows that match the query. Warning: The performance of this operation is comparable to a SELECT. MySQL scans all of the counted rows. A query that returns a count of 5000 is typically 10 times slower than a query that returns a count of 500.","title":"count - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/count/#count","text":"[jvm]\\ abstract fun count (session: Session ): Long Returns the number of rows that match the query. Warning: The performance of this operation is comparable to a SELECT. MySQL scans all of the counted rows. A query that returns a count of 5000 is typically 10 times slower than a query that returns a count of 500.","title":"count"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/delete/","text":"// misk-hibernate / misk.hibernate / Query / delete delete \u00b6 [jvm]\\ abstract fun delete (session: Session ): Int Returns the number of entities deleted.","title":"delete - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/delete/#delete","text":"[jvm]\\ abstract fun delete (session: Session ): Int Returns the number of entities deleted.","title":"delete"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/disable-check/","text":"// misk-hibernate / misk.hibernate / Query / disableCheck disableCheck \u00b6 [jvm]\\ abstract fun disableCheck (check: Check )","title":"disableCheck - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/disable-check/#disablecheck","text":"[jvm]\\ abstract fun disableCheck (check: Check )","title":"disableCheck"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-add-constraint/","text":"// misk-hibernate / misk.hibernate / Query / dynamicAddConstraint dynamicAddConstraint \u00b6 [jvm]\\ abstract fun dynamicAddConstraint (path: String , operator: Operator , value: Any ? = null) Constrain a query using a path known only at runtime.","title":"dynamicAddConstraint - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-add-constraint/#dynamicaddconstraint","text":"[jvm]\\ abstract fun dynamicAddConstraint (path: String , operator: Operator , value: Any ? = null) Constrain a query using a path known only at runtime.","title":"dynamicAddConstraint"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-add-fetch/","text":"// misk-hibernate / misk.hibernate / Query / dynamicAddFetch dynamicAddFetch \u00b6 [jvm]\\ abstract fun dynamicAddFetch (path: String , joinType: JoinType) Fetch the given path as a join, using the given joinType","title":"dynamicAddFetch - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-add-fetch/#dynamicaddfetch","text":"[jvm]\\ abstract fun dynamicAddFetch (path: String , joinType: JoinType) Fetch the given path as a join, using the given joinType","title":"dynamicAddFetch"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-add-order/","text":"// misk-hibernate / misk.hibernate / Query / dynamicAddOrder dynamicAddOrder \u00b6 [jvm]\\ abstract fun dynamicAddOrder (path: String , asc: Boolean )","title":"dynamicAddOrder - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-add-order/#dynamicaddorder","text":"[jvm]\\ abstract fun dynamicAddOrder (path: String , asc: Boolean )","title":"dynamicAddOrder"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-list/","text":"// misk-hibernate / misk.hibernate / Query / dynamicList dynamicList \u00b6 [jvm]\\ abstract fun dynamicList (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < List < Any ?>> Manual projections are returned as a list of rows containing a list of cells. [jvm]\\ abstract fun dynamicList (session: Session , projectedPaths: List < String >): List < List < Any ?>>","title":"dynamicList - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-list/#dynamiclist","text":"[jvm]\\ abstract fun dynamicList (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < List < Any ?>> Manual projections are returned as a list of rows containing a list of cells. [jvm]\\ abstract fun dynamicList (session: Session , projectedPaths: List < String >): List < List < Any ?>>","title":"dynamicList"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-unique-result/","text":"// misk-hibernate / misk.hibernate / Query / dynamicUniqueResult dynamicUniqueResult \u00b6 [jvm]\\ abstract fun dynamicUniqueResult (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < Any ?>? Manual projections are returned as a list of cells. Returns null if there were no results. [jvm]\\ abstract fun dynamicUniqueResult (session: Session , projectedPaths: List < String >): List < Any ?>?","title":"dynamicUniqueResult - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/dynamic-unique-result/#dynamicuniqueresult","text":"[jvm]\\ abstract fun dynamicUniqueResult (session: Session , selection: (CriteriaBuilder, Root< T >) -> Selection<out Any >): List < Any ?>? Manual projections are returned as a list of cells. Returns null if there were no results. [jvm]\\ abstract fun dynamicUniqueResult (session: Session , projectedPaths: List < String >): List < Any ?>?","title":"dynamicUniqueResult"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/first-result/","text":"// misk-hibernate / misk.hibernate / Query / firstResult firstResult \u00b6 [jvm]\\ abstract var firstResult : Int Set the first row to retrieve. The default is 0.","title":"firstResult - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/first-result/#firstresult","text":"[jvm]\\ abstract var firstResult : Int Set the first row to retrieve. The default is 0.","title":"firstResult"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/list/","text":"// misk-hibernate / misk.hibernate / Query / list list \u00b6 [jvm]\\ abstract fun list (session: Session ): List < T >","title":"list - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/list/#list","text":"[jvm]\\ abstract fun list (session: Session ): List < T >","title":"list"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/max-rows/","text":"// misk-hibernate / misk.hibernate / Query / maxRows maxRows \u00b6 [jvm]\\ abstract var maxRows : Int How many rows to return. Must be -1 or in range 1..10_000.","title":"maxRows - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/max-rows/#maxrows","text":"[jvm]\\ abstract var maxRows : Int How many rows to return. Must be -1 or in range 1..10_000.","title":"maxRows"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/new-or-builder/","text":"// misk-hibernate / misk.hibernate / Query / newOrBuilder newOrBuilder \u00b6 [jvm]\\ abstract fun < T : Query <*>> newOrBuilder (): OrBuilder < T >","title":"newOrBuilder - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/new-or-builder/#neworbuilder","text":"[jvm]\\ abstract fun < T : Query <*>> newOrBuilder (): OrBuilder < T >","title":"newOrBuilder"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/unique-result/","text":"// misk-hibernate / misk.hibernate / Query / uniqueResult uniqueResult \u00b6 [jvm]\\ abstract fun uniqueResult (session: Session ): T ? Asserts that there is either zero or one results.","title":"uniqueResult - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/unique-result/#uniqueresult","text":"[jvm]\\ abstract fun uniqueResult (session: Session ): T ? Asserts that there is either zero or one results.","title":"uniqueResult"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/","text":"// misk-hibernate / misk.hibernate / Query / Factory Factory \u00b6 [jvm]\\ interface Factory Creates instances of queries. Functions \u00b6 Name Summary dynamicQuery [jvm] abstract fun < E : DbEntity < E >> dynamicQuery (entityClass: KClass < E >): Query < E > newQuery [jvm] abstract fun < Q : Query <*>> newQuery (queryClass: KClass < Q >): Q Extensions \u00b6 Name Summary newQuery [jvm] inline fun < T : Query <*>> Query.Factory . newQuery (): T","title":"Factory - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/#factory","text":"[jvm]\\ interface Factory Creates instances of queries.","title":"Factory"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/#functions","text":"Name Summary dynamicQuery [jvm] abstract fun < E : DbEntity < E >> dynamicQuery (entityClass: KClass < E >): Query < E > newQuery [jvm] abstract fun < Q : Query <*>> newQuery (queryClass: KClass < Q >): Q","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/#extensions","text":"Name Summary newQuery [jvm] inline fun < T : Query <*>> Query.Factory . newQuery (): T","title":"Extensions"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/dynamic-query/","text":"// misk-hibernate / misk.hibernate / Query / Factory / dynamicQuery dynamicQuery \u00b6 [jvm]\\ abstract fun < E : DbEntity < E >> dynamicQuery (entityClass: KClass < E >): Query < E >","title":"dynamicQuery - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/dynamic-query/#dynamicquery","text":"[jvm]\\ abstract fun < E : DbEntity < E >> dynamicQuery (entityClass: KClass < E >): Query < E >","title":"dynamicQuery"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/new-query/","text":"// misk-hibernate / misk.hibernate / Query / Factory / newQuery newQuery \u00b6 [jvm]\\ abstract fun < Q : Query <*>> newQuery (queryClass: KClass < Q >): Q","title":"newQuery - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-query/-factory/new-query/#newquery","text":"[jvm]\\ abstract fun < Q : Query <*>> newQuery (queryClass: KClass < Q >): Q","title":"newQuery"},{"location":"0.x/misk-hibernate/misk.hibernate/-retry-transaction-exception/","text":"// misk-hibernate / misk.hibernate / RetryTransactionException RetryTransactionException \u00b6 [jvm]\\ class RetryTransactionException (message: String ?, cause: Throwable ?) : Exception Thrown to explicitly trigger a retry, subject to retry limits and config such as noRetries(). Constructors \u00b6 RetryTransactionException [jvm] fun RetryTransactionException (message: String ? = null, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"RetryTransactionException - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-retry-transaction-exception/#retrytransactionexception","text":"[jvm]\\ class RetryTransactionException (message: String ?, cause: Throwable ?) : Exception Thrown to explicitly trigger a retry, subject to retry limits and config such as noRetries().","title":"RetryTransactionException"},{"location":"0.x/misk-hibernate/misk.hibernate/-retry-transaction-exception/#constructors","text":"RetryTransactionException [jvm] fun RetryTransactionException (message: String ? = null, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-retry-transaction-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-retry-transaction-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-retry-transaction-exception/-retry-transaction-exception/","text":"// misk-hibernate / misk.hibernate / RetryTransactionException / RetryTransactionException RetryTransactionException \u00b6 [jvm]\\ fun RetryTransactionException (message: String ? = null, cause: Throwable ? = null)","title":"RetryTransactionException - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-retry-transaction-exception/-retry-transaction-exception/#retrytransactionexception","text":"[jvm]\\ fun RetryTransactionException (message: String ? = null, cause: Throwable ? = null)","title":"RetryTransactionException"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/","text":"// misk-hibernate / misk.hibernate / SecretColumn SecretColumn \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class SecretColumn (keyName: String , indexable: Boolean ) SecretColumn is an annotation used to get Hibernate to encrypt a field before writing it to the database. The keyName string is used to specify the name of the key to be used to encrypt and decrypt the value. The indexable attribute controls whether or not this data will be able to be indexed, defaulted to true. This uses deterministic encryption: encrypting the same plaintext will produce the same ciphertext. This is weaker than non-deterministic encryption, but makes searching for encrypted values possible. If searching for ciphertexts is not something your use case requires, set indexable to false for stronger security. Install misk.crypto.CryptoModule to configure the keys the app uses. Example: In app-common.yaml: crypto:\\ keys:\\ - key_name: \u201csecretColumnKey\u201d Then, in an entity class: @Column\\ @SecretColumn(keyName = \u201csecretColumnKey\u201d)\\ var secret: String A Column annotated with SecretColumn has the following limitations: It must be declared as VARBINARY() in its respective MySQL table. For example: CREATE TABLE my_table(\\ id BIGINT NOT NULL AUTO_INCREMENT,\\ secret VARBINARY(500) It cannot be annotates with any other custom column annotations like ProtoColumn or JsonColumn . Note : The resulting ciphertext that is persisted in the database may be much larger in size than the original plaintext because it also contains some metadata. Please make sure to allocate enough space when defining the column using VARBINARY(). Constructors \u00b6 SecretColumn [jvm] fun SecretColumn (keyName: String , indexable: Boolean = true) Properties \u00b6 Name Summary indexable [jvm] val indexable : Boolean = true keyName [jvm] val keyName : String","title":"SecretColumn - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/#secretcolumn","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class SecretColumn (keyName: String , indexable: Boolean ) SecretColumn is an annotation used to get Hibernate to encrypt a field before writing it to the database. The keyName string is used to specify the name of the key to be used to encrypt and decrypt the value. The indexable attribute controls whether or not this data will be able to be indexed, defaulted to true. This uses deterministic encryption: encrypting the same plaintext will produce the same ciphertext. This is weaker than non-deterministic encryption, but makes searching for encrypted values possible. If searching for ciphertexts is not something your use case requires, set indexable to false for stronger security. Install misk.crypto.CryptoModule to configure the keys the app uses. Example: In app-common.yaml: crypto:\\ keys:\\ - key_name: \u201csecretColumnKey\u201d Then, in an entity class: @Column\\ @SecretColumn(keyName = \u201csecretColumnKey\u201d)\\ var secret: String A Column annotated with SecretColumn has the following limitations: It must be declared as VARBINARY() in its respective MySQL table. For example: CREATE TABLE my_table(\\ id BIGINT NOT NULL AUTO_INCREMENT,\\ secret VARBINARY(500) It cannot be annotates with any other custom column annotations like ProtoColumn or JsonColumn . Note : The resulting ciphertext that is persisted in the database may be much larger in size than the original plaintext because it also contains some metadata. Please make sure to allocate enough space when defining the column using VARBINARY().","title":"SecretColumn"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/#constructors","text":"SecretColumn [jvm] fun SecretColumn (keyName: String , indexable: Boolean = true)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/#properties","text":"Name Summary indexable [jvm] val indexable : Boolean = true keyName [jvm] val keyName : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/-secret-column/","text":"// misk-hibernate / misk.hibernate / SecretColumn / SecretColumn SecretColumn \u00b6 [jvm]\\ fun SecretColumn (keyName: String , indexable: Boolean = true)","title":"SecretColumn - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/-secret-column/#secretcolumn","text":"[jvm]\\ fun SecretColumn (keyName: String , indexable: Boolean = true)","title":"SecretColumn"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/indexable/","text":"// misk-hibernate / misk.hibernate / SecretColumn / indexable indexable \u00b6 [jvm]\\ val indexable : Boolean = true","title":"indexable - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/indexable/#indexable","text":"[jvm]\\ val indexable : Boolean = true","title":"indexable"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/key-name/","text":"// misk-hibernate / misk.hibernate / SecretColumn / keyName keyName \u00b6 [jvm]\\ val keyName : String","title":"keyName - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-secret-column/key-name/#keyname","text":"[jvm]\\ val keyName : String","title":"keyName"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/","text":"// misk-hibernate / misk.hibernate / Select Select \u00b6 [jvm]\\ annotation class Select (path: String ) Annotates a function on a subinterface of Query to execute a SELECT query. Functions with this annotation must return a List to fetch multiple rows results, or a regular type to fetch a unique result. Constructors \u00b6 Select [jvm] fun Select (path: String = \u201c\u201d) Properties \u00b6 Name Summary path [jvm] val path : String","title":"Select - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/#select","text":"[jvm]\\ annotation class Select (path: String ) Annotates a function on a subinterface of Query to execute a SELECT query. Functions with this annotation must return a List to fetch multiple rows results, or a regular type to fetch a unique result.","title":"Select"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/#constructors","text":"Select [jvm] fun Select (path: String = \u201c\u201d)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/#properties","text":"Name Summary path [jvm] val path : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/-select/","text":"// misk-hibernate / misk.hibernate / Select / Select Select \u00b6 [jvm]\\ fun Select (path: String = \u201c\u201d)","title":"Select - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/-select/#select","text":"[jvm]\\ fun Select (path: String = \u201c\u201d)","title":"Select"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/path/","text":"// misk-hibernate / misk.hibernate / Select / path path \u00b6 [jvm]\\ val path : String","title":"path - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-select/path/#path","text":"[jvm]\\ val path : String","title":"path"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/","text":"// misk-hibernate / misk.hibernate / Session Session \u00b6 [jvm]\\ interface Session : Session Functions \u00b6 Name Summary delete [jvm] abstract fun < T : DbEntity < T >> delete (entity: T ) disableChecks [jvm] abstract fun < T > disableChecks (checks: Collection <Check>, body: () -> T ): T load [jvm] abstract fun < T : DbEntity < T >> load (id: Id < T >, type: KClass < T >): T loadOrNull [jvm] abstract fun < T : DbEntity < T >> loadOrNull (id: Id < T >, type: KClass < T >): T ? loadSharded [jvm] abstract fun < R : DbRoot < R >, T : DbSharded < R , T >> loadSharded (gid: Gid < R , T >, type: KClass < T >): T onPostCommit [jvm] abstract fun onPostCommit (work: () -> Unit ) onPreCommit [jvm] abstract fun onPreCommit (work: () -> Unit ) onSessionClose [jvm] abstract fun onSessionClose (work: () -> Unit ) save [jvm] abstract fun < T : DbEntity < T >> save (entity: T ): Id < T > shards [jvm] abstract fun shards (): Set <Shard> abstract fun shards (keyspace: Keyspace): Collection <Shard> target [jvm] abstract fun < T > target (shard: Shard, function: () -> T ): T useConnection [jvm] abstract fun < T > useConnection (work: ( Connection ) -> T ): T withoutChecks [jvm] abstract fun < T > withoutChecks (vararg checks: Check, body: () -> T ): T Disable one or more checks for the duration of the execution of body . The passed in checks will entirely replace the other ignored checks at this point, they will not be merged with whatever is there currently. Properties \u00b6 Name Summary hibernateSession [jvm] abstract val hibernateSession : Session Extensions \u00b6 Name Summary load [jvm] inline fun < T : DbEntity < T >> Session . load (id: Id < T >): T loadOrNull [jvm] inline fun < T : DbEntity < T >> Session . loadOrNull (id: Id < T >): T ? loadSharded [jvm] inline fun < R : DbRoot < R >, S : DbSharded < R , S >> Session . loadSharded (gid: Gid < R , S >): S","title":"Session - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/#session","text":"[jvm]\\ interface Session : Session","title":"Session"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/#functions","text":"Name Summary delete [jvm] abstract fun < T : DbEntity < T >> delete (entity: T ) disableChecks [jvm] abstract fun < T > disableChecks (checks: Collection <Check>, body: () -> T ): T load [jvm] abstract fun < T : DbEntity < T >> load (id: Id < T >, type: KClass < T >): T loadOrNull [jvm] abstract fun < T : DbEntity < T >> loadOrNull (id: Id < T >, type: KClass < T >): T ? loadSharded [jvm] abstract fun < R : DbRoot < R >, T : DbSharded < R , T >> loadSharded (gid: Gid < R , T >, type: KClass < T >): T onPostCommit [jvm] abstract fun onPostCommit (work: () -> Unit ) onPreCommit [jvm] abstract fun onPreCommit (work: () -> Unit ) onSessionClose [jvm] abstract fun onSessionClose (work: () -> Unit ) save [jvm] abstract fun < T : DbEntity < T >> save (entity: T ): Id < T > shards [jvm] abstract fun shards (): Set <Shard> abstract fun shards (keyspace: Keyspace): Collection <Shard> target [jvm] abstract fun < T > target (shard: Shard, function: () -> T ): T useConnection [jvm] abstract fun < T > useConnection (work: ( Connection ) -> T ): T withoutChecks [jvm] abstract fun < T > withoutChecks (vararg checks: Check, body: () -> T ): T Disable one or more checks for the duration of the execution of body . The passed in checks will entirely replace the other ignored checks at this point, they will not be merged with whatever is there currently.","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/#properties","text":"Name Summary hibernateSession [jvm] abstract val hibernateSession : Session","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/#extensions","text":"Name Summary load [jvm] inline fun < T : DbEntity < T >> Session . load (id: Id < T >): T loadOrNull [jvm] inline fun < T : DbEntity < T >> Session . loadOrNull (id: Id < T >): T ? loadSharded [jvm] inline fun < R : DbRoot < R >, S : DbSharded < R , S >> Session . loadSharded (gid: Gid < R , S >): S","title":"Extensions"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/delete/","text":"// misk-hibernate / misk.hibernate / Session / delete delete \u00b6 [jvm]\\ abstract fun < T : DbEntity < T >> delete (entity: T ) Throws \u00b6 kotlin.IllegalStateException when delete is called on a read only session.","title":"delete - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/delete/#delete","text":"[jvm]\\ abstract fun < T : DbEntity < T >> delete (entity: T )","title":"delete"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/delete/#throws","text":"kotlin.IllegalStateException when delete is called on a read only session.","title":"Throws"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/disable-checks/","text":"// misk-hibernate / misk.hibernate / Session / disableChecks disableChecks \u00b6 [jvm]\\ abstract fun < T > disableChecks (checks: Collection <Check>, body: () -> T ): T","title":"disableChecks - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/disable-checks/#disablechecks","text":"[jvm]\\ abstract fun < T > disableChecks (checks: Collection <Check>, body: () -> T ): T","title":"disableChecks"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/hibernate-session/","text":"// misk-hibernate / misk.hibernate / Session / hibernateSession hibernateSession \u00b6 [jvm]\\ abstract val hibernateSession : Session","title":"hibernateSession - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/hibernate-session/#hibernatesession","text":"[jvm]\\ abstract val hibernateSession : Session","title":"hibernateSession"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/load-or-null/","text":"// misk-hibernate / misk.hibernate / Session / loadOrNull loadOrNull \u00b6 [jvm]\\ abstract fun < T : DbEntity < T >> loadOrNull (id: Id < T >, type: KClass < T >): T ?","title":"loadOrNull - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/load-or-null/#loadornull","text":"[jvm]\\ abstract fun < T : DbEntity < T >> loadOrNull (id: Id < T >, type: KClass < T >): T ?","title":"loadOrNull"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/load-sharded/","text":"// misk-hibernate / misk.hibernate / Session / loadSharded loadSharded \u00b6 [jvm]\\ abstract fun < R : DbRoot < R >, T : DbSharded < R , T >> loadSharded (gid: Gid < R , T >, type: KClass < T >): T","title":"loadSharded - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/load-sharded/#loadsharded","text":"[jvm]\\ abstract fun < R : DbRoot < R >, T : DbSharded < R , T >> loadSharded (gid: Gid < R , T >, type: KClass < T >): T","title":"loadSharded"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/load/","text":"// misk-hibernate / misk.hibernate / Session / load load \u00b6 [jvm]\\ abstract fun < T : DbEntity < T >> load (id: Id < T >, type: KClass < T >): T","title":"load - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/load/#load","text":"[jvm]\\ abstract fun < T : DbEntity < T >> load (id: Id < T >, type: KClass < T >): T","title":"load"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/save/","text":"// misk-hibernate / misk.hibernate / Session / save save \u00b6 [jvm]\\ abstract fun < T : DbEntity < T >> save (entity: T ): Id < T > Throws \u00b6 kotlin.IllegalStateException when save is called on a read only session.","title":"save - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/save/#save","text":"[jvm]\\ abstract fun < T : DbEntity < T >> save (entity: T ): Id < T >","title":"save"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/save/#throws","text":"kotlin.IllegalStateException when save is called on a read only session.","title":"Throws"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/shards/","text":"// misk-hibernate / misk.hibernate / Session / shards shards \u00b6 [jvm]\\ abstract fun shards (): Set <Shard> abstract fun shards (keyspace: Keyspace): Collection <Shard>","title":"shards - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/shards/#shards","text":"[jvm]\\ abstract fun shards (): Set <Shard> abstract fun shards (keyspace: Keyspace): Collection <Shard>","title":"shards"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/target/","text":"// misk-hibernate / misk.hibernate / Session / target target \u00b6 [jvm]\\ abstract fun < T > target (shard: Shard, function: () -> T ): T","title":"target - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/target/#target","text":"[jvm]\\ abstract fun < T > target (shard: Shard, function: () -> T ): T","title":"target"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/without-checks/","text":"// misk-hibernate / misk.hibernate / Session / withoutChecks withoutChecks \u00b6 [jvm]\\ abstract fun < T > withoutChecks (vararg checks: Check, body: () -> T ): T Disable one or more checks for the duration of the execution of body . The passed in checks will entirely replace the other ignored checks at this point, they will not be merged with whatever is there currently. TODO: Deprecate. This can enable checks as a side-effect. Prefer disableChecks() which is cumulative","title":"withoutChecks - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-session/without-checks/#withoutchecks","text":"[jvm]\\ abstract fun < T > withoutChecks (vararg checks: Check, body: () -> T ): T Disable one or more checks for the duration of the execution of body . The passed in checks will entirely replace the other ignored checks at this point, they will not be merged with whatever is there currently. TODO: Deprecate. This can enable checks as a side-effect. Prefer disableChecks() which is cumulative","title":"withoutChecks"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/","text":"// misk-hibernate / misk.hibernate / Transacter Transacter \u00b6 [jvm]\\ interface Transacter Provides explicit block-based transaction demarcation. Functions \u00b6 Name Summary allowCowrites [jvm] abstract fun allowCowrites (): Transacter Disable cowrite checks for the duration of the session. Useful for quickly setting up test data in testing. config [jvm] abstract fun config (): DataSourceConfig entities [jvm] abstract fun entities (): Set < KClass <out DbEntity <*>>> Returns KClasses for the bound DbEntities for the transacter isCheckEnabled [jvm] abstract fun isCheckEnabled (check: Check ): Boolean Is the scalability check currently enabled. Use Session.withoutChecks to disable checks. noRetries [jvm] abstract fun noRetries (): Transacter readOnly [jvm] abstract fun readOnly (): Transacter Creates a new transacter that produces read only sessions. This does not mean the underlying datasource is read only, only that the session produced won\u2019t modify the database. replicaRead [jvm] abstract fun < T > replicaRead (block: (session: Session ) -> T ): T Runs a non-transactional session against a read replica. retries [jvm] abstract fun retries (maxAttempts: Int = 2): Transacter transaction [jvm] abstract fun < T > transaction (block: (session: Session ) -> T ): T Starts a transaction on the current thread, executes block , and commits the transaction. If the block raises an exception the transaction will be rolled back instead of committed. Properties \u00b6 Name Summary inTransaction [jvm] abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block. Extensions \u00b6 Name Summary failSafeRead [jvm] fun < T > Transacter . failSafeRead (block: (session: Session ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm] fun < T > Transacter . failSafeRead (shard: Shard, block: (session: Session ) -> T ): T shards [jvm] fun Transacter . shards (): Set <Shard> fun Transacter . shards (keyspace: Keyspace): Collection <Shard> transaction [jvm] fun < T > Transacter . transaction (shard: Shard, block: (session: Session ) -> T ): T Commits a transaction with operations of block .","title":"Transacter - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/#transacter","text":"[jvm]\\ interface Transacter Provides explicit block-based transaction demarcation.","title":"Transacter"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/#functions","text":"Name Summary allowCowrites [jvm] abstract fun allowCowrites (): Transacter Disable cowrite checks for the duration of the session. Useful for quickly setting up test data in testing. config [jvm] abstract fun config (): DataSourceConfig entities [jvm] abstract fun entities (): Set < KClass <out DbEntity <*>>> Returns KClasses for the bound DbEntities for the transacter isCheckEnabled [jvm] abstract fun isCheckEnabled (check: Check ): Boolean Is the scalability check currently enabled. Use Session.withoutChecks to disable checks. noRetries [jvm] abstract fun noRetries (): Transacter readOnly [jvm] abstract fun readOnly (): Transacter Creates a new transacter that produces read only sessions. This does not mean the underlying datasource is read only, only that the session produced won\u2019t modify the database. replicaRead [jvm] abstract fun < T > replicaRead (block: (session: Session ) -> T ): T Runs a non-transactional session against a read replica. retries [jvm] abstract fun retries (maxAttempts: Int = 2): Transacter transaction [jvm] abstract fun < T > transaction (block: (session: Session ) -> T ): T Starts a transaction on the current thread, executes block , and commits the transaction. If the block raises an exception the transaction will be rolled back instead of committed.","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/#properties","text":"Name Summary inTransaction [jvm] abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/#extensions","text":"Name Summary failSafeRead [jvm] fun < T > Transacter . failSafeRead (block: (session: Session ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm] fun < T > Transacter . failSafeRead (shard: Shard, block: (session: Session ) -> T ): T shards [jvm] fun Transacter . shards (): Set <Shard> fun Transacter . shards (keyspace: Keyspace): Collection <Shard> transaction [jvm] fun < T > Transacter . transaction (shard: Shard, block: (session: Session ) -> T ): T Commits a transaction with operations of block .","title":"Extensions"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/allow-cowrites/","text":"// misk-hibernate / misk.hibernate / Transacter / allowCowrites allowCowrites \u00b6 [jvm]\\ abstract fun allowCowrites (): Transacter Disable cowrite checks for the duration of the session. Useful for quickly setting up test data in testing.","title":"allowCowrites - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/allow-cowrites/#allowcowrites","text":"[jvm]\\ abstract fun allowCowrites (): Transacter Disable cowrite checks for the duration of the session. Useful for quickly setting up test data in testing.","title":"allowCowrites"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/config/","text":"// misk-hibernate / misk.hibernate / Transacter / config config \u00b6 [jvm]\\ abstract fun config (): DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/config/#config","text":"[jvm]\\ abstract fun config (): DataSourceConfig","title":"config"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/entities/","text":"// misk-hibernate / misk.hibernate / Transacter / entities entities \u00b6 [jvm]\\ abstract fun entities (): Set < KClass <out DbEntity <*>>> Returns KClasses for the bound DbEntities for the transacter","title":"entities - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/entities/#entities","text":"[jvm]\\ abstract fun entities (): Set < KClass <out DbEntity <*>>> Returns KClasses for the bound DbEntities for the transacter","title":"entities"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/in-transaction/","text":"// misk-hibernate / misk.hibernate / Transacter / inTransaction inTransaction \u00b6 [jvm]\\ abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"inTransaction - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/in-transaction/#intransaction","text":"[jvm]\\ abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"inTransaction"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/is-check-enabled/","text":"// misk-hibernate / misk.hibernate / Transacter / isCheckEnabled isCheckEnabled \u00b6 [jvm]\\ abstract fun isCheckEnabled (check: Check ): Boolean Is the scalability check currently enabled. Use Session.withoutChecks to disable checks.","title":"isCheckEnabled - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/is-check-enabled/#ischeckenabled","text":"[jvm]\\ abstract fun isCheckEnabled (check: Check ): Boolean Is the scalability check currently enabled. Use Session.withoutChecks to disable checks.","title":"isCheckEnabled"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/no-retries/","text":"// misk-hibernate / misk.hibernate / Transacter / noRetries noRetries \u00b6 [jvm]\\ abstract fun noRetries (): Transacter","title":"noRetries - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/no-retries/#noretries","text":"[jvm]\\ abstract fun noRetries (): Transacter","title":"noRetries"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/read-only/","text":"// misk-hibernate / misk.hibernate / Transacter / readOnly readOnly \u00b6 [jvm]\\ abstract fun readOnly (): Transacter Creates a new transacter that produces read only sessions. This does not mean the underlying datasource is read only, only that the session produced won\u2019t modify the database.","title":"readOnly - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/read-only/#readonly","text":"[jvm]\\ abstract fun readOnly (): Transacter Creates a new transacter that produces read only sessions. This does not mean the underlying datasource is read only, only that the session produced won\u2019t modify the database.","title":"readOnly"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/replica-read/","text":"// misk-hibernate / misk.hibernate / Transacter / replicaRead replicaRead \u00b6 [jvm]\\ abstract fun < T > replicaRead (block: (session: Session ) -> T ): T Runs a non-transactional session against a read replica. A few things that are different with replica reads: Replica reads are (obviously?) read only. Consistency is eventual. If your application thread just wrote something in a transaction you may not see that write with a replica read as the write may not have replicated to the replica yet. There may be time jumping. As each query may end up at a separate replica that will likely be at a separate point in the replica stream. That means each query can jump back or forward in \u201ctime\u201d. (There is some support for internally consistent replica reads that peg a single replica in Vitess but we\u2019re not using that. If you need that functionality reach out to #vitess) Full scatters are allowed since you can increase the availability of these by adding more replicas. If no reader is configured for replica reads when installing the HibernateModule , this method will throw an IllegalStateException . Note: You can do it another way, where you annotate the Transacter with the readerQualifer defined by HibernateModule , which will use the read only replica as the datasource.","title":"replicaRead - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/replica-read/#replicaread","text":"[jvm]\\ abstract fun < T > replicaRead (block: (session: Session ) -> T ): T Runs a non-transactional session against a read replica. A few things that are different with replica reads: Replica reads are (obviously?) read only. Consistency is eventual. If your application thread just wrote something in a transaction you may not see that write with a replica read as the write may not have replicated to the replica yet. There may be time jumping. As each query may end up at a separate replica that will likely be at a separate point in the replica stream. That means each query can jump back or forward in \u201ctime\u201d. (There is some support for internally consistent replica reads that peg a single replica in Vitess but we\u2019re not using that. If you need that functionality reach out to #vitess) Full scatters are allowed since you can increase the availability of these by adding more replicas. If no reader is configured for replica reads when installing the HibernateModule , this method will throw an IllegalStateException . Note: You can do it another way, where you annotate the Transacter with the readerQualifer defined by HibernateModule , which will use the read only replica as the datasource.","title":"replicaRead"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/retries/","text":"// misk-hibernate / misk.hibernate / Transacter / retries retries \u00b6 [jvm]\\ abstract fun retries (maxAttempts: Int = 2): Transacter","title":"retries - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/retries/#retries","text":"[jvm]\\ abstract fun retries (maxAttempts: Int = 2): Transacter","title":"retries"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/transaction/","text":"// misk-hibernate / misk.hibernate / Transacter / transaction transaction \u00b6 [jvm]\\ abstract fun < T > transaction (block: (session: Session ) -> T ): T Starts a transaction on the current thread, executes block , and commits the transaction. If the block raises an exception the transaction will be rolled back instead of committed. If retries are permitted (the default), a failed but recoverable transaction will be reattempted after rolling back. It is an error to start a transaction if another transaction is already in progress.","title":"transaction - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter/transaction/#transaction","text":"[jvm]\\ abstract fun < T > transaction (block: (session: Session ) -> T ): T Starts a transaction on the current thread, executes block , and commits the transaction. If the block raises an exception the transaction will be rolled back instead of committed. If retries are permitted (the default), a failed but recoverable transaction will be reattempted after rolling back. It is an error to start a transaction if another transaction is already in progress.","title":"transaction"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter-service/","text":"// misk-hibernate / misk.hibernate / TransacterService TransacterService \u00b6 [jvm]\\ interface TransacterService : Service Marker interface for services that provide database transactors. Services that require a database connection should depend on this interface when they are installed in a module. e.g. install(ServiceModule<MoviesService>()\\ .dependsOn<TransacterService>(Movies::class)) Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"TransacterService - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter-service/#transacterservice","text":"[jvm]\\ interface TransacterService : Service Marker interface for services that provide database transactors. Services that require a database connection should depend on this interface when they are installed in a module. e.g. install(ServiceModule<MoviesService>()\\ .dependsOn<TransacterService>(Movies::class))","title":"TransacterService"},{"location":"0.x/misk-hibernate/misk.hibernate/-transacter-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/","text":"// misk-hibernate / misk.hibernate / TransformedType TransformedType \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.ANNOTATION_CLASS ]) annotation class TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>) TransformedType is a meta-annotation for assigning arbitrary transformers to entity fields. Use it to annotate attributes that will mark a field to be transformed. transformer is a KClass instance of a class that implements assemble and disassemble methods. Assemble is called when a value is read from the table, or from cache. Disassemble is called when a value is about to be written to a table or cache. targetType specifies a KClass instance of the type that the field should have when disassembled. It is used to determine the backing SQL type. The methods of Transformer additionally take a field representing the annotated field and a TransformerContext, which contains limited entity state, including the name of the table and the column, the arguments the annotation received. Note!: Wrapping basic numberic types may not behave as one would expect, especially when querying. This is partly due to Hibernate\u2019s inlining of primitive values. For example, one can define a transformer that appends a value to a string prior to storage, and removes it after retrieval. First, define the Transformer itself class AppendTransformer(val context: TransformerContext) { fun assemble(owner: Any?, value: Serializable): Any = (value as String).removeSuffix(context.arguments\u201dsuffix\u201d as String)) fun disassemble(value: Any): Serializable = \u201c${value as String}${context.arguments\u201dsuffix\u201d as String}\u201d } Then, create the entity annotation: Constructors \u00b6 TransformedType [jvm] fun TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>) Properties \u00b6 Name Summary targetType [jvm] val targetType : KClass <*> transformer [jvm] val transformer : KClass <out Transformer >","title":"TransformedType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/#transformedtype","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.ANNOTATION_CLASS ]) annotation class TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>) TransformedType is a meta-annotation for assigning arbitrary transformers to entity fields. Use it to annotate attributes that will mark a field to be transformed. transformer is a KClass instance of a class that implements assemble and disassemble methods. Assemble is called when a value is read from the table, or from cache. Disassemble is called when a value is about to be written to a table or cache. targetType specifies a KClass instance of the type that the field should have when disassembled. It is used to determine the backing SQL type. The methods of Transformer additionally take a field representing the annotated field and a TransformerContext, which contains limited entity state, including the name of the table and the column, the arguments the annotation received. Note!: Wrapping basic numberic types may not behave as one would expect, especially when querying. This is partly due to Hibernate\u2019s inlining of primitive values. For example, one can define a transformer that appends a value to a string prior to storage, and removes it after retrieval. First, define the Transformer itself class AppendTransformer(val context: TransformerContext) { fun assemble(owner: Any?, value: Serializable): Any = (value as String).removeSuffix(context.arguments\u201dsuffix\u201d as String)) fun disassemble(value: Any): Serializable = \u201c${value as String}${context.arguments\u201dsuffix\u201d as String}\u201d } Then, create the entity annotation:","title":"TransformedType"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/#constructors","text":"TransformedType [jvm] fun TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>)","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/#properties","text":"Name Summary targetType [jvm] val targetType : KClass <*> transformer [jvm] val transformer : KClass <out Transformer >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/-transformed-type/","text":"// misk-hibernate / misk.hibernate / TransformedType / TransformedType TransformedType \u00b6 [jvm]\\ fun TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>)","title":"TransformedType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/-transformed-type/#transformedtype","text":"[jvm]\\ fun TransformedType (transformer: KClass <out Transformer >, targetType: KClass <*>)","title":"TransformedType"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/target-type/","text":"// misk-hibernate / misk.hibernate / TransformedType / targetType targetType \u00b6 [jvm]\\ val targetType : KClass <*>","title":"targetType - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/target-type/#targettype","text":"[jvm]\\ val targetType : KClass <*>","title":"targetType"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/transformer/","text":"// misk-hibernate / misk.hibernate / TransformedType / transformer transformer \u00b6 [jvm]\\ val transformer : KClass <out Transformer >","title":"transformer - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformed-type/transformer/#transformer","text":"[jvm]\\ val transformer : KClass <out Transformer >","title":"transformer"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/","text":"// misk-hibernate / misk.hibernate / Transformer Transformer \u00b6 [jvm]\\ abstract class Transformer (context: TransformerContext ) Functions \u00b6 Name Summary assemble [jvm] abstract fun assemble (owner: Any ?, value: Serializable ): Any disassemble [jvm] abstract fun disassemble (value: Any ): Serializable Properties \u00b6 Name Summary context [jvm] val context : TransformerContext","title":"Transformer - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/#transformer","text":"[jvm]\\ abstract class Transformer (context: TransformerContext )","title":"Transformer"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/#functions","text":"Name Summary assemble [jvm] abstract fun assemble (owner: Any ?, value: Serializable ): Any disassemble [jvm] abstract fun disassemble (value: Any ): Serializable","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/#properties","text":"Name Summary context [jvm] val context : TransformerContext","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/-transformer/","text":"// misk-hibernate / misk.hibernate / Transformer / Transformer Transformer \u00b6 [jvm]\\ fun Transformer (context: TransformerContext )","title":"Transformer - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/-transformer/#transformer","text":"[jvm]\\ fun Transformer (context: TransformerContext )","title":"Transformer"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/assemble/","text":"// misk-hibernate / misk.hibernate / Transformer / assemble assemble \u00b6 [jvm]\\ abstract fun assemble (owner: Any ?, value: Serializable ): Any","title":"assemble - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/assemble/#assemble","text":"[jvm]\\ abstract fun assemble (owner: Any ?, value: Serializable ): Any","title":"assemble"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/context/","text":"// misk-hibernate / misk.hibernate / Transformer / context context \u00b6 [jvm]\\ val context : TransformerContext","title":"context - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/context/#context","text":"[jvm]\\ val context : TransformerContext","title":"context"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/disassemble/","text":"// misk-hibernate / misk.hibernate / Transformer / disassemble disassemble \u00b6 [jvm]\\ abstract fun disassemble (value: Any ): Serializable","title":"disassemble - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer/disassemble/#disassemble","text":"[jvm]\\ abstract fun disassemble (value: Any ): Serializable","title":"disassemble"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/","text":"// misk-hibernate / misk.hibernate / TransformerContext TransformerContext \u00b6 [jvm]\\ data class TransformerContext (tableName: String , columnName: String , arguments: Map < String , >, field: KClass < >) Properties \u00b6 Name Summary arguments [jvm] var arguments : Map < String , *> columnName [jvm] val columnName : String field [jvm] var field : KClass <*> tableName [jvm] val tableName : String","title":"TransformerContext - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/#transformercontext","text":"[jvm]\\ data class TransformerContext (tableName: String , columnName: String , arguments: Map < String , >, field: KClass < >)","title":"TransformerContext"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/#properties","text":"Name Summary arguments [jvm] var arguments : Map < String , *> columnName [jvm] val columnName : String field [jvm] var field : KClass <*> tableName [jvm] val tableName : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/-transformer-context/","text":"// misk-hibernate / misk.hibernate / TransformerContext / TransformerContext TransformerContext \u00b6 [jvm]\\ fun TransformerContext (tableName: String , columnName: String , arguments: Map < String , >, field: KClass < >)","title":"TransformerContext - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/-transformer-context/#transformercontext","text":"[jvm]\\ fun TransformerContext (tableName: String , columnName: String , arguments: Map < String , >, field: KClass < >)","title":"TransformerContext"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/arguments/","text":"// misk-hibernate / misk.hibernate / TransformerContext / arguments arguments \u00b6 [jvm]\\ var arguments : Map < String , *>","title":"arguments - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/arguments/#arguments","text":"[jvm]\\ var arguments : Map < String , *>","title":"arguments"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/column-name/","text":"// misk-hibernate / misk.hibernate / TransformerContext / columnName columnName \u00b6 [jvm]\\ val columnName : String","title":"columnName - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/column-name/#columnname","text":"[jvm]\\ val columnName : String","title":"columnName"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/field/","text":"// misk-hibernate / misk.hibernate / TransformerContext / field field \u00b6 [jvm]\\ var field : KClass <*>","title":"field - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/field/#field","text":"[jvm]\\ var field : KClass <*>","title":"field"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/table-name/","text":"// misk-hibernate / misk.hibernate / TransformerContext / tableName tableName \u00b6 [jvm]\\ val tableName : String","title":"tableName - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-transformer-context/table-name/#tablename","text":"[jvm]\\ val tableName : String","title":"tableName"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/","text":"// misk-hibernate / misk.hibernate / ValidationReport ValidationReport \u00b6 [jvm]\\ data class ValidationReport (schemas: Set < String >, tables: Set < String >, columns: Set < String >) Properties \u00b6 Name Summary columns [jvm] val columns : Set < String > schemas [jvm] val schemas : Set < String > tables [jvm] val tables : Set < String >","title":"ValidationReport - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/#validationreport","text":"[jvm]\\ data class ValidationReport (schemas: Set < String >, tables: Set < String >, columns: Set < String >)","title":"ValidationReport"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/#properties","text":"Name Summary columns [jvm] val columns : Set < String > schemas [jvm] val schemas : Set < String > tables [jvm] val tables : Set < String >","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/-validation-report/","text":"// misk-hibernate / misk.hibernate / ValidationReport / ValidationReport ValidationReport \u00b6 [jvm]\\ fun ValidationReport (schemas: Set < String >, tables: Set < String >, columns: Set < String >)","title":"ValidationReport - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/-validation-report/#validationreport","text":"[jvm]\\ fun ValidationReport (schemas: Set < String >, tables: Set < String >, columns: Set < String >)","title":"ValidationReport"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/columns/","text":"// misk-hibernate / misk.hibernate / ValidationReport / columns columns \u00b6 [jvm]\\ val columns : Set < String >","title":"columns - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/columns/#columns","text":"[jvm]\\ val columns : Set < String >","title":"columns"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/schemas/","text":"// misk-hibernate / misk.hibernate / ValidationReport / schemas schemas \u00b6 [jvm]\\ val schemas : Set < String >","title":"schemas - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/schemas/#schemas","text":"[jvm]\\ val schemas : Set < String >","title":"schemas"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/tables/","text":"// misk-hibernate / misk.hibernate / ValidationReport / tables tables \u00b6 [jvm]\\ val tables : Set < String >","title":"tables - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-validation-report/tables/#tables","text":"[jvm]\\ val tables : Set < String >","title":"tables"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/","text":"// misk-hibernate / misk.hibernate / VitessDialect VitessDialect \u00b6 [jvm]\\ class VitessDialect : MySQL57Dialect Functions \u00b6 Name Summary addSqlHintOrComment [jvm] open fun addSqlHintOrComment (p0: String , p1: QueryParameters, p2: Boolean ): String appendLockHint [jvm] open fun appendLockHint (p0: LockOptions, p1: String ): String applyLocksToSql [jvm] open fun applyLocksToSql (p0: String , p1: LockOptions, p2: MutableMap < String , Array < String >>): String areStringComparisonsCaseInsensitive [jvm] open override fun areStringComparisonsCaseInsensitive (): Boolean augmentRecognizedTableTypes [jvm] open fun augmentRecognizedTableTypes (p0: MutableList < String >) buildIdentifierHelper [jvm] open override fun buildIdentifierHelper (p0: IdentifierHelperBuilder, p1: DatabaseMetaData ): IdentifierHelper buildSQLExceptionConversionDelegate [jvm] open override fun buildSQLExceptionConversionDelegate (): SQLExceptionConversionDelegate canCreateCatalog [jvm] open override fun canCreateCatalog (): Boolean canCreateSchema [jvm] open override fun canCreateSchema (): Boolean cast [jvm] open fun cast (p0: String , p1: Int , p2: Int ): String open fun cast (p0: String , p1: Int , p2: Int , p3: Int ): String open fun cast (p0: String , p1: Int , p2: Int , p3: Int , p4: Int ): String closeQuote [jvm] open override fun closeQuote (): Char contributeTypes [jvm] open fun contributeTypes (p0: TypeContributions, p1: ServiceRegistry) createCaseFragment [jvm] open fun createCaseFragment (): CaseFragment createOuterJoinFragment [jvm] open fun createOuterJoinFragment (): JoinFragment defaultScrollMode [jvm] open fun defaultScrollMode (): ScrollMode doesReadCommittedCauseWritersToBlockReaders [jvm] open fun doesReadCommittedCauseWritersToBlockReaders (): Boolean doesRepeatableReadCauseReadersToBlockWriters [jvm] open fun doesRepeatableReadCauseReadersToBlockWriters (): Boolean dropConstraints [jvm] open override fun dropConstraints (): Boolean equivalentTypes [jvm] open fun equivalentTypes (p0: Int , p1: Int ): Boolean escapeLiteral [jvm] open override fun escapeLiteral (p0: String ): String fixedPointNumberCastTarget [jvm] open fun fixedPointNumberCastTarget (): String floatingPointNumberCastTarget [jvm] open fun floatingPointNumberCastTarget (): String forceLobAsLastValue [jvm] open fun forceLobAsLastValue (): Boolean forUpdateOfColumns [jvm] open fun forUpdateOfColumns (): Boolean getAddColumnString [jvm] open override fun getAddColumnString (): String getAddColumnSuffixString [jvm] open fun getAddColumnSuffixString (): String getAddForeignKeyConstraintString [jvm] open fun getAddForeignKeyConstraintString (p0: String , p1: String ): String open override fun getAddForeignKeyConstraintString (p0: String , p1: Array < String >, p2: String , p3: Array < String >, p4: Boolean ): String getAddPrimaryKeyConstraintString [jvm] open fun getAddPrimaryKeyConstraintString (p0: String ): String getAlterTableString [jvm] open fun getAlterTableString (p0: String ): String getAuxiliaryDatabaseObjectExporter [jvm] open fun getAuxiliaryDatabaseObjectExporter (): Exporter<AuxiliaryDatabaseObject> getCallableStatementSupport [jvm] open fun getCallableStatementSupport (): CallableStatementSupport getCascadeConstraintsString [jvm] open fun getCascadeConstraintsString (): String getCaseInsensitiveLike [jvm] open fun getCaseInsensitiveLike (): String getCastTypeName [jvm] open override fun getCastTypeName (p0: Int ): String getColumnAliasExtractor [jvm] open fun getColumnAliasExtractor (): ColumnAliasExtractor getColumnComment [jvm] open override fun getColumnComment (p0: String ): String getCreateCatalogCommand [jvm] open override fun getCreateCatalogCommand (p0: String ): Array < String > getCreateMultisetTableString [jvm] open fun getCreateMultisetTableString (): String getCreateSchemaCommand [jvm] open override fun getCreateSchemaCommand (p0: String ): Array < String > getCreateSequenceString [jvm] open fun getCreateSequenceString (p0: String ): String open fun getCreateSequenceString (p0: String , p1: Int , p2: Int ): String getCreateSequenceStrings [jvm] open fun getCreateSequenceStrings (p0: String , p1: Int , p2: Int ): Array < String > getCreateTableString [jvm] open fun getCreateTableString (): String getCreateTemporaryTableColumnAnnotation [jvm] open fun getCreateTemporaryTableColumnAnnotation (p0: Int ): String getCrossJoinSeparator [jvm] open fun getCrossJoinSeparator (): String getCurrentSchemaCommand [jvm] open fun getCurrentSchemaCommand (): String getCurrentTimestampSelectString [jvm] open override fun getCurrentTimestampSelectString (): String getCurrentTimestampSQLFunctionName [jvm] open fun getCurrentTimestampSQLFunctionName (): String getDefaultBatchLoadSizingStrategy [jvm] open fun getDefaultBatchLoadSizingStrategy (): BatchLoadSizingStrategy getDefaultMultiTableBulkIdStrategy [jvm] open override fun getDefaultMultiTableBulkIdStrategy (): MultiTableBulkIdStrategy getDefaultMySQLStorageEngine [jvm] open override fun getDefaultMySQLStorageEngine (): MySQLStorageEngine getDefaultProperties [jvm] fun getDefaultProperties (): Properties getDropCatalogCommand [jvm] open override fun getDropCatalogCommand (p0: String ): Array < String > getDropForeignKeyString [jvm] open override fun getDropForeignKeyString (): String getDropSchemaCommand [jvm] open override fun getDropSchemaCommand (p0: String ): Array < String > getDropSequenceString [jvm] open fun getDropSequenceString (p0: String ): String getDropSequenceStrings [jvm] open fun getDropSequenceStrings (p0: String ): Array < String > getDropTableString [jvm] open fun getDropTableString (p0: String ): String getEngineKeyword [jvm] open override fun getEngineKeyword (): String getForeignKeyExporter [jvm] open fun getForeignKeyExporter (): Exporter<ForeignKey> getForUpdateNowaitString [jvm] open fun getForUpdateNowaitString (): String open fun getForUpdateNowaitString (p0: String ): String getForUpdateSkipLockedString [jvm] open fun getForUpdateSkipLockedString (): String open fun getForUpdateSkipLockedString (p0: String ): String getForUpdateString [jvm] open override fun getForUpdateString (): String open fun getForUpdateString (p0: String ): String open fun getForUpdateString (p0: LockMode): String open fun getForUpdateString (p0: LockOptions): String open fun getForUpdateString (p0: String , p1: LockOptions): String getFunctions [jvm] fun getFunctions (): MutableMap < String , SQLFunction> getHibernateTypeName [jvm] open fun getHibernateTypeName (p0: Int ): String open fun getHibernateTypeName (p0: Int , p1: Int , p2: Int , p3: Int ): String getIdentityColumnSupport [jvm] open override fun getIdentityColumnSupport (): IdentityColumnSupport getIndexExporter [jvm] open fun getIndexExporter (): Exporter<Index> getInExpressionCountLimit [jvm] open fun getInExpressionCountLimit (): Int getLimitHandler [jvm] open override fun getLimitHandler (): LimitHandler getLimitString [jvm] open override fun getLimitString (p0: String , p1: Boolean ): String getLobMergeStrategy [jvm] open fun getLobMergeStrategy (): LobMergeStrategy getLockingStrategy [jvm] open fun getLockingStrategy (p0: Lockable, p1: LockMode): LockingStrategy getLowercaseFunction [jvm] open fun getLowercaseFunction (): String getMaxAliasLength [jvm] open fun getMaxAliasLength (): Int getNameQualifierSupport [jvm] open fun getNameQualifierSupport (): NameQualifierSupport getNativeIdentifierGeneratorStrategy [jvm] open fun getNativeIdentifierGeneratorStrategy (): String getNoColumnsInsertString [jvm] open fun getNoColumnsInsertString (): String getNotExpression [jvm] open override fun getNotExpression (p0: String ): String getNullColumnString [jvm] open fun getNullColumnString (): String getQueryHintString [jvm] open fun getQueryHintString (p0: String , p1: MutableList < String >): String open override fun getQueryHintString (p0: String , p1: String ): String getQuerySequencesString [jvm] open fun getQuerySequencesString (): String getReadLockString [jvm] open override fun getReadLockString (p0: Int ): String open fun getReadLockString (p0: String , p1: Int ): String getResultSet [jvm] open override fun getResultSet (p0: CallableStatement ): ResultSet open fun getResultSet (p0: CallableStatement , p1: Int ): ResultSet open fun getResultSet (p0: CallableStatement , p1: String ): ResultSet getSchemaNameResolver [jvm] open fun getSchemaNameResolver (): SchemaNameResolver getSelectClauseNullString [jvm] open fun getSelectClauseNullString (p0: Int ): String getSelectGUIDString [jvm] open override fun getSelectGUIDString (): String getSelectSequenceNextValString [jvm] open fun getSelectSequenceNextValString (p0: String ): String getSequenceExporter [jvm] open fun getSequenceExporter (): Exporter<Sequence> getSequenceInformationExtractor [jvm] open fun getSequenceInformationExtractor (): SequenceInformationExtractor getSequenceNextValString [jvm] open fun getSequenceNextValString (p0: String ): String getSqlTypeDescriptorOverride [jvm] open fun getSqlTypeDescriptorOverride (p0: Int ): SqlTypeDescriptor getTableComment [jvm] open override fun getTableComment (p0: String ): String getTableExporter [jvm] open fun getTableExporter (): Exporter<Table> getTableTypeString [jvm] open override fun getTableTypeString (): String getTypeName [jvm] open fun getTypeName (p0: Int ): String open fun getTypeName (p0: Int , p1: Long , p2: Int , p3: Int ): String getUniqueDelegate [jvm] open override fun getUniqueDelegate (): UniqueDelegate getUniqueKeyExporter [jvm] open fun getUniqueKeyExporter (): Exporter<Constraint> getViolatedConstraintNameExtracter [jvm] open override fun getViolatedConstraintNameExtracter (): ViolatedConstraintNameExtracter getWriteLockString [jvm] open override fun getWriteLockString (p0: Int ): String open fun getWriteLockString (p0: String , p1: Int ): String hasAlterTable [jvm] open fun hasAlterTable (): Boolean hasSelfReferentialForeignKeyBug [jvm] open override fun hasSelfReferentialForeignKeyBug (): Boolean inlineLiteral [jvm] open fun inlineLiteral (p0: String ): String isCurrentTimestampSelectStringCallable [jvm] open override fun isCurrentTimestampSelectStringCallable (): Boolean isJdbcLogWarningsEnabledByDefault [jvm] open override fun isJdbcLogWarningsEnabledByDefault (): Boolean isLegacyLimitHandlerBehaviorEnabled [jvm] open fun isLegacyLimitHandlerBehaviorEnabled (): Boolean isLockTimeoutParameterized [jvm] open fun isLockTimeoutParameterized (): Boolean isTypeNameRegistered [jvm] open fun isTypeNameRegistered (p0: String ): Boolean openQuote [jvm] open override fun openQuote (): Char prependComment [jvm] open fun prependComment (p0: String , p1: String ): String qualifyIndexName [jvm] open override fun qualifyIndexName (): Boolean quote [jvm] fun quote (p0: String ): String registerColumnType [jvm] open fun registerColumnType (p0: Int , p1: String ) open fun registerColumnType (p0: Int , p1: Long , p2: String ) registerFunction [jvm] open fun registerFunction (p0: String , p1: SQLFunction) registerHibernateType [jvm] open fun registerHibernateType (p0: Int , p1: String ) open fun registerHibernateType (p0: Int , p1: Long , p2: String ) registerKeyword [jvm] open fun registerKeyword (p0: String ) registerResultSetOutParameter [jvm] open fun registerResultSetOutParameter (p0: CallableStatement , p1: String ): Int open override fun registerResultSetOutParameter (p0: CallableStatement , p1: Int ): Int registerVarcharTypes [jvm] open override fun registerVarcharTypes () remapSqlTypeDescriptor [jvm] open fun remapSqlTypeDescriptor (p0: SqlTypeDescriptor): SqlTypeDescriptor renderOrderByElement [jvm] open override fun renderOrderByElement (p0: String , p1: String , p2: String , p3: NullPrecedence): String replaceResultVariableInOrderByClauseWithPosition [jvm] open fun replaceResultVariableInOrderByClauseWithPosition (): Boolean requiresCastingOfParametersInSelectClause [jvm] open fun requiresCastingOfParametersInSelectClause (): Boolean requiresParensForTupleDistinctCounts [jvm] open fun requiresParensForTupleDistinctCounts (): Boolean smallIntegerCastTarget [jvm] open fun smallIntegerCastTarget (): String supportsBindAsCallableArgument [jvm] open fun supportsBindAsCallableArgument (): Boolean supportsCascadeDelete [jvm] open override fun supportsCascadeDelete (): Boolean supportsCaseInsensitiveLike [jvm] open fun supportsCaseInsensitiveLike (): Boolean supportsCircularCascadeDeleteConstraints [jvm] open fun supportsCircularCascadeDeleteConstraints (): Boolean supportsColumnCheck [jvm] open override fun supportsColumnCheck (): Boolean supportsCommentOn [jvm] open fun supportsCommentOn (): Boolean supportsCurrentTimestampSelection [jvm] open override fun supportsCurrentTimestampSelection (): Boolean supportsEmptyInList [jvm] open override fun supportsEmptyInList (): Boolean supportsExistsInSelect [jvm] open fun supportsExistsInSelect (): Boolean supportsExpectedLobUsagePattern [jvm] open fun supportsExpectedLobUsagePattern (): Boolean supportsIfExistsAfterAlterTable [jvm] open fun supportsIfExistsAfterAlterTable (): Boolean supportsIfExistsAfterConstraintName [jvm] open fun supportsIfExistsAfterConstraintName (): Boolean supportsIfExistsAfterTableName [jvm] open fun supportsIfExistsAfterTableName (): Boolean supportsIfExistsBeforeConstraintName [jvm] open fun supportsIfExistsBeforeConstraintName (): Boolean supportsIfExistsBeforeTableName [jvm] open override fun supportsIfExistsBeforeTableName (): Boolean supportsJdbcConnectionLobCreation [jvm] open fun supportsJdbcConnectionLobCreation (p0: DatabaseMetaData ): Boolean supportsLimit [jvm] open override fun supportsLimit (): Boolean supportsLobValueChangePropogation [jvm] open override fun supportsLobValueChangePropogation (): Boolean supportsLockTimeouts [jvm] open override fun supportsLockTimeouts (): Boolean supportsNamedParameters [jvm] open fun supportsNamedParameters (p0: DatabaseMetaData ): Boolean supportsNationalizedTypes [jvm] open fun supportsNationalizedTypes (): Boolean supportsNoColumnsInsert [jvm] open fun supportsNoColumnsInsert (): Boolean supportsNonQueryWithCTE [jvm] open fun supportsNonQueryWithCTE (): Boolean supportsNoWait [jvm] open fun supportsNoWait (): Boolean supportsOuterJoinForUpdate [jvm] open fun supportsOuterJoinForUpdate (): Boolean supportsParametersInInsertSelect [jvm] open fun supportsParametersInInsertSelect (): Boolean supportsPartitionBy [jvm] open fun supportsPartitionBy (): Boolean supportsPooledSequences [jvm] open fun supportsPooledSequences (): Boolean supportsResultSetPositionQueryMethodsOnForwardOnlyCursor [jvm] open fun supportsResultSetPositionQueryMethodsOnForwardOnlyCursor (): Boolean supportsRowValueConstructorSyntax [jvm] open override fun supportsRowValueConstructorSyntax (): Boolean supportsRowValueConstructorSyntaxInInList [jvm] open override fun supportsRowValueConstructorSyntaxInInList (): Boolean supportsRowValueConstructorSyntaxInSet [jvm] open override fun supportsRowValueConstructorSyntaxInSet (): Boolean supportsSelectAliasInGroupByClause [jvm] open override fun supportsSelectAliasInGroupByClause (): Boolean supportsSequences [jvm] open fun supportsSequences (): Boolean supportsSkipLocked [jvm] open fun supportsSkipLocked (): Boolean supportsSubqueryOnMutatingTable [jvm] open override fun supportsSubqueryOnMutatingTable (): Boolean supportsSubselectAsInPredicateLHS [jvm] open fun supportsSubselectAsInPredicateLHS (): Boolean supportsTableCheck [jvm] open fun supportsTableCheck (): Boolean supportsTupleCounts [jvm] open fun supportsTupleCounts (): Boolean supportsTupleDistinctCounts [jvm] open fun supportsTupleDistinctCounts (): Boolean supportsTuplesInSubqueries [jvm] open fun supportsTuplesInSubqueries (): Boolean supportsUnboundedLobLocatorMaterialization [jvm] open fun supportsUnboundedLobLocatorMaterialization (): Boolean supportsUnionAll [jvm] open override fun supportsUnionAll (): Boolean supportsValuesList [jvm] open fun supportsValuesList (): Boolean toBooleanValueString [jvm] open fun toBooleanValueString (p0: Boolean ): String toString [jvm] open override fun toString (): String transformSelectString [jvm] open fun transformSelectString (p0: String ): String useFollowOnLocking [jvm] open fun useFollowOnLocking (p0: QueryParameters): Boolean useInputStreamToInsertBlob [jvm] open override fun useInputStreamToInsertBlob (): Boolean Properties \u00b6 Name Summary STANDARD_DEFAULT_BATCH_LOAD_SIZING_STRATEGY [jvm] val STANDARD_DEFAULT_BATCH_LOAD_SIZING_STRATEGY : BatchLoadSizingStrategy","title":"VitessDialect - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/#vitessdialect","text":"[jvm]\\ class VitessDialect : MySQL57Dialect","title":"VitessDialect"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/#functions","text":"Name Summary addSqlHintOrComment [jvm] open fun addSqlHintOrComment (p0: String , p1: QueryParameters, p2: Boolean ): String appendLockHint [jvm] open fun appendLockHint (p0: LockOptions, p1: String ): String applyLocksToSql [jvm] open fun applyLocksToSql (p0: String , p1: LockOptions, p2: MutableMap < String , Array < String >>): String areStringComparisonsCaseInsensitive [jvm] open override fun areStringComparisonsCaseInsensitive (): Boolean augmentRecognizedTableTypes [jvm] open fun augmentRecognizedTableTypes (p0: MutableList < String >) buildIdentifierHelper [jvm] open override fun buildIdentifierHelper (p0: IdentifierHelperBuilder, p1: DatabaseMetaData ): IdentifierHelper buildSQLExceptionConversionDelegate [jvm] open override fun buildSQLExceptionConversionDelegate (): SQLExceptionConversionDelegate canCreateCatalog [jvm] open override fun canCreateCatalog (): Boolean canCreateSchema [jvm] open override fun canCreateSchema (): Boolean cast [jvm] open fun cast (p0: String , p1: Int , p2: Int ): String open fun cast (p0: String , p1: Int , p2: Int , p3: Int ): String open fun cast (p0: String , p1: Int , p2: Int , p3: Int , p4: Int ): String closeQuote [jvm] open override fun closeQuote (): Char contributeTypes [jvm] open fun contributeTypes (p0: TypeContributions, p1: ServiceRegistry) createCaseFragment [jvm] open fun createCaseFragment (): CaseFragment createOuterJoinFragment [jvm] open fun createOuterJoinFragment (): JoinFragment defaultScrollMode [jvm] open fun defaultScrollMode (): ScrollMode doesReadCommittedCauseWritersToBlockReaders [jvm] open fun doesReadCommittedCauseWritersToBlockReaders (): Boolean doesRepeatableReadCauseReadersToBlockWriters [jvm] open fun doesRepeatableReadCauseReadersToBlockWriters (): Boolean dropConstraints [jvm] open override fun dropConstraints (): Boolean equivalentTypes [jvm] open fun equivalentTypes (p0: Int , p1: Int ): Boolean escapeLiteral [jvm] open override fun escapeLiteral (p0: String ): String fixedPointNumberCastTarget [jvm] open fun fixedPointNumberCastTarget (): String floatingPointNumberCastTarget [jvm] open fun floatingPointNumberCastTarget (): String forceLobAsLastValue [jvm] open fun forceLobAsLastValue (): Boolean forUpdateOfColumns [jvm] open fun forUpdateOfColumns (): Boolean getAddColumnString [jvm] open override fun getAddColumnString (): String getAddColumnSuffixString [jvm] open fun getAddColumnSuffixString (): String getAddForeignKeyConstraintString [jvm] open fun getAddForeignKeyConstraintString (p0: String , p1: String ): String open override fun getAddForeignKeyConstraintString (p0: String , p1: Array < String >, p2: String , p3: Array < String >, p4: Boolean ): String getAddPrimaryKeyConstraintString [jvm] open fun getAddPrimaryKeyConstraintString (p0: String ): String getAlterTableString [jvm] open fun getAlterTableString (p0: String ): String getAuxiliaryDatabaseObjectExporter [jvm] open fun getAuxiliaryDatabaseObjectExporter (): Exporter<AuxiliaryDatabaseObject> getCallableStatementSupport [jvm] open fun getCallableStatementSupport (): CallableStatementSupport getCascadeConstraintsString [jvm] open fun getCascadeConstraintsString (): String getCaseInsensitiveLike [jvm] open fun getCaseInsensitiveLike (): String getCastTypeName [jvm] open override fun getCastTypeName (p0: Int ): String getColumnAliasExtractor [jvm] open fun getColumnAliasExtractor (): ColumnAliasExtractor getColumnComment [jvm] open override fun getColumnComment (p0: String ): String getCreateCatalogCommand [jvm] open override fun getCreateCatalogCommand (p0: String ): Array < String > getCreateMultisetTableString [jvm] open fun getCreateMultisetTableString (): String getCreateSchemaCommand [jvm] open override fun getCreateSchemaCommand (p0: String ): Array < String > getCreateSequenceString [jvm] open fun getCreateSequenceString (p0: String ): String open fun getCreateSequenceString (p0: String , p1: Int , p2: Int ): String getCreateSequenceStrings [jvm] open fun getCreateSequenceStrings (p0: String , p1: Int , p2: Int ): Array < String > getCreateTableString [jvm] open fun getCreateTableString (): String getCreateTemporaryTableColumnAnnotation [jvm] open fun getCreateTemporaryTableColumnAnnotation (p0: Int ): String getCrossJoinSeparator [jvm] open fun getCrossJoinSeparator (): String getCurrentSchemaCommand [jvm] open fun getCurrentSchemaCommand (): String getCurrentTimestampSelectString [jvm] open override fun getCurrentTimestampSelectString (): String getCurrentTimestampSQLFunctionName [jvm] open fun getCurrentTimestampSQLFunctionName (): String getDefaultBatchLoadSizingStrategy [jvm] open fun getDefaultBatchLoadSizingStrategy (): BatchLoadSizingStrategy getDefaultMultiTableBulkIdStrategy [jvm] open override fun getDefaultMultiTableBulkIdStrategy (): MultiTableBulkIdStrategy getDefaultMySQLStorageEngine [jvm] open override fun getDefaultMySQLStorageEngine (): MySQLStorageEngine getDefaultProperties [jvm] fun getDefaultProperties (): Properties getDropCatalogCommand [jvm] open override fun getDropCatalogCommand (p0: String ): Array < String > getDropForeignKeyString [jvm] open override fun getDropForeignKeyString (): String getDropSchemaCommand [jvm] open override fun getDropSchemaCommand (p0: String ): Array < String > getDropSequenceString [jvm] open fun getDropSequenceString (p0: String ): String getDropSequenceStrings [jvm] open fun getDropSequenceStrings (p0: String ): Array < String > getDropTableString [jvm] open fun getDropTableString (p0: String ): String getEngineKeyword [jvm] open override fun getEngineKeyword (): String getForeignKeyExporter [jvm] open fun getForeignKeyExporter (): Exporter<ForeignKey> getForUpdateNowaitString [jvm] open fun getForUpdateNowaitString (): String open fun getForUpdateNowaitString (p0: String ): String getForUpdateSkipLockedString [jvm] open fun getForUpdateSkipLockedString (): String open fun getForUpdateSkipLockedString (p0: String ): String getForUpdateString [jvm] open override fun getForUpdateString (): String open fun getForUpdateString (p0: String ): String open fun getForUpdateString (p0: LockMode): String open fun getForUpdateString (p0: LockOptions): String open fun getForUpdateString (p0: String , p1: LockOptions): String getFunctions [jvm] fun getFunctions (): MutableMap < String , SQLFunction> getHibernateTypeName [jvm] open fun getHibernateTypeName (p0: Int ): String open fun getHibernateTypeName (p0: Int , p1: Int , p2: Int , p3: Int ): String getIdentityColumnSupport [jvm] open override fun getIdentityColumnSupport (): IdentityColumnSupport getIndexExporter [jvm] open fun getIndexExporter (): Exporter<Index> getInExpressionCountLimit [jvm] open fun getInExpressionCountLimit (): Int getLimitHandler [jvm] open override fun getLimitHandler (): LimitHandler getLimitString [jvm] open override fun getLimitString (p0: String , p1: Boolean ): String getLobMergeStrategy [jvm] open fun getLobMergeStrategy (): LobMergeStrategy getLockingStrategy [jvm] open fun getLockingStrategy (p0: Lockable, p1: LockMode): LockingStrategy getLowercaseFunction [jvm] open fun getLowercaseFunction (): String getMaxAliasLength [jvm] open fun getMaxAliasLength (): Int getNameQualifierSupport [jvm] open fun getNameQualifierSupport (): NameQualifierSupport getNativeIdentifierGeneratorStrategy [jvm] open fun getNativeIdentifierGeneratorStrategy (): String getNoColumnsInsertString [jvm] open fun getNoColumnsInsertString (): String getNotExpression [jvm] open override fun getNotExpression (p0: String ): String getNullColumnString [jvm] open fun getNullColumnString (): String getQueryHintString [jvm] open fun getQueryHintString (p0: String , p1: MutableList < String >): String open override fun getQueryHintString (p0: String , p1: String ): String getQuerySequencesString [jvm] open fun getQuerySequencesString (): String getReadLockString [jvm] open override fun getReadLockString (p0: Int ): String open fun getReadLockString (p0: String , p1: Int ): String getResultSet [jvm] open override fun getResultSet (p0: CallableStatement ): ResultSet open fun getResultSet (p0: CallableStatement , p1: Int ): ResultSet open fun getResultSet (p0: CallableStatement , p1: String ): ResultSet getSchemaNameResolver [jvm] open fun getSchemaNameResolver (): SchemaNameResolver getSelectClauseNullString [jvm] open fun getSelectClauseNullString (p0: Int ): String getSelectGUIDString [jvm] open override fun getSelectGUIDString (): String getSelectSequenceNextValString [jvm] open fun getSelectSequenceNextValString (p0: String ): String getSequenceExporter [jvm] open fun getSequenceExporter (): Exporter<Sequence> getSequenceInformationExtractor [jvm] open fun getSequenceInformationExtractor (): SequenceInformationExtractor getSequenceNextValString [jvm] open fun getSequenceNextValString (p0: String ): String getSqlTypeDescriptorOverride [jvm] open fun getSqlTypeDescriptorOverride (p0: Int ): SqlTypeDescriptor getTableComment [jvm] open override fun getTableComment (p0: String ): String getTableExporter [jvm] open fun getTableExporter (): Exporter<Table> getTableTypeString [jvm] open override fun getTableTypeString (): String getTypeName [jvm] open fun getTypeName (p0: Int ): String open fun getTypeName (p0: Int , p1: Long , p2: Int , p3: Int ): String getUniqueDelegate [jvm] open override fun getUniqueDelegate (): UniqueDelegate getUniqueKeyExporter [jvm] open fun getUniqueKeyExporter (): Exporter<Constraint> getViolatedConstraintNameExtracter [jvm] open override fun getViolatedConstraintNameExtracter (): ViolatedConstraintNameExtracter getWriteLockString [jvm] open override fun getWriteLockString (p0: Int ): String open fun getWriteLockString (p0: String , p1: Int ): String hasAlterTable [jvm] open fun hasAlterTable (): Boolean hasSelfReferentialForeignKeyBug [jvm] open override fun hasSelfReferentialForeignKeyBug (): Boolean inlineLiteral [jvm] open fun inlineLiteral (p0: String ): String isCurrentTimestampSelectStringCallable [jvm] open override fun isCurrentTimestampSelectStringCallable (): Boolean isJdbcLogWarningsEnabledByDefault [jvm] open override fun isJdbcLogWarningsEnabledByDefault (): Boolean isLegacyLimitHandlerBehaviorEnabled [jvm] open fun isLegacyLimitHandlerBehaviorEnabled (): Boolean isLockTimeoutParameterized [jvm] open fun isLockTimeoutParameterized (): Boolean isTypeNameRegistered [jvm] open fun isTypeNameRegistered (p0: String ): Boolean openQuote [jvm] open override fun openQuote (): Char prependComment [jvm] open fun prependComment (p0: String , p1: String ): String qualifyIndexName [jvm] open override fun qualifyIndexName (): Boolean quote [jvm] fun quote (p0: String ): String registerColumnType [jvm] open fun registerColumnType (p0: Int , p1: String ) open fun registerColumnType (p0: Int , p1: Long , p2: String ) registerFunction [jvm] open fun registerFunction (p0: String , p1: SQLFunction) registerHibernateType [jvm] open fun registerHibernateType (p0: Int , p1: String ) open fun registerHibernateType (p0: Int , p1: Long , p2: String ) registerKeyword [jvm] open fun registerKeyword (p0: String ) registerResultSetOutParameter [jvm] open fun registerResultSetOutParameter (p0: CallableStatement , p1: String ): Int open override fun registerResultSetOutParameter (p0: CallableStatement , p1: Int ): Int registerVarcharTypes [jvm] open override fun registerVarcharTypes () remapSqlTypeDescriptor [jvm] open fun remapSqlTypeDescriptor (p0: SqlTypeDescriptor): SqlTypeDescriptor renderOrderByElement [jvm] open override fun renderOrderByElement (p0: String , p1: String , p2: String , p3: NullPrecedence): String replaceResultVariableInOrderByClauseWithPosition [jvm] open fun replaceResultVariableInOrderByClauseWithPosition (): Boolean requiresCastingOfParametersInSelectClause [jvm] open fun requiresCastingOfParametersInSelectClause (): Boolean requiresParensForTupleDistinctCounts [jvm] open fun requiresParensForTupleDistinctCounts (): Boolean smallIntegerCastTarget [jvm] open fun smallIntegerCastTarget (): String supportsBindAsCallableArgument [jvm] open fun supportsBindAsCallableArgument (): Boolean supportsCascadeDelete [jvm] open override fun supportsCascadeDelete (): Boolean supportsCaseInsensitiveLike [jvm] open fun supportsCaseInsensitiveLike (): Boolean supportsCircularCascadeDeleteConstraints [jvm] open fun supportsCircularCascadeDeleteConstraints (): Boolean supportsColumnCheck [jvm] open override fun supportsColumnCheck (): Boolean supportsCommentOn [jvm] open fun supportsCommentOn (): Boolean supportsCurrentTimestampSelection [jvm] open override fun supportsCurrentTimestampSelection (): Boolean supportsEmptyInList [jvm] open override fun supportsEmptyInList (): Boolean supportsExistsInSelect [jvm] open fun supportsExistsInSelect (): Boolean supportsExpectedLobUsagePattern [jvm] open fun supportsExpectedLobUsagePattern (): Boolean supportsIfExistsAfterAlterTable [jvm] open fun supportsIfExistsAfterAlterTable (): Boolean supportsIfExistsAfterConstraintName [jvm] open fun supportsIfExistsAfterConstraintName (): Boolean supportsIfExistsAfterTableName [jvm] open fun supportsIfExistsAfterTableName (): Boolean supportsIfExistsBeforeConstraintName [jvm] open fun supportsIfExistsBeforeConstraintName (): Boolean supportsIfExistsBeforeTableName [jvm] open override fun supportsIfExistsBeforeTableName (): Boolean supportsJdbcConnectionLobCreation [jvm] open fun supportsJdbcConnectionLobCreation (p0: DatabaseMetaData ): Boolean supportsLimit [jvm] open override fun supportsLimit (): Boolean supportsLobValueChangePropogation [jvm] open override fun supportsLobValueChangePropogation (): Boolean supportsLockTimeouts [jvm] open override fun supportsLockTimeouts (): Boolean supportsNamedParameters [jvm] open fun supportsNamedParameters (p0: DatabaseMetaData ): Boolean supportsNationalizedTypes [jvm] open fun supportsNationalizedTypes (): Boolean supportsNoColumnsInsert [jvm] open fun supportsNoColumnsInsert (): Boolean supportsNonQueryWithCTE [jvm] open fun supportsNonQueryWithCTE (): Boolean supportsNoWait [jvm] open fun supportsNoWait (): Boolean supportsOuterJoinForUpdate [jvm] open fun supportsOuterJoinForUpdate (): Boolean supportsParametersInInsertSelect [jvm] open fun supportsParametersInInsertSelect (): Boolean supportsPartitionBy [jvm] open fun supportsPartitionBy (): Boolean supportsPooledSequences [jvm] open fun supportsPooledSequences (): Boolean supportsResultSetPositionQueryMethodsOnForwardOnlyCursor [jvm] open fun supportsResultSetPositionQueryMethodsOnForwardOnlyCursor (): Boolean supportsRowValueConstructorSyntax [jvm] open override fun supportsRowValueConstructorSyntax (): Boolean supportsRowValueConstructorSyntaxInInList [jvm] open override fun supportsRowValueConstructorSyntaxInInList (): Boolean supportsRowValueConstructorSyntaxInSet [jvm] open override fun supportsRowValueConstructorSyntaxInSet (): Boolean supportsSelectAliasInGroupByClause [jvm] open override fun supportsSelectAliasInGroupByClause (): Boolean supportsSequences [jvm] open fun supportsSequences (): Boolean supportsSkipLocked [jvm] open fun supportsSkipLocked (): Boolean supportsSubqueryOnMutatingTable [jvm] open override fun supportsSubqueryOnMutatingTable (): Boolean supportsSubselectAsInPredicateLHS [jvm] open fun supportsSubselectAsInPredicateLHS (): Boolean supportsTableCheck [jvm] open fun supportsTableCheck (): Boolean supportsTupleCounts [jvm] open fun supportsTupleCounts (): Boolean supportsTupleDistinctCounts [jvm] open fun supportsTupleDistinctCounts (): Boolean supportsTuplesInSubqueries [jvm] open fun supportsTuplesInSubqueries (): Boolean supportsUnboundedLobLocatorMaterialization [jvm] open fun supportsUnboundedLobLocatorMaterialization (): Boolean supportsUnionAll [jvm] open override fun supportsUnionAll (): Boolean supportsValuesList [jvm] open fun supportsValuesList (): Boolean toBooleanValueString [jvm] open fun toBooleanValueString (p0: Boolean ): String toString [jvm] open override fun toString (): String transformSelectString [jvm] open fun transformSelectString (p0: String ): String useFollowOnLocking [jvm] open fun useFollowOnLocking (p0: QueryParameters): Boolean useInputStreamToInsertBlob [jvm] open override fun useInputStreamToInsertBlob (): Boolean","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/#properties","text":"Name Summary STANDARD_DEFAULT_BATCH_LOAD_SIZING_STRATEGY [jvm] val STANDARD_DEFAULT_BATCH_LOAD_SIZING_STRATEGY : BatchLoadSizingStrategy","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/-vitess-dialect/","text":"// misk-hibernate / misk.hibernate / VitessDialect / VitessDialect VitessDialect \u00b6 [jvm]\\ fun VitessDialect ()","title":"VitessDialect - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/-vitess-dialect/#vitessdialect","text":"[jvm]\\ fun VitessDialect ()","title":"VitessDialect"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/build-s-q-l-exception-conversion-delegate/","text":"// misk-hibernate / misk.hibernate / VitessDialect / buildSQLExceptionConversionDelegate buildSQLExceptionConversionDelegate \u00b6 [jvm]\\ open override fun buildSQLExceptionConversionDelegate (): SQLExceptionConversionDelegate","title":"buildSQLExceptionConversionDelegate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/build-s-q-l-exception-conversion-delegate/#buildsqlexceptionconversiondelegate","text":"[jvm]\\ open override fun buildSQLExceptionConversionDelegate (): SQLExceptionConversionDelegate","title":"buildSQLExceptionConversionDelegate"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/use-input-stream-to-insert-blob/","text":"// misk-hibernate / misk.hibernate / VitessDialect / useInputStreamToInsertBlob useInputStreamToInsertBlob \u00b6 [jvm]\\ open override fun useInputStreamToInsertBlob (): Boolean","title":"useInputStreamToInsertBlob - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate/-vitess-dialect/use-input-stream-to-insert-blob/#useinputstreamtoinsertblob","text":"[jvm]\\ open override fun useInputStreamToInsertBlob (): Boolean","title":"useInputStreamToInsertBlob"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/","text":"// misk-hibernate / misk.hibernate.annotation Package misk.hibernate.annotation \u00b6 Types \u00b6 Name Summary Keyspace [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class Keyspace (value: String ) Functions \u00b6 Name Summary keyspace [jvm] fun Keyspace . keyspace (): Keyspace","title":"Package misk.hibernate.annotation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/#package-miskhibernateannotation","text":"","title":"Package misk.hibernate.annotation"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/#types","text":"Name Summary Keyspace [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class Keyspace (value: String )","title":"Types"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/#functions","text":"Name Summary keyspace [jvm] fun Keyspace . keyspace (): Keyspace","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/keyspace/","text":"// misk-hibernate / misk.hibernate.annotation / keyspace keyspace \u00b6 [jvm]\\ fun Keyspace . keyspace (): Keyspace","title":"keyspace - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/keyspace/#keyspace","text":"[jvm]\\ fun Keyspace . keyspace (): Keyspace","title":"keyspace"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/","text":"// misk-hibernate / misk.hibernate.annotation / Keyspace Keyspace \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class Keyspace (value: String ) Properties \u00b6 Name Summary value [jvm] val value : String Extensions \u00b6 Name Summary keyspace [jvm] fun Keyspace . keyspace (): Keyspace","title":"Keyspace - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/#keyspace","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) annotation class Keyspace (value: String )","title":"Keyspace"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/#properties","text":"Name Summary value [jvm] val value : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/#extensions","text":"Name Summary keyspace [jvm] fun Keyspace . keyspace (): Keyspace","title":"Extensions"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/-keyspace/","text":"// misk-hibernate / misk.hibernate.annotation / Keyspace / Keyspace Keyspace \u00b6 [jvm]\\ fun Keyspace (value: String )","title":"Keyspace - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/-keyspace/#keyspace","text":"[jvm]\\ fun Keyspace (value: String )","title":"Keyspace"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/value/","text":"// misk-hibernate / misk.hibernate.annotation / Keyspace / value value \u00b6 [jvm]\\ val value : String","title":"value - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.annotation/-keyspace/value/#value","text":"[jvm]\\ val value : String","title":"value"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/","text":"// misk-hibernate / misk.hibernate.migrate Package misk.hibernate.migrate \u00b6 Types \u00b6 Name Summary BulkShardMigrator [jvm] class BulkShardMigrator < R : DbRoot < R >, C : DbChild < R , C >> BulkShardMigrator facilitates moving of child entities belonging to a source root entity to target root entity in bulk. Source or target entity can either live on the same or different shards.","title":"Package misk.hibernate.migrate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/#package-miskhibernatemigrate","text":"","title":"Package misk.hibernate.migrate"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/#types","text":"Name Summary BulkShardMigrator [jvm] class BulkShardMigrator < R : DbRoot < R >, C : DbChild < R , C >> BulkShardMigrator facilitates moving of child entities belonging to a source root entity to target root entity in bulk. Source or target entity can either live on the same or different shards.","title":"Types"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator BulkShardMigrator \u00b6 [jvm]\\ class BulkShardMigrator < R : DbRoot < R >, C : DbChild < R , C >> BulkShardMigrator facilitates moving of child entities belonging to a source root entity to target root entity in bulk. Source or target entity can either live on the same or different shards. If moving between shards it will copy the rows between shards using a SELECT and a batched INSERT statements. The mutations are applied to the result set in memory between the SELECT and the batch INSERT. An example of moving rows from characters table that is sharded by movie_id from source_id to target_id: bulkShardMigratorFactory.create(transacter, sessionFactory, DbMovie::class, DbCharacter::class) .rootColumn(\u201cmovie_id\u201d) .source(sourceId) .target(targetId) .execute() Types \u00b6 Name Summary Companion [jvm] object Companion Factory [jvm] @Singleton class Factory @Injectconstructor IncMutation [jvm] class IncMutation (column: String ) : BulkShardMigrator.Mutation Mutation [jvm] abstract class Mutation NowMutation [jvm] class NowMutation (column: String ) : BulkShardMigrator.Mutation SetMappingMutation [jvm] class SetMappingMutation (column: String , valueMapper: Function < Any , Any >) : BulkShardMigrator.Mutation SetMutation [jvm] class SetMutation (column: String , value: Any ) : BulkShardMigrator.Mutation Functions \u00b6 Name Summary batched [jvm] fun batched (): BulkShardMigrator < R , C > batchSize [jvm] fun batchSize (batchSize: Int ): BulkShardMigrator < R , C > execute [jvm] fun execute (insertIgnore: Boolean = false) inc [jvm] operator fun inc (column: String ): BulkShardMigrator < R , C > latestBatchOnly [jvm] fun latestBatchOnly (latestBatchOnly: Boolean ): BulkShardMigrator < R , C > now [jvm] fun now (column: String ): BulkShardMigrator < R , C > rootColumn [jvm] fun rootColumn (columnName: String ): BulkShardMigrator < R , C > set [jvm] operator fun set (column: String , valueMapper: Function < Any , Any >): BulkShardMigrator < R , C > operator fun set (column: String , value: Any ): BulkShardMigrator < R , C > source [jvm] fun source (sourceRoot: Id < R >): BulkShardMigrator < R , C > target [jvm] fun target (targetRoot: Id < R >): BulkShardMigrator < R , C > where [jvm] fun where (where: String , vararg parameters: Any ): BulkShardMigrator < R , C > fun where (where: String , parameters: List <*>): BulkShardMigrator < R , C >","title":"BulkShardMigrator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/#bulkshardmigrator","text":"[jvm]\\ class BulkShardMigrator < R : DbRoot < R >, C : DbChild < R , C >> BulkShardMigrator facilitates moving of child entities belonging to a source root entity to target root entity in bulk. Source or target entity can either live on the same or different shards. If moving between shards it will copy the rows between shards using a SELECT and a batched INSERT statements. The mutations are applied to the result set in memory between the SELECT and the batch INSERT. An example of moving rows from characters table that is sharded by movie_id from source_id to target_id: bulkShardMigratorFactory.create(transacter, sessionFactory, DbMovie::class, DbCharacter::class) .rootColumn(\u201cmovie_id\u201d) .source(sourceId) .target(targetId) .execute()","title":"BulkShardMigrator"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/#types","text":"Name Summary Companion [jvm] object Companion Factory [jvm] @Singleton class Factory @Injectconstructor IncMutation [jvm] class IncMutation (column: String ) : BulkShardMigrator.Mutation Mutation [jvm] abstract class Mutation NowMutation [jvm] class NowMutation (column: String ) : BulkShardMigrator.Mutation SetMappingMutation [jvm] class SetMappingMutation (column: String , valueMapper: Function < Any , Any >) : BulkShardMigrator.Mutation SetMutation [jvm] class SetMutation (column: String , value: Any ) : BulkShardMigrator.Mutation","title":"Types"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/#functions","text":"Name Summary batched [jvm] fun batched (): BulkShardMigrator < R , C > batchSize [jvm] fun batchSize (batchSize: Int ): BulkShardMigrator < R , C > execute [jvm] fun execute (insertIgnore: Boolean = false) inc [jvm] operator fun inc (column: String ): BulkShardMigrator < R , C > latestBatchOnly [jvm] fun latestBatchOnly (latestBatchOnly: Boolean ): BulkShardMigrator < R , C > now [jvm] fun now (column: String ): BulkShardMigrator < R , C > rootColumn [jvm] fun rootColumn (columnName: String ): BulkShardMigrator < R , C > set [jvm] operator fun set (column: String , valueMapper: Function < Any , Any >): BulkShardMigrator < R , C > operator fun set (column: String , value: Any ): BulkShardMigrator < R , C > source [jvm] fun source (sourceRoot: Id < R >): BulkShardMigrator < R , C > target [jvm] fun target (targetRoot: Id < R >): BulkShardMigrator < R , C > where [jvm] fun where (where: String , vararg parameters: Any ): BulkShardMigrator < R , C > fun where (where: String , parameters: List <*>): BulkShardMigrator < R , C >","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/batch-size/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / batchSize batchSize \u00b6 [jvm]\\ fun batchSize (batchSize: Int ): BulkShardMigrator < R , C >","title":"batchSize - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/batch-size/#batchsize","text":"[jvm]\\ fun batchSize (batchSize: Int ): BulkShardMigrator < R , C >","title":"batchSize"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/batched/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / batched batched \u00b6 [jvm]\\ fun batched (): BulkShardMigrator < R , C >","title":"batched - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/batched/#batched","text":"[jvm]\\ fun batched (): BulkShardMigrator < R , C >","title":"batched"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/execute/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / execute execute \u00b6 [jvm]\\ fun execute (insertIgnore: Boolean = false)","title":"execute - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/execute/#execute","text":"[jvm]\\ fun execute (insertIgnore: Boolean = false)","title":"execute"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/inc/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / inc inc \u00b6 [jvm]\\ operator fun inc (column: String ): BulkShardMigrator < R , C >","title":"inc - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/inc/#inc","text":"[jvm]\\ operator fun inc (column: String ): BulkShardMigrator < R , C >","title":"inc"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/latest-batch-only/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / latestBatchOnly latestBatchOnly \u00b6 [jvm]\\ fun latestBatchOnly (latestBatchOnly: Boolean ): BulkShardMigrator < R , C >","title":"latestBatchOnly - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/latest-batch-only/#latestbatchonly","text":"[jvm]\\ fun latestBatchOnly (latestBatchOnly: Boolean ): BulkShardMigrator < R , C >","title":"latestBatchOnly"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/now/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / now now \u00b6 [jvm]\\ fun now (column: String ): BulkShardMigrator < R , C >","title":"now - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/now/#now","text":"[jvm]\\ fun now (column: String ): BulkShardMigrator < R , C >","title":"now"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/root-column/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / rootColumn rootColumn \u00b6 [jvm]\\ fun rootColumn (columnName: String ): BulkShardMigrator < R , C >","title":"rootColumn - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/root-column/#rootcolumn","text":"[jvm]\\ fun rootColumn (columnName: String ): BulkShardMigrator < R , C >","title":"rootColumn"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/set/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / set set \u00b6 [jvm]\\ operator fun set (column: String , value: Any ): BulkShardMigrator < R , C > operator fun set (column: String , valueMapper: Function < Any , Any >): BulkShardMigrator < R , C >","title":"set - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/set/#set","text":"[jvm]\\ operator fun set (column: String , value: Any ): BulkShardMigrator < R , C > operator fun set (column: String , valueMapper: Function < Any , Any >): BulkShardMigrator < R , C >","title":"set"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/source/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / source source \u00b6 [jvm]\\ fun source (sourceRoot: Id < R >): BulkShardMigrator < R , C >","title":"source - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/source/#source","text":"[jvm]\\ fun source (sourceRoot: Id < R >): BulkShardMigrator < R , C >","title":"source"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/target/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / target target \u00b6 [jvm]\\ fun target (targetRoot: Id < R >): BulkShardMigrator < R , C >","title":"target - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/target/#target","text":"[jvm]\\ fun target (targetRoot: Id < R >): BulkShardMigrator < R , C >","title":"target"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/where/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / where where \u00b6 [jvm]\\ fun where (where: String , vararg parameters: Any ): BulkShardMigrator < R , C > fun where (where: String , parameters: List <*>): BulkShardMigrator < R , C >","title":"where - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/where/#where","text":"[jvm]\\ fun where (where: String , vararg parameters: Any ): BulkShardMigrator < R , C > fun where (where: String , parameters: List <*>): BulkShardMigrator < R , C >","title":"where"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-companion/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-factory/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Factory Factory \u00b6 [jvm]\\ @Singleton class Factory @Injectconstructor Functions \u00b6 Name Summary create [jvm] fun < R : DbRoot < R >, C : DbChild < R , C >> create (transacter: Transacter , sessionFactory: SessionFactory, rootClass: KClass < R >, childClass: KClass < C >): BulkShardMigrator < R , C >","title":"Factory - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-factory/#factory","text":"[jvm]\\ @Singleton class Factory @Injectconstructor","title":"Factory"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-factory/#functions","text":"Name Summary create [jvm] fun < R : DbRoot < R >, C : DbChild < R , C >> create (transacter: Transacter , sessionFactory: SessionFactory, rootClass: KClass < R >, childClass: KClass < C >): BulkShardMigrator < R , C >","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-factory/-factory/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Factory / Factory Factory \u00b6 [jvm]\\ @Inject fun Factory ()","title":"Factory - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-factory/-factory/#factory","text":"[jvm]\\ @Inject fun Factory ()","title":"Factory"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-factory/create/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Factory / create create \u00b6 [jvm]\\ fun < R : DbRoot < R >, C : DbChild < R , C >> create (transacter: Transacter , sessionFactory: SessionFactory, rootClass: KClass < R >, childClass: KClass < C >): BulkShardMigrator < R , C >","title":"create - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-factory/create/#create","text":"[jvm]\\ fun < R : DbRoot < R >, C : DbChild < R , C >> create (transacter: Transacter , sessionFactory: SessionFactory, rootClass: KClass < R >, childClass: KClass < C >): BulkShardMigrator < R , C >","title":"create"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / IncMutation IncMutation \u00b6 [jvm]\\ class IncMutation (column: String ) : BulkShardMigrator.Mutation Functions \u00b6 Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open override fun updateSql (): String","title":"IncMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/#incmutation","text":"[jvm]\\ class IncMutation (column: String ) : BulkShardMigrator.Mutation","title":"IncMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/#functions","text":"Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open override fun updateSql (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/-inc-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / IncMutation / IncMutation IncMutation \u00b6 [jvm]\\ fun IncMutation (column: String )","title":"IncMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/-inc-mutation/#incmutation","text":"[jvm]\\ fun IncMutation (column: String )","title":"IncMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/bind-insert/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / IncMutation / bindInsert bindInsert \u00b6 [jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/bind-insert/#bindinsert","text":"[jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/bind-update/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / IncMutation / bindUpdate bindUpdate \u00b6 [jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/bind-update/#bindupdate","text":"[jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/update-sql/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / IncMutation / updateSql updateSql \u00b6 [jvm]\\ open override fun updateSql (): String","title":"updateSql - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-inc-mutation/update-sql/#updatesql","text":"[jvm]\\ open override fun updateSql (): String","title":"updateSql"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Mutation Mutation \u00b6 [jvm]\\ abstract class Mutation Functions \u00b6 Name Summary bindInsert [jvm] open fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] abstract fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open fun updateSql (): String Inheritors \u00b6 Name SetMutation SetMappingMutation NowMutation IncMutation","title":"Mutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/#mutation","text":"[jvm]\\ abstract class Mutation","title":"Mutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/#functions","text":"Name Summary bindInsert [jvm] open fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] abstract fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open fun updateSql (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/#inheritors","text":"Name SetMutation SetMappingMutation NowMutation IncMutation","title":"Inheritors"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Mutation / Mutation Mutation \u00b6 [jvm]\\ fun Mutation ()","title":"Mutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/-mutation/#mutation","text":"[jvm]\\ fun Mutation ()","title":"Mutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/bind-insert/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Mutation / bindInsert bindInsert \u00b6 [jvm]\\ open fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/bind-insert/#bindinsert","text":"[jvm]\\ open fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/bind-update/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Mutation / bindUpdate bindUpdate \u00b6 [jvm]\\ abstract fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/bind-update/#bindupdate","text":"[jvm]\\ abstract fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/insert-sql/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Mutation / insertSql insertSql \u00b6 [jvm]\\ open fun insertSql (): String","title":"insertSql - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/insert-sql/#insertsql","text":"[jvm]\\ open fun insertSql (): String","title":"insertSql"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/update-sql/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / Mutation / updateSql updateSql \u00b6 [jvm]\\ open fun updateSql (): String","title":"updateSql - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-mutation/update-sql/#updatesql","text":"[jvm]\\ open fun updateSql (): String","title":"updateSql"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / NowMutation NowMutation \u00b6 [jvm]\\ class NowMutation (column: String ) : BulkShardMigrator.Mutation Functions \u00b6 Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open override fun insertSql (): String updateSql [jvm] open override fun updateSql (): String","title":"NowMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/#nowmutation","text":"[jvm]\\ class NowMutation (column: String ) : BulkShardMigrator.Mutation","title":"NowMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/#functions","text":"Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open override fun insertSql (): String updateSql [jvm] open override fun updateSql (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/-now-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / NowMutation / NowMutation NowMutation \u00b6 [jvm]\\ fun NowMutation (column: String )","title":"NowMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/-now-mutation/#nowmutation","text":"[jvm]\\ fun NowMutation (column: String )","title":"NowMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/bind-insert/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / NowMutation / bindInsert bindInsert \u00b6 [jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/bind-insert/#bindinsert","text":"[jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/bind-update/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / NowMutation / bindUpdate bindUpdate \u00b6 [jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/bind-update/#bindupdate","text":"[jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/insert-sql/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / NowMutation / insertSql insertSql \u00b6 [jvm]\\ open override fun insertSql (): String","title":"insertSql - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/insert-sql/#insertsql","text":"[jvm]\\ open override fun insertSql (): String","title":"insertSql"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/update-sql/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / NowMutation / updateSql updateSql \u00b6 [jvm]\\ open override fun updateSql (): String","title":"updateSql - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-now-mutation/update-sql/#updatesql","text":"[jvm]\\ open override fun updateSql (): String","title":"updateSql"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMappingMutation SetMappingMutation \u00b6 [jvm]\\ class SetMappingMutation (column: String , valueMapper: Function < Any , Any >) : BulkShardMigrator.Mutation Functions \u00b6 Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open fun updateSql (): String","title":"SetMappingMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/#setmappingmutation","text":"[jvm]\\ class SetMappingMutation (column: String , valueMapper: Function < Any , Any >) : BulkShardMigrator.Mutation","title":"SetMappingMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/#functions","text":"Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open fun updateSql (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/-set-mapping-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMappingMutation / SetMappingMutation SetMappingMutation \u00b6 [jvm]\\ fun SetMappingMutation (column: String , valueMapper: Function < Any , Any >)","title":"SetMappingMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/-set-mapping-mutation/#setmappingmutation","text":"[jvm]\\ fun SetMappingMutation (column: String , valueMapper: Function < Any , Any >)","title":"SetMappingMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/bind-insert/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMappingMutation / bindInsert bindInsert \u00b6 [jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/bind-insert/#bindinsert","text":"[jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/bind-update/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMappingMutation / bindUpdate bindUpdate \u00b6 [jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mapping-mutation/bind-update/#bindupdate","text":"[jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMutation SetMutation \u00b6 [jvm]\\ class SetMutation (column: String , value: Any ) : BulkShardMigrator.Mutation Functions \u00b6 Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open fun updateSql (): String","title":"SetMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/#setmutation","text":"[jvm]\\ class SetMutation (column: String , value: Any ) : BulkShardMigrator.Mutation","title":"SetMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/#functions","text":"Name Summary bindInsert [jvm] open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int bindUpdate [jvm] open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int insertSql [jvm] open fun insertSql (): String updateSql [jvm] open fun updateSql (): String","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/-set-mutation/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMutation / SetMutation SetMutation \u00b6 [jvm]\\ fun SetMutation (column: String , value: Any )","title":"SetMutation - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/-set-mutation/#setmutation","text":"[jvm]\\ fun SetMutation (column: String , value: Any )","title":"SetMutation"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/bind-insert/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMutation / bindInsert bindInsert \u00b6 [jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/bind-insert/#bindinsert","text":"[jvm]\\ open override fun bindInsert (insert: PreparedStatement , parameterIndex: Int , value: Any ): Int","title":"bindInsert"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/bind-update/","text":"// misk-hibernate / misk.hibernate.migrate / BulkShardMigrator / SetMutation / bindUpdate bindUpdate \u00b6 [jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.migrate/-bulk-shard-migrator/-set-mutation/bind-update/#bindupdate","text":"[jvm]\\ open override fun bindUpdate (update: PreparedStatement , parameterIndex: Int ): Int","title":"bindUpdate"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/","text":"// misk-hibernate / misk.hibernate.pagination Package misk.hibernate.pagination \u00b6 Types \u00b6 Name Summary Offset [jvm] data class Offset (offset: String ) Offset into a query. Typically this is a string-encoded ID like 5, or a composite containing a date followed by an ID, like \u201c2019-08-16T:10:26:51Z/5\u201d. Page [jvm] data class Page < T >(contents: List < T >, nextOffset: Offset ?) Pager [jvm] interface Pager < T > Paginator [jvm] interface Paginator < T , in Q : Query < T >> Breaks a query into pages. Each page break is delimited by a string that is the offset of the last row of the preceding page. Functions \u00b6 Name Summary idAscPaginator [jvm] fun < T : DbEntity < T >> idAscPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by ascending ID. idDescPaginator [jvm] fun < T : DbEntity < T >> idDescPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by descending ID. listAll [jvm] fun < T : DbEntity < T >, R > Pager < T >. listAll (transacter: Transacter , transform: ( T ) -> R ): List < R > newPager [jvm] fun < T : DbEntity < T >, Q : Query < T >> Q . newPager (paginator: Paginator < T , Q >, initialOffset: Offset ? = null, pageSize: Int = 100): Pager < T > Use a null initialOffset to start at the beginning.","title":"Package misk.hibernate.pagination - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/#package-miskhibernatepagination","text":"","title":"Package misk.hibernate.pagination"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/#types","text":"Name Summary Offset [jvm] data class Offset (offset: String ) Offset into a query. Typically this is a string-encoded ID like 5, or a composite containing a date followed by an ID, like \u201c2019-08-16T:10:26:51Z/5\u201d. Page [jvm] data class Page < T >(contents: List < T >, nextOffset: Offset ?) Pager [jvm] interface Pager < T > Paginator [jvm] interface Paginator < T , in Q : Query < T >> Breaks a query into pages. Each page break is delimited by a string that is the offset of the last row of the preceding page.","title":"Types"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/#functions","text":"Name Summary idAscPaginator [jvm] fun < T : DbEntity < T >> idAscPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by ascending ID. idDescPaginator [jvm] fun < T : DbEntity < T >> idDescPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by descending ID. listAll [jvm] fun < T : DbEntity < T >, R > Pager < T >. listAll (transacter: Transacter , transform: ( T ) -> R ): List < R > newPager [jvm] fun < T : DbEntity < T >, Q : Query < T >> Q . newPager (paginator: Paginator < T , Q >, initialOffset: Offset ? = null, pageSize: Int = 100): Pager < T > Use a null initialOffset to start at the beginning.","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/id-asc-paginator/","text":"// misk-hibernate / misk.hibernate.pagination / idAscPaginator idAscPaginator \u00b6 [jvm]\\ fun < T : DbEntity < T >> idAscPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by ascending ID.","title":"idAscPaginator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/id-asc-paginator/#idascpaginator","text":"[jvm]\\ fun < T : DbEntity < T >> idAscPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by ascending ID.","title":"idAscPaginator"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/id-desc-paginator/","text":"// misk-hibernate / misk.hibernate.pagination / idDescPaginator idDescPaginator \u00b6 [jvm]\\ fun < T : DbEntity < T >> idDescPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by descending ID.","title":"idDescPaginator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/id-desc-paginator/#iddescpaginator","text":"[jvm]\\ fun < T : DbEntity < T >> idDescPaginator (idPath: String = \u201cid\u201d): Paginator < T , Query < T >> Pages through entities by descending ID.","title":"idDescPaginator"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/list-all/","text":"// misk-hibernate / misk.hibernate.pagination / listAll listAll \u00b6 [jvm]\\ fun < T : DbEntity < T >, R > Pager < T >. listAll (transacter: Transacter , transform: ( T ) -> R ): List < R >","title":"listAll - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/list-all/#listall","text":"[jvm]\\ fun < T : DbEntity < T >, R > Pager < T >. listAll (transacter: Transacter , transform: ( T ) -> R ): List < R >","title":"listAll"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/new-pager/","text":"// misk-hibernate / misk.hibernate.pagination / newPager newPager \u00b6 [jvm]\\ fun < T : DbEntity < T >, Q : Query < T >> Q . newPager (paginator: Paginator < T , Q >, initialOffset: Offset ? = null, pageSize: Int = 100): Pager < T > Use a null initialOffset to start at the beginning.","title":"newPager - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/new-pager/#newpager","text":"[jvm]\\ fun < T : DbEntity < T >, Q : Query < T >> Q . newPager (paginator: Paginator < T , Q >, initialOffset: Offset ? = null, pageSize: Int = 100): Pager < T > Use a null initialOffset to start at the beginning.","title":"newPager"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/","text":"// misk-hibernate / misk.hibernate.pagination / Offset Offset \u00b6 [jvm]\\ data class Offset (offset: String ) Offset into a query. Typically this is a string-encoded ID like 5, or a composite containing a date followed by an ID, like \u201c2019-08-16T:10:26:51Z/5\u201d. Don\u2019t put PII in here. Clients see these in URLs and API calls, and can manipulate them. This could also potentially leak database growth information! Constructors \u00b6 Offset [jvm] fun Offset (offset: String ) Properties \u00b6 Name Summary offset [jvm] val offset : String","title":"Offset - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/#offset","text":"[jvm]\\ data class Offset (offset: String ) Offset into a query. Typically this is a string-encoded ID like 5, or a composite containing a date followed by an ID, like \u201c2019-08-16T:10:26:51Z/5\u201d. Don\u2019t put PII in here. Clients see these in URLs and API calls, and can manipulate them. This could also potentially leak database growth information!","title":"Offset"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/#constructors","text":"Offset [jvm] fun Offset (offset: String )","title":"Constructors"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/#properties","text":"Name Summary offset [jvm] val offset : String","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/-offset/","text":"// misk-hibernate / misk.hibernate.pagination / Offset / Offset Offset \u00b6 [jvm]\\ fun Offset (offset: String )","title":"Offset - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/-offset/#offset","text":"[jvm]\\ fun Offset (offset: String )","title":"Offset"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/offset/","text":"// misk-hibernate / misk.hibernate.pagination / Offset / offset offset \u00b6 [jvm]\\ val offset : String","title":"offset - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-offset/offset/#offset","text":"[jvm]\\ val offset : String","title":"offset"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/","text":"// misk-hibernate / misk.hibernate.pagination / Page Page \u00b6 [jvm]\\ data class Page < T >(contents: List < T >, nextOffset: Offset ?) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary contents [jvm] val contents : List < T > nextOffset [jvm] val nextOffset : Offset ? Null if there are no more results. Pass this in a subsequent call to Query.newPager.","title":"Page - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/#page","text":"[jvm]\\ data class Page < T >(contents: List < T >, nextOffset: Offset ?)","title":"Page"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/#properties","text":"Name Summary contents [jvm] val contents : List < T > nextOffset [jvm] val nextOffset : Offset ? Null if there are no more results. Pass this in a subsequent call to Query.newPager.","title":"Properties"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/-page/","text":"// misk-hibernate / misk.hibernate.pagination / Page / Page Page \u00b6 [jvm]\\ fun < T > Page (contents: List < T >, nextOffset: Offset ?)","title":"Page - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/-page/#page","text":"[jvm]\\ fun < T > Page (contents: List < T >, nextOffset: Offset ?)","title":"Page"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/contents/","text":"// misk-hibernate / misk.hibernate.pagination / Page / contents contents \u00b6 [jvm]\\ val contents : List < T >","title":"contents - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/contents/#contents","text":"[jvm]\\ val contents : List < T >","title":"contents"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/next-offset/","text":"// misk-hibernate / misk.hibernate.pagination / Page / nextOffset nextOffset \u00b6 [jvm]\\ val nextOffset : Offset ? Null if there are no more results. Pass this in a subsequent call to Query.newPager.","title":"nextOffset - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/next-offset/#nextoffset","text":"[jvm]\\ val nextOffset : Offset ? Null if there are no more results. Pass this in a subsequent call to Query.newPager.","title":"nextOffset"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/-companion/","text":"// misk-hibernate / misk.hibernate.pagination / Page / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary empty [jvm] fun < T > empty (): Page < T >","title":"Companion - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/-companion/#functions","text":"Name Summary empty [jvm] fun < T > empty (): Page < T >","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/-companion/empty/","text":"// misk-hibernate / misk.hibernate.pagination / Page / Companion / empty empty \u00b6 [jvm]\\ fun < T > empty (): Page < T >","title":"empty - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-page/-companion/empty/#empty","text":"[jvm]\\ fun < T > empty (): Page < T >","title":"empty"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/","text":"// misk-hibernate / misk.hibernate.pagination / Pager Pager \u00b6 [jvm]\\ interface Pager < T > Functions \u00b6 Name Summary hasNext [jvm] abstract fun hasNext (): Boolean Returns true when there are more pages to load. nextPage [jvm] abstract fun nextPage (session: Session ): Page < T >? Returns null when there are no more pages. Extensions \u00b6 Name Summary listAll [jvm] fun < T : DbEntity < T >, R > Pager < T >. listAll (transacter: Transacter , transform: ( T ) -> R ): List < R >","title":"Pager - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/#pager","text":"[jvm]\\ interface Pager < T >","title":"Pager"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/#functions","text":"Name Summary hasNext [jvm] abstract fun hasNext (): Boolean Returns true when there are more pages to load. nextPage [jvm] abstract fun nextPage (session: Session ): Page < T >? Returns null when there are no more pages.","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/#extensions","text":"Name Summary listAll [jvm] fun < T : DbEntity < T >, R > Pager < T >. listAll (transacter: Transacter , transform: ( T ) -> R ): List < R >","title":"Extensions"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/has-next/","text":"// misk-hibernate / misk.hibernate.pagination / Pager / hasNext hasNext \u00b6 [jvm]\\ abstract fun hasNext (): Boolean Returns true when there are more pages to load.","title":"hasNext - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/has-next/#hasnext","text":"[jvm]\\ abstract fun hasNext (): Boolean Returns true when there are more pages to load.","title":"hasNext"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/next-page/","text":"// misk-hibernate / misk.hibernate.pagination / Pager / nextPage nextPage \u00b6 [jvm]\\ abstract fun nextPage (session: Session ): Page < T >? Returns null when there are no more pages.","title":"nextPage - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-pager/next-page/#nextpage","text":"[jvm]\\ abstract fun nextPage (session: Session ): Page < T >? Returns null when there are no more pages.","title":"nextPage"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-paginator/","text":"// misk-hibernate / misk.hibernate.pagination / Paginator Paginator \u00b6 [jvm]\\ interface Paginator < T , in Q : Query < T >> Breaks a query into pages. Each page break is delimited by a string that is the offset of the last row of the preceding page. Functions \u00b6 Name Summary applyOffset [jvm] abstract fun applyOffset (query: Q , offset: Offset ?) Adjust query so that is in paging order and offset by offset (if non-null). Most implementations will add an ORDER BY clause. They should also add a WHERE column > offset constraint if the offset is non-null. getOffset [jvm] abstract fun getOffset (row: T ): Offset Figure out what the offset of row is, and encode that as a string.","title":"Paginator - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-paginator/#paginator","text":"[jvm]\\ interface Paginator < T , in Q : Query < T >> Breaks a query into pages. Each page break is delimited by a string that is the offset of the last row of the preceding page.","title":"Paginator"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-paginator/#functions","text":"Name Summary applyOffset [jvm] abstract fun applyOffset (query: Q , offset: Offset ?) Adjust query so that is in paging order and offset by offset (if non-null). Most implementations will add an ORDER BY clause. They should also add a WHERE column > offset constraint if the offset is non-null. getOffset [jvm] abstract fun getOffset (row: T ): Offset Figure out what the offset of row is, and encode that as a string.","title":"Functions"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-paginator/apply-offset/","text":"// misk-hibernate / misk.hibernate.pagination / Paginator / applyOffset applyOffset \u00b6 [jvm]\\ abstract fun applyOffset (query: Q , offset: Offset ?) Adjust query so that is in paging order and offset by offset (if non-null). Most implementations will add an ORDER BY clause. They should also add a WHERE column > offset constraint if the offset is non-null.","title":"applyOffset - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-paginator/apply-offset/#applyoffset","text":"[jvm]\\ abstract fun applyOffset (query: Q , offset: Offset ?) Adjust query so that is in paging order and offset by offset (if non-null). Most implementations will add an ORDER BY clause. They should also add a WHERE column > offset constraint if the offset is non-null.","title":"applyOffset"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-paginator/get-offset/","text":"// misk-hibernate / misk.hibernate.pagination / Paginator / getOffset getOffset \u00b6 [jvm]\\ abstract fun getOffset (row: T ): Offset Figure out what the offset of row is, and encode that as a string.","title":"getOffset - Misk"},{"location":"0.x/misk-hibernate/misk.hibernate.pagination/-paginator/get-offset/#getoffset","text":"[jvm]\\ abstract fun getOffset (row: T ): Offset Figure out what the offset of row is, and encode that as a string.","title":"getOffset"},{"location":"0.x/misk-inject/misk.inject/","text":"// misk-inject / misk.inject Package misk.inject \u00b6 Types \u00b6 Name Summary KAbstractModule [jvm] abstract class KAbstractModule : AbstractModule A class that provides helper methods for working with Kotlin and Guice, allowing implementing classes to operate in the Kotlin type system rather than converting to Java. Functions \u00b6 Name Summary asSingleton [jvm] fun ScopedBindingBuilder. asSingleton () getInstance [jvm] inline fun < T : Any > Injector. getInstance (annotation: Annotation ? = null): T getSetOf [jvm] fun < T : Any > Injector. getSetOf (type: KClass < T >, annotation: KClass <out Annotation >? = null): Set < T > keyOf [jvm] inline fun < T : Any > keyOf (): Key< T > inline fun < T : Any > keyOf (a: Annotation ): Key< T > [jvm] inline fun < T : Any > keyOf (a: KClass <out Annotation >?): Key< T > If annotation is not null, returns a key for @Annotation T, otherwise a key for T. listOfType [jvm] inline fun < T : Any > listOfType (): TypeLiteral< List < T >> fun < T > listOfType (elementType: TypeLiteral< T >): TypeLiteral< List < T >> fun < T : Any > listOfType (elementType: KClass < T >): TypeLiteral< List < T >> mapOfType [jvm] inline fun < K : Any , V : Any > mapOfType (): TypeLiteral< Map < K , V >> fun < K , V > mapOfType (keyType: TypeLiteral< K >, valueType: TypeLiteral< V >): TypeLiteral< Map < K , V >> fun < K : Any , V : Any > mapOfType (keyType: KClass < K >, valueType: KClass < V >): TypeLiteral< Map < K , V >> parameterizedType [jvm] inline fun < T : Any > parameterizedType (vararg typeParameters: Type ): ParameterizedType setOfType [jvm] inline fun < T : Any > setOfType (): TypeLiteral< Set < T >> fun < T > setOfType (elementType: TypeLiteral< T >): TypeLiteral< Set < T >> fun < T : Any > setOfType (elementType: KClass < T >): TypeLiteral< Set < T >> subtypeOf [jvm] inline fun < T : Any > subtypeOf (): WildcardType toKey [jvm] fun < T : Any > TypeLiteral< T >. toKey (annotation: KClass <out Annotation >? = null): Key< T > fun < T : Any > KClass < T >. toKey (qualifier: KClass <out Annotation >? = null): Key< T > typeLiteral [jvm] fun Type . typeLiteral (): TypeLiteral< > fun < T : Any > KClass < T >. typeLiteral (): TypeLiteral< T > fun KType . typeLiteral (): TypeLiteral< > uninject [jvm] fun uninject (target: Any )","title":"Package misk.inject - Misk"},{"location":"0.x/misk-inject/misk.inject/#package-miskinject","text":"","title":"Package misk.inject"},{"location":"0.x/misk-inject/misk.inject/#types","text":"Name Summary KAbstractModule [jvm] abstract class KAbstractModule : AbstractModule A class that provides helper methods for working with Kotlin and Guice, allowing implementing classes to operate in the Kotlin type system rather than converting to Java.","title":"Types"},{"location":"0.x/misk-inject/misk.inject/#functions","text":"Name Summary asSingleton [jvm] fun ScopedBindingBuilder. asSingleton () getInstance [jvm] inline fun < T : Any > Injector. getInstance (annotation: Annotation ? = null): T getSetOf [jvm] fun < T : Any > Injector. getSetOf (type: KClass < T >, annotation: KClass <out Annotation >? = null): Set < T > keyOf [jvm] inline fun < T : Any > keyOf (): Key< T > inline fun < T : Any > keyOf (a: Annotation ): Key< T > [jvm] inline fun < T : Any > keyOf (a: KClass <out Annotation >?): Key< T > If annotation is not null, returns a key for @Annotation T, otherwise a key for T. listOfType [jvm] inline fun < T : Any > listOfType (): TypeLiteral< List < T >> fun < T > listOfType (elementType: TypeLiteral< T >): TypeLiteral< List < T >> fun < T : Any > listOfType (elementType: KClass < T >): TypeLiteral< List < T >> mapOfType [jvm] inline fun < K : Any , V : Any > mapOfType (): TypeLiteral< Map < K , V >> fun < K , V > mapOfType (keyType: TypeLiteral< K >, valueType: TypeLiteral< V >): TypeLiteral< Map < K , V >> fun < K : Any , V : Any > mapOfType (keyType: KClass < K >, valueType: KClass < V >): TypeLiteral< Map < K , V >> parameterizedType [jvm] inline fun < T : Any > parameterizedType (vararg typeParameters: Type ): ParameterizedType setOfType [jvm] inline fun < T : Any > setOfType (): TypeLiteral< Set < T >> fun < T > setOfType (elementType: TypeLiteral< T >): TypeLiteral< Set < T >> fun < T : Any > setOfType (elementType: KClass < T >): TypeLiteral< Set < T >> subtypeOf [jvm] inline fun < T : Any > subtypeOf (): WildcardType toKey [jvm] fun < T : Any > TypeLiteral< T >. toKey (annotation: KClass <out Annotation >? = null): Key< T > fun < T : Any > KClass < T >. toKey (qualifier: KClass <out Annotation >? = null): Key< T > typeLiteral [jvm] fun Type . typeLiteral (): TypeLiteral< > fun < T : Any > KClass < T >. typeLiteral (): TypeLiteral< T > fun KType . typeLiteral (): TypeLiteral< > uninject [jvm] fun uninject (target: Any )","title":"Functions"},{"location":"0.x/misk-inject/misk.inject/as-singleton/","text":"// misk-inject / misk.inject / asSingleton asSingleton \u00b6 [jvm]\\ fun ScopedBindingBuilder. asSingleton ()","title":"asSingleton - Misk"},{"location":"0.x/misk-inject/misk.inject/as-singleton/#assingleton","text":"[jvm]\\ fun ScopedBindingBuilder. asSingleton ()","title":"asSingleton"},{"location":"0.x/misk-inject/misk.inject/get-instance/","text":"// misk-inject / misk.inject / getInstance getInstance \u00b6 [jvm]\\ inline fun < T : Any > Injector. getInstance (annotation: Annotation ? = null): T","title":"getInstance - Misk"},{"location":"0.x/misk-inject/misk.inject/get-instance/#getinstance","text":"[jvm]\\ inline fun < T : Any > Injector. getInstance (annotation: Annotation ? = null): T","title":"getInstance"},{"location":"0.x/misk-inject/misk.inject/get-set-of/","text":"// misk-inject / misk.inject / getSetOf getSetOf \u00b6 [jvm]\\ fun < T : Any > Injector. getSetOf (type: KClass < T >, annotation: KClass <out Annotation >? = null): Set < T >","title":"getSetOf - Misk"},{"location":"0.x/misk-inject/misk.inject/get-set-of/#getsetof","text":"[jvm]\\ fun < T : Any > Injector. getSetOf (type: KClass < T >, annotation: KClass <out Annotation >? = null): Set < T >","title":"getSetOf"},{"location":"0.x/misk-inject/misk.inject/key-of/","text":"// misk-inject / misk.inject / keyOf keyOf \u00b6 [jvm]\\ inline fun < T : Any > keyOf (): Key< T > inline fun < T : Any > keyOf (a: Annotation ): Key< T > [jvm]\\ inline fun < T : Any > keyOf (a: KClass <out Annotation >?): Key< T > If annotation is not null, returns a key for @Annotation T, otherwise a key for T.","title":"keyOf - Misk"},{"location":"0.x/misk-inject/misk.inject/key-of/#keyof","text":"[jvm]\\ inline fun < T : Any > keyOf (): Key< T > inline fun < T : Any > keyOf (a: Annotation ): Key< T > [jvm]\\ inline fun < T : Any > keyOf (a: KClass <out Annotation >?): Key< T > If annotation is not null, returns a key for @Annotation T, otherwise a key for T.","title":"keyOf"},{"location":"0.x/misk-inject/misk.inject/list-of-type/","text":"// misk-inject / misk.inject / listOfType listOfType \u00b6 [jvm]\\ fun < T > listOfType (elementType: TypeLiteral< T >): TypeLiteral< List < T >> fun < T : Any > listOfType (elementType: KClass < T >): TypeLiteral< List < T >> inline fun < T : Any > listOfType (): TypeLiteral< List < T >>","title":"listOfType - Misk"},{"location":"0.x/misk-inject/misk.inject/list-of-type/#listoftype","text":"[jvm]\\ fun < T > listOfType (elementType: TypeLiteral< T >): TypeLiteral< List < T >> fun < T : Any > listOfType (elementType: KClass < T >): TypeLiteral< List < T >> inline fun < T : Any > listOfType (): TypeLiteral< List < T >>","title":"listOfType"},{"location":"0.x/misk-inject/misk.inject/map-of-type/","text":"// misk-inject / misk.inject / mapOfType mapOfType \u00b6 [jvm]\\ inline fun < K : Any , V : Any > mapOfType (): TypeLiteral< Map < K , V >> fun < K : Any , V : Any > mapOfType (keyType: KClass < K >, valueType: KClass < V >): TypeLiteral< Map < K , V >> fun < K , V > mapOfType (keyType: TypeLiteral< K >, valueType: TypeLiteral< V >): TypeLiteral< Map < K , V >>","title":"mapOfType - Misk"},{"location":"0.x/misk-inject/misk.inject/map-of-type/#mapoftype","text":"[jvm]\\ inline fun < K : Any , V : Any > mapOfType (): TypeLiteral< Map < K , V >> fun < K : Any , V : Any > mapOfType (keyType: KClass < K >, valueType: KClass < V >): TypeLiteral< Map < K , V >> fun < K , V > mapOfType (keyType: TypeLiteral< K >, valueType: TypeLiteral< V >): TypeLiteral< Map < K , V >>","title":"mapOfType"},{"location":"0.x/misk-inject/misk.inject/parameterized-type/","text":"// misk-inject / misk.inject / parameterizedType parameterizedType \u00b6 [jvm]\\ inline fun < T : Any > parameterizedType (vararg typeParameters: Type ): ParameterizedType","title":"parameterizedType - Misk"},{"location":"0.x/misk-inject/misk.inject/parameterized-type/#parameterizedtype","text":"[jvm]\\ inline fun < T : Any > parameterizedType (vararg typeParameters: Type ): ParameterizedType","title":"parameterizedType"},{"location":"0.x/misk-inject/misk.inject/set-of-type/","text":"// misk-inject / misk.inject / setOfType setOfType \u00b6 [jvm]\\ fun < T > setOfType (elementType: TypeLiteral< T >): TypeLiteral< Set < T >> fun < T : Any > setOfType (elementType: KClass < T >): TypeLiteral< Set < T >> inline fun < T : Any > setOfType (): TypeLiteral< Set < T >>","title":"setOfType - Misk"},{"location":"0.x/misk-inject/misk.inject/set-of-type/#setoftype","text":"[jvm]\\ fun < T > setOfType (elementType: TypeLiteral< T >): TypeLiteral< Set < T >> fun < T : Any > setOfType (elementType: KClass < T >): TypeLiteral< Set < T >> inline fun < T : Any > setOfType (): TypeLiteral< Set < T >>","title":"setOfType"},{"location":"0.x/misk-inject/misk.inject/subtype-of/","text":"// misk-inject / misk.inject / subtypeOf subtypeOf \u00b6 [jvm]\\ inline fun < T : Any > subtypeOf (): WildcardType","title":"subtypeOf - Misk"},{"location":"0.x/misk-inject/misk.inject/subtype-of/#subtypeof","text":"[jvm]\\ inline fun < T : Any > subtypeOf (): WildcardType","title":"subtypeOf"},{"location":"0.x/misk-inject/misk.inject/to-key/","text":"// misk-inject / misk.inject / toKey toKey \u00b6 [jvm]\\ fun < T : Any > TypeLiteral< T >. toKey (annotation: KClass <out Annotation >? = null): Key< T > fun < T : Any > KClass < T >. toKey (qualifier: KClass <out Annotation >? = null): Key< T >","title":"toKey - Misk"},{"location":"0.x/misk-inject/misk.inject/to-key/#tokey","text":"[jvm]\\ fun < T : Any > TypeLiteral< T >. toKey (annotation: KClass <out Annotation >? = null): Key< T > fun < T : Any > KClass < T >. toKey (qualifier: KClass <out Annotation >? = null): Key< T >","title":"toKey"},{"location":"0.x/misk-inject/misk.inject/type-literal/","text":"// misk-inject / misk.inject / typeLiteral typeLiteral \u00b6 [jvm]\\ fun Type . typeLiteral (): TypeLiteral<*> fun KType . typeLiteral (): TypeLiteral<*> fun < T : Any > KClass < T >. typeLiteral (): TypeLiteral< T >","title":"typeLiteral - Misk"},{"location":"0.x/misk-inject/misk.inject/type-literal/#typeliteral","text":"[jvm]\\ fun Type . typeLiteral (): TypeLiteral<*> fun KType . typeLiteral (): TypeLiteral<*> fun < T : Any > KClass < T >. typeLiteral (): TypeLiteral< T >","title":"typeLiteral"},{"location":"0.x/misk-inject/misk.inject/uninject/","text":"// misk-inject / misk.inject / uninject uninject \u00b6 [jvm]\\ fun uninject (target: Any )","title":"uninject - Misk"},{"location":"0.x/misk-inject/misk.inject/uninject/#uninject","text":"[jvm]\\ fun uninject (target: Any )","title":"uninject"},{"location":"0.x/misk-inject/misk.inject/-k-abstract-module/","text":"// misk-inject / misk.inject / KAbstractModule KAbstractModule \u00b6 [jvm]\\ abstract class KAbstractModule : AbstractModule A class that provides helper methods for working with Kotlin and Guice, allowing implementing classes to operate in the Kotlin type system rather than converting to Java. The more Kotlin friendly API allows calls like: bind(Foo::class.java).to(RealFoo::class.java) To be rewritten as: bind<Foo>().to<RealFoo>() Constructors \u00b6 KAbstractModule [jvm] fun KAbstractModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"KAbstractModule - Misk"},{"location":"0.x/misk-inject/misk.inject/-k-abstract-module/#kabstractmodule","text":"[jvm]\\ abstract class KAbstractModule : AbstractModule A class that provides helper methods for working with Kotlin and Guice, allowing implementing classes to operate in the Kotlin type system rather than converting to Java. The more Kotlin friendly API allows calls like: bind(Foo::class.java).to(RealFoo::class.java) To be rewritten as: bind<Foo>().to<RealFoo>()","title":"KAbstractModule"},{"location":"0.x/misk-inject/misk.inject/-k-abstract-module/#constructors","text":"KAbstractModule [jvm] fun KAbstractModule ()","title":"Constructors"},{"location":"0.x/misk-inject/misk.inject/-k-abstract-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] open fun configure () override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-inject/misk.inject/-k-abstract-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-inject/misk.inject/-k-abstract-module/-k-abstract-module/","text":"// misk-inject / misk.inject / KAbstractModule / KAbstractModule KAbstractModule \u00b6 [jvm]\\ fun KAbstractModule ()","title":"KAbstractModule - Misk"},{"location":"0.x/misk-inject/misk.inject/-k-abstract-module/-k-abstract-module/#kabstractmodule","text":"[jvm]\\ fun KAbstractModule ()","title":"KAbstractModule"},{"location":"0.x/misk-jdbc/misk.database/","text":"// misk-jdbc / misk.database Package misk.database \u00b6 Types \u00b6 Name Summary CockroachCluster [jvm] class CockroachCluster (name: String , config: DataSourceConfig ) DatabaseServer [jvm] interface DatabaseServer Represents a database server for development/testing generally running in Docker. DockerCockroachCluster [jvm] class DockerCockroachCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer DockerPostgresServer [jvm] class DockerPostgresServer (config: DataSourceConfig , docker: DockerClient) : DatabaseServer DockerTidbCluster [jvm] class DockerTidbCluster (moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer DockerVitessCluster [jvm] class DockerVitessCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer Keyspace [jvm] class Keyspace (sharded: Boolean , tables: Map < String , Table >) StartDatabaseService [jvm] class StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig ) : AbstractIdleService All Vitess clusters used by the app/test are tracked in a global cache as a DockerVitessCluster . StartVitessService [jvm] class StartVitessService Table [jvm] class Table TidbCluster [jvm] class TidbCluster (resourceLoader: ResourceLoader, config: DataSourceConfig ) VitessCluster [jvm] class VitessCluster (name: String , resourceLoader: ResourceLoader, config: DataSourceConfig , moshi: Moshi) Functions \u00b6 Name Summary runCommand [jvm] fun runCommand (command: String ): Int","title":"Package misk.database - Misk"},{"location":"0.x/misk-jdbc/misk.database/#package-miskdatabase","text":"","title":"Package misk.database"},{"location":"0.x/misk-jdbc/misk.database/#types","text":"Name Summary CockroachCluster [jvm] class CockroachCluster (name: String , config: DataSourceConfig ) DatabaseServer [jvm] interface DatabaseServer Represents a database server for development/testing generally running in Docker. DockerCockroachCluster [jvm] class DockerCockroachCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer DockerPostgresServer [jvm] class DockerPostgresServer (config: DataSourceConfig , docker: DockerClient) : DatabaseServer DockerTidbCluster [jvm] class DockerTidbCluster (moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer DockerVitessCluster [jvm] class DockerVitessCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer Keyspace [jvm] class Keyspace (sharded: Boolean , tables: Map < String , Table >) StartDatabaseService [jvm] class StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig ) : AbstractIdleService All Vitess clusters used by the app/test are tracked in a global cache as a DockerVitessCluster . StartVitessService [jvm] class StartVitessService Table [jvm] class Table TidbCluster [jvm] class TidbCluster (resourceLoader: ResourceLoader, config: DataSourceConfig ) VitessCluster [jvm] class VitessCluster (name: String , resourceLoader: ResourceLoader, config: DataSourceConfig , moshi: Moshi)","title":"Types"},{"location":"0.x/misk-jdbc/misk.database/#functions","text":"Name Summary runCommand [jvm] fun runCommand (command: String ): Int","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/run-command/","text":"// misk-jdbc / misk.database / runCommand runCommand \u00b6 [jvm]\\ fun runCommand (command: String ): Int","title":"runCommand - Misk"},{"location":"0.x/misk-jdbc/misk.database/run-command/#runcommand","text":"[jvm]\\ fun runCommand (command: String ): Int","title":"runCommand"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/","text":"// misk-jdbc / misk.database / CockroachCluster CockroachCluster \u00b6 [jvm]\\ class CockroachCluster (name: String , config: DataSourceConfig ) Functions \u00b6 Name Summary openConnection [jvm] fun openConnection (): Connection Connect to vtgate. Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig externalHttpPort [jvm] val externalHttpPort : Int = 26258 internalHttpPort [jvm] val internalHttpPort : Int = 8080 name [jvm] val name : String postgresPort [jvm] val postgresPort : Int = 26257","title":"CockroachCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/#cockroachcluster","text":"[jvm]\\ class CockroachCluster (name: String , config: DataSourceConfig )","title":"CockroachCluster"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/#functions","text":"Name Summary openConnection [jvm] fun openConnection (): Connection Connect to vtgate.","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig externalHttpPort [jvm] val externalHttpPort : Int = 26258 internalHttpPort [jvm] val internalHttpPort : Int = 8080 name [jvm] val name : String postgresPort [jvm] val postgresPort : Int = 26257","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/-cockroach-cluster/","text":"// misk-jdbc / misk.database / CockroachCluster / CockroachCluster CockroachCluster \u00b6 [jvm]\\ fun CockroachCluster (name: String , config: DataSourceConfig )","title":"CockroachCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/-cockroach-cluster/#cockroachcluster","text":"[jvm]\\ fun CockroachCluster (name: String , config: DataSourceConfig )","title":"CockroachCluster"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/config/","text":"// misk-jdbc / misk.database / CockroachCluster / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/external-http-port/","text":"// misk-jdbc / misk.database / CockroachCluster / externalHttpPort externalHttpPort \u00b6 [jvm]\\ val externalHttpPort : Int = 26258","title":"externalHttpPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/external-http-port/#externalhttpport","text":"[jvm]\\ val externalHttpPort : Int = 26258","title":"externalHttpPort"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/internal-http-port/","text":"// misk-jdbc / misk.database / CockroachCluster / internalHttpPort internalHttpPort \u00b6 [jvm]\\ val internalHttpPort : Int = 8080","title":"internalHttpPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/internal-http-port/#internalhttpport","text":"[jvm]\\ val internalHttpPort : Int = 8080","title":"internalHttpPort"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/name/","text":"// misk-jdbc / misk.database / CockroachCluster / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/open-connection/","text":"// misk-jdbc / misk.database / CockroachCluster / openConnection openConnection \u00b6 [jvm]\\ fun openConnection (): Connection Connect to vtgate.","title":"openConnection - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/open-connection/#openconnection","text":"[jvm]\\ fun openConnection (): Connection Connect to vtgate.","title":"openConnection"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/postgres-port/","text":"// misk-jdbc / misk.database / CockroachCluster / postgresPort postgresPort \u00b6 [jvm]\\ val postgresPort : Int = 26257","title":"postgresPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-cockroach-cluster/postgres-port/#postgresport","text":"[jvm]\\ val postgresPort : Int = 26257","title":"postgresPort"},{"location":"0.x/misk-jdbc/misk.database/-database-server/","text":"// misk-jdbc / misk.database / DatabaseServer DatabaseServer \u00b6 [jvm]\\ interface DatabaseServer Represents a database server for development/testing generally running in Docker. Functions \u00b6 Name Summary pullImage [jvm] abstract fun pullImage () start [jvm] abstract fun start () stop [jvm] abstract fun stop () Inheritors \u00b6 Name DockerCockroachCluster DockerPostgresServer DockerTidbCluster DockerVitessCluster","title":"DatabaseServer - Misk"},{"location":"0.x/misk-jdbc/misk.database/-database-server/#databaseserver","text":"[jvm]\\ interface DatabaseServer Represents a database server for development/testing generally running in Docker.","title":"DatabaseServer"},{"location":"0.x/misk-jdbc/misk.database/-database-server/#functions","text":"Name Summary pullImage [jvm] abstract fun pullImage () start [jvm] abstract fun start () stop [jvm] abstract fun stop ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-database-server/#inheritors","text":"Name DockerCockroachCluster DockerPostgresServer DockerTidbCluster DockerVitessCluster","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.database/-database-server/pull-image/","text":"// misk-jdbc / misk.database / DatabaseServer / pullImage pullImage \u00b6 [jvm]\\ abstract fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-database-server/pull-image/#pullimage","text":"[jvm]\\ abstract fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-database-server/start/","text":"// misk-jdbc / misk.database / DatabaseServer / start start \u00b6 [jvm]\\ abstract fun start ()","title":"start - Misk"},{"location":"0.x/misk-jdbc/misk.database/-database-server/start/#start","text":"[jvm]\\ abstract fun start ()","title":"start"},{"location":"0.x/misk-jdbc/misk.database/-database-server/stop/","text":"// misk-jdbc / misk.database / DatabaseServer / stop stop \u00b6 [jvm]\\ abstract fun stop ()","title":"stop - Misk"},{"location":"0.x/misk-jdbc/misk.database/-database-server/stop/#stop","text":"[jvm]\\ abstract fun stop ()","title":"stop"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/","text":"// misk-jdbc / misk.database / DockerCockroachCluster DockerCockroachCluster \u00b6 [jvm]\\ class DockerCockroachCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer Types \u00b6 Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerCockroachCluster.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop () Properties \u00b6 Name Summary cluster [jvm] val cluster : CockroachCluster config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient moshi [jvm] val moshi : Moshi name [jvm] val name : String resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"DockerCockroachCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/#dockercockroachcluster","text":"[jvm]\\ class DockerCockroachCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer","title":"DockerCockroachCluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/#types","text":"Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerCockroachCluster.LogContainerResultCallback , Frame>","title":"Types"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/#functions","text":"Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/#properties","text":"Name Summary cluster [jvm] val cluster : CockroachCluster config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient moshi [jvm] val moshi : Moshi name [jvm] val name : String resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-docker-cockroach-cluster/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / DockerCockroachCluster DockerCockroachCluster \u00b6 [jvm]\\ fun DockerCockroachCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient)","title":"DockerCockroachCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-docker-cockroach-cluster/#dockercockroachcluster","text":"[jvm]\\ fun DockerCockroachCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient)","title":"DockerCockroachCluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/cluster/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / cluster cluster \u00b6 [jvm]\\ val cluster : CockroachCluster","title":"cluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/cluster/#cluster","text":"[jvm]\\ val cluster : CockroachCluster","title":"cluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/config/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/docker/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / docker docker \u00b6 [jvm]\\ val docker : DockerClient","title":"docker - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/docker/#docker","text":"[jvm]\\ val docker : DockerClient","title":"docker"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/moshi/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/name/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/pull-image/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / pullImage pullImage \u00b6 [jvm]\\ open override fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/pull-image/#pullimage","text":"[jvm]\\ open override fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/resource-loader/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / resourceLoader resourceLoader \u00b6 [jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/resource-loader/#resourceloader","text":"[jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/start/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / start start \u00b6 [jvm]\\ open override fun start ()","title":"start - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/start/#start","text":"[jvm]\\ open override fun start ()","title":"start"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/stop/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / stop stop \u00b6 [jvm]\\ open override fun stop ()","title":"stop - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/stop/#stop","text":"[jvm]\\ open override fun stop ()","title":"stop"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary pullImage [jvm] fun pullImage () Properties \u00b6 Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger SHA [jvm] const val SHA : String","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/#functions","text":"Name Summary pullImage [jvm] fun pullImage ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/#properties","text":"Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger SHA [jvm] const val SHA : String","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / Companion / CONTAINER_NAME CONTAINER_NAME \u00b6 [jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/#container_name","text":"[jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/-i-m-a-g-e/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / Companion / IMAGE IMAGE \u00b6 [jvm]\\ const val IMAGE : String","title":"IMAGE - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/-i-m-a-g-e/#image","text":"[jvm]\\ const val IMAGE : String","title":"IMAGE"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/-s-h-a/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / Companion / SHA SHA \u00b6 [jvm]\\ const val SHA : String","title":"SHA - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/-s-h-a/#sha","text":"[jvm]\\ const val SHA : String","title":"SHA"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/logger/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/pull-image/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / Companion / pullImage pullImage \u00b6 [jvm]\\ fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-companion/pull-image/#pullimage","text":"[jvm]\\ fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerCockroachCluster.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerCockroachCluster.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerCockroachCluster.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerCockroachCluster.LogContainerResultCallback , Frame>","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-log-container-result-callback/#functions","text":"Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerCockroachCluster.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerCockroachCluster.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-log-container-result-callback/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / LogContainerResultCallback / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-log-container-result-callback/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-log-container-result-callback/on-next/","text":"// misk-jdbc / misk.database / DockerCockroachCluster / LogContainerResultCallback / onNext onNext \u00b6 [jvm]\\ open override fun onNext (item: Frame)","title":"onNext - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-cockroach-cluster/-log-container-result-callback/on-next/#onnext","text":"[jvm]\\ open override fun onNext (item: Frame)","title":"onNext"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/","text":"// misk-jdbc / misk.database / DockerPostgresServer DockerPostgresServer \u00b6 [jvm]\\ class DockerPostgresServer (config: DataSourceConfig , docker: DockerClient) : DatabaseServer Types \u00b6 Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerPostgresServer.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop () Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient","title":"DockerPostgresServer - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/#dockerpostgresserver","text":"[jvm]\\ class DockerPostgresServer (config: DataSourceConfig , docker: DockerClient) : DatabaseServer","title":"DockerPostgresServer"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/#types","text":"Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerPostgresServer.LogContainerResultCallback , Frame>","title":"Types"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/#functions","text":"Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-docker-postgres-server/","text":"// misk-jdbc / misk.database / DockerPostgresServer / DockerPostgresServer DockerPostgresServer \u00b6 [jvm]\\ fun DockerPostgresServer (config: DataSourceConfig , docker: DockerClient)","title":"DockerPostgresServer - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-docker-postgres-server/#dockerpostgresserver","text":"[jvm]\\ fun DockerPostgresServer (config: DataSourceConfig , docker: DockerClient)","title":"DockerPostgresServer"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/config/","text":"// misk-jdbc / misk.database / DockerPostgresServer / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/docker/","text":"// misk-jdbc / misk.database / DockerPostgresServer / docker docker \u00b6 [jvm]\\ val docker : DockerClient","title":"docker - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/docker/#docker","text":"[jvm]\\ val docker : DockerClient","title":"docker"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/pull-image/","text":"// misk-jdbc / misk.database / DockerPostgresServer / pullImage pullImage \u00b6 [jvm]\\ open override fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/pull-image/#pullimage","text":"[jvm]\\ open override fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/start/","text":"// misk-jdbc / misk.database / DockerPostgresServer / start start \u00b6 [jvm]\\ open override fun start ()","title":"start - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/start/#start","text":"[jvm]\\ open override fun start ()","title":"start"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/stop/","text":"// misk-jdbc / misk.database / DockerPostgresServer / stop stop \u00b6 [jvm]\\ open override fun stop ()","title":"stop - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/stop/#stop","text":"[jvm]\\ open override fun stop ()","title":"stop"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/","text":"// misk-jdbc / misk.database / DockerPostgresServer / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary pullImage [jvm] fun pullImage () Properties \u00b6 Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger SHA [jvm] const val SHA : String","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/#functions","text":"Name Summary pullImage [jvm] fun pullImage ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/#properties","text":"Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger SHA [jvm] const val SHA : String","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/","text":"// misk-jdbc / misk.database / DockerPostgresServer / Companion / CONTAINER_NAME CONTAINER_NAME \u00b6 [jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/#container_name","text":"[jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/-i-m-a-g-e/","text":"// misk-jdbc / misk.database / DockerPostgresServer / Companion / IMAGE IMAGE \u00b6 [jvm]\\ const val IMAGE : String","title":"IMAGE - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/-i-m-a-g-e/#image","text":"[jvm]\\ const val IMAGE : String","title":"IMAGE"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/-s-h-a/","text":"// misk-jdbc / misk.database / DockerPostgresServer / Companion / SHA SHA \u00b6 [jvm]\\ const val SHA : String","title":"SHA - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/-s-h-a/#sha","text":"[jvm]\\ const val SHA : String","title":"SHA"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/logger/","text":"// misk-jdbc / misk.database / DockerPostgresServer / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/pull-image/","text":"// misk-jdbc / misk.database / DockerPostgresServer / Companion / pullImage pullImage \u00b6 [jvm]\\ fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-companion/pull-image/#pullimage","text":"[jvm]\\ fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerPostgresServer / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerPostgresServer.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerPostgresServer.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerPostgresServer.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerPostgresServer.LogContainerResultCallback , Frame>","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-log-container-result-callback/#functions","text":"Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerPostgresServer.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerPostgresServer.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-log-container-result-callback/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerPostgresServer / LogContainerResultCallback / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-log-container-result-callback/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-log-container-result-callback/on-next/","text":"// misk-jdbc / misk.database / DockerPostgresServer / LogContainerResultCallback / onNext onNext \u00b6 [jvm]\\ open override fun onNext (item: Frame)","title":"onNext - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-postgres-server/-log-container-result-callback/on-next/#onnext","text":"[jvm]\\ open override fun onNext (item: Frame)","title":"onNext"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/","text":"// misk-jdbc / misk.database / DockerTidbCluster DockerTidbCluster \u00b6 [jvm]\\ class DockerTidbCluster (moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer Types \u00b6 Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerTidbCluster.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop () Properties \u00b6 Name Summary cluster [jvm] val cluster : TidbCluster config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient moshi [jvm] val moshi : Moshi resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"DockerTidbCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/#dockertidbcluster","text":"[jvm]\\ class DockerTidbCluster (moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer","title":"DockerTidbCluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/#types","text":"Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerTidbCluster.LogContainerResultCallback , Frame>","title":"Types"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/#functions","text":"Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/#properties","text":"Name Summary cluster [jvm] val cluster : TidbCluster config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient moshi [jvm] val moshi : Moshi resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-docker-tidb-cluster/","text":"// misk-jdbc / misk.database / DockerTidbCluster / DockerTidbCluster DockerTidbCluster \u00b6 [jvm]\\ fun DockerTidbCluster (moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient)","title":"DockerTidbCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-docker-tidb-cluster/#dockertidbcluster","text":"[jvm]\\ fun DockerTidbCluster (moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient)","title":"DockerTidbCluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/cluster/","text":"// misk-jdbc / misk.database / DockerTidbCluster / cluster cluster \u00b6 [jvm]\\ val cluster : TidbCluster","title":"cluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/cluster/#cluster","text":"[jvm]\\ val cluster : TidbCluster","title":"cluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/config/","text":"// misk-jdbc / misk.database / DockerTidbCluster / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/docker/","text":"// misk-jdbc / misk.database / DockerTidbCluster / docker docker \u00b6 [jvm]\\ val docker : DockerClient","title":"docker - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/docker/#docker","text":"[jvm]\\ val docker : DockerClient","title":"docker"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/moshi/","text":"// misk-jdbc / misk.database / DockerTidbCluster / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/pull-image/","text":"// misk-jdbc / misk.database / DockerTidbCluster / pullImage pullImage \u00b6 [jvm]\\ open override fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/pull-image/#pullimage","text":"[jvm]\\ open override fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/resource-loader/","text":"// misk-jdbc / misk.database / DockerTidbCluster / resourceLoader resourceLoader \u00b6 [jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/resource-loader/#resourceloader","text":"[jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/start/","text":"// misk-jdbc / misk.database / DockerTidbCluster / start start \u00b6 [jvm]\\ open override fun start ()","title":"start - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/start/#start","text":"[jvm]\\ open override fun start ()","title":"start"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/stop/","text":"// misk-jdbc / misk.database / DockerTidbCluster / stop stop \u00b6 [jvm]\\ open override fun stop ()","title":"stop - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/stop/#stop","text":"[jvm]\\ open override fun stop ()","title":"stop"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/","text":"// misk-jdbc / misk.database / DockerTidbCluster / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary pullImage [jvm] fun pullImage () Properties \u00b6 Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger SHA [jvm] const val SHA : String","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/#functions","text":"Name Summary pullImage [jvm] fun pullImage ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/#properties","text":"Name Summary CONTAINER_NAME [jvm] const val CONTAINER_NAME : String IMAGE [jvm] const val IMAGE : String logger [jvm] val logger : KLogger SHA [jvm] const val SHA : String","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/","text":"// misk-jdbc / misk.database / DockerTidbCluster / Companion / CONTAINER_NAME CONTAINER_NAME \u00b6 [jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e/#container_name","text":"[jvm]\\ const val CONTAINER_NAME : String","title":"CONTAINER_NAME"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/-i-m-a-g-e/","text":"// misk-jdbc / misk.database / DockerTidbCluster / Companion / IMAGE IMAGE \u00b6 [jvm]\\ const val IMAGE : String","title":"IMAGE - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/-i-m-a-g-e/#image","text":"[jvm]\\ const val IMAGE : String","title":"IMAGE"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/-s-h-a/","text":"// misk-jdbc / misk.database / DockerTidbCluster / Companion / SHA SHA \u00b6 [jvm]\\ const val SHA : String","title":"SHA - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/-s-h-a/#sha","text":"[jvm]\\ const val SHA : String","title":"SHA"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/logger/","text":"// misk-jdbc / misk.database / DockerTidbCluster / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/pull-image/","text":"// misk-jdbc / misk.database / DockerTidbCluster / Companion / pullImage pullImage \u00b6 [jvm]\\ fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-companion/pull-image/#pullimage","text":"[jvm]\\ fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerTidbCluster / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerTidbCluster.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerTidbCluster.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerTidbCluster.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerTidbCluster.LogContainerResultCallback , Frame>","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-log-container-result-callback/#functions","text":"Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerTidbCluster.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerTidbCluster.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-log-container-result-callback/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerTidbCluster / LogContainerResultCallback / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-log-container-result-callback/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-log-container-result-callback/on-next/","text":"// misk-jdbc / misk.database / DockerTidbCluster / LogContainerResultCallback / onNext onNext \u00b6 [jvm]\\ open override fun onNext (item: Frame)","title":"onNext - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-tidb-cluster/-log-container-result-callback/on-next/#onnext","text":"[jvm]\\ open override fun onNext (item: Frame)","title":"onNext"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/","text":"// misk-jdbc / misk.database / DockerVitessCluster DockerVitessCluster \u00b6 [jvm]\\ class DockerVitessCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer Types \u00b6 Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerVitessCluster.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop () Properties \u00b6 Name Summary cluster [jvm] val cluster : VitessCluster config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient moshi [jvm] val moshi : Moshi name [jvm] val name : String resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"DockerVitessCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/#dockervitesscluster","text":"[jvm]\\ class DockerVitessCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient) : DatabaseServer","title":"DockerVitessCluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/#types","text":"Name Summary Companion [jvm] object Companion LogContainerResultCallback [jvm] class LogContainerResultCallback : ResultCallbackTemplate< DockerVitessCluster.LogContainerResultCallback , Frame>","title":"Types"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/#functions","text":"Name Summary pullImage [jvm] open override fun pullImage () start [jvm] open override fun start () stop [jvm] open override fun stop ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/#properties","text":"Name Summary cluster [jvm] val cluster : VitessCluster config [jvm] val config : DataSourceConfig docker [jvm] val docker : DockerClient moshi [jvm] val moshi : Moshi name [jvm] val name : String resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-docker-vitess-cluster/","text":"// misk-jdbc / misk.database / DockerVitessCluster / DockerVitessCluster DockerVitessCluster \u00b6 [jvm]\\ fun DockerVitessCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient)","title":"DockerVitessCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-docker-vitess-cluster/#dockervitesscluster","text":"[jvm]\\ fun DockerVitessCluster (name: String , moshi: Moshi, resourceLoader: ResourceLoader, config: DataSourceConfig , docker: DockerClient)","title":"DockerVitessCluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/cluster/","text":"// misk-jdbc / misk.database / DockerVitessCluster / cluster cluster \u00b6 [jvm]\\ val cluster : VitessCluster","title":"cluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/cluster/#cluster","text":"[jvm]\\ val cluster : VitessCluster","title":"cluster"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/config/","text":"// misk-jdbc / misk.database / DockerVitessCluster / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/docker/","text":"// misk-jdbc / misk.database / DockerVitessCluster / docker docker \u00b6 [jvm]\\ val docker : DockerClient","title":"docker - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/docker/#docker","text":"[jvm]\\ val docker : DockerClient","title":"docker"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/moshi/","text":"// misk-jdbc / misk.database / DockerVitessCluster / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/name/","text":"// misk-jdbc / misk.database / DockerVitessCluster / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/pull-image/","text":"// misk-jdbc / misk.database / DockerVitessCluster / pullImage pullImage \u00b6 [jvm]\\ open override fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/pull-image/#pullimage","text":"[jvm]\\ open override fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/resource-loader/","text":"// misk-jdbc / misk.database / DockerVitessCluster / resourceLoader resourceLoader \u00b6 [jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/resource-loader/#resourceloader","text":"[jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/start/","text":"// misk-jdbc / misk.database / DockerVitessCluster / start start \u00b6 [jvm]\\ open override fun start ()","title":"start - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/start/#start","text":"[jvm]\\ open override fun start ()","title":"start"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/stop/","text":"// misk-jdbc / misk.database / DockerVitessCluster / stop stop \u00b6 [jvm]\\ open override fun stop ()","title":"stop - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/stop/#stop","text":"[jvm]\\ open override fun stop ()","title":"stop"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/","text":"// misk-jdbc / misk.database / DockerVitessCluster / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary pullImage [jvm] fun pullImage () startVitessDaemon [jvm] fun startVitessDaemon (qualifier: KClass <out Annotation >, config: DataSourceConfig ) A helper method to start the Vitess cluster outside of the dev server or test process, to enable rapid iteration. This should be called directly a main() function, for example: Properties \u00b6 Name Summary CONTAINER_NAME_PREFIX [jvm] const val CONTAINER_NAME_PREFIX : String logger [jvm] val logger : KLogger VITESS_IMAGE [jvm] const val VITESS_IMAGE : String VITESS_SHA [jvm] const val VITESS_SHA : String","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/#functions","text":"Name Summary pullImage [jvm] fun pullImage () startVitessDaemon [jvm] fun startVitessDaemon (qualifier: KClass <out Annotation >, config: DataSourceConfig ) A helper method to start the Vitess cluster outside of the dev server or test process, to enable rapid iteration. This should be called directly a main() function, for example:","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/#properties","text":"Name Summary CONTAINER_NAME_PREFIX [jvm] const val CONTAINER_NAME_PREFIX : String logger [jvm] val logger : KLogger VITESS_IMAGE [jvm] const val VITESS_IMAGE : String VITESS_SHA [jvm] const val VITESS_SHA : String","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e_-p-r-e-f-i-x/","text":"// misk-jdbc / misk.database / DockerVitessCluster / Companion / CONTAINER_NAME_PREFIX CONTAINER_NAME_PREFIX \u00b6 [jvm]\\ const val CONTAINER_NAME_PREFIX : String","title":"CONTAINER_NAME_PREFIX - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/-c-o-n-t-a-i-n-e-r_-n-a-m-e_-p-r-e-f-i-x/#container_name_prefix","text":"[jvm]\\ const val CONTAINER_NAME_PREFIX : String","title":"CONTAINER_NAME_PREFIX"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/-v-i-t-e-s-s_-i-m-a-g-e/","text":"// misk-jdbc / misk.database / DockerVitessCluster / Companion / VITESS_IMAGE VITESS_IMAGE \u00b6 [jvm]\\ const val VITESS_IMAGE : String","title":"VITESS_IMAGE - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/-v-i-t-e-s-s_-i-m-a-g-e/#vitess_image","text":"[jvm]\\ const val VITESS_IMAGE : String","title":"VITESS_IMAGE"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/-v-i-t-e-s-s_-s-h-a/","text":"// misk-jdbc / misk.database / DockerVitessCluster / Companion / VITESS_SHA VITESS_SHA \u00b6 [jvm]\\ const val VITESS_SHA : String","title":"VITESS_SHA - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/-v-i-t-e-s-s_-s-h-a/#vitess_sha","text":"[jvm]\\ const val VITESS_SHA : String","title":"VITESS_SHA"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/logger/","text":"// misk-jdbc / misk.database / DockerVitessCluster / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/pull-image/","text":"// misk-jdbc / misk.database / DockerVitessCluster / Companion / pullImage pullImage \u00b6 [jvm]\\ fun pullImage ()","title":"pullImage - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/pull-image/#pullimage","text":"[jvm]\\ fun pullImage ()","title":"pullImage"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/start-vitess-daemon/","text":"// misk-jdbc / misk.database / DockerVitessCluster / Companion / startVitessDaemon startVitessDaemon \u00b6 [jvm]\\ fun startVitessDaemon (qualifier: KClass <out Annotation >, config: DataSourceConfig ) A helper method to start the Vitess cluster outside of the dev server or test process, to enable rapid iteration. This should be called directly a main() function, for example: MyAppVitessDaemon.kt: fun main() { val config = MiskConfig.load (\u201cmyapp\u201d, Environment.TESTING) startVitessDaemon(MyAppDb::class, config.data_source_clusters.values.first().writer) }","title":"startVitessDaemon - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-companion/start-vitess-daemon/#startvitessdaemon","text":"[jvm]\\ fun startVitessDaemon (qualifier: KClass <out Annotation >, config: DataSourceConfig ) A helper method to start the Vitess cluster outside of the dev server or test process, to enable rapid iteration. This should be called directly a main() function, for example: MyAppVitessDaemon.kt: fun main() { val config = MiskConfig.load (\u201cmyapp\u201d, Environment.TESTING) startVitessDaemon(MyAppDb::class, config.data_source_clusters.values.first().writer) }","title":"startVitessDaemon"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerVitessCluster / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerVitessCluster.LogContainerResultCallback , Frame> Functions \u00b6 Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerVitessCluster.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerVitessCluster.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ class LogContainerResultCallback : ResultCallbackTemplate< DockerVitessCluster.LogContainerResultCallback , Frame>","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-log-container-result-callback/#functions","text":"Name Summary awaitCompletion [jvm] open fun awaitCompletion (): DockerVitessCluster.LogContainerResultCallback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): DockerVitessCluster.LogContainerResultCallback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-log-container-result-callback/-log-container-result-callback/","text":"// misk-jdbc / misk.database / DockerVitessCluster / LogContainerResultCallback / LogContainerResultCallback LogContainerResultCallback \u00b6 [jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-log-container-result-callback/-log-container-result-callback/#logcontainerresultcallback","text":"[jvm]\\ fun LogContainerResultCallback ()","title":"LogContainerResultCallback"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-log-container-result-callback/on-next/","text":"// misk-jdbc / misk.database / DockerVitessCluster / LogContainerResultCallback / onNext onNext \u00b6 [jvm]\\ open override fun onNext (item: Frame)","title":"onNext - Misk"},{"location":"0.x/misk-jdbc/misk.database/-docker-vitess-cluster/-log-container-result-callback/on-next/#onnext","text":"[jvm]\\ open override fun onNext (item: Frame)","title":"onNext"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/","text":"// misk-jdbc / misk.database / Keyspace Keyspace \u00b6 [jvm]\\ class Keyspace (sharded: Boolean , tables: Map < String , Table >) Functions \u00b6 Name Summary shardCount [jvm] fun shardCount (): Int Properties \u00b6 Name Summary sharded [jvm] val sharded : Boolean tables [jvm] val tables : Map < String , Table >","title":"Keyspace - Misk"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/#keyspace","text":"[jvm]\\ class Keyspace (sharded: Boolean , tables: Map < String , Table >)","title":"Keyspace"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/#functions","text":"Name Summary shardCount [jvm] fun shardCount (): Int","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/#properties","text":"Name Summary sharded [jvm] val sharded : Boolean tables [jvm] val tables : Map < String , Table >","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/-keyspace/","text":"// misk-jdbc / misk.database / Keyspace / Keyspace Keyspace \u00b6 [jvm]\\ fun Keyspace (sharded: Boolean , tables: Map < String , Table >)","title":"Keyspace - Misk"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/-keyspace/#keyspace","text":"[jvm]\\ fun Keyspace (sharded: Boolean , tables: Map < String , Table >)","title":"Keyspace"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/shard-count/","text":"// misk-jdbc / misk.database / Keyspace / shardCount shardCount \u00b6 [jvm]\\ fun shardCount (): Int","title":"shardCount - Misk"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/shard-count/#shardcount","text":"[jvm]\\ fun shardCount (): Int","title":"shardCount"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/sharded/","text":"// misk-jdbc / misk.database / Keyspace / sharded sharded \u00b6 [jvm]\\ val sharded : Boolean","title":"sharded - Misk"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/sharded/#sharded","text":"[jvm]\\ val sharded : Boolean","title":"sharded"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/tables/","text":"// misk-jdbc / misk.database / Keyspace / tables tables \u00b6 [jvm]\\ val tables : Map < String , Table >","title":"tables - Misk"},{"location":"0.x/misk-jdbc/misk.database/-keyspace/tables/#tables","text":"[jvm]\\ val tables : Map < String , Table >","title":"tables"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/","text":"// misk-jdbc / misk.database / StartDatabaseService StartDatabaseService \u00b6 [jvm]\\ class StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig ) : AbstractIdleService All Vitess clusters used by the app/test are tracked in a global cache as a DockerVitessCluster . On startup, the service will look for a cluster in the cache, and if not found, look for it in Docker by container name, or as a last resort start the container itself. On shutdown, the cache is invalidated by a JVM shutdown hook. On invalidation, the cache will call the each entry\u2019s stop() method. If the cluster container was created in this JVM, it will be stopped and removed. Otherwise (if the container was started by a different process), it will be left running. Constructors \u00b6 StartDatabaseService [jvm] fun StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig ) Types \u00b6 Name Summary CacheKey [jvm] data class CacheKey (name: String , config: DataSourceConfig , deployment: Deployment) Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable init [jvm] fun init (): StartDatabaseService isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary server [jvm] var server : DatabaseServer ? = null","title":"StartDatabaseService - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/#startdatabaseservice","text":"[jvm]\\ class StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig ) : AbstractIdleService All Vitess clusters used by the app/test are tracked in a global cache as a DockerVitessCluster . On startup, the service will look for a cluster in the cache, and if not found, look for it in Docker by container name, or as a last resort start the container itself. On shutdown, the cache is invalidated by a JVM shutdown hook. On invalidation, the cache will call the each entry\u2019s stop() method. If the cluster container was created in this JVM, it will be stopped and removed. Otherwise (if the container was started by a different process), it will be left running.","title":"StartDatabaseService"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/#constructors","text":"StartDatabaseService [jvm] fun StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig )","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/#types","text":"Name Summary CacheKey [jvm] data class CacheKey (name: String , config: DataSourceConfig , deployment: Deployment) Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable init [jvm] fun init (): StartDatabaseService isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/#properties","text":"Name Summary server [jvm] var server : DatabaseServer ? = null","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-start-database-service/","text":"// misk-jdbc / misk.database / StartDatabaseService / StartDatabaseService StartDatabaseService \u00b6 [jvm]\\ fun StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig )","title":"StartDatabaseService - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-start-database-service/#startdatabaseservice","text":"[jvm]\\ fun StartDatabaseService (qualifier: KClass <out Annotation >, deployment: Deployment, config: DataSourceConfig )","title":"StartDatabaseService"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/init/","text":"// misk-jdbc / misk.database / StartDatabaseService / init init \u00b6 [jvm]\\ fun init (): StartDatabaseService","title":"init - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/init/#init","text":"[jvm]\\ fun init (): StartDatabaseService","title":"init"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/server/","text":"// misk-jdbc / misk.database / StartDatabaseService / server server \u00b6 [jvm]\\ var server : DatabaseServer ? = null","title":"server - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/server/#server","text":"[jvm]\\ var server : DatabaseServer ? = null","title":"server"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/","text":"// misk-jdbc / misk.database / StartDatabaseService / CacheKey CacheKey \u00b6 [jvm]\\ data class CacheKey (name: String , config: DataSourceConfig , deployment: Deployment) Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig deployment [jvm] val deployment : Deployment name [jvm] val name : String","title":"CacheKey - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/#cachekey","text":"[jvm]\\ data class CacheKey (name: String , config: DataSourceConfig , deployment: Deployment)","title":"CacheKey"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig deployment [jvm] val deployment : Deployment name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/-cache-key/","text":"// misk-jdbc / misk.database / StartDatabaseService / CacheKey / CacheKey CacheKey \u00b6 [jvm]\\ fun CacheKey (name: String , config: DataSourceConfig , deployment: Deployment)","title":"CacheKey - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/-cache-key/#cachekey","text":"[jvm]\\ fun CacheKey (name: String , config: DataSourceConfig , deployment: Deployment)","title":"CacheKey"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/config/","text":"// misk-jdbc / misk.database / StartDatabaseService / CacheKey / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/deployment/","text":"// misk-jdbc / misk.database / StartDatabaseService / CacheKey / deployment deployment \u00b6 [jvm]\\ val deployment : Deployment","title":"deployment - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/deployment/#deployment","text":"[jvm]\\ val deployment : Deployment","title":"deployment"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/name/","text":"// misk-jdbc / misk.database / StartDatabaseService / CacheKey / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-cache-key/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-companion/","text":"// misk-jdbc / misk.database / StartDatabaseService / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary logger [jvm] val logger : KLogger servers [jvm] lateinit var servers : LoadingCache< StartDatabaseService.CacheKey , Optional < DatabaseServer >> Global cache of running database servers.","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-companion/#properties","text":"Name Summary logger [jvm] val logger : KLogger servers [jvm] lateinit var servers : LoadingCache< StartDatabaseService.CacheKey , Optional < DatabaseServer >> Global cache of running database servers.","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-companion/logger/","text":"// misk-jdbc / misk.database / StartDatabaseService / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-companion/servers/","text":"// misk-jdbc / misk.database / StartDatabaseService / Companion / servers servers \u00b6 [jvm]\\ lateinit var servers : LoadingCache< StartDatabaseService.CacheKey , Optional < DatabaseServer >> Global cache of running database servers.","title":"servers - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-database-service/-companion/servers/#servers","text":"[jvm]\\ lateinit var servers : LoadingCache< StartDatabaseService.CacheKey , Optional < DatabaseServer >> Global cache of running database servers.","title":"servers"},{"location":"0.x/misk-jdbc/misk.database/-start-vitess-service/","text":"// misk-jdbc / misk.database / StartVitessService StartVitessService \u00b6 [jvm]\\ class StartVitessService Types \u00b6 Name Summary Companion [jvm] object Companion","title":"StartVitessService - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-vitess-service/#startvitessservice","text":"[jvm]\\ class StartVitessService","title":"StartVitessService"},{"location":"0.x/misk-jdbc/misk.database/-start-vitess-service/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jdbc/misk.database/-start-vitess-service/-start-vitess-service/","text":"// misk-jdbc / misk.database / StartVitessService / StartVitessService StartVitessService \u00b6 [jvm]\\ fun StartVitessService ()","title":"StartVitessService - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-vitess-service/-start-vitess-service/#startvitessservice","text":"[jvm]\\ fun StartVitessService ()","title":"StartVitessService"},{"location":"0.x/misk-jdbc/misk.database/-start-vitess-service/-companion/","text":"// misk-jdbc / misk.database / StartVitessService / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.database/-start-vitess-service/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.database/-table/","text":"// misk-jdbc / misk.database / Table Table \u00b6 [jvm]\\ class Table","title":"Table - Misk"},{"location":"0.x/misk-jdbc/misk.database/-table/#table","text":"[jvm]\\ class Table","title":"Table"},{"location":"0.x/misk-jdbc/misk.database/-table/-table/","text":"// misk-jdbc / misk.database / Table / Table Table \u00b6 [jvm]\\ fun Table ()","title":"Table - Misk"},{"location":"0.x/misk-jdbc/misk.database/-table/-table/#table","text":"[jvm]\\ fun Table ()","title":"Table"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/","text":"// misk-jdbc / misk.database / TidbCluster TidbCluster \u00b6 [jvm]\\ class TidbCluster (resourceLoader: ResourceLoader, config: DataSourceConfig ) Functions \u00b6 Name Summary openConnection [jvm] fun openConnection (): Connection Connect to vtgate. Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig configDir [jvm] val configDir : Path httpPort [jvm] val httpPort : Int = 10080 mysqlPort [jvm] val mysqlPort : Int = 4000 resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"TidbCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/#tidbcluster","text":"[jvm]\\ class TidbCluster (resourceLoader: ResourceLoader, config: DataSourceConfig )","title":"TidbCluster"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/#functions","text":"Name Summary openConnection [jvm] fun openConnection (): Connection Connect to vtgate.","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig configDir [jvm] val configDir : Path httpPort [jvm] val httpPort : Int = 10080 mysqlPort [jvm] val mysqlPort : Int = 4000 resourceLoader [jvm] val resourceLoader : ResourceLoader","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/-tidb-cluster/","text":"// misk-jdbc / misk.database / TidbCluster / TidbCluster TidbCluster \u00b6 [jvm]\\ fun TidbCluster (resourceLoader: ResourceLoader, config: DataSourceConfig )","title":"TidbCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/-tidb-cluster/#tidbcluster","text":"[jvm]\\ fun TidbCluster (resourceLoader: ResourceLoader, config: DataSourceConfig )","title":"TidbCluster"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/config-dir/","text":"// misk-jdbc / misk.database / TidbCluster / configDir configDir \u00b6 [jvm]\\ val configDir : Path","title":"configDir - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/config-dir/#configdir","text":"[jvm]\\ val configDir : Path","title":"configDir"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/config/","text":"// misk-jdbc / misk.database / TidbCluster / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/http-port/","text":"// misk-jdbc / misk.database / TidbCluster / httpPort httpPort \u00b6 [jvm]\\ val httpPort : Int = 10080","title":"httpPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/http-port/#httpport","text":"[jvm]\\ val httpPort : Int = 10080","title":"httpPort"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/mysql-port/","text":"// misk-jdbc / misk.database / TidbCluster / mysqlPort mysqlPort \u00b6 [jvm]\\ val mysqlPort : Int = 4000","title":"mysqlPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/mysql-port/#mysqlport","text":"[jvm]\\ val mysqlPort : Int = 4000","title":"mysqlPort"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/open-connection/","text":"// misk-jdbc / misk.database / TidbCluster / openConnection openConnection \u00b6 [jvm]\\ fun openConnection (): Connection Connect to vtgate.","title":"openConnection - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/open-connection/#openconnection","text":"[jvm]\\ fun openConnection (): Connection Connect to vtgate.","title":"openConnection"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/resource-loader/","text":"// misk-jdbc / misk.database / TidbCluster / resourceLoader resourceLoader \u00b6 [jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader - Misk"},{"location":"0.x/misk-jdbc/misk.database/-tidb-cluster/resource-loader/#resourceloader","text":"[jvm]\\ val resourceLoader : ResourceLoader","title":"resourceLoader"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/","text":"// misk-jdbc / misk.database / VitessCluster VitessCluster \u00b6 [jvm]\\ class VitessCluster (name: String , resourceLoader: ResourceLoader, config: DataSourceConfig , moshi: Moshi) Functions \u00b6 Name Summary keyspaces [jvm] fun keyspaces (): Map < String , Keyspace > openMysqlConnection [jvm] fun openMysqlConnection (): Connection Connect to the underlying MySQL database, bypassing Vitess entirely. openVtgateConnection [jvm] fun openVtgateConnection (): Connection Connect to vtgate. Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig configDir [jvm] val configDir : Path grpcPort [jvm] val grpcPort : Int httpPort [jvm] val httpPort : Int = 27000 keyspaceAdapter [jvm] val keyspaceAdapter : JsonAdapter< Keyspace > moshi [jvm] val moshi : Moshi mysqlPort [jvm] val mysqlPort : Int name [jvm] val name : String schemaDir [jvm] val schemaDir : Path vtgateMysqlPort [jvm] val vtgateMysqlPort : Int","title":"VitessCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/#vitesscluster","text":"[jvm]\\ class VitessCluster (name: String , resourceLoader: ResourceLoader, config: DataSourceConfig , moshi: Moshi)","title":"VitessCluster"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/#functions","text":"Name Summary keyspaces [jvm] fun keyspaces (): Map < String , Keyspace > openMysqlConnection [jvm] fun openMysqlConnection (): Connection Connect to the underlying MySQL database, bypassing Vitess entirely. openVtgateConnection [jvm] fun openVtgateConnection (): Connection Connect to vtgate.","title":"Functions"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig configDir [jvm] val configDir : Path grpcPort [jvm] val grpcPort : Int httpPort [jvm] val httpPort : Int = 27000 keyspaceAdapter [jvm] val keyspaceAdapter : JsonAdapter< Keyspace > moshi [jvm] val moshi : Moshi mysqlPort [jvm] val mysqlPort : Int name [jvm] val name : String schemaDir [jvm] val schemaDir : Path vtgateMysqlPort [jvm] val vtgateMysqlPort : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/-vitess-cluster/","text":"// misk-jdbc / misk.database / VitessCluster / VitessCluster VitessCluster \u00b6 [jvm]\\ fun VitessCluster (name: String , resourceLoader: ResourceLoader, config: DataSourceConfig , moshi: Moshi = defaultKotlinMoshi)","title":"VitessCluster - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/-vitess-cluster/#vitesscluster","text":"[jvm]\\ fun VitessCluster (name: String , resourceLoader: ResourceLoader, config: DataSourceConfig , moshi: Moshi = defaultKotlinMoshi)","title":"VitessCluster"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/config-dir/","text":"// misk-jdbc / misk.database / VitessCluster / configDir configDir \u00b6 [jvm]\\ val configDir : Path","title":"configDir - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/config-dir/#configdir","text":"[jvm]\\ val configDir : Path","title":"configDir"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/config/","text":"// misk-jdbc / misk.database / VitessCluster / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/grpc-port/","text":"// misk-jdbc / misk.database / VitessCluster / grpcPort grpcPort \u00b6 [jvm]\\ val grpcPort : Int","title":"grpcPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/grpc-port/#grpcport","text":"[jvm]\\ val grpcPort : Int","title":"grpcPort"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/http-port/","text":"// misk-jdbc / misk.database / VitessCluster / httpPort httpPort \u00b6 [jvm]\\ val httpPort : Int = 27000","title":"httpPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/http-port/#httpport","text":"[jvm]\\ val httpPort : Int = 27000","title":"httpPort"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/keyspace-adapter/","text":"// misk-jdbc / misk.database / VitessCluster / keyspaceAdapter keyspaceAdapter \u00b6 [jvm]\\ val keyspaceAdapter : JsonAdapter< Keyspace >","title":"keyspaceAdapter - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/keyspace-adapter/#keyspaceadapter","text":"[jvm]\\ val keyspaceAdapter : JsonAdapter< Keyspace >","title":"keyspaceAdapter"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/keyspaces/","text":"// misk-jdbc / misk.database / VitessCluster / keyspaces keyspaces \u00b6 [jvm]\\ fun keyspaces (): Map < String , Keyspace >","title":"keyspaces - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/keyspaces/#keyspaces","text":"[jvm]\\ fun keyspaces (): Map < String , Keyspace >","title":"keyspaces"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/moshi/","text":"// misk-jdbc / misk.database / VitessCluster / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/mysql-port/","text":"// misk-jdbc / misk.database / VitessCluster / mysqlPort mysqlPort \u00b6 [jvm]\\ val mysqlPort : Int","title":"mysqlPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/mysql-port/#mysqlport","text":"[jvm]\\ val mysqlPort : Int","title":"mysqlPort"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/name/","text":"// misk-jdbc / misk.database / VitessCluster / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/open-mysql-connection/","text":"// misk-jdbc / misk.database / VitessCluster / openMysqlConnection openMysqlConnection \u00b6 [jvm]\\ fun openMysqlConnection (): Connection Connect to the underlying MySQL database, bypassing Vitess entirely.","title":"openMysqlConnection - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/open-mysql-connection/#openmysqlconnection","text":"[jvm]\\ fun openMysqlConnection (): Connection Connect to the underlying MySQL database, bypassing Vitess entirely.","title":"openMysqlConnection"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/open-vtgate-connection/","text":"// misk-jdbc / misk.database / VitessCluster / openVtgateConnection openVtgateConnection \u00b6 [jvm]\\ fun openVtgateConnection (): Connection Connect to vtgate.","title":"openVtgateConnection - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/open-vtgate-connection/#openvtgateconnection","text":"[jvm]\\ fun openVtgateConnection (): Connection Connect to vtgate.","title":"openVtgateConnection"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/schema-dir/","text":"// misk-jdbc / misk.database / VitessCluster / schemaDir schemaDir \u00b6 [jvm]\\ val schemaDir : Path","title":"schemaDir - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/schema-dir/#schemadir","text":"[jvm]\\ val schemaDir : Path","title":"schemaDir"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/vtgate-mysql-port/","text":"// misk-jdbc / misk.database / VitessCluster / vtgateMysqlPort vtgateMysqlPort \u00b6 [jvm]\\ val vtgateMysqlPort : Int","title":"vtgateMysqlPort - Misk"},{"location":"0.x/misk-jdbc/misk.database/-vitess-cluster/vtgate-mysql-port/#vtgatemysqlport","text":"[jvm]\\ val vtgateMysqlPort : Int","title":"vtgateMysqlPort"},{"location":"0.x/misk-jdbc/misk.jdbc/","text":"// misk-jdbc / misk.jdbc Package misk.jdbc \u00b6 Types \u00b6 Name Summary Check [jvm] enum Check : Enum < Check > CheckDisabler [jvm] object CheckDisabler CheckException [jvm] open class CheckException (message: String ?, cause: Throwable ?) : SQLException An exception that is thrown when a Check fails. Cluster [jvm] interface Cluster < T > Cluster provides a consistent abstraction for interacting with various database-related resources T based on their role in the underlying database topology. DatabasePool [jvm] interface DatabasePool Figures out what database name to use for a given config. Tests use this to pool many databases for concurrent execution. In development, staging, and production the database never changes. DatabaseReadyService [jvm] interface DatabaseReadyService : Service Marker interface for indicating that the database is ready. DataSourceCluster [jvm] class DataSourceCluster (writer: DataSource , reader: DataSource ) : Cluster < DataSource > DataSourceClusterConfig [jvm] data class DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?) Configuration element for a cluster of DataSources DataSourceClustersConfig [jvm] class DataSourceClustersConfig : LinkedHashMap < String , DataSourceClusterConfig > , Config Top-level configuration element for all datasource clusters DataSourceConfig [jvm] data class DataSourceConfig (type: DataSourceType , host: String ?, port: Int ?, database: String ?, username: String ?, password: String ?, fixed_pool_size: Int , connection_timeout: Duration , validation_timeout: Duration , connection_max_lifetime: Duration , query_timeout: Duration ?, migrations_resource: String ?, migrations_resources: List < String >?, vitess_schema_resource_root: String ?, trust_certificate_key_store_url: String ?, trust_certificate_key_store_password: String ?, client_certificate_key_store_url: String ?, client_certificate_key_store_password: String ?, trust_certificate_key_store_path: String ?, client_certificate_key_store_path: String ?, verify_server_identity: Boolean , enabledTlsProtocols: List < String >, show_sql: String ?, jdbc_statement_batch_size: Int ?) Configuration element for an individual datasource DataSourceConnector [jvm] interface DataSourceConnector DataSourceDecorator [jvm] interface DataSourceDecorator DataSourceService [jvm] @Singleton class DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry?) : AbstractIdleService, DataSourceConnector , Provider< DataSource > Builds a connection pool to a JDBC database. Doesn\u2019t do any schema migration or validation. DataSourceType [jvm] enum DataSourceType : Enum < DataSourceType > Defines a type of datasource JdbcModule [jvm] class JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool ) : KAbstractModule Binds database connectivity for a qualified data source. This binds the following public types: JDBCSession [jvm] class JDBCSession (connection: Connection ) : Session PingDatabaseService [jvm] @Singleton class PingDatabaseService @Injectconstructor(config: DataSourceConfig , deployment: Deployment) : AbstractIdleService Service that waits for the database to become healthy. This is needed if we\u2019re booting up a Vitess cluster as part of the test run. PostCommitHookFailedException [jvm] class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook RealDatabasePool [jvm] object RealDatabasePool : DatabasePool RealTransacter [jvm] class RealTransacter (dataSource: DataSource ) : Transacter SchemaMigratorService [jvm] class SchemaMigratorService : AbstractIdleService, HealthCheck, DatabaseReadyService Session [jvm] interface Session SpanInjector [jvm] class SpanInjector (tracer: Tracer?, config: DataSourceConfig ) : QueryTransformer, DataSourceDecorator On the fly decorates queries with the span context, so the query call can be traced all the way through Vitess StringBuilderCarrier [jvm] class StringBuilderCarrier : TextMap TableScanException [jvm] class TableScanException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we execute a query lacking an index. Transacter [jvm] interface Transacter Functions \u00b6 Name Summary map [jvm] fun < T > ResultSet . map (function: ( ResultSet ) -> T ): List < T > maybeInt [jvm] fun ResultSet . maybeInt (): Int ? maybeLong [jvm] fun ResultSet . maybeLong (): Long ? maybeResult [jvm] fun < T > ResultSet . maybeResult (function: ( ResultSet ) -> T ): T ? maybeString [jvm] fun ResultSet . maybeString (): String ? uniqueInt [jvm] fun ResultSet . uniqueInt (): Int uniqueLong [jvm] fun ResultSet . uniqueLong (): Long uniqueResult [jvm] fun < T > ResultSet . uniqueResult (function: ( ResultSet ) -> T ): T uniqueString [jvm] fun ResultSet . uniqueString (): String","title":"Package misk.jdbc - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/#package-miskjdbc","text":"","title":"Package misk.jdbc"},{"location":"0.x/misk-jdbc/misk.jdbc/#types","text":"Name Summary Check [jvm] enum Check : Enum < Check > CheckDisabler [jvm] object CheckDisabler CheckException [jvm] open class CheckException (message: String ?, cause: Throwable ?) : SQLException An exception that is thrown when a Check fails. Cluster [jvm] interface Cluster < T > Cluster provides a consistent abstraction for interacting with various database-related resources T based on their role in the underlying database topology. DatabasePool [jvm] interface DatabasePool Figures out what database name to use for a given config. Tests use this to pool many databases for concurrent execution. In development, staging, and production the database never changes. DatabaseReadyService [jvm] interface DatabaseReadyService : Service Marker interface for indicating that the database is ready. DataSourceCluster [jvm] class DataSourceCluster (writer: DataSource , reader: DataSource ) : Cluster < DataSource > DataSourceClusterConfig [jvm] data class DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?) Configuration element for a cluster of DataSources DataSourceClustersConfig [jvm] class DataSourceClustersConfig : LinkedHashMap < String , DataSourceClusterConfig > , Config Top-level configuration element for all datasource clusters DataSourceConfig [jvm] data class DataSourceConfig (type: DataSourceType , host: String ?, port: Int ?, database: String ?, username: String ?, password: String ?, fixed_pool_size: Int , connection_timeout: Duration , validation_timeout: Duration , connection_max_lifetime: Duration , query_timeout: Duration ?, migrations_resource: String ?, migrations_resources: List < String >?, vitess_schema_resource_root: String ?, trust_certificate_key_store_url: String ?, trust_certificate_key_store_password: String ?, client_certificate_key_store_url: String ?, client_certificate_key_store_password: String ?, trust_certificate_key_store_path: String ?, client_certificate_key_store_path: String ?, verify_server_identity: Boolean , enabledTlsProtocols: List < String >, show_sql: String ?, jdbc_statement_batch_size: Int ?) Configuration element for an individual datasource DataSourceConnector [jvm] interface DataSourceConnector DataSourceDecorator [jvm] interface DataSourceDecorator DataSourceService [jvm] @Singleton class DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry?) : AbstractIdleService, DataSourceConnector , Provider< DataSource > Builds a connection pool to a JDBC database. Doesn\u2019t do any schema migration or validation. DataSourceType [jvm] enum DataSourceType : Enum < DataSourceType > Defines a type of datasource JdbcModule [jvm] class JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool ) : KAbstractModule Binds database connectivity for a qualified data source. This binds the following public types: JDBCSession [jvm] class JDBCSession (connection: Connection ) : Session PingDatabaseService [jvm] @Singleton class PingDatabaseService @Injectconstructor(config: DataSourceConfig , deployment: Deployment) : AbstractIdleService Service that waits for the database to become healthy. This is needed if we\u2019re booting up a Vitess cluster as part of the test run. PostCommitHookFailedException [jvm] class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook RealDatabasePool [jvm] object RealDatabasePool : DatabasePool RealTransacter [jvm] class RealTransacter (dataSource: DataSource ) : Transacter SchemaMigratorService [jvm] class SchemaMigratorService : AbstractIdleService, HealthCheck, DatabaseReadyService Session [jvm] interface Session SpanInjector [jvm] class SpanInjector (tracer: Tracer?, config: DataSourceConfig ) : QueryTransformer, DataSourceDecorator On the fly decorates queries with the span context, so the query call can be traced all the way through Vitess StringBuilderCarrier [jvm] class StringBuilderCarrier : TextMap TableScanException [jvm] class TableScanException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we execute a query lacking an index. Transacter [jvm] interface Transacter","title":"Types"},{"location":"0.x/misk-jdbc/misk.jdbc/#functions","text":"Name Summary map [jvm] fun < T > ResultSet . map (function: ( ResultSet ) -> T ): List < T > maybeInt [jvm] fun ResultSet . maybeInt (): Int ? maybeLong [jvm] fun ResultSet . maybeLong (): Long ? maybeResult [jvm] fun < T > ResultSet . maybeResult (function: ( ResultSet ) -> T ): T ? maybeString [jvm] fun ResultSet . maybeString (): String ? uniqueInt [jvm] fun ResultSet . uniqueInt (): Int uniqueLong [jvm] fun ResultSet . uniqueLong (): Long uniqueResult [jvm] fun < T > ResultSet . uniqueResult (function: ( ResultSet ) -> T ): T uniqueString [jvm] fun ResultSet . uniqueString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/map/","text":"// misk-jdbc / misk.jdbc / map map \u00b6 [jvm]\\ fun < T > ResultSet . map (function: ( ResultSet ) -> T ): List < T >","title":"map - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/map/#map","text":"[jvm]\\ fun < T > ResultSet . map (function: ( ResultSet ) -> T ): List < T >","title":"map"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-int/","text":"// misk-jdbc / misk.jdbc / maybeInt maybeInt \u00b6 [jvm]\\ fun ResultSet . maybeInt (): Int ?","title":"maybeInt - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-int/#maybeint","text":"[jvm]\\ fun ResultSet . maybeInt (): Int ?","title":"maybeInt"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-long/","text":"// misk-jdbc / misk.jdbc / maybeLong maybeLong \u00b6 [jvm]\\ fun ResultSet . maybeLong (): Long ?","title":"maybeLong - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-long/#maybelong","text":"[jvm]\\ fun ResultSet . maybeLong (): Long ?","title":"maybeLong"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-result/","text":"// misk-jdbc / misk.jdbc / maybeResult maybeResult \u00b6 [jvm]\\ fun < T > ResultSet . maybeResult (function: ( ResultSet ) -> T ): T ?","title":"maybeResult - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-result/#mayberesult","text":"[jvm]\\ fun < T > ResultSet . maybeResult (function: ( ResultSet ) -> T ): T ?","title":"maybeResult"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-string/","text":"// misk-jdbc / misk.jdbc / maybeString maybeString \u00b6 [jvm]\\ fun ResultSet . maybeString (): String ?","title":"maybeString - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/maybe-string/#maybestring","text":"[jvm]\\ fun ResultSet . maybeString (): String ?","title":"maybeString"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-int/","text":"// misk-jdbc / misk.jdbc / uniqueInt uniqueInt \u00b6 [jvm]\\ fun ResultSet . uniqueInt (): Int","title":"uniqueInt - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-int/#uniqueint","text":"[jvm]\\ fun ResultSet . uniqueInt (): Int","title":"uniqueInt"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-long/","text":"// misk-jdbc / misk.jdbc / uniqueLong uniqueLong \u00b6 [jvm]\\ fun ResultSet . uniqueLong (): Long","title":"uniqueLong - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-long/#uniquelong","text":"[jvm]\\ fun ResultSet . uniqueLong (): Long","title":"uniqueLong"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-result/","text":"// misk-jdbc / misk.jdbc / uniqueResult uniqueResult \u00b6 [jvm]\\ fun < T > ResultSet . uniqueResult (function: ( ResultSet ) -> T ): T","title":"uniqueResult - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-result/#uniqueresult","text":"[jvm]\\ fun < T > ResultSet . uniqueResult (function: ( ResultSet ) -> T ): T","title":"uniqueResult"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-string/","text":"// misk-jdbc / misk.jdbc / uniqueString uniqueString \u00b6 [jvm]\\ fun ResultSet . uniqueString (): String","title":"uniqueString - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/unique-string/#uniquestring","text":"[jvm]\\ fun ResultSet . uniqueString (): String","title":"uniqueString"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/","text":"// misk-jdbc / misk.jdbc / Check Check \u00b6 [jvm]\\ enum Check : Enum < Check > Entries \u00b6 COWRITE [jvm] COWRITE () TABLE_SCAN [jvm] TABLE_SCAN () FULL_SCATTER [jvm] FULL_SCATTER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Check - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/#check","text":"[jvm]\\ enum Check : Enum < Check >","title":"Check"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/#entries","text":"COWRITE [jvm] COWRITE () TABLE_SCAN [jvm] TABLE_SCAN () FULL_SCATTER [jvm] FULL_SCATTER ()","title":"Entries"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-c-o-w-r-i-t-e/","text":"// misk-jdbc / misk.jdbc / Check / COWRITE COWRITE \u00b6 [jvm]\\ COWRITE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"COWRITE - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-c-o-w-r-i-t-e/#cowrite","text":"[jvm]\\ COWRITE ()","title":"COWRITE"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-c-o-w-r-i-t-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-f-u-l-l_-s-c-a-t-t-e-r/","text":"// misk-jdbc / misk.jdbc / Check / FULL_SCATTER FULL_SCATTER \u00b6 [jvm]\\ FULL_SCATTER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"FULL_SCATTER - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-f-u-l-l_-s-c-a-t-t-e-r/#full_scatter","text":"[jvm]\\ FULL_SCATTER ()","title":"FULL_SCATTER"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-f-u-l-l_-s-c-a-t-t-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-t-a-b-l-e_-s-c-a-n/","text":"// misk-jdbc / misk.jdbc / Check / TABLE_SCAN TABLE_SCAN \u00b6 [jvm]\\ TABLE_SCAN () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"TABLE_SCAN - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-t-a-b-l-e_-s-c-a-n/#table_scan","text":"[jvm]\\ TABLE_SCAN ()","title":"TABLE_SCAN"},{"location":"0.x/misk-jdbc/misk.jdbc/-check/-t-a-b-l-e_-s-c-a-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/","text":"// misk-jdbc / misk.jdbc / CheckDisabler CheckDisabler \u00b6 [jvm]\\ object CheckDisabler Functions \u00b6 Name Summary disableChecks [jvm] fun < T > disableChecks (checks: Collection < Check >, body: () -> T ): T isCheckEnabled [jvm] fun isCheckEnabled (check: Check ): Boolean withoutChecks [jvm] fun < T > withoutChecks (vararg checks: Check , body: () -> T ): T Properties \u00b6 Name Summary disabledChecks [jvm] val disabledChecks : ThreadLocal < Collection < Check >>","title":"CheckDisabler - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/#checkdisabler","text":"[jvm]\\ object CheckDisabler","title":"CheckDisabler"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/#functions","text":"Name Summary disableChecks [jvm] fun < T > disableChecks (checks: Collection < Check >, body: () -> T ): T isCheckEnabled [jvm] fun isCheckEnabled (check: Check ): Boolean withoutChecks [jvm] fun < T > withoutChecks (vararg checks: Check , body: () -> T ): T","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/#properties","text":"Name Summary disabledChecks [jvm] val disabledChecks : ThreadLocal < Collection < Check >>","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/disable-checks/","text":"// misk-jdbc / misk.jdbc / CheckDisabler / disableChecks disableChecks \u00b6 [jvm]\\ fun < T > disableChecks (checks: Collection < Check >, body: () -> T ): T","title":"disableChecks - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/disable-checks/#disablechecks","text":"[jvm]\\ fun < T > disableChecks (checks: Collection < Check >, body: () -> T ): T","title":"disableChecks"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/disabled-checks/","text":"// misk-jdbc / misk.jdbc / CheckDisabler / disabledChecks disabledChecks \u00b6 [jvm]\\ val disabledChecks : ThreadLocal < Collection < Check >>","title":"disabledChecks - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/disabled-checks/#disabledchecks","text":"[jvm]\\ val disabledChecks : ThreadLocal < Collection < Check >>","title":"disabledChecks"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/is-check-enabled/","text":"// misk-jdbc / misk.jdbc / CheckDisabler / isCheckEnabled isCheckEnabled \u00b6 [jvm]\\ fun isCheckEnabled (check: Check ): Boolean","title":"isCheckEnabled - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/is-check-enabled/#ischeckenabled","text":"[jvm]\\ fun isCheckEnabled (check: Check ): Boolean","title":"isCheckEnabled"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/without-checks/","text":"// misk-jdbc / misk.jdbc / CheckDisabler / withoutChecks withoutChecks \u00b6 [jvm]\\ fun < T > withoutChecks (vararg checks: Check , body: () -> T ): T","title":"withoutChecks - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-disabler/without-checks/#withoutchecks","text":"[jvm]\\ fun < T > withoutChecks (vararg checks: Check , body: () -> T ): T","title":"withoutChecks"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/","text":"// misk-jdbc / misk.jdbc / CheckException CheckException \u00b6 [jvm]\\ open class CheckException (message: String ?, cause: Throwable ?) : SQLException An exception that is thrown when a Check fails. Constructors \u00b6 CheckException [jvm] fun CheckException (message: String ? = null, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable > Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? Inheritors \u00b6 Name TableScanException CowriteException FullScatterException","title":"CheckException - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/#checkexception","text":"[jvm]\\ open class CheckException (message: String ?, cause: Throwable ?) : SQLException An exception that is thrown when a Check fails.","title":"CheckException"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/#constructors","text":"CheckException [jvm] fun CheckException (message: String ? = null, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable >","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/#inheritors","text":"Name TableScanException CowriteException FullScatterException","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/-check-exception/","text":"// misk-jdbc / misk.jdbc / CheckException / CheckException CheckException \u00b6 [jvm]\\ fun CheckException (message: String ? = null, cause: Throwable ? = null)","title":"CheckException - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-check-exception/-check-exception/#checkexception","text":"[jvm]\\ fun CheckException (message: String ? = null, cause: Throwable ? = null)","title":"CheckException"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/","text":"// misk-jdbc / misk.jdbc / Cluster Cluster \u00b6 [jvm]\\ interface Cluster < T > Cluster provides a consistent abstraction for interacting with various database-related resources T based on their role in the underlying database topology. Database clusters are often composed of a Read/Write master instance and a set of Read-Only replica instances. Misk defers management of these replicas to the underlying persistence layer and requires a single addressable endpoint. Examples include a Read-Only DataSource or a Read/Write SessionFactory in Hibernate. N.B. If a Read-Only resource is not provided Misk will default to the Read/Write resource. Properties \u00b6 Name Summary reader [jvm] abstract val reader : T writer [jvm] abstract val writer : T Inheritors \u00b6 Name DataSourceCluster","title":"Cluster - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/#cluster","text":"[jvm]\\ interface Cluster < T > Cluster provides a consistent abstraction for interacting with various database-related resources T based on their role in the underlying database topology. Database clusters are often composed of a Read/Write master instance and a set of Read-Only replica instances. Misk defers management of these replicas to the underlying persistence layer and requires a single addressable endpoint. Examples include a Read-Only DataSource or a Read/Write SessionFactory in Hibernate. N.B. If a Read-Only resource is not provided Misk will default to the Read/Write resource.","title":"Cluster"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/#properties","text":"Name Summary reader [jvm] abstract val reader : T writer [jvm] abstract val writer : T","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/#inheritors","text":"Name DataSourceCluster","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/reader/","text":"// misk-jdbc / misk.jdbc / Cluster / reader reader \u00b6 [jvm]\\ abstract val reader : T","title":"reader - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/reader/#reader","text":"[jvm]\\ abstract val reader : T","title":"reader"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/writer/","text":"// misk-jdbc / misk.jdbc / Cluster / writer writer \u00b6 [jvm]\\ abstract val writer : T","title":"writer - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-cluster/writer/#writer","text":"[jvm]\\ abstract val writer : T","title":"writer"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/","text":"// misk-jdbc / misk.jdbc / DataSourceCluster DataSourceCluster \u00b6 [jvm]\\ class DataSourceCluster (writer: DataSource , reader: DataSource ) : Cluster < DataSource > Properties \u00b6 Name Summary reader [jvm] open override val reader : DataSource writer [jvm] open override val writer : DataSource","title":"DataSourceCluster - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/#datasourcecluster","text":"[jvm]\\ class DataSourceCluster (writer: DataSource , reader: DataSource ) : Cluster < DataSource >","title":"DataSourceCluster"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/#properties","text":"Name Summary reader [jvm] open override val reader : DataSource writer [jvm] open override val writer : DataSource","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/-data-source-cluster/","text":"// misk-jdbc / misk.jdbc / DataSourceCluster / DataSourceCluster DataSourceCluster \u00b6 [jvm]\\ fun DataSourceCluster (writer: DataSource , reader: DataSource )","title":"DataSourceCluster - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/-data-source-cluster/#datasourcecluster","text":"[jvm]\\ fun DataSourceCluster (writer: DataSource , reader: DataSource )","title":"DataSourceCluster"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/reader/","text":"// misk-jdbc / misk.jdbc / DataSourceCluster / reader reader \u00b6 [jvm]\\ open override val reader : DataSource","title":"reader - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/reader/#reader","text":"[jvm]\\ open override val reader : DataSource","title":"reader"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/writer/","text":"// misk-jdbc / misk.jdbc / DataSourceCluster / writer writer \u00b6 [jvm]\\ open override val writer : DataSource","title":"writer - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster/writer/#writer","text":"[jvm]\\ open override val writer : DataSource","title":"writer"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/","text":"// misk-jdbc / misk.jdbc / DataSourceClusterConfig DataSourceClusterConfig \u00b6 [jvm]\\ data class DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?) Configuration element for a cluster of DataSources Constructors \u00b6 DataSourceClusterConfig [jvm] fun DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?) Properties \u00b6 Name Summary reader [jvm] val reader : DataSourceConfig ? writer [jvm] val writer : DataSourceConfig","title":"DataSourceClusterConfig - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/#datasourceclusterconfig","text":"[jvm]\\ data class DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?) Configuration element for a cluster of DataSources","title":"DataSourceClusterConfig"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/#constructors","text":"DataSourceClusterConfig [jvm] fun DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/#properties","text":"Name Summary reader [jvm] val reader : DataSourceConfig ? writer [jvm] val writer : DataSourceConfig","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/-data-source-cluster-config/","text":"// misk-jdbc / misk.jdbc / DataSourceClusterConfig / DataSourceClusterConfig DataSourceClusterConfig \u00b6 [jvm]\\ fun DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?)","title":"DataSourceClusterConfig - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/-data-source-cluster-config/#datasourceclusterconfig","text":"[jvm]\\ fun DataSourceClusterConfig (writer: DataSourceConfig , reader: DataSourceConfig ?)","title":"DataSourceClusterConfig"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/reader/","text":"// misk-jdbc / misk.jdbc / DataSourceClusterConfig / reader reader \u00b6 [jvm]\\ val reader : DataSourceConfig ?","title":"reader - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/reader/#reader","text":"[jvm]\\ val reader : DataSourceConfig ?","title":"reader"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/writer/","text":"// misk-jdbc / misk.jdbc / DataSourceClusterConfig / writer writer \u00b6 [jvm]\\ val writer : DataSourceConfig","title":"writer - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-cluster-config/writer/#writer","text":"[jvm]\\ val writer : DataSourceConfig","title":"writer"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-clusters-config/","text":"// misk-jdbc / misk.jdbc / DataSourceClustersConfig DataSourceClustersConfig \u00b6 [jvm]\\ class DataSourceClustersConfig : LinkedHashMap < String , DataSourceClusterConfig > , Config Top-level configuration element for all datasource clusters Constructors \u00b6 DataSourceClustersConfig [jvm] fun DataSourceClustersConfig () DataSourceClustersConfig [jvm] fun DataSourceClustersConfig (m: Map < String , DataSourceClusterConfig >) Functions \u00b6 Name Summary afterNodeAccess [jvm] open override fun afterNodeAccess (p0: HashMap.Node < String , DataSourceClusterConfig >) afterNodeInsertion [jvm] open override fun afterNodeInsertion (p0: Boolean ) afterNodeRemoval [jvm] open override fun afterNodeRemoval (p0: HashMap.Node < String , DataSourceClusterConfig >) capacity [jvm] fun capacity (): Int clear [jvm] open override fun clear () clone [jvm] open override fun clone (): Any compute [jvm] open override fun compute (p0: String , p1: BiFunction <in String , in DataSourceClusterConfig ?, out DataSourceClusterConfig ?>): DataSourceClusterConfig ? computeIfAbsent [jvm] open override fun computeIfAbsent (p0: String , p1: Function <in String , out DataSourceClusterConfig >): DataSourceClusterConfig computeIfPresent [jvm] open override fun computeIfPresent (p0: String , p1: BiFunction <in String , in DataSourceClusterConfig , out DataSourceClusterConfig ?>): DataSourceClusterConfig ? containsKey [jvm] open override fun containsKey (key: String ): Boolean containsValue [jvm] open override fun containsValue (value: DataSourceClusterConfig ): Boolean equals [jvm] open operator override fun equals (other: Any ?): Boolean forEach [jvm] open override fun forEach (p0: BiConsumer <in String , in DataSourceClusterConfig >) get [jvm] open operator override fun get (key: String ): DataSourceClusterConfig ? getNode [jvm] fun getNode (p0: Int , p1: Any ): HashMap.Node < String , DataSourceClusterConfig > getOrDefault [jvm] open override fun getOrDefault (key: String , defaultValue: DataSourceClusterConfig ): DataSourceClusterConfig hashCode [jvm] open override fun hashCode (): Int internalWriteEntries [jvm] open override fun internalWriteEntries (p0: ObjectOutputStream ) isEmpty [jvm] open override fun isEmpty (): Boolean loadFactor [jvm] fun loadFactor (): Float merge [jvm] open override fun merge (p0: String , p1: DataSourceClusterConfig , p2: BiFunction <in DataSourceClusterConfig , in DataSourceClusterConfig , out DataSourceClusterConfig ?>): DataSourceClusterConfig ? newNode [jvm] open override fun newNode (p0: Int , p1: String , p2: DataSourceClusterConfig , p3: HashMap.Node < String , DataSourceClusterConfig >): HashMap.Node < String , DataSourceClusterConfig > newTreeNode [jvm] open override fun newTreeNode (p0: Int , p1: String , p2: DataSourceClusterConfig , p3: HashMap.Node < String , DataSourceClusterConfig >): HashMap.TreeNode < String , DataSourceClusterConfig > put [jvm] open override fun put (key: String , value: DataSourceClusterConfig ): DataSourceClusterConfig ? putAll [jvm] open override fun putAll (from: Map <out String , DataSourceClusterConfig >) putIfAbsent [jvm] open override fun putIfAbsent (p0: String , p1: DataSourceClusterConfig ): DataSourceClusterConfig ? putMapEntries [jvm] fun putMapEntries (p0: MutableMap <out String , out DataSourceClusterConfig >, p1: Boolean ) putVal [jvm] fun putVal (p0: Int , p1: String , p2: DataSourceClusterConfig , p3: Boolean , p4: Boolean ): DataSourceClusterConfig reinitialize [jvm] open override fun reinitialize () remove [jvm] open override fun remove (key: String ): DataSourceClusterConfig ? open override fun remove (key: String , value: DataSourceClusterConfig ): Boolean removeEldestEntry [jvm] open fun removeEldestEntry (p0: MutableMap.MutableEntry < String , DataSourceClusterConfig >): Boolean removeNode [jvm] fun removeNode (p0: Int , p1: Any , p2: Any , p3: Boolean , p4: Boolean ): HashMap.Node < String , DataSourceClusterConfig > replace [jvm] open override fun replace (p0: String , p1: DataSourceClusterConfig ): DataSourceClusterConfig ? open override fun replace (p0: String , p1: DataSourceClusterConfig , p2: DataSourceClusterConfig ): Boolean replaceAll [jvm] open override fun replaceAll (p0: BiFunction <in String , in DataSourceClusterConfig , out DataSourceClusterConfig >) replacementNode [jvm] open override fun replacementNode (p0: HashMap.Node < String , DataSourceClusterConfig >, p1: HashMap.Node < String , DataSourceClusterConfig >): HashMap.Node < String , DataSourceClusterConfig > replacementTreeNode [jvm] open override fun replacementTreeNode (p0: HashMap.Node < String , DataSourceClusterConfig >, p1: HashMap.Node < String , DataSourceClusterConfig >): HashMap.TreeNode < String , DataSourceClusterConfig > resize [jvm] fun resize (): Array < HashMap.Node < String , DataSourceClusterConfig >> toString [jvm] open override fun toString (): String treeifyBin [jvm] fun treeifyBin (p0: Array < HashMap.Node < String , DataSourceClusterConfig >>, p1: Int ) Properties \u00b6 Name Summary accessOrder [jvm] val accessOrder : Boolean entries [jvm] open override val entries : MutableSet < MutableMap.MutableEntry < String , DataSourceClusterConfig >> entrySet [jvm] val entrySet : MutableSet < MutableMap.MutableEntry < String , DataSourceClusterConfig >> head [jvm] val head : LinkedHashMap.Entry < String , DataSourceClusterConfig > keys [jvm] open override val keys : MutableSet < String > keySet [jvm] val keySet : MutableSet < String > loadFactor [jvm] val loadFactor : Float modCount [jvm] val modCount : Int size [jvm] open override val size : Int size [jvm] val size : Int table [jvm] val table : Array < HashMap.Node < String , DataSourceClusterConfig >> tail [jvm] val tail : LinkedHashMap.Entry < String , DataSourceClusterConfig > threshold [jvm] val threshold : Int values [jvm] open override val values : MutableCollection < DataSourceClusterConfig > values [jvm] val values : MutableCollection < DataSourceClusterConfig >","title":"DataSourceClustersConfig - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-clusters-config/#datasourceclustersconfig","text":"[jvm]\\ class DataSourceClustersConfig : LinkedHashMap < String , DataSourceClusterConfig > , Config Top-level configuration element for all datasource clusters","title":"DataSourceClustersConfig"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-clusters-config/#constructors","text":"DataSourceClustersConfig [jvm] fun DataSourceClustersConfig () DataSourceClustersConfig [jvm] fun DataSourceClustersConfig (m: Map < String , DataSourceClusterConfig >)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-clusters-config/#functions","text":"Name Summary afterNodeAccess [jvm] open override fun afterNodeAccess (p0: HashMap.Node < String , DataSourceClusterConfig >) afterNodeInsertion [jvm] open override fun afterNodeInsertion (p0: Boolean ) afterNodeRemoval [jvm] open override fun afterNodeRemoval (p0: HashMap.Node < String , DataSourceClusterConfig >) capacity [jvm] fun capacity (): Int clear [jvm] open override fun clear () clone [jvm] open override fun clone (): Any compute [jvm] open override fun compute (p0: String , p1: BiFunction <in String , in DataSourceClusterConfig ?, out DataSourceClusterConfig ?>): DataSourceClusterConfig ? computeIfAbsent [jvm] open override fun computeIfAbsent (p0: String , p1: Function <in String , out DataSourceClusterConfig >): DataSourceClusterConfig computeIfPresent [jvm] open override fun computeIfPresent (p0: String , p1: BiFunction <in String , in DataSourceClusterConfig , out DataSourceClusterConfig ?>): DataSourceClusterConfig ? containsKey [jvm] open override fun containsKey (key: String ): Boolean containsValue [jvm] open override fun containsValue (value: DataSourceClusterConfig ): Boolean equals [jvm] open operator override fun equals (other: Any ?): Boolean forEach [jvm] open override fun forEach (p0: BiConsumer <in String , in DataSourceClusterConfig >) get [jvm] open operator override fun get (key: String ): DataSourceClusterConfig ? getNode [jvm] fun getNode (p0: Int , p1: Any ): HashMap.Node < String , DataSourceClusterConfig > getOrDefault [jvm] open override fun getOrDefault (key: String , defaultValue: DataSourceClusterConfig ): DataSourceClusterConfig hashCode [jvm] open override fun hashCode (): Int internalWriteEntries [jvm] open override fun internalWriteEntries (p0: ObjectOutputStream ) isEmpty [jvm] open override fun isEmpty (): Boolean loadFactor [jvm] fun loadFactor (): Float merge [jvm] open override fun merge (p0: String , p1: DataSourceClusterConfig , p2: BiFunction <in DataSourceClusterConfig , in DataSourceClusterConfig , out DataSourceClusterConfig ?>): DataSourceClusterConfig ? newNode [jvm] open override fun newNode (p0: Int , p1: String , p2: DataSourceClusterConfig , p3: HashMap.Node < String , DataSourceClusterConfig >): HashMap.Node < String , DataSourceClusterConfig > newTreeNode [jvm] open override fun newTreeNode (p0: Int , p1: String , p2: DataSourceClusterConfig , p3: HashMap.Node < String , DataSourceClusterConfig >): HashMap.TreeNode < String , DataSourceClusterConfig > put [jvm] open override fun put (key: String , value: DataSourceClusterConfig ): DataSourceClusterConfig ? putAll [jvm] open override fun putAll (from: Map <out String , DataSourceClusterConfig >) putIfAbsent [jvm] open override fun putIfAbsent (p0: String , p1: DataSourceClusterConfig ): DataSourceClusterConfig ? putMapEntries [jvm] fun putMapEntries (p0: MutableMap <out String , out DataSourceClusterConfig >, p1: Boolean ) putVal [jvm] fun putVal (p0: Int , p1: String , p2: DataSourceClusterConfig , p3: Boolean , p4: Boolean ): DataSourceClusterConfig reinitialize [jvm] open override fun reinitialize () remove [jvm] open override fun remove (key: String ): DataSourceClusterConfig ? open override fun remove (key: String , value: DataSourceClusterConfig ): Boolean removeEldestEntry [jvm] open fun removeEldestEntry (p0: MutableMap.MutableEntry < String , DataSourceClusterConfig >): Boolean removeNode [jvm] fun removeNode (p0: Int , p1: Any , p2: Any , p3: Boolean , p4: Boolean ): HashMap.Node < String , DataSourceClusterConfig > replace [jvm] open override fun replace (p0: String , p1: DataSourceClusterConfig ): DataSourceClusterConfig ? open override fun replace (p0: String , p1: DataSourceClusterConfig , p2: DataSourceClusterConfig ): Boolean replaceAll [jvm] open override fun replaceAll (p0: BiFunction <in String , in DataSourceClusterConfig , out DataSourceClusterConfig >) replacementNode [jvm] open override fun replacementNode (p0: HashMap.Node < String , DataSourceClusterConfig >, p1: HashMap.Node < String , DataSourceClusterConfig >): HashMap.Node < String , DataSourceClusterConfig > replacementTreeNode [jvm] open override fun replacementTreeNode (p0: HashMap.Node < String , DataSourceClusterConfig >, p1: HashMap.Node < String , DataSourceClusterConfig >): HashMap.TreeNode < String , DataSourceClusterConfig > resize [jvm] fun resize (): Array < HashMap.Node < String , DataSourceClusterConfig >> toString [jvm] open override fun toString (): String treeifyBin [jvm] fun treeifyBin (p0: Array < HashMap.Node < String , DataSourceClusterConfig >>, p1: Int )","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-clusters-config/#properties","text":"Name Summary accessOrder [jvm] val accessOrder : Boolean entries [jvm] open override val entries : MutableSet < MutableMap.MutableEntry < String , DataSourceClusterConfig >> entrySet [jvm] val entrySet : MutableSet < MutableMap.MutableEntry < String , DataSourceClusterConfig >> head [jvm] val head : LinkedHashMap.Entry < String , DataSourceClusterConfig > keys [jvm] open override val keys : MutableSet < String > keySet [jvm] val keySet : MutableSet < String > loadFactor [jvm] val loadFactor : Float modCount [jvm] val modCount : Int size [jvm] open override val size : Int size [jvm] val size : Int table [jvm] val table : Array < HashMap.Node < String , DataSourceClusterConfig >> tail [jvm] val tail : LinkedHashMap.Entry < String , DataSourceClusterConfig > threshold [jvm] val threshold : Int values [jvm] open override val values : MutableCollection < DataSourceClusterConfig > values [jvm] val values : MutableCollection < DataSourceClusterConfig >","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-clusters-config/-data-source-clusters-config/","text":"// misk-jdbc / misk.jdbc / DataSourceClustersConfig / DataSourceClustersConfig DataSourceClustersConfig \u00b6 [jvm]\\ fun DataSourceClustersConfig () fun DataSourceClustersConfig (m: Map < String , DataSourceClusterConfig >)","title":"DataSourceClustersConfig - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-clusters-config/-data-source-clusters-config/#datasourceclustersconfig","text":"[jvm]\\ fun DataSourceClustersConfig () fun DataSourceClustersConfig (m: Map < String , DataSourceClusterConfig >)","title":"DataSourceClustersConfig"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig DataSourceConfig \u00b6 [jvm]\\ data class DataSourceConfig (type: DataSourceType , host: String ?, port: Int ?, database: String ?, username: String ?, password: String ?, fixed_pool_size: Int , connection_timeout: Duration , validation_timeout: Duration , connection_max_lifetime: Duration , query_timeout: Duration ?, migrations_resource: String ?, migrations_resources: List < String >?, vitess_schema_resource_root: String ?, trust_certificate_key_store_url: String ?, trust_certificate_key_store_password: String ?, client_certificate_key_store_url: String ?, client_certificate_key_store_password: String ?, trust_certificate_key_store_path: String ?, client_certificate_key_store_path: String ?, verify_server_identity: Boolean , enabledTlsProtocols: List < String >, show_sql: String ?, jdbc_statement_batch_size: Int ?) Configuration element for an individual datasource Constructors \u00b6 DataSourceConfig [jvm] fun DataSourceConfig (type: DataSourceType , host: String ? = null, port: Int ? = null, database: String ? = null, username: String ? = null, password: String ? = null, fixed_pool_size: Int = 10, connection_timeout: Duration = Duration.ofSeconds(10), validation_timeout: Duration = Duration.ofSeconds(3), connection_max_lifetime: Duration = Duration.ofMinutes(1), query_timeout: Duration ? = Duration.ofMinutes(1), migrations_resource: String ? = null, migrations_resources: List < String >? = null, vitess_schema_resource_root: String ? = null, trust_certificate_key_store_url: String ? = null, trust_certificate_key_store_password: String ? = null, client_certificate_key_store_url: String ? = null, client_certificate_key_store_password: String ? = null, trust_certificate_key_store_path: String ? = null, client_certificate_key_store_path: String ? = null, verify_server_identity: Boolean = false, enabledTlsProtocols: List < String > = listOf(\u201cTLSv1.2\u201d, \u201cTLSv1.3\u201d), show_sql: String ? = \u201cfalse\u201d, jdbc_statement_batch_size: Int ? = null) Functions \u00b6 Name Summary asReplica [jvm] fun asReplica (): DataSourceConfig buildJdbcUrl [jvm] fun buildJdbcUrl (deployment: Deployment): String canRecoverOnReplica [jvm] fun canRecoverOnReplica (): Boolean withDefaults [jvm] fun withDefaults (): DataSourceConfig Properties \u00b6 Name Summary client_certificate_key_store_password [jvm] val client_certificate_key_store_password : String ? = null client_certificate_key_store_path [jvm] val client_certificate_key_store_path : String ? = null client_certificate_key_store_url [jvm] val client_certificate_key_store_url : String ? = null connection_max_lifetime [jvm] val connection_max_lifetime : Duration connection_timeout [jvm] val connection_timeout : Duration database [jvm] val database : String ? = null enabledTlsProtocols [jvm] val enabledTlsProtocols : List < String > fixed_pool_size [jvm] val fixed_pool_size : Int = 10 host [jvm] val host : String ? = null jdbc_statement_batch_size [jvm] val jdbc_statement_batch_size : Int ? = null migrations_resource [jvm] val migrations_resource : String ? = null migrations_resources [jvm] val migrations_resources : List < String >? = null password [jvm] val password : String ? = null port [jvm] val port : Int ? = null query_timeout [jvm] val query_timeout : Duration ? show_sql [jvm] val show_sql : String ? trust_certificate_key_store_password [jvm] val trust_certificate_key_store_password : String ? = null trust_certificate_key_store_path [jvm] val trust_certificate_key_store_path : String ? = null trust_certificate_key_store_url [jvm] val trust_certificate_key_store_url : String ? = null type [jvm] val type : DataSourceType username [jvm] val username : String ? = null validation_timeout [jvm] val validation_timeout : Duration verify_server_identity [jvm] val verify_server_identity : Boolean = false vitess_schema_resource_root [jvm] val vitess_schema_resource_root : String ? = null","title":"DataSourceConfig - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/#datasourceconfig","text":"[jvm]\\ data class DataSourceConfig (type: DataSourceType , host: String ?, port: Int ?, database: String ?, username: String ?, password: String ?, fixed_pool_size: Int , connection_timeout: Duration , validation_timeout: Duration , connection_max_lifetime: Duration , query_timeout: Duration ?, migrations_resource: String ?, migrations_resources: List < String >?, vitess_schema_resource_root: String ?, trust_certificate_key_store_url: String ?, trust_certificate_key_store_password: String ?, client_certificate_key_store_url: String ?, client_certificate_key_store_password: String ?, trust_certificate_key_store_path: String ?, client_certificate_key_store_path: String ?, verify_server_identity: Boolean , enabledTlsProtocols: List < String >, show_sql: String ?, jdbc_statement_batch_size: Int ?) Configuration element for an individual datasource","title":"DataSourceConfig"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/#constructors","text":"DataSourceConfig [jvm] fun DataSourceConfig (type: DataSourceType , host: String ? = null, port: Int ? = null, database: String ? = null, username: String ? = null, password: String ? = null, fixed_pool_size: Int = 10, connection_timeout: Duration = Duration.ofSeconds(10), validation_timeout: Duration = Duration.ofSeconds(3), connection_max_lifetime: Duration = Duration.ofMinutes(1), query_timeout: Duration ? = Duration.ofMinutes(1), migrations_resource: String ? = null, migrations_resources: List < String >? = null, vitess_schema_resource_root: String ? = null, trust_certificate_key_store_url: String ? = null, trust_certificate_key_store_password: String ? = null, client_certificate_key_store_url: String ? = null, client_certificate_key_store_password: String ? = null, trust_certificate_key_store_path: String ? = null, client_certificate_key_store_path: String ? = null, verify_server_identity: Boolean = false, enabledTlsProtocols: List < String > = listOf(\u201cTLSv1.2\u201d, \u201cTLSv1.3\u201d), show_sql: String ? = \u201cfalse\u201d, jdbc_statement_batch_size: Int ? = null)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/#functions","text":"Name Summary asReplica [jvm] fun asReplica (): DataSourceConfig buildJdbcUrl [jvm] fun buildJdbcUrl (deployment: Deployment): String canRecoverOnReplica [jvm] fun canRecoverOnReplica (): Boolean withDefaults [jvm] fun withDefaults (): DataSourceConfig","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/#properties","text":"Name Summary client_certificate_key_store_password [jvm] val client_certificate_key_store_password : String ? = null client_certificate_key_store_path [jvm] val client_certificate_key_store_path : String ? = null client_certificate_key_store_url [jvm] val client_certificate_key_store_url : String ? = null connection_max_lifetime [jvm] val connection_max_lifetime : Duration connection_timeout [jvm] val connection_timeout : Duration database [jvm] val database : String ? = null enabledTlsProtocols [jvm] val enabledTlsProtocols : List < String > fixed_pool_size [jvm] val fixed_pool_size : Int = 10 host [jvm] val host : String ? = null jdbc_statement_batch_size [jvm] val jdbc_statement_batch_size : Int ? = null migrations_resource [jvm] val migrations_resource : String ? = null migrations_resources [jvm] val migrations_resources : List < String >? = null password [jvm] val password : String ? = null port [jvm] val port : Int ? = null query_timeout [jvm] val query_timeout : Duration ? show_sql [jvm] val show_sql : String ? trust_certificate_key_store_password [jvm] val trust_certificate_key_store_password : String ? = null trust_certificate_key_store_path [jvm] val trust_certificate_key_store_path : String ? = null trust_certificate_key_store_url [jvm] val trust_certificate_key_store_url : String ? = null type [jvm] val type : DataSourceType username [jvm] val username : String ? = null validation_timeout [jvm] val validation_timeout : Duration verify_server_identity [jvm] val verify_server_identity : Boolean = false vitess_schema_resource_root [jvm] val vitess_schema_resource_root : String ? = null","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/-data-source-config/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / DataSourceConfig DataSourceConfig \u00b6 [jvm]\\ fun DataSourceConfig (type: DataSourceType , host: String ? = null, port: Int ? = null, database: String ? = null, username: String ? = null, password: String ? = null, fixed_pool_size: Int = 10, connection_timeout: Duration = Duration.ofSeconds(10), validation_timeout: Duration = Duration.ofSeconds(3), connection_max_lifetime: Duration = Duration.ofMinutes(1), query_timeout: Duration ? = Duration.ofMinutes(1), migrations_resource: String ? = null, migrations_resources: List < String >? = null, vitess_schema_resource_root: String ? = null, trust_certificate_key_store_url: String ? = null, trust_certificate_key_store_password: String ? = null, client_certificate_key_store_url: String ? = null, client_certificate_key_store_password: String ? = null, trust_certificate_key_store_path: String ? = null, client_certificate_key_store_path: String ? = null, verify_server_identity: Boolean = false, enabledTlsProtocols: List < String > = listOf(\u201cTLSv1.2\u201d, \u201cTLSv1.3\u201d), show_sql: String ? = \u201cfalse\u201d, jdbc_statement_batch_size: Int ? = null)","title":"DataSourceConfig - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/-data-source-config/#datasourceconfig","text":"[jvm]\\ fun DataSourceConfig (type: DataSourceType , host: String ? = null, port: Int ? = null, database: String ? = null, username: String ? = null, password: String ? = null, fixed_pool_size: Int = 10, connection_timeout: Duration = Duration.ofSeconds(10), validation_timeout: Duration = Duration.ofSeconds(3), connection_max_lifetime: Duration = Duration.ofMinutes(1), query_timeout: Duration ? = Duration.ofMinutes(1), migrations_resource: String ? = null, migrations_resources: List < String >? = null, vitess_schema_resource_root: String ? = null, trust_certificate_key_store_url: String ? = null, trust_certificate_key_store_password: String ? = null, client_certificate_key_store_url: String ? = null, client_certificate_key_store_password: String ? = null, trust_certificate_key_store_path: String ? = null, client_certificate_key_store_path: String ? = null, verify_server_identity: Boolean = false, enabledTlsProtocols: List < String > = listOf(\u201cTLSv1.2\u201d, \u201cTLSv1.3\u201d), show_sql: String ? = \u201cfalse\u201d, jdbc_statement_batch_size: Int ? = null)","title":"DataSourceConfig"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/as-replica/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / asReplica asReplica \u00b6 [jvm]\\ fun asReplica (): DataSourceConfig","title":"asReplica - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/as-replica/#asreplica","text":"[jvm]\\ fun asReplica (): DataSourceConfig","title":"asReplica"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/build-jdbc-url/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / buildJdbcUrl buildJdbcUrl \u00b6 [jvm]\\ fun buildJdbcUrl (deployment: Deployment): String","title":"buildJdbcUrl - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/build-jdbc-url/#buildjdbcurl","text":"[jvm]\\ fun buildJdbcUrl (deployment: Deployment): String","title":"buildJdbcUrl"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/can-recover-on-replica/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / canRecoverOnReplica canRecoverOnReplica \u00b6 [jvm]\\ fun canRecoverOnReplica (): Boolean","title":"canRecoverOnReplica - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/can-recover-on-replica/#canrecoveronreplica","text":"[jvm]\\ fun canRecoverOnReplica (): Boolean","title":"canRecoverOnReplica"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/client_certificate_key_store_password/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / client_certificate_key_store_password client_certificate_key_store_password \u00b6 [jvm]\\ val client_certificate_key_store_password : String ? = null","title":"client_certificate_key_store_password - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/client_certificate_key_store_password/#client_certificate_key_store_password","text":"[jvm]\\ val client_certificate_key_store_password : String ? = null","title":"client_certificate_key_store_password"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/client_certificate_key_store_path/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / client_certificate_key_store_path client_certificate_key_store_path \u00b6 [jvm]\\ val client_certificate_key_store_path : String ? = null","title":"client_certificate_key_store_path - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/client_certificate_key_store_path/#client_certificate_key_store_path","text":"[jvm]\\ val client_certificate_key_store_path : String ? = null","title":"client_certificate_key_store_path"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/client_certificate_key_store_url/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / client_certificate_key_store_url client_certificate_key_store_url \u00b6 [jvm]\\ val client_certificate_key_store_url : String ? = null","title":"client_certificate_key_store_url - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/client_certificate_key_store_url/#client_certificate_key_store_url","text":"[jvm]\\ val client_certificate_key_store_url : String ? = null","title":"client_certificate_key_store_url"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/connection_max_lifetime/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / connection_max_lifetime connection_max_lifetime \u00b6 [jvm]\\ val connection_max_lifetime : Duration","title":"connection_max_lifetime - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/connection_max_lifetime/#connection_max_lifetime","text":"[jvm]\\ val connection_max_lifetime : Duration","title":"connection_max_lifetime"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/connection_timeout/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / connection_timeout connection_timeout \u00b6 [jvm]\\ val connection_timeout : Duration","title":"connection_timeout - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/connection_timeout/#connection_timeout","text":"[jvm]\\ val connection_timeout : Duration","title":"connection_timeout"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/database/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / database database \u00b6 [jvm]\\ val database : String ? = null","title":"database - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/database/#database","text":"[jvm]\\ val database : String ? = null","title":"database"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/enabled-tls-protocols/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / enabledTlsProtocols enabledTlsProtocols \u00b6 [jvm]\\ val enabledTlsProtocols : List < String >","title":"enabledTlsProtocols - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/enabled-tls-protocols/#enabledtlsprotocols","text":"[jvm]\\ val enabledTlsProtocols : List < String >","title":"enabledTlsProtocols"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/fixed_pool_size/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / fixed_pool_size fixed_pool_size \u00b6 [jvm]\\ val fixed_pool_size : Int = 10","title":"fixed_pool_size - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/fixed_pool_size/#fixed_pool_size","text":"[jvm]\\ val fixed_pool_size : Int = 10","title":"fixed_pool_size"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/host/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / host host \u00b6 [jvm]\\ val host : String ? = null","title":"host - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/host/#host","text":"[jvm]\\ val host : String ? = null","title":"host"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/jdbc_statement_batch_size/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / jdbc_statement_batch_size jdbc_statement_batch_size \u00b6 [jvm]\\ val jdbc_statement_batch_size : Int ? = null","title":"jdbc_statement_batch_size - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/jdbc_statement_batch_size/#jdbc_statement_batch_size","text":"[jvm]\\ val jdbc_statement_batch_size : Int ? = null","title":"jdbc_statement_batch_size"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/migrations_resource/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / migrations_resource migrations_resource \u00b6 [jvm]\\ val migrations_resource : String ? = null","title":"migrations_resource - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/migrations_resource/#migrations_resource","text":"[jvm]\\ val migrations_resource : String ? = null","title":"migrations_resource"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/migrations_resources/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / migrations_resources migrations_resources \u00b6 [jvm]\\ val migrations_resources : List < String >? = null","title":"migrations_resources - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/migrations_resources/#migrations_resources","text":"[jvm]\\ val migrations_resources : List < String >? = null","title":"migrations_resources"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/password/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / password password \u00b6 [jvm]\\ val password : String ? = null","title":"password - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/password/#password","text":"[jvm]\\ val password : String ? = null","title":"password"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/port/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / port port \u00b6 [jvm]\\ val port : Int ? = null","title":"port - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/port/#port","text":"[jvm]\\ val port : Int ? = null","title":"port"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/query_timeout/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / query_timeout query_timeout \u00b6 [jvm]\\ val query_timeout : Duration ?","title":"query_timeout - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/query_timeout/#query_timeout","text":"[jvm]\\ val query_timeout : Duration ?","title":"query_timeout"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/show_sql/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / show_sql show_sql \u00b6 [jvm]\\ val show_sql : String ?","title":"show_sql - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/show_sql/#show_sql","text":"[jvm]\\ val show_sql : String ?","title":"show_sql"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/trust_certificate_key_store_password/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / trust_certificate_key_store_password trust_certificate_key_store_password \u00b6 [jvm]\\ val trust_certificate_key_store_password : String ? = null","title":"trust_certificate_key_store_password - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/trust_certificate_key_store_password/#trust_certificate_key_store_password","text":"[jvm]\\ val trust_certificate_key_store_password : String ? = null","title":"trust_certificate_key_store_password"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/trust_certificate_key_store_path/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / trust_certificate_key_store_path trust_certificate_key_store_path \u00b6 [jvm]\\ val trust_certificate_key_store_path : String ? = null","title":"trust_certificate_key_store_path - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/trust_certificate_key_store_path/#trust_certificate_key_store_path","text":"[jvm]\\ val trust_certificate_key_store_path : String ? = null","title":"trust_certificate_key_store_path"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/trust_certificate_key_store_url/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / trust_certificate_key_store_url trust_certificate_key_store_url \u00b6 [jvm]\\ val trust_certificate_key_store_url : String ? = null","title":"trust_certificate_key_store_url - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/trust_certificate_key_store_url/#trust_certificate_key_store_url","text":"[jvm]\\ val trust_certificate_key_store_url : String ? = null","title":"trust_certificate_key_store_url"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/type/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / type type \u00b6 [jvm]\\ val type : DataSourceType","title":"type - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/type/#type","text":"[jvm]\\ val type : DataSourceType","title":"type"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/username/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / username username \u00b6 [jvm]\\ val username : String ? = null","title":"username - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/username/#username","text":"[jvm]\\ val username : String ? = null","title":"username"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/validation_timeout/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / validation_timeout validation_timeout \u00b6 [jvm]\\ val validation_timeout : Duration","title":"validation_timeout - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/validation_timeout/#validation_timeout","text":"[jvm]\\ val validation_timeout : Duration","title":"validation_timeout"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/verify_server_identity/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / verify_server_identity verify_server_identity \u00b6 [jvm]\\ val verify_server_identity : Boolean = false","title":"verify_server_identity - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/verify_server_identity/#verify_server_identity","text":"[jvm]\\ val verify_server_identity : Boolean = false","title":"verify_server_identity"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/vitess_schema_resource_root/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / vitess_schema_resource_root vitess_schema_resource_root \u00b6 [jvm]\\ val vitess_schema_resource_root : String ? = null","title":"vitess_schema_resource_root - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/vitess_schema_resource_root/#vitess_schema_resource_root","text":"[jvm]\\ val vitess_schema_resource_root : String ? = null","title":"vitess_schema_resource_root"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/with-defaults/","text":"// misk-jdbc / misk.jdbc / DataSourceConfig / withDefaults withDefaults \u00b6 [jvm]\\ fun withDefaults (): DataSourceConfig","title":"withDefaults - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-config/with-defaults/#withdefaults","text":"[jvm]\\ fun withDefaults (): DataSourceConfig","title":"withDefaults"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-connector/","text":"// misk-jdbc / misk.jdbc / DataSourceConnector DataSourceConnector \u00b6 [jvm]\\ interface DataSourceConnector Functions \u00b6 Name Summary config [jvm] abstract fun config (): DataSourceConfig Inheritors \u00b6 Name DataSourceService","title":"DataSourceConnector - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-connector/#datasourceconnector","text":"[jvm]\\ interface DataSourceConnector","title":"DataSourceConnector"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-connector/#functions","text":"Name Summary config [jvm] abstract fun config (): DataSourceConfig","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-connector/#inheritors","text":"Name DataSourceService","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-connector/config/","text":"// misk-jdbc / misk.jdbc / DataSourceConnector / config config \u00b6 [jvm]\\ abstract fun config (): DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-connector/config/#config","text":"[jvm]\\ abstract fun config (): DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-decorator/","text":"// misk-jdbc / misk.jdbc / DataSourceDecorator DataSourceDecorator \u00b6 [jvm]\\ interface DataSourceDecorator Functions \u00b6 Name Summary decorate [jvm] abstract fun decorate (dataSource: DataSource ): DataSource Inheritors \u00b6 Name SpanInjector","title":"DataSourceDecorator - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-decorator/#datasourcedecorator","text":"[jvm]\\ interface DataSourceDecorator","title":"DataSourceDecorator"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-decorator/#functions","text":"Name Summary decorate [jvm] abstract fun decorate (dataSource: DataSource ): DataSource","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-decorator/#inheritors","text":"Name SpanInjector","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-decorator/decorate/","text":"// misk-jdbc / misk.jdbc / DataSourceDecorator / decorate decorate \u00b6 [jvm]\\ abstract fun decorate (dataSource: DataSource ): DataSource","title":"decorate - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-decorator/decorate/#decorate","text":"[jvm]\\ abstract fun decorate (dataSource: DataSource ): DataSource","title":"decorate"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/","text":"// misk-jdbc / misk.jdbc / DataSourceService DataSourceService \u00b6 [jvm]\\ @Singleton class DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry?) : AbstractIdleService, DataSourceConnector , Provider< DataSource > Builds a connection pool to a JDBC database. Doesn\u2019t do any schema migration or validation. Parameters \u00b6 jvm baseConfig the configuration to connect to. The actual database name used may vary as the databasePool can pick an alternate database name for testing. Constructors \u00b6 DataSourceService [jvm] fun DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry? = null) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) config [jvm] open override fun config (): DataSourceConfig executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable get [jvm] open override fun get (): DataSource isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"DataSourceService - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/#datasourceservice","text":"[jvm]\\ @Singleton class DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry?) : AbstractIdleService, DataSourceConnector , Provider< DataSource > Builds a connection pool to a JDBC database. Doesn\u2019t do any schema migration or validation.","title":"DataSourceService"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/#parameters","text":"jvm baseConfig the configuration to connect to. The actual database name used may vary as the databasePool can pick an alternate database name for testing.","title":"Parameters"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/#constructors","text":"DataSourceService [jvm] fun DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry? = null)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) config [jvm] open override fun config (): DataSourceConfig executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable get [jvm] open override fun get (): DataSource isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-data-source-service/","text":"// misk-jdbc / misk.jdbc / DataSourceService / DataSourceService DataSourceService \u00b6 [jvm]\\ fun DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry? = null) Parameters \u00b6 jvm baseConfig the configuration to connect to. The actual database name used may vary as the databasePool can pick an alternate database name for testing.","title":"DataSourceService - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-data-source-service/#datasourceservice","text":"[jvm]\\ fun DataSourceService (qualifier: KClass <out Annotation >, baseConfig: DataSourceConfig , deployment: Deployment, dataSourceDecorators: Set < DataSourceDecorator >, databasePool: DatabasePool , collectorRegistry: CollectorRegistry? = null)","title":"DataSourceService"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-data-source-service/#parameters","text":"jvm baseConfig the configuration to connect to. The actual database name used may vary as the databasePool can pick an alternate database name for testing.","title":"Parameters"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/config/","text":"// misk-jdbc / misk.jdbc / DataSourceService / config config \u00b6 [jvm]\\ open override fun config (): DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/config/#config","text":"[jvm]\\ open override fun config (): DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/get/","text":"// misk-jdbc / misk.jdbc / DataSourceService / get get \u00b6 [jvm]\\ open override fun get (): DataSource","title":"get - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/get/#get","text":"[jvm]\\ open override fun get (): DataSource","title":"get"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-companion/","text":"// misk-jdbc / misk.jdbc / DataSourceService / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary logger [jvm] val logger : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-companion/#properties","text":"Name Summary logger [jvm] val logger : KLogger","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-companion/logger/","text":"// misk-jdbc / misk.jdbc / DataSourceService / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-service/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/","text":"// misk-jdbc / misk.jdbc / DataSourceType DataSourceType \u00b6 [jvm]\\ enum DataSourceType : Enum < DataSourceType > Defines a type of datasource Entries \u00b6 TIDB [jvm] TIDB (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false) POSTGRESQL [jvm] POSTGRESQL (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false) COCKROACHDB [jvm] COCKROACHDB (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false) VITESS_MYSQL [jvm] VITESS_MYSQL (MYSQL.driverClassName, \u201cmisk.hibernate.VitessDialect\u201d, true) HSQLDB [jvm] HSQLDB (\u201corg.hsqldb.jdbcDriver\u201d, \u201corg.hibernate.dialect.H2Dialect\u201d, false) MYSQL [jvm] MYSQL (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false) Properties \u00b6 Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"DataSourceType - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/#datasourcetype","text":"[jvm]\\ enum DataSourceType : Enum < DataSourceType > Defines a type of datasource","title":"DataSourceType"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/#entries","text":"TIDB [jvm] TIDB (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false) POSTGRESQL [jvm] POSTGRESQL (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false) COCKROACHDB [jvm] COCKROACHDB (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false) VITESS_MYSQL [jvm] VITESS_MYSQL (MYSQL.driverClassName, \u201cmisk.hibernate.VitessDialect\u201d, true) HSQLDB [jvm] HSQLDB (\u201corg.hsqldb.jdbcDriver\u201d, \u201corg.hibernate.dialect.H2Dialect\u201d, false) MYSQL [jvm] MYSQL (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false)","title":"Entries"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/#properties","text":"Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/driver-class-name/","text":"// misk-jdbc / misk.jdbc / DataSourceType / driverClassName driverClassName \u00b6 [jvm]\\ val driverClassName : String","title":"driverClassName - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/driver-class-name/#driverclassname","text":"[jvm]\\ val driverClassName : String","title":"driverClassName"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/hibernate-dialect/","text":"// misk-jdbc / misk.jdbc / DataSourceType / hibernateDialect hibernateDialect \u00b6 [jvm]\\ val hibernateDialect : String","title":"hibernateDialect - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/hibernate-dialect/#hibernatedialect","text":"[jvm]\\ val hibernateDialect : String","title":"hibernateDialect"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/is-vitess/","text":"// misk-jdbc / misk.jdbc / DataSourceType / isVitess isVitess \u00b6 [jvm]\\ val isVitess : Boolean","title":"isVitess - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/is-vitess/#isvitess","text":"[jvm]\\ val isVitess : Boolean","title":"isVitess"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-c-o-c-k-r-o-a-c-h-d-b/","text":"// misk-jdbc / misk.jdbc / DataSourceType / COCKROACHDB COCKROACHDB \u00b6 [jvm]\\ COCKROACHDB (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false) Properties \u00b6 Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"COCKROACHDB - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-c-o-c-k-r-o-a-c-h-d-b/#cockroachdb","text":"[jvm]\\ COCKROACHDB (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false)","title":"COCKROACHDB"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-c-o-c-k-r-o-a-c-h-d-b/#properties","text":"Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-h-s-q-l-d-b/","text":"// misk-jdbc / misk.jdbc / DataSourceType / HSQLDB HSQLDB \u00b6 [jvm]\\ HSQLDB (\u201corg.hsqldb.jdbcDriver\u201d, \u201corg.hibernate.dialect.H2Dialect\u201d, false) Properties \u00b6 Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"HSQLDB - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-h-s-q-l-d-b/#hsqldb","text":"[jvm]\\ HSQLDB (\u201corg.hsqldb.jdbcDriver\u201d, \u201corg.hibernate.dialect.H2Dialect\u201d, false)","title":"HSQLDB"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-h-s-q-l-d-b/#properties","text":"Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-m-y-s-q-l/","text":"// misk-jdbc / misk.jdbc / DataSourceType / MYSQL MYSQL \u00b6 [jvm]\\ MYSQL (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false) Properties \u00b6 Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"MYSQL - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-m-y-s-q-l/#mysql","text":"[jvm]\\ MYSQL (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false)","title":"MYSQL"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-m-y-s-q-l/#properties","text":"Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-p-o-s-t-g-r-e-s-q-l/","text":"// misk-jdbc / misk.jdbc / DataSourceType / POSTGRESQL POSTGRESQL \u00b6 [jvm]\\ POSTGRESQL (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false) Properties \u00b6 Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"POSTGRESQL - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-p-o-s-t-g-r-e-s-q-l/#postgresql","text":"[jvm]\\ POSTGRESQL (\u201corg.postgresql.Driver\u201d, \u201corg.hibernate.dialect.PostgreSQL95Dialect\u201d, false)","title":"POSTGRESQL"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-p-o-s-t-g-r-e-s-q-l/#properties","text":"Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-t-i-d-b/","text":"// misk-jdbc / misk.jdbc / DataSourceType / TIDB TIDB \u00b6 [jvm]\\ TIDB (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false) Properties \u00b6 Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"TIDB - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-t-i-d-b/#tidb","text":"[jvm]\\ TIDB (\u201cio.opentracing.contrib.jdbc.TracingDriver\u201d, \u201corg.hibernate.dialect.MySQL57Dialect\u201d, false)","title":"TIDB"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-t-i-d-b/#properties","text":"Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-v-i-t-e-s-s_-m-y-s-q-l/","text":"// misk-jdbc / misk.jdbc / DataSourceType / VITESS_MYSQL VITESS_MYSQL \u00b6 [jvm]\\ VITESS_MYSQL (MYSQL.driverClassName, \u201cmisk.hibernate.VitessDialect\u201d, true) Properties \u00b6 Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"VITESS_MYSQL - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-v-i-t-e-s-s_-m-y-s-q-l/#vitess_mysql","text":"[jvm]\\ VITESS_MYSQL (MYSQL.driverClassName, \u201cmisk.hibernate.VitessDialect\u201d, true)","title":"VITESS_MYSQL"},{"location":"0.x/misk-jdbc/misk.jdbc/-data-source-type/-v-i-t-e-s-s_-m-y-s-q-l/#properties","text":"Name Summary driverClassName [jvm] val driverClassName : String hibernateDialect [jvm] val hibernateDialect : String isVitess [jvm] val isVitess : Boolean name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/","text":"// misk-jdbc / misk.jdbc / DatabasePool DatabasePool \u00b6 [jvm]\\ interface DatabasePool Figures out what database name to use for a given config. Tests use this to pool many databases for concurrent execution. In development, staging, and production the database never changes. Functions \u00b6 Name Summary releaseDatabase [jvm] abstract fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase . takeDatabase [jvm] abstract fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it. Inheritors \u00b6 Name RealDatabasePool","title":"DatabasePool - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/#databasepool","text":"[jvm]\\ interface DatabasePool Figures out what database name to use for a given config. Tests use this to pool many databases for concurrent execution. In development, staging, and production the database never changes.","title":"DatabasePool"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/#functions","text":"Name Summary releaseDatabase [jvm] abstract fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase . takeDatabase [jvm] abstract fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it.","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/#inheritors","text":"Name RealDatabasePool","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/release-database/","text":"// misk-jdbc / misk.jdbc / DatabasePool / releaseDatabase releaseDatabase \u00b6 [jvm]\\ abstract fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase .","title":"releaseDatabase - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/release-database/#releasedatabase","text":"[jvm]\\ abstract fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase .","title":"releaseDatabase"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/take-database/","text":"// misk-jdbc / misk.jdbc / DatabasePool / takeDatabase takeDatabase \u00b6 [jvm]\\ abstract fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it.","title":"takeDatabase - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-pool/take-database/#takedatabase","text":"[jvm]\\ abstract fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it.","title":"takeDatabase"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-ready-service/","text":"// misk-jdbc / misk.jdbc / DatabaseReadyService DatabaseReadyService \u00b6 [jvm]\\ interface DatabaseReadyService : Service Marker interface for indicating that the database is ready. Services that require a database connection should depend on this interface when they are installed in a module. e.g. install(ServiceModule<MoviesService>()\\ .dependsOn<DatabaseReadyService>(Movies::class)) Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service Inheritors \u00b6 Name SchemaMigratorService","title":"DatabaseReadyService - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-ready-service/#databasereadyservice","text":"[jvm]\\ interface DatabaseReadyService : Service Marker interface for indicating that the database is ready. Services that require a database connection should depend on this interface when they are installed in a module. e.g. install(ServiceModule<MoviesService>()\\ .dependsOn<DatabaseReadyService>(Movies::class))","title":"DatabaseReadyService"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-ready-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-database-ready-service/#inheritors","text":"Name SchemaMigratorService","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/","text":"// misk-jdbc / misk.jdbc / JDBCSession JDBCSession \u00b6 [jvm]\\ class JDBCSession (connection: Connection ) : Session Types \u00b6 Name Summary HookType [jvm] enum HookType : Enum < JDBCSession.HookType > Functions \u00b6 Name Summary add [jvm] fun ConcurrentMap < JDBCSession.HookType , List <() -> Unit >>. add (hookType: JDBCSession.HookType , work: () -> Unit ) component1 [jvm] operator fun component1 (): Connection Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (connection) -> \u2026 } executePostCommitHooks [jvm] fun executePostCommitHooks () executePreCommitHooks [jvm] fun executePreCommitHooks () executeSessionCloseHooks [jvm] fun executeSessionCloseHooks () onPostCommit [jvm] open override fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed onPreCommit [jvm] open override fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back. onSessionClose [jvm] open override fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. useConnection [jvm] open override fun < T > useConnection (work: ( Connection ) -> T ): T Properties \u00b6 Name Summary connection [jvm] val connection : Connection","title":"JDBCSession - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/#jdbcsession","text":"[jvm]\\ class JDBCSession (connection: Connection ) : Session","title":"JDBCSession"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/#types","text":"Name Summary HookType [jvm] enum HookType : Enum < JDBCSession.HookType >","title":"Types"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/#functions","text":"Name Summary add [jvm] fun ConcurrentMap < JDBCSession.HookType , List <() -> Unit >>. add (hookType: JDBCSession.HookType , work: () -> Unit ) component1 [jvm] operator fun component1 (): Connection Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (connection) -> \u2026 } executePostCommitHooks [jvm] fun executePostCommitHooks () executePreCommitHooks [jvm] fun executePreCommitHooks () executeSessionCloseHooks [jvm] fun executeSessionCloseHooks () onPostCommit [jvm] open override fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed onPreCommit [jvm] open override fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back. onSessionClose [jvm] open override fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. useConnection [jvm] open override fun < T > useConnection (work: ( Connection ) -> T ): T","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/#properties","text":"Name Summary connection [jvm] val connection : Connection","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-j-d-b-c-session/","text":"// misk-jdbc / misk.jdbc / JDBCSession / JDBCSession JDBCSession \u00b6 [jvm]\\ fun JDBCSession (connection: Connection )","title":"JDBCSession - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-j-d-b-c-session/#jdbcsession","text":"[jvm]\\ fun JDBCSession (connection: Connection )","title":"JDBCSession"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/add/","text":"// misk-jdbc / misk.jdbc / JDBCSession / add add \u00b6 [jvm]\\ fun ConcurrentMap < JDBCSession.HookType , List <() -> Unit >>. add (hookType: JDBCSession.HookType , work: () -> Unit )","title":"add - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/add/#add","text":"[jvm]\\ fun ConcurrentMap < JDBCSession.HookType , List <() -> Unit >>. add (hookType: JDBCSession.HookType , work: () -> Unit )","title":"add"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/component1/","text":"// misk-jdbc / misk.jdbc / JDBCSession / component1 component1 \u00b6 [jvm]\\ operator fun component1 (): Connection Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (connection) -> \u2026 }","title":"component1 - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/component1/#component1","text":"[jvm]\\ operator fun component1 (): Connection Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (connection) -> \u2026 }","title":"component1"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/connection/","text":"// misk-jdbc / misk.jdbc / JDBCSession / connection connection \u00b6 [jvm]\\ val connection : Connection","title":"connection - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/connection/#connection","text":"[jvm]\\ val connection : Connection","title":"connection"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/execute-post-commit-hooks/","text":"// misk-jdbc / misk.jdbc / JDBCSession / executePostCommitHooks executePostCommitHooks \u00b6 [jvm]\\ fun executePostCommitHooks ()","title":"executePostCommitHooks - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/execute-post-commit-hooks/#executepostcommithooks","text":"[jvm]\\ fun executePostCommitHooks ()","title":"executePostCommitHooks"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/execute-pre-commit-hooks/","text":"// misk-jdbc / misk.jdbc / JDBCSession / executePreCommitHooks executePreCommitHooks \u00b6 [jvm]\\ fun executePreCommitHooks ()","title":"executePreCommitHooks - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/execute-pre-commit-hooks/#executeprecommithooks","text":"[jvm]\\ fun executePreCommitHooks ()","title":"executePreCommitHooks"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/execute-session-close-hooks/","text":"// misk-jdbc / misk.jdbc / JDBCSession / executeSessionCloseHooks executeSessionCloseHooks \u00b6 [jvm]\\ fun executeSessionCloseHooks ()","title":"executeSessionCloseHooks - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/execute-session-close-hooks/#executesessionclosehooks","text":"[jvm]\\ fun executeSessionCloseHooks ()","title":"executeSessionCloseHooks"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/on-post-commit/","text":"// misk-jdbc / misk.jdbc / JDBCSession / onPostCommit onPostCommit \u00b6 [jvm]\\ open override fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed","title":"onPostCommit - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/on-post-commit/#onpostcommit","text":"[jvm]\\ open override fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed","title":"onPostCommit"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/on-pre-commit/","text":"// misk-jdbc / misk.jdbc / JDBCSession / onPreCommit onPreCommit \u00b6 [jvm]\\ open override fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back.","title":"onPreCommit - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/on-pre-commit/#onprecommit","text":"[jvm]\\ open override fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back.","title":"onPreCommit"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/on-session-close/","text":"// misk-jdbc / misk.jdbc / JDBCSession / onSessionClose onSessionClose \u00b6 [jvm]\\ open override fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. A new transaction can be initiated as part of this hook.","title":"onSessionClose - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/on-session-close/#onsessionclose","text":"[jvm]\\ open override fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. A new transaction can be initiated as part of this hook.","title":"onSessionClose"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/use-connection/","text":"// misk-jdbc / misk.jdbc / JDBCSession / useConnection useConnection \u00b6 [jvm]\\ open override fun < T > useConnection (work: ( Connection ) -> T ): T","title":"useConnection - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/use-connection/#useconnection","text":"[jvm]\\ open override fun < T > useConnection (work: ( Connection ) -> T ): T","title":"useConnection"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/","text":"// misk-jdbc / misk.jdbc / JDBCSession / HookType HookType \u00b6 [jvm]\\ enum HookType : Enum < JDBCSession.HookType > Entries \u00b6 SESSION_CLOSE [jvm] SESSION_CLOSE () POST [jvm] POST () PRE [jvm] PRE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"HookType - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/#hooktype","text":"[jvm]\\ enum HookType : Enum < JDBCSession.HookType >","title":"HookType"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/#entries","text":"SESSION_CLOSE [jvm] SESSION_CLOSE () POST [jvm] POST () PRE [jvm] PRE ()","title":"Entries"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-p-o-s-t/","text":"// misk-jdbc / misk.jdbc / JDBCSession / HookType / POST POST \u00b6 [jvm]\\ POST () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"POST - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-p-o-s-t/#post","text":"[jvm]\\ POST ()","title":"POST"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-p-o-s-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-p-r-e/","text":"// misk-jdbc / misk.jdbc / JDBCSession / HookType / PRE PRE \u00b6 [jvm]\\ PRE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PRE - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-p-r-e/#pre","text":"[jvm]\\ PRE ()","title":"PRE"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-p-r-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-s-e-s-s-i-o-n_-c-l-o-s-e/","text":"// misk-jdbc / misk.jdbc / JDBCSession / HookType / SESSION_CLOSE SESSION_CLOSE \u00b6 [jvm]\\ SESSION_CLOSE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"SESSION_CLOSE - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-s-e-s-s-i-o-n_-c-l-o-s-e/#session_close","text":"[jvm]\\ SESSION_CLOSE ()","title":"SESSION_CLOSE"},{"location":"0.x/misk-jdbc/misk.jdbc/-j-d-b-c-session/-hook-type/-s-e-s-s-i-o-n_-c-l-o-s-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/","text":"// misk-jdbc / misk.jdbc / JdbcModule JdbcModule \u00b6 [jvm]\\ class JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool ) : KAbstractModule Binds database connectivity for a qualified data source. This binds the following public types: @Qualifier javax.sql.DataSource @Qualifier misk.jdbc.DataSourceConfig DataSource.getConnection can be used to get JDBC connections to your database. This also registers services to connect to the database ( DataSourceService ) and to verify that the schema is up-to-date ( SchemaMigratorService ). Constructors \u00b6 JdbcModule [jvm] fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , databasePool: DatabasePool = RealDatabasePool) JdbcModule [jvm] fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool = RealDatabasePool) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder config [jvm] val config : DataSourceConfig databasePool [jvm] val databasePool : DatabasePool readerConfig [jvm] val readerConfig : DataSourceConfig ?","title":"JdbcModule - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/#jdbcmodule","text":"[jvm]\\ class JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool ) : KAbstractModule Binds database connectivity for a qualified data source. This binds the following public types: @Qualifier javax.sql.DataSource @Qualifier misk.jdbc.DataSourceConfig DataSource.getConnection can be used to get JDBC connections to your database. This also registers services to connect to the database ( DataSourceService ) and to verify that the schema is up-to-date ( SchemaMigratorService ).","title":"JdbcModule"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/#constructors","text":"JdbcModule [jvm] fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , databasePool: DatabasePool = RealDatabasePool) JdbcModule [jvm] fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool = RealDatabasePool)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/#properties","text":"Name Summary binder [jvm] val binder : Binder config [jvm] val config : DataSourceConfig databasePool [jvm] val databasePool : DatabasePool readerConfig [jvm] val readerConfig : DataSourceConfig ?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/-jdbc-module/","text":"// misk-jdbc / misk.jdbc / JdbcModule / JdbcModule JdbcModule \u00b6 [jvm]\\ fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , databasePool: DatabasePool = RealDatabasePool) fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool = RealDatabasePool)","title":"JdbcModule - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/-jdbc-module/#jdbcmodule","text":"[jvm]\\ fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , databasePool: DatabasePool = RealDatabasePool) fun JdbcModule (qualifier: KClass <out Annotation >, config: DataSourceConfig , readerQualifier: KClass <out Annotation >?, readerConfig: DataSourceConfig ?, databasePool: DatabasePool = RealDatabasePool)","title":"JdbcModule"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/config/","text":"// misk-jdbc / misk.jdbc / JdbcModule / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/database-pool/","text":"// misk-jdbc / misk.jdbc / JdbcModule / databasePool databasePool \u00b6 [jvm]\\ val databasePool : DatabasePool","title":"databasePool - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/database-pool/#databasepool","text":"[jvm]\\ val databasePool : DatabasePool","title":"databasePool"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/reader-config/","text":"// misk-jdbc / misk.jdbc / JdbcModule / readerConfig readerConfig \u00b6 [jvm]\\ val readerConfig : DataSourceConfig ?","title":"readerConfig - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-jdbc-module/reader-config/#readerconfig","text":"[jvm]\\ val readerConfig : DataSourceConfig ?","title":"readerConfig"},{"location":"0.x/misk-jdbc/misk.jdbc/-ping-database-service/","text":"// misk-jdbc / misk.jdbc / PingDatabaseService PingDatabaseService \u00b6 [jvm]\\ @Singleton class PingDatabaseService @Injectconstructor(config: DataSourceConfig , deployment: Deployment) : AbstractIdleService Service that waits for the database to become healthy. This is needed if we\u2019re booting up a Vitess cluster as part of the test run. Constructors \u00b6 PingDatabaseService [jvm] @Inject fun PingDatabaseService (config: DataSourceConfig , deployment: Deployment) Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"PingDatabaseService - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-ping-database-service/#pingdatabaseservice","text":"[jvm]\\ @Singleton class PingDatabaseService @Injectconstructor(config: DataSourceConfig , deployment: Deployment) : AbstractIdleService Service that waits for the database to become healthy. This is needed if we\u2019re booting up a Vitess cluster as part of the test run.","title":"PingDatabaseService"},{"location":"0.x/misk-jdbc/misk.jdbc/-ping-database-service/#constructors","text":"PingDatabaseService [jvm] @Inject fun PingDatabaseService (config: DataSourceConfig , deployment: Deployment)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-ping-database-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-ping-database-service/-ping-database-service/","text":"// misk-jdbc / misk.jdbc / PingDatabaseService / PingDatabaseService PingDatabaseService \u00b6 [jvm]\\ @Inject fun PingDatabaseService (config: DataSourceConfig , deployment: Deployment)","title":"PingDatabaseService - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-ping-database-service/-ping-database-service/#pingdatabaseservice","text":"[jvm]\\ @Inject fun PingDatabaseService (config: DataSourceConfig , deployment: Deployment)","title":"PingDatabaseService"},{"location":"0.x/misk-jdbc/misk.jdbc/-post-commit-hook-failed-exception/","text":"// misk-jdbc / misk.jdbc / PostCommitHookFailedException PostCommitHookFailedException \u00b6 [jvm]\\ class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook Constructors \u00b6 PostCommitHookFailedException [jvm] fun PostCommitHookFailedException (cause: Throwable ) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"PostCommitHookFailedException - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-post-commit-hook-failed-exception/#postcommithookfailedexception","text":"[jvm]\\ class PostCommitHookFailedException (cause: Throwable ) : Exception PostCommitHookFailedException is raised when a code run as part of a post-commit hook fails. Because post-commit hooks are run after the transaction is committed, failure in these hooks does not cause the transaction to rollback, and applications may need to differentiate the two cases (exception occurred and caused the transaction to rollback, exception occurred during a post-commit hook","title":"PostCommitHookFailedException"},{"location":"0.x/misk-jdbc/misk.jdbc/-post-commit-hook-failed-exception/#constructors","text":"PostCommitHookFailedException [jvm] fun PostCommitHookFailedException (cause: Throwable )","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-post-commit-hook-failed-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-post-commit-hook-failed-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-post-commit-hook-failed-exception/-post-commit-hook-failed-exception/","text":"// misk-jdbc / misk.jdbc / PostCommitHookFailedException / PostCommitHookFailedException PostCommitHookFailedException \u00b6 [jvm]\\ fun PostCommitHookFailedException (cause: Throwable )","title":"PostCommitHookFailedException - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-post-commit-hook-failed-exception/-post-commit-hook-failed-exception/#postcommithookfailedexception","text":"[jvm]\\ fun PostCommitHookFailedException (cause: Throwable )","title":"PostCommitHookFailedException"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-database-pool/","text":"// misk-jdbc / misk.jdbc / RealDatabasePool RealDatabasePool \u00b6 [jvm]\\ object RealDatabasePool : DatabasePool Functions \u00b6 Name Summary releaseDatabase [jvm] open override fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase . takeDatabase [jvm] open override fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it.","title":"RealDatabasePool - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-database-pool/#realdatabasepool","text":"[jvm]\\ object RealDatabasePool : DatabasePool","title":"RealDatabasePool"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-database-pool/#functions","text":"Name Summary releaseDatabase [jvm] open override fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase . takeDatabase [jvm] open override fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it.","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-database-pool/release-database/","text":"// misk-jdbc / misk.jdbc / RealDatabasePool / releaseDatabase releaseDatabase \u00b6 [jvm]\\ open override fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase .","title":"releaseDatabase - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-database-pool/release-database/#releasedatabase","text":"[jvm]\\ open override fun releaseDatabase (config: DataSourceConfig ) Releases a config created by takeDatabase .","title":"releaseDatabase"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-database-pool/take-database/","text":"// misk-jdbc / misk.jdbc / RealDatabasePool / takeDatabase takeDatabase \u00b6 [jvm]\\ open override fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it.","title":"takeDatabase - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-database-pool/take-database/#takedatabase","text":"[jvm]\\ open override fun takeDatabase (config: DataSourceConfig ): DataSourceConfig Finds a database to satisfy config and returns a new config that targets it.","title":"takeDatabase"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/","text":"// misk-jdbc / misk.jdbc / RealTransacter RealTransacter \u00b6 [jvm]\\ class RealTransacter (dataSource: DataSource ) : Transacter Functions \u00b6 Name Summary transaction [jvm] open override fun < T > transaction (work: (connection: Connection ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. transactionWithSession [jvm] open override fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. Properties \u00b6 Name Summary inTransaction [jvm] open override val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"RealTransacter - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/#realtransacter","text":"[jvm]\\ class RealTransacter (dataSource: DataSource ) : Transacter","title":"RealTransacter"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/#functions","text":"Name Summary transaction [jvm] open override fun < T > transaction (work: (connection: Connection ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. transactionWithSession [jvm] open override fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed.","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/#properties","text":"Name Summary inTransaction [jvm] open override val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/-real-transacter/","text":"// misk-jdbc / misk.jdbc / RealTransacter / RealTransacter RealTransacter \u00b6 [jvm]\\ fun RealTransacter (dataSource: DataSource )","title":"RealTransacter - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/-real-transacter/#realtransacter","text":"[jvm]\\ fun RealTransacter (dataSource: DataSource )","title":"RealTransacter"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/in-transaction/","text":"// misk-jdbc / misk.jdbc / RealTransacter / inTransaction inTransaction \u00b6 [jvm]\\ open override val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"inTransaction - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/in-transaction/#intransaction","text":"[jvm]\\ open override val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"inTransaction"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/transaction-with-session/","text":"// misk-jdbc / misk.jdbc / RealTransacter / transactionWithSession transactionWithSession \u00b6 [jvm]\\ open override fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. This session object passed in wraps a connection and provides a way to add pre and post commit hooks that execute before and after a transaction is committed. It is an error to start a transaction if another transaction is already in progress.","title":"transactionWithSession - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/transaction-with-session/#transactionwithsession","text":"[jvm]\\ open override fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. This session object passed in wraps a connection and provides a way to add pre and post commit hooks that execute before and after a transaction is committed. It is an error to start a transaction if another transaction is already in progress.","title":"transactionWithSession"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/transaction/","text":"// misk-jdbc / misk.jdbc / RealTransacter / transaction transaction \u00b6 [jvm]\\ open override fun < T > transaction (work: (connection: Connection ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. It is an error to start a transaction if another transaction is already in progress. Prefer using transactionWithSession instead of this method as it has more functionality such as commit hooks.","title":"transaction - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-real-transacter/transaction/#transaction","text":"[jvm]\\ open override fun < T > transaction (work: (connection: Connection ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. It is an error to start a transaction if another transaction is already in progress. Prefer using transactionWithSession instead of this method as it has more functionality such as commit hooks.","title":"transaction"},{"location":"0.x/misk-jdbc/misk.jdbc/-schema-migrator-service/","text":"// misk-jdbc / misk.jdbc / SchemaMigratorService SchemaMigratorService \u00b6 [jvm]\\ class SchemaMigratorService : AbstractIdleService, HealthCheck, DatabaseReadyService Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State status [jvm] open override fun status (): HealthStatus stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"SchemaMigratorService - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-schema-migrator-service/#schemamigratorservice","text":"[jvm]\\ class SchemaMigratorService : AbstractIdleService, HealthCheck, DatabaseReadyService","title":"SchemaMigratorService"},{"location":"0.x/misk-jdbc/misk.jdbc/-schema-migrator-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State status [jvm] open override fun status (): HealthStatus stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-schema-migrator-service/status/","text":"// misk-jdbc / misk.jdbc / SchemaMigratorService / status status \u00b6 [jvm]\\ open override fun status (): HealthStatus","title":"status - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-schema-migrator-service/status/#status","text":"[jvm]\\ open override fun status (): HealthStatus","title":"status"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/","text":"// misk-jdbc / misk.jdbc / Session Session \u00b6 [jvm]\\ interface Session Functions \u00b6 Name Summary onPostCommit [jvm] abstract fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed onPreCommit [jvm] abstract fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back. onSessionClose [jvm] abstract fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. useConnection [jvm] abstract fun < T > useConnection (work: ( Connection ) -> T ): T Inheritors \u00b6 Name JDBCSession","title":"Session - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/#session","text":"[jvm]\\ interface Session","title":"Session"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/#functions","text":"Name Summary onPostCommit [jvm] abstract fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed onPreCommit [jvm] abstract fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back. onSessionClose [jvm] abstract fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. useConnection [jvm] abstract fun < T > useConnection (work: ( Connection ) -> T ): T","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/#inheritors","text":"Name JDBCSession","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/on-post-commit/","text":"// misk-jdbc / misk.jdbc / Session / onPostCommit onPostCommit \u00b6 [jvm]\\ abstract fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed","title":"onPostCommit - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/on-post-commit/#onpostcommit","text":"[jvm]\\ abstract fun onPostCommit (work: () -> Unit ) Registers a hook that fires after the session transaction commits. Post-commit hooks cannot affect the disposition of the transaction; if a post-commit hook fails, the failure will be logged but not propagated to the application, as the transaction will have already committed","title":"onPostCommit"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/on-pre-commit/","text":"// misk-jdbc / misk.jdbc / Session / onPreCommit onPreCommit \u00b6 [jvm]\\ abstract fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back.","title":"onPreCommit - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/on-pre-commit/#onprecommit","text":"[jvm]\\ abstract fun onPreCommit (work: () -> Unit ) Registers a hook that fires before the session\u2019s transaction commits. Failures in a pre-commit hook will cause the transaction to be rolled back.","title":"onPreCommit"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/on-session-close/","text":"// misk-jdbc / misk.jdbc / Session / onSessionClose onSessionClose \u00b6 [jvm]\\ abstract fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. A new transaction can be initiated as part of this hook.","title":"onSessionClose - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/on-session-close/#onsessionclose","text":"[jvm]\\ abstract fun onSessionClose (work: () -> Unit ) Registers a hook that fires after a session is closed. This is called regardless if a session was successfully committed or rolled back. A new transaction can be initiated as part of this hook.","title":"onSessionClose"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/use-connection/","text":"// misk-jdbc / misk.jdbc / Session / useConnection useConnection \u00b6 [jvm]\\ abstract fun < T > useConnection (work: ( Connection ) -> T ): T","title":"useConnection - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-session/use-connection/#useconnection","text":"[jvm]\\ abstract fun < T > useConnection (work: ( Connection ) -> T ): T","title":"useConnection"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/","text":"// misk-jdbc / misk.jdbc / SpanInjector SpanInjector \u00b6 [jvm]\\ class SpanInjector (tracer: Tracer?, config: DataSourceConfig ) : QueryTransformer, DataSourceDecorator On the fly decorates queries with the span context, so the query call can be traced all the way through Vitess Constructors \u00b6 SpanInjector [jvm] fun SpanInjector (tracer: Tracer?, config: DataSourceConfig ) Functions \u00b6 Name Summary decorate [jvm] open override fun decorate (dataSource: DataSource ): DataSource transformQuery [jvm] open override fun transformQuery (transformInfo: TransformInfo?): String Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig tracer [jvm] val tracer : Tracer?","title":"SpanInjector - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/#spaninjector","text":"[jvm]\\ class SpanInjector (tracer: Tracer?, config: DataSourceConfig ) : QueryTransformer, DataSourceDecorator On the fly decorates queries with the span context, so the query call can be traced all the way through Vitess","title":"SpanInjector"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/#constructors","text":"SpanInjector [jvm] fun SpanInjector (tracer: Tracer?, config: DataSourceConfig )","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/#functions","text":"Name Summary decorate [jvm] open override fun decorate (dataSource: DataSource ): DataSource transformQuery [jvm] open override fun transformQuery (transformInfo: TransformInfo?): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig tracer [jvm] val tracer : Tracer?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/-span-injector/","text":"// misk-jdbc / misk.jdbc / SpanInjector / SpanInjector SpanInjector \u00b6 [jvm]\\ fun SpanInjector (tracer: Tracer?, config: DataSourceConfig )","title":"SpanInjector - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/-span-injector/#spaninjector","text":"[jvm]\\ fun SpanInjector (tracer: Tracer?, config: DataSourceConfig )","title":"SpanInjector"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/config/","text":"// misk-jdbc / misk.jdbc / SpanInjector / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/decorate/","text":"// misk-jdbc / misk.jdbc / SpanInjector / decorate decorate \u00b6 [jvm]\\ open override fun decorate (dataSource: DataSource ): DataSource","title":"decorate - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/decorate/#decorate","text":"[jvm]\\ open override fun decorate (dataSource: DataSource ): DataSource","title":"decorate"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/tracer/","text":"// misk-jdbc / misk.jdbc / SpanInjector / tracer tracer \u00b6 [jvm]\\ val tracer : Tracer?","title":"tracer - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/tracer/#tracer","text":"[jvm]\\ val tracer : Tracer?","title":"tracer"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/transform-query/","text":"// misk-jdbc / misk.jdbc / SpanInjector / transformQuery transformQuery \u00b6 [jvm]\\ open override fun transformQuery (transformInfo: TransformInfo?): String","title":"transformQuery - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-span-injector/transform-query/#transformquery","text":"[jvm]\\ open override fun transformQuery (transformInfo: TransformInfo?): String","title":"transformQuery"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/","text":"// misk-jdbc / misk.jdbc / StringBuilderCarrier StringBuilderCarrier \u00b6 [jvm]\\ class StringBuilderCarrier : TextMap Functions \u00b6 Name Summary forEach [jvm] open fun forEach (p0: Consumer <in MutableMap.MutableEntry < String , String >>) iterator [jvm] open operator override fun iterator (): MutableIterator < MutableMap.MutableEntry < String , String >> put [jvm] open override fun put (key: String ?, value: String ?) spliterator [jvm] open fun spliterator (): Spliterator < MutableMap.MutableEntry < String , String >> toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary map [jvm] val map : HashMap < String , String >","title":"StringBuilderCarrier - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/#stringbuildercarrier","text":"[jvm]\\ class StringBuilderCarrier : TextMap","title":"StringBuilderCarrier"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/#functions","text":"Name Summary forEach [jvm] open fun forEach (p0: Consumer <in MutableMap.MutableEntry < String , String >>) iterator [jvm] open operator override fun iterator (): MutableIterator < MutableMap.MutableEntry < String , String >> put [jvm] open override fun put (key: String ?, value: String ?) spliterator [jvm] open fun spliterator (): Spliterator < MutableMap.MutableEntry < String , String >> toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/#properties","text":"Name Summary map [jvm] val map : HashMap < String , String >","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/-string-builder-carrier/","text":"// misk-jdbc / misk.jdbc / StringBuilderCarrier / StringBuilderCarrier StringBuilderCarrier \u00b6 [jvm]\\ fun StringBuilderCarrier ()","title":"StringBuilderCarrier - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/-string-builder-carrier/#stringbuildercarrier","text":"[jvm]\\ fun StringBuilderCarrier ()","title":"StringBuilderCarrier"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/iterator/","text":"// misk-jdbc / misk.jdbc / StringBuilderCarrier / iterator iterator \u00b6 [jvm]\\ open operator override fun iterator (): MutableIterator < MutableMap.MutableEntry < String , String >>","title":"iterator - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/iterator/#iterator","text":"[jvm]\\ open operator override fun iterator (): MutableIterator < MutableMap.MutableEntry < String , String >>","title":"iterator"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/map/","text":"// misk-jdbc / misk.jdbc / StringBuilderCarrier / map map \u00b6 [jvm]\\ val map : HashMap < String , String >","title":"map - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/map/#map","text":"[jvm]\\ val map : HashMap < String , String >","title":"map"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/put/","text":"// misk-jdbc / misk.jdbc / StringBuilderCarrier / put put \u00b6 [jvm]\\ open override fun put (key: String ?, value: String ?)","title":"put - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/put/#put","text":"[jvm]\\ open override fun put (key: String ?, value: String ?)","title":"put"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/to-string/","text":"// misk-jdbc / misk.jdbc / StringBuilderCarrier / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-string-builder-carrier/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-jdbc/misk.jdbc/-table-scan-exception/","text":"// misk-jdbc / misk.jdbc / TableScanException TableScanException \u00b6 [jvm]\\ class TableScanException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we execute a query lacking an index. Constructors \u00b6 TableScanException [jvm] fun TableScanException (message: String ? = null, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable > Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"TableScanException - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-table-scan-exception/#tablescanexception","text":"[jvm]\\ class TableScanException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we execute a query lacking an index.","title":"TableScanException"},{"location":"0.x/misk-jdbc/misk.jdbc/-table-scan-exception/#constructors","text":"TableScanException [jvm] fun TableScanException (message: String ? = null, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.jdbc/-table-scan-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable >","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-table-scan-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-table-scan-exception/-table-scan-exception/","text":"// misk-jdbc / misk.jdbc / TableScanException / TableScanException TableScanException \u00b6 [jvm]\\ fun TableScanException (message: String ? = null, cause: Throwable ? = null)","title":"TableScanException - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-table-scan-exception/-table-scan-exception/#tablescanexception","text":"[jvm]\\ fun TableScanException (message: String ? = null, cause: Throwable ? = null)","title":"TableScanException"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/","text":"// misk-jdbc / misk.jdbc / Transacter Transacter \u00b6 [jvm]\\ interface Transacter Functions \u00b6 Name Summary transactionWithSession [jvm] abstract fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. Properties \u00b6 Name Summary inTransaction [jvm] abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block. Inheritors \u00b6 Name RealTransacter","title":"Transacter - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/#transacter","text":"[jvm]\\ interface Transacter","title":"Transacter"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/#functions","text":"Name Summary transactionWithSession [jvm] abstract fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed.","title":"Functions"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/#properties","text":"Name Summary inTransaction [jvm] abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"Properties"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/#inheritors","text":"Name RealTransacter","title":"Inheritors"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/in-transaction/","text":"// misk-jdbc / misk.jdbc / Transacter / inTransaction inTransaction \u00b6 [jvm]\\ abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"inTransaction - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/in-transaction/#intransaction","text":"[jvm]\\ abstract val inTransaction : Boolean Returns true if the calling thread is currently within a transaction block.","title":"inTransaction"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/transaction-with-session/","text":"// misk-jdbc / misk.jdbc / Transacter / transactionWithSession transactionWithSession \u00b6 [jvm]\\ abstract fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. This session object passed in wraps a connection and provides a way to add pre and post commit hooks that execute before and after a transaction is committed. It is an error to start a transaction if another transaction is already in progress.","title":"transactionWithSession - Misk"},{"location":"0.x/misk-jdbc/misk.jdbc/-transacter/transaction-with-session/#transactionwithsession","text":"[jvm]\\ abstract fun < T > transactionWithSession (work: (session: JDBCSession ) -> T ): T Starts a transaction on the current thread, executes work , and commits the transaction. If the work raises an exception the transaction will be rolled back instead of committed. This session object passed in wraps a connection and provides a way to add pre and post commit hooks that execute before and after a transaction is committed. It is an error to start a transaction if another transaction is already in progress.","title":"transactionWithSession"},{"location":"0.x/misk-jdbc/misk.vitess/","text":"// misk-jdbc / misk.vitess Package misk.vitess \u00b6 Types \u00b6 Name Summary CowriteException [jvm] class CowriteException (message: String ?, cause: Throwable ?) : CheckException Thrown when a transaction that writes to multiple entity groups is detected. Destination [jvm] data class Destination (keyspace: Keyspace ?, shard: Shard ?, tabletType: TabletType ?) FullScatterException [jvm] class FullScatterException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we use a scatter query that is too wide in the wrong context. Keyspace [jvm] data class Keyspace (name: String ) Shard [jvm] data class Shard (keyspace: Keyspace , name: String ) TabletType [jvm] enum TabletType : Enum < TabletType > Functions \u00b6 Name Summary checkValidShardIdentifier [jvm] fun checkValidShardIdentifier (identifier: String ) failSafeRead [jvm] fun < T > Connection . failSafeRead (block: (conn: Connection ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm] fun < T > Connection . failSafeRead (shard: Shard , block: (conn: Connection ) -> T ): T getRootCause [jvm] fun getRootCause (throwable: Throwable ): Throwable shards [jvm] fun shards (dataSourceService: DataSourceService ): Supplier< Set < Shard >> tabletDoesNotExists [jvm] fun tabletDoesNotExists (e: Exception ): Boolean target [jvm] fun < T > Connection . target (shard: Shard , block: (conn: Connection ) -> T ): T","title":"Package misk.vitess - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/#package-miskvitess","text":"","title":"Package misk.vitess"},{"location":"0.x/misk-jdbc/misk.vitess/#types","text":"Name Summary CowriteException [jvm] class CowriteException (message: String ?, cause: Throwable ?) : CheckException Thrown when a transaction that writes to multiple entity groups is detected. Destination [jvm] data class Destination (keyspace: Keyspace ?, shard: Shard ?, tabletType: TabletType ?) FullScatterException [jvm] class FullScatterException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we use a scatter query that is too wide in the wrong context. Keyspace [jvm] data class Keyspace (name: String ) Shard [jvm] data class Shard (keyspace: Keyspace , name: String ) TabletType [jvm] enum TabletType : Enum < TabletType >","title":"Types"},{"location":"0.x/misk-jdbc/misk.vitess/#functions","text":"Name Summary checkValidShardIdentifier [jvm] fun checkValidShardIdentifier (identifier: String ) failSafeRead [jvm] fun < T > Connection . failSafeRead (block: (conn: Connection ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm] fun < T > Connection . failSafeRead (shard: Shard , block: (conn: Connection ) -> T ): T getRootCause [jvm] fun getRootCause (throwable: Throwable ): Throwable shards [jvm] fun shards (dataSourceService: DataSourceService ): Supplier< Set < Shard >> tabletDoesNotExists [jvm] fun tabletDoesNotExists (e: Exception ): Boolean target [jvm] fun < T > Connection . target (shard: Shard , block: (conn: Connection ) -> T ): T","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/check-valid-shard-identifier/","text":"// misk-jdbc / misk.vitess / checkValidShardIdentifier checkValidShardIdentifier \u00b6 [jvm]\\ fun checkValidShardIdentifier (identifier: String )","title":"checkValidShardIdentifier - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/check-valid-shard-identifier/#checkvalidshardidentifier","text":"[jvm]\\ fun checkValidShardIdentifier (identifier: String )","title":"checkValidShardIdentifier"},{"location":"0.x/misk-jdbc/misk.vitess/fail-safe-read/","text":"// misk-jdbc / misk.vitess / failSafeRead failSafeRead \u00b6 [jvm]\\ fun < T > Connection . failSafeRead (block: (conn: Connection ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm]\\ fun < T > Connection . failSafeRead (shard: Shard , block: (conn: Connection ) -> T ): T","title":"failSafeRead - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/fail-safe-read/#failsaferead","text":"[jvm]\\ fun < T > Connection . failSafeRead (block: (conn: Connection ) -> T ): T Runs a read on master first then tries it on replicas on failure. This method is here only for health check purpose for standby regions. [jvm]\\ fun < T > Connection . failSafeRead (shard: Shard , block: (conn: Connection ) -> T ): T","title":"failSafeRead"},{"location":"0.x/misk-jdbc/misk.vitess/get-root-cause/","text":"// misk-jdbc / misk.vitess / getRootCause getRootCause \u00b6 [jvm]\\ fun getRootCause (throwable: Throwable ): Throwable","title":"getRootCause - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/get-root-cause/#getrootcause","text":"[jvm]\\ fun getRootCause (throwable: Throwable ): Throwable","title":"getRootCause"},{"location":"0.x/misk-jdbc/misk.vitess/shards/","text":"// misk-jdbc / misk.vitess / shards shards \u00b6 [jvm]\\ fun shards (dataSourceService: DataSourceService ): Supplier< Set < Shard >>","title":"shards - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/shards/#shards","text":"[jvm]\\ fun shards (dataSourceService: DataSourceService ): Supplier< Set < Shard >>","title":"shards"},{"location":"0.x/misk-jdbc/misk.vitess/tablet-does-not-exists/","text":"// misk-jdbc / misk.vitess / tabletDoesNotExists tabletDoesNotExists \u00b6 [jvm]\\ fun tabletDoesNotExists (e: Exception ): Boolean","title":"tabletDoesNotExists - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/tablet-does-not-exists/#tabletdoesnotexists","text":"[jvm]\\ fun tabletDoesNotExists (e: Exception ): Boolean","title":"tabletDoesNotExists"},{"location":"0.x/misk-jdbc/misk.vitess/target/","text":"// misk-jdbc / misk.vitess / target target \u00b6 [jvm]\\ fun < T > Connection . target (shard: Shard , block: (conn: Connection ) -> T ): T","title":"target - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/target/#target","text":"[jvm]\\ fun < T > Connection . target (shard: Shard , block: (conn: Connection ) -> T ): T","title":"target"},{"location":"0.x/misk-jdbc/misk.vitess/-cowrite-exception/","text":"// misk-jdbc / misk.vitess / CowriteException CowriteException \u00b6 [jvm]\\ class CowriteException (message: String ?, cause: Throwable ?) : CheckException Thrown when a transaction that writes to multiple entity groups is detected. Multi shard transactions are not safe and while multiple entity groups may currently reside on the same shard there is no guarantee they will do so across shard splits. A transaction never spans a shard split. That is they never start before the split and end after, either they commit before the split or they start after the split. That said a transaction may start before a shard split and then time out or cancel and be retried after the shard split. If two entity groups resided on the same shard before the transaction they may no longer do so when the transaction is retried. Constructors \u00b6 CowriteException [jvm] fun CowriteException (message: String ? = null, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable > Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"CowriteException - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-cowrite-exception/#cowriteexception","text":"[jvm]\\ class CowriteException (message: String ?, cause: Throwable ?) : CheckException Thrown when a transaction that writes to multiple entity groups is detected. Multi shard transactions are not safe and while multiple entity groups may currently reside on the same shard there is no guarantee they will do so across shard splits. A transaction never spans a shard split. That is they never start before the split and end after, either they commit before the split or they start after the split. That said a transaction may start before a shard split and then time out or cancel and be retried after the shard split. If two entity groups resided on the same shard before the transaction they may no longer do so when the transaction is retried.","title":"CowriteException"},{"location":"0.x/misk-jdbc/misk.vitess/-cowrite-exception/#constructors","text":"CowriteException [jvm] fun CowriteException (message: String ? = null, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.vitess/-cowrite-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable >","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-cowrite-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-cowrite-exception/-cowrite-exception/","text":"// misk-jdbc / misk.vitess / CowriteException / CowriteException CowriteException \u00b6 [jvm]\\ fun CowriteException (message: String ? = null, cause: Throwable ? = null)","title":"CowriteException - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-cowrite-exception/-cowrite-exception/#cowriteexception","text":"[jvm]\\ fun CowriteException (message: String ? = null, cause: Throwable ? = null)","title":"CowriteException"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/","text":"// misk-jdbc / misk.vitess / Destination Destination \u00b6 [jvm]\\ data class Destination (keyspace: Keyspace ?, shard: Shard ?, tabletType: TabletType ?) Constructors \u00b6 Destination [jvm] fun Destination (shard: Shard ) Destination [jvm] fun Destination (tabletType: TabletType ) Destination [jvm] fun Destination (shard: Shard , tabletType: TabletType ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary isBlank [jvm] fun isBlank (): Boolean mergedWith [jvm] fun mergedWith (other: Destination ): Destination toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary keyspace [jvm] val keyspace : Keyspace ? shard [jvm] val shard : Shard ? tabletType [jvm] val tabletType : TabletType ?","title":"Destination - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/#destination","text":"[jvm]\\ data class Destination (keyspace: Keyspace ?, shard: Shard ?, tabletType: TabletType ?)","title":"Destination"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/#constructors","text":"Destination [jvm] fun Destination (shard: Shard ) Destination [jvm] fun Destination (tabletType: TabletType ) Destination [jvm] fun Destination (shard: Shard , tabletType: TabletType )","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/#functions","text":"Name Summary isBlank [jvm] fun isBlank (): Boolean mergedWith [jvm] fun mergedWith (other: Destination ): Destination toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/#properties","text":"Name Summary keyspace [jvm] val keyspace : Keyspace ? shard [jvm] val shard : Shard ? tabletType [jvm] val tabletType : TabletType ?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/-destination/","text":"// misk-jdbc / misk.vitess / Destination / Destination Destination \u00b6 [jvm]\\ fun Destination (shard: Shard ) fun Destination (tabletType: TabletType ) fun Destination (shard: Shard , tabletType: TabletType ) fun Destination (keyspace: Keyspace ?, shard: Shard ?, tabletType: TabletType ?)","title":"Destination - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/-destination/#destination","text":"[jvm]\\ fun Destination (shard: Shard ) fun Destination (tabletType: TabletType ) fun Destination (shard: Shard , tabletType: TabletType ) fun Destination (keyspace: Keyspace ?, shard: Shard ?, tabletType: TabletType ?)","title":"Destination"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/is-blank/","text":"// misk-jdbc / misk.vitess / Destination / isBlank isBlank \u00b6 [jvm]\\ fun isBlank (): Boolean","title":"isBlank - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/is-blank/#isblank","text":"[jvm]\\ fun isBlank (): Boolean","title":"isBlank"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/keyspace/","text":"// misk-jdbc / misk.vitess / Destination / keyspace keyspace \u00b6 [jvm]\\ val keyspace : Keyspace ?","title":"keyspace - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/keyspace/#keyspace","text":"[jvm]\\ val keyspace : Keyspace ?","title":"keyspace"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/merged-with/","text":"// misk-jdbc / misk.vitess / Destination / mergedWith mergedWith \u00b6 [jvm]\\ fun mergedWith (other: Destination ): Destination","title":"mergedWith - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/merged-with/#mergedwith","text":"[jvm]\\ fun mergedWith (other: Destination ): Destination","title":"mergedWith"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/shard/","text":"// misk-jdbc / misk.vitess / Destination / shard shard \u00b6 [jvm]\\ val shard : Shard ?","title":"shard - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/shard/#shard","text":"[jvm]\\ val shard : Shard ?","title":"shard"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/tablet-type/","text":"// misk-jdbc / misk.vitess / Destination / tabletType tabletType \u00b6 [jvm]\\ val tabletType : TabletType ?","title":"tabletType - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/tablet-type/#tablettype","text":"[jvm]\\ val tabletType : TabletType ?","title":"tabletType"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/to-string/","text":"// misk-jdbc / misk.vitess / Destination / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/-companion/","text":"// misk-jdbc / misk.vitess / Destination / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary parse [jvm] fun parse (string: String ): Destination","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/-companion/#functions","text":"Name Summary parse [jvm] fun parse (string: String ): Destination","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/-companion/parse/","text":"// misk-jdbc / misk.vitess / Destination / Companion / parse parse \u00b6 [jvm]\\ fun parse (string: String ): Destination","title":"parse - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-destination/-companion/parse/#parse","text":"[jvm]\\ fun parse (string: String ): Destination","title":"parse"},{"location":"0.x/misk-jdbc/misk.vitess/-full-scatter-exception/","text":"// misk-jdbc / misk.vitess / FullScatterException FullScatterException \u00b6 [jvm]\\ class FullScatterException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we use a scatter query that is too wide in the wrong context. Strongly consistent reads require reads from the master of a cluster. The master of a cluster is a limited resource that we can\u2019t add more of. We can split shards but a wide scatter query will still hit all of the shards so we can\u2019t scale if we have too many wide scatters. For this reason we do not allow wide scatters for strongly consistent reads. Note: For eventually consistent reads (that go to replicas) we may very well allow wide scatter queries because we can tune the availability by adding more replicas. Currently we do NOT differentiate between these types of reads for the detector but if you do need this it can be implemented. Constructors \u00b6 FullScatterException [jvm] fun FullScatterException (message: String ? = null, cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable > Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"FullScatterException - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-full-scatter-exception/#fullscatterexception","text":"[jvm]\\ class FullScatterException (message: String ?, cause: Throwable ?) : CheckException Exception thrown if we use a scatter query that is too wide in the wrong context. Strongly consistent reads require reads from the master of a cluster. The master of a cluster is a limited resource that we can\u2019t add more of. We can split shards but a wide scatter query will still hit all of the shards so we can\u2019t scale if we have too many wide scatters. For this reason we do not allow wide scatters for strongly consistent reads. Note: For eventually consistent reads (that go to replicas) we may very well allow wide scatter queries because we can tune the availability by adding more replicas. Currently we do NOT differentiate between these types of reads for the detector but if you do need this it can be implemented.","title":"FullScatterException"},{"location":"0.x/misk-jdbc/misk.vitess/-full-scatter-exception/#constructors","text":"FullScatterException [jvm] fun FullScatterException (message: String ? = null, cause: Throwable ? = null)","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.vitess/-full-scatter-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable forEach [jvm] open fun forEach (p0: Consumer <in Throwable >) getErrorCode [jvm] open fun getErrorCode (): Int getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getNextException [jvm] open fun getNextException (): SQLException getSQLState [jvm] open fun getSQLState (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable iterator [jvm] open operator override fun iterator (): MutableIterator < Throwable > printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setNextException [jvm] open fun setNextException (p0: SQLException ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) spliterator [jvm] open fun spliterator (): Spliterator < Throwable >","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-full-scatter-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-full-scatter-exception/-full-scatter-exception/","text":"// misk-jdbc / misk.vitess / FullScatterException / FullScatterException FullScatterException \u00b6 [jvm]\\ fun FullScatterException (message: String ? = null, cause: Throwable ? = null)","title":"FullScatterException - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-full-scatter-exception/-full-scatter-exception/#fullscatterexception","text":"[jvm]\\ fun FullScatterException (message: String ? = null, cause: Throwable ? = null)","title":"FullScatterException"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/","text":"// misk-jdbc / misk.vitess / Keyspace Keyspace \u00b6 [jvm]\\ data class Keyspace (name: String ) Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String","title":"Keyspace - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/#keyspace","text":"[jvm]\\ data class Keyspace (name: String )","title":"Keyspace"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/#properties","text":"Name Summary name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/-keyspace/","text":"// misk-jdbc / misk.vitess / Keyspace / Keyspace Keyspace \u00b6 [jvm]\\ fun Keyspace (name: String )","title":"Keyspace - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/-keyspace/#keyspace","text":"[jvm]\\ fun Keyspace (name: String )","title":"Keyspace"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/name/","text":"// misk-jdbc / misk.vitess / Keyspace / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/to-string/","text":"// misk-jdbc / misk.vitess / Keyspace / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-keyspace/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/","text":"// misk-jdbc / misk.vitess / Shard Shard \u00b6 [jvm]\\ data class Shard (keyspace: Keyspace , name: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Key [jvm] data class Key (bytes: ByteString) : Comparable < Shard.Key > Functions \u00b6 Name Summary contains [jvm] operator fun contains (keyspaceId: Shard.Key ): Boolean keyRange [jvm] fun keyRange (): Range< Shard.Key > toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary keyspace [jvm] val keyspace : Keyspace name [jvm] val name : String","title":"Shard - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/#shard","text":"[jvm]\\ data class Shard (keyspace: Keyspace , name: String )","title":"Shard"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/#types","text":"Name Summary Companion [jvm] object Companion Key [jvm] data class Key (bytes: ByteString) : Comparable < Shard.Key >","title":"Types"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/#functions","text":"Name Summary contains [jvm] operator fun contains (keyspaceId: Shard.Key ): Boolean keyRange [jvm] fun keyRange (): Range< Shard.Key > toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/#properties","text":"Name Summary keyspace [jvm] val keyspace : Keyspace name [jvm] val name : String","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-shard/","text":"// misk-jdbc / misk.vitess / Shard / Shard Shard \u00b6 [jvm]\\ fun Shard (keyspace: Keyspace , name: String )","title":"Shard - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-shard/#shard","text":"[jvm]\\ fun Shard (keyspace: Keyspace , name: String )","title":"Shard"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/contains/","text":"// misk-jdbc / misk.vitess / Shard / contains contains \u00b6 [jvm]\\ operator fun contains (keyspaceId: Shard.Key ): Boolean","title":"contains - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/contains/#contains","text":"[jvm]\\ operator fun contains (keyspaceId: Shard.Key ): Boolean","title":"contains"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/key-range/","text":"// misk-jdbc / misk.vitess / Shard / keyRange keyRange \u00b6 [jvm]\\ fun keyRange (): Range< Shard.Key >","title":"keyRange - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/key-range/#keyrange","text":"[jvm]\\ fun keyRange (): Range< Shard.Key >","title":"keyRange"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/keyspace/","text":"// misk-jdbc / misk.vitess / Shard / keyspace keyspace \u00b6 [jvm]\\ val keyspace : Keyspace","title":"keyspace - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/keyspace/#keyspace","text":"[jvm]\\ val keyspace : Keyspace","title":"keyspace"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/name/","text":"// misk-jdbc / misk.vitess / Shard / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/to-string/","text":"// misk-jdbc / misk.vitess / Shard / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/","text":"// misk-jdbc / misk.vitess / Shard / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary parse [jvm] fun parse (string: String ): Shard Properties \u00b6 Name Summary MAX_LENGTH [jvm] const val MAX_LENGTH : Int = 8 SINGLE_KEYSPACE [jvm] val SINGLE_KEYSPACE : Keyspace SINGLE_SHARD [jvm] val SINGLE_SHARD : Shard SINGLE_SHARD_ID [jvm] const val SINGLE_SHARD_ID : String SINGLE_SHARD_SET [jvm] val SINGLE_SHARD_SET : ImmutableSet< Shard >","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/#functions","text":"Name Summary parse [jvm] fun parse (string: String ): Shard","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/#properties","text":"Name Summary MAX_LENGTH [jvm] const val MAX_LENGTH : Int = 8 SINGLE_KEYSPACE [jvm] val SINGLE_KEYSPACE : Keyspace SINGLE_SHARD [jvm] val SINGLE_SHARD : Shard SINGLE_SHARD_ID [jvm] const val SINGLE_SHARD_ID : String SINGLE_SHARD_SET [jvm] val SINGLE_SHARD_SET : ImmutableSet< Shard >","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-m-a-x_-l-e-n-g-t-h/","text":"// misk-jdbc / misk.vitess / Shard / Companion / MAX_LENGTH MAX_LENGTH \u00b6 [jvm]\\ const val MAX_LENGTH : Int = 8","title":"MAX_LENGTH - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-m-a-x_-l-e-n-g-t-h/#max_length","text":"[jvm]\\ const val MAX_LENGTH : Int = 8","title":"MAX_LENGTH"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-k-e-y-s-p-a-c-e/","text":"// misk-jdbc / misk.vitess / Shard / Companion / SINGLE_KEYSPACE SINGLE_KEYSPACE \u00b6 [jvm]\\ val SINGLE_KEYSPACE : Keyspace","title":"SINGLE_KEYSPACE - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-k-e-y-s-p-a-c-e/#single_keyspace","text":"[jvm]\\ val SINGLE_KEYSPACE : Keyspace","title":"SINGLE_KEYSPACE"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-s-h-a-r-d/","text":"// misk-jdbc / misk.vitess / Shard / Companion / SINGLE_SHARD SINGLE_SHARD \u00b6 [jvm]\\ val SINGLE_SHARD : Shard","title":"SINGLE_SHARD - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-s-h-a-r-d/#single_shard","text":"[jvm]\\ val SINGLE_SHARD : Shard","title":"SINGLE_SHARD"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-s-h-a-r-d_-i-d/","text":"// misk-jdbc / misk.vitess / Shard / Companion / SINGLE_SHARD_ID SINGLE_SHARD_ID \u00b6 [jvm]\\ const val SINGLE_SHARD_ID : String","title":"SINGLE_SHARD_ID - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-s-h-a-r-d_-i-d/#single_shard_id","text":"[jvm]\\ const val SINGLE_SHARD_ID : String","title":"SINGLE_SHARD_ID"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-s-h-a-r-d_-s-e-t/","text":"// misk-jdbc / misk.vitess / Shard / Companion / SINGLE_SHARD_SET SINGLE_SHARD_SET \u00b6 [jvm]\\ val SINGLE_SHARD_SET : ImmutableSet< Shard >","title":"SINGLE_SHARD_SET - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/-s-i-n-g-l-e_-s-h-a-r-d_-s-e-t/#single_shard_set","text":"[jvm]\\ val SINGLE_SHARD_SET : ImmutableSet< Shard >","title":"SINGLE_SHARD_SET"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/parse/","text":"// misk-jdbc / misk.vitess / Shard / Companion / parse parse \u00b6 [jvm]\\ fun parse (string: String ): Shard","title":"parse - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-companion/parse/#parse","text":"[jvm]\\ fun parse (string: String ): Shard","title":"parse"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/","text":"// misk-jdbc / misk.vitess / Shard / Key Key \u00b6 [jvm]\\ data class Key (bytes: ByteString) : Comparable < Shard.Key > Constructors \u00b6 Key [jvm] fun Key (hex: String ) Vitess always converts sharding keys to a left-justified binary string for computing a shard. This left-justification makes the right-most zeroes insignificant and optional. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary compareTo [jvm] open operator override fun compareTo (other: Shard.Key ): Int Properties \u00b6 Name Summary bytes [jvm] val bytes : ByteString","title":"Key - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/#key","text":"[jvm]\\ data class Key (bytes: ByteString) : Comparable < Shard.Key >","title":"Key"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/#constructors","text":"Key [jvm] fun Key (hex: String ) Vitess always converts sharding keys to a left-justified binary string for computing a shard. This left-justification makes the right-most zeroes insignificant and optional.","title":"Constructors"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/#functions","text":"Name Summary compareTo [jvm] open operator override fun compareTo (other: Shard.Key ): Int","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/#properties","text":"Name Summary bytes [jvm] val bytes : ByteString","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/-key/","text":"// misk-jdbc / misk.vitess / Shard / Key / Key Key \u00b6 [jvm]\\ fun Key (hex: String ) Vitess always converts sharding keys to a left-justified binary string for computing a shard. This left-justification makes the right-most zeroes insignificant and optional. To make compareTo, equals and hashCode work properly in Java, these keys are force padded with 0\u2019s at the end. Dynamic end padding when comparing would break the equals/hashCode contract in Java. [jvm]\\ fun Key (bytes: ByteString)","title":"Key - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/-key/#key","text":"[jvm]\\ fun Key (hex: String ) Vitess always converts sharding keys to a left-justified binary string for computing a shard. This left-justification makes the right-most zeroes insignificant and optional. To make compareTo, equals and hashCode work properly in Java, these keys are force padded with 0\u2019s at the end. Dynamic end padding when comparing would break the equals/hashCode contract in Java. [jvm]\\ fun Key (bytes: ByteString)","title":"Key"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/bytes/","text":"// misk-jdbc / misk.vitess / Shard / Key / bytes bytes \u00b6 [jvm]\\ val bytes : ByteString","title":"bytes - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/bytes/#bytes","text":"[jvm]\\ val bytes : ByteString","title":"bytes"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/compare-to/","text":"// misk-jdbc / misk.vitess / Shard / Key / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: Shard.Key ): Int","title":"compareTo - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: Shard.Key ): Int","title":"compareTo"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/-companion/","text":"// misk-jdbc / misk.vitess / Shard / Key / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary hash [jvm] fun hash (id: Long ): Shard.Key","title":"Companion - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/-companion/#functions","text":"Name Summary hash [jvm] fun hash (id: Long ): Shard.Key","title":"Functions"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/-companion/hash/","text":"// misk-jdbc / misk.vitess / Shard / Key / Companion / hash hash \u00b6 [jvm]\\ fun hash (id: Long ): Shard.Key","title":"hash - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-shard/-key/-companion/hash/#hash","text":"[jvm]\\ fun hash (id: Long ): Shard.Key","title":"hash"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/","text":"// misk-jdbc / misk.vitess / TabletType TabletType \u00b6 [jvm]\\ enum TabletType : Enum < TabletType > Entries \u00b6 REPLICA [jvm] REPLICA (2) MASTER [jvm] MASTER (1) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int value [jvm] val value : Int","title":"TabletType - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/#tablettype","text":"[jvm]\\ enum TabletType : Enum < TabletType >","title":"TabletType"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/#entries","text":"REPLICA [jvm] REPLICA (2) MASTER [jvm] MASTER (1)","title":"Entries"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int value [jvm] val value : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/value/","text":"// misk-jdbc / misk.vitess / TabletType / value value \u00b6 [jvm]\\ val value : Int","title":"value - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/value/#value","text":"[jvm]\\ val value : Int","title":"value"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/-m-a-s-t-e-r/","text":"// misk-jdbc / misk.vitess / TabletType / MASTER MASTER \u00b6 [jvm]\\ MASTER (1) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int value [jvm] val value : Int","title":"MASTER - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/-m-a-s-t-e-r/#master","text":"[jvm]\\ MASTER (1)","title":"MASTER"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/-m-a-s-t-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int value [jvm] val value : Int","title":"Properties"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/-r-e-p-l-i-c-a/","text":"// misk-jdbc / misk.vitess / TabletType / REPLICA REPLICA \u00b6 [jvm]\\ REPLICA (2) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int value [jvm] val value : Int","title":"REPLICA - Misk"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/-r-e-p-l-i-c-a/#replica","text":"[jvm]\\ REPLICA (2)","title":"REPLICA"},{"location":"0.x/misk-jdbc/misk.vitess/-tablet-type/-r-e-p-l-i-c-a/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int value [jvm] val value : Int","title":"Properties"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/","text":"// misk-jdbc-testing / misk.jdbc Package misk.jdbc \u00b6 Types \u00b6 Name Summary ExtendedQueryExecutionListener [jvm] open class ExtendedQueryExecutionListener : QueryExecutionListener, MethodExecutionListener JdbcTestingModule [jvm] class JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String >, shutDownStatements: List < String >, scaleSafetyChecks: Boolean ) : KAbstractModule Installs a service to clear the test datasource before running tests. This module should be installed alongside the JdbcModule. MySqlScaleSafetyChecks [jvm] @Singleton class MySqlScaleSafetyChecks (config: DataSourceConfig) : DataSourceDecorator ScaleSafetyChecks [jvm] object ScaleSafetyChecks TestDatabasePool [jvm] class TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock ) : DatabasePool Manages an inventory of databases for testing. Databases are named like movies__20190730__5 where movies is the database name in a DataSourceConfig, 20190730 is today\u2019s date, and 5 is a sequence number. TruncateTablesService [jvm] class TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String >, shutDownStatements: List < String >) : AbstractIdleService Truncate tables before running each test. Properties \u00b6 Name Summary SHARED_TEST_DATABASE_POOL [jvm] val SHARED_TEST_DATABASE_POOL : TestDatabasePool A DatabasePool that is used in tests to get a unique database for each test suite.","title":"Package misk.jdbc - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/#package-miskjdbc","text":"","title":"Package misk.jdbc"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/#types","text":"Name Summary ExtendedQueryExecutionListener [jvm] open class ExtendedQueryExecutionListener : QueryExecutionListener, MethodExecutionListener JdbcTestingModule [jvm] class JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String >, shutDownStatements: List < String >, scaleSafetyChecks: Boolean ) : KAbstractModule Installs a service to clear the test datasource before running tests. This module should be installed alongside the JdbcModule. MySqlScaleSafetyChecks [jvm] @Singleton class MySqlScaleSafetyChecks (config: DataSourceConfig) : DataSourceDecorator ScaleSafetyChecks [jvm] object ScaleSafetyChecks TestDatabasePool [jvm] class TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock ) : DatabasePool Manages an inventory of databases for testing. Databases are named like movies__20190730__5 where movies is the database name in a DataSourceConfig, 20190730 is today\u2019s date, and 5 is a sequence number. TruncateTablesService [jvm] class TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String >, shutDownStatements: List < String >) : AbstractIdleService Truncate tables before running each test.","title":"Types"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/#properties","text":"Name Summary SHARED_TEST_DATABASE_POOL [jvm] val SHARED_TEST_DATABASE_POOL : TestDatabasePool A DatabasePool that is used in tests to get a unique database for each test suite.","title":"Properties"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-s-h-a-r-e-d_-t-e-s-t_-d-a-t-a-b-a-s-e_-p-o-o-l/","text":"// misk-jdbc-testing / misk.jdbc / SHARED_TEST_DATABASE_POOL SHARED_TEST_DATABASE_POOL \u00b6 [jvm]\\ val SHARED_TEST_DATABASE_POOL : TestDatabasePool A DatabasePool that is used in tests to get a unique database for each test suite. See misk.hibernate.HibernateTestingModule for usage instructions.","title":"SHARED_TEST_DATABASE_POOL - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-s-h-a-r-e-d_-t-e-s-t_-d-a-t-a-b-a-s-e_-p-o-o-l/#shared_test_database_pool","text":"[jvm]\\ val SHARED_TEST_DATABASE_POOL : TestDatabasePool A DatabasePool that is used in tests to get a unique database for each test suite. See misk.hibernate.HibernateTestingModule for usage instructions.","title":"SHARED_TEST_DATABASE_POOL"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/","text":"// misk-jdbc-testing / misk.jdbc / ExtendedQueryExecutionListener ExtendedQueryExecutionListener \u00b6 [jvm]\\ open class ExtendedQueryExecutionListener : QueryExecutionListener, MethodExecutionListener Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) Inheritors \u00b6 Name TableScanDetector FullScatterDetector TableScanDetector CowriteDetector","title":"ExtendedQueryExecutionListener - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/#extendedqueryexecutionlistener","text":"[jvm]\\ open class ExtendedQueryExecutionListener : QueryExecutionListener, MethodExecutionListener","title":"ExtendedQueryExecutionListener"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/#functions","text":"Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/#inheritors","text":"Name TableScanDetector FullScatterDetector TableScanDetector CowriteDetector","title":"Inheritors"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/-extended-query-execution-listener/","text":"// misk-jdbc-testing / misk.jdbc / ExtendedQueryExecutionListener / ExtendedQueryExecutionListener ExtendedQueryExecutionListener \u00b6 [jvm]\\ fun ExtendedQueryExecutionListener ()","title":"ExtendedQueryExecutionListener - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/-extended-query-execution-listener/#extendedqueryexecutionlistener","text":"[jvm]\\ fun ExtendedQueryExecutionListener ()","title":"ExtendedQueryExecutionListener"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/after-method/","text":"// misk-jdbc-testing / misk.jdbc / ExtendedQueryExecutionListener / afterMethod afterMethod \u00b6 [jvm]\\ open override fun afterMethod (executionContext: MethodExecutionContext)","title":"afterMethod - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/after-method/#aftermethod","text":"[jvm]\\ open override fun afterMethod (executionContext: MethodExecutionContext)","title":"afterMethod"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/after-query/","text":"// misk-jdbc-testing / misk.jdbc / ExtendedQueryExecutionListener / afterQuery afterQuery \u00b6 [jvm]\\ override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"afterQuery - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/after-query/#afterquery","text":"[jvm]\\ override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"afterQuery"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/before-method/","text":"// misk-jdbc-testing / misk.jdbc / ExtendedQueryExecutionListener / beforeMethod beforeMethod \u00b6 [jvm]\\ open override fun beforeMethod (executionContext: MethodExecutionContext)","title":"beforeMethod - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/before-method/#beforemethod","text":"[jvm]\\ open override fun beforeMethod (executionContext: MethodExecutionContext)","title":"beforeMethod"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/before-query/","text":"// misk-jdbc-testing / misk.jdbc / ExtendedQueryExecutionListener / beforeQuery beforeQuery \u00b6 [jvm]\\ override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"beforeQuery - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/before-query/#beforequery","text":"[jvm]\\ override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"beforeQuery"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/-companion/","text":"// misk-jdbc-testing / misk.jdbc / ExtendedQueryExecutionListener / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-extended-query-execution-listener/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-jdbc-testing-module/","text":"// misk-jdbc-testing / misk.jdbc / JdbcTestingModule JdbcTestingModule \u00b6 [jvm]\\ class JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String >, shutDownStatements: List < String >, scaleSafetyChecks: Boolean ) : KAbstractModule Installs a service to clear the test datasource before running tests. This module should be installed alongside the JdbcModule. If you run your tests in parallel, you need to install the JdbcModule as follows to ensure that your test suites do not share databases concurrently: install(JdbcModule(MyDatabase::class, dataSourceConfig, SHARED_TEST_DATABASE_POOL)) See misk.jdbc.SHARED_TEST_DATABASE_POOL . Constructors \u00b6 JdbcTestingModule [jvm] fun JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf(), scaleSafetyChecks: Boolean = false) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"JdbcTestingModule - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-jdbc-testing-module/#jdbctestingmodule","text":"[jvm]\\ class JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String >, shutDownStatements: List < String >, scaleSafetyChecks: Boolean ) : KAbstractModule Installs a service to clear the test datasource before running tests. This module should be installed alongside the JdbcModule. If you run your tests in parallel, you need to install the JdbcModule as follows to ensure that your test suites do not share databases concurrently: install(JdbcModule(MyDatabase::class, dataSourceConfig, SHARED_TEST_DATABASE_POOL)) See misk.jdbc.SHARED_TEST_DATABASE_POOL .","title":"JdbcTestingModule"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-jdbc-testing-module/#constructors","text":"JdbcTestingModule [jvm] fun JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf(), scaleSafetyChecks: Boolean = false)","title":"Constructors"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-jdbc-testing-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-jdbc-testing-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-jdbc-testing-module/-jdbc-testing-module/","text":"// misk-jdbc-testing / misk.jdbc / JdbcTestingModule / JdbcTestingModule JdbcTestingModule \u00b6 [jvm]\\ fun JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf(), scaleSafetyChecks: Boolean = false)","title":"JdbcTestingModule - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-jdbc-testing-module/-jdbc-testing-module/#jdbctestingmodule","text":"[jvm]\\ fun JdbcTestingModule (qualifier: KClass <out Annotation >, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf(), scaleSafetyChecks: Boolean = false)","title":"JdbcTestingModule"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/","text":"// misk-jdbc-testing / misk.jdbc / MySqlScaleSafetyChecks MySqlScaleSafetyChecks \u00b6 [jvm]\\ @Singleton class MySqlScaleSafetyChecks (config: DataSourceConfig) : DataSourceDecorator Types \u00b6 Name Summary TableScanDetector [jvm] inner class TableScanDetector : ExtendedQueryExecutionListener Functions \u00b6 Name Summary connect [jvm] fun connect (): Connection decorate [jvm] open override fun decorate (dataSource: DataSource ): DataSource Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig","title":"MySqlScaleSafetyChecks - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/#mysqlscalesafetychecks","text":"[jvm]\\ @Singleton class MySqlScaleSafetyChecks (config: DataSourceConfig) : DataSourceDecorator","title":"MySqlScaleSafetyChecks"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/#types","text":"Name Summary TableScanDetector [jvm] inner class TableScanDetector : ExtendedQueryExecutionListener","title":"Types"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/#functions","text":"Name Summary connect [jvm] fun connect (): Connection decorate [jvm] open override fun decorate (dataSource: DataSource ): DataSource","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig","title":"Properties"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/-my-sql-scale-safety-checks/","text":"// misk-jdbc-testing / misk.jdbc / MySqlScaleSafetyChecks / MySqlScaleSafetyChecks MySqlScaleSafetyChecks \u00b6 [jvm]\\ fun MySqlScaleSafetyChecks (config: DataSourceConfig)","title":"MySqlScaleSafetyChecks - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/-my-sql-scale-safety-checks/#mysqlscalesafetychecks","text":"[jvm]\\ fun MySqlScaleSafetyChecks (config: DataSourceConfig)","title":"MySqlScaleSafetyChecks"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/config/","text":"// misk-jdbc-testing / misk.jdbc / MySqlScaleSafetyChecks / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/connect/","text":"// misk-jdbc-testing / misk.jdbc / MySqlScaleSafetyChecks / connect connect \u00b6 [jvm]\\ fun connect (): Connection","title":"connect - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/connect/#connect","text":"[jvm]\\ fun connect (): Connection","title":"connect"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/decorate/","text":"// misk-jdbc-testing / misk.jdbc / MySqlScaleSafetyChecks / decorate decorate \u00b6 [jvm]\\ open override fun decorate (dataSource: DataSource ): DataSource","title":"decorate - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/decorate/#decorate","text":"[jvm]\\ open override fun decorate (dataSource: DataSource ): DataSource","title":"decorate"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/-table-scan-detector/","text":"// misk-jdbc-testing / misk.jdbc / MySqlScaleSafetyChecks / TableScanDetector TableScanDetector \u00b6 [jvm]\\ inner class TableScanDetector : ExtendedQueryExecutionListener Functions \u00b6 Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"TableScanDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/-table-scan-detector/#tablescandetector","text":"[jvm]\\ inner class TableScanDetector : ExtendedQueryExecutionListener","title":"TableScanDetector"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/-table-scan-detector/#functions","text":"Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/-table-scan-detector/-table-scan-detector/","text":"// misk-jdbc-testing / misk.jdbc / MySqlScaleSafetyChecks / TableScanDetector / TableScanDetector TableScanDetector \u00b6 [jvm]\\ fun TableScanDetector ()","title":"TableScanDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-my-sql-scale-safety-checks/-table-scan-detector/-table-scan-detector/#tablescandetector","text":"[jvm]\\ fun TableScanDetector ()","title":"TableScanDetector"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/","text":"// misk-jdbc-testing / misk.jdbc / ScaleSafetyChecks ScaleSafetyChecks \u00b6 [jvm]\\ object ScaleSafetyChecks Functions \u00b6 Name Summary checkQueryForTableScan [jvm] fun checkQueryForTableScan (connection: Connection , database: String ?, query: String ) extractQueriesSince [jvm] fun extractQueriesSince (connection: Connection , mysqlTime: Timestamp ): List < String > Digs into the MySQL log to find the last executed DML statement. getLastLoggedCommand [jvm] fun getLastLoggedCommand (connection: Connection ): Timestamp ? isDml [jvm] fun isDml (query: String ): Boolean turnOnSqlGeneralLogging [jvm] fun turnOnSqlGeneralLogging (connection: Connection ) Turn on MySQL general_log so that we can inspect it in the detectors.","title":"ScaleSafetyChecks - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/#scalesafetychecks","text":"[jvm]\\ object ScaleSafetyChecks","title":"ScaleSafetyChecks"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/#functions","text":"Name Summary checkQueryForTableScan [jvm] fun checkQueryForTableScan (connection: Connection , database: String ?, query: String ) extractQueriesSince [jvm] fun extractQueriesSince (connection: Connection , mysqlTime: Timestamp ): List < String > Digs into the MySQL log to find the last executed DML statement. getLastLoggedCommand [jvm] fun getLastLoggedCommand (connection: Connection ): Timestamp ? isDml [jvm] fun isDml (query: String ): Boolean turnOnSqlGeneralLogging [jvm] fun turnOnSqlGeneralLogging (connection: Connection ) Turn on MySQL general_log so that we can inspect it in the detectors.","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/check-query-for-table-scan/","text":"// misk-jdbc-testing / misk.jdbc / ScaleSafetyChecks / checkQueryForTableScan checkQueryForTableScan \u00b6 [jvm]\\ fun checkQueryForTableScan (connection: Connection , database: String ?, query: String )","title":"checkQueryForTableScan - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/check-query-for-table-scan/#checkqueryfortablescan","text":"[jvm]\\ fun checkQueryForTableScan (connection: Connection , database: String ?, query: String )","title":"checkQueryForTableScan"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/extract-queries-since/","text":"// misk-jdbc-testing / misk.jdbc / ScaleSafetyChecks / extractQueriesSince extractQueriesSince \u00b6 [jvm]\\ fun extractQueriesSince (connection: Connection , mysqlTime: Timestamp ): List < String > Digs into the MySQL log to find the last executed DML statement.","title":"extractQueriesSince - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/extract-queries-since/#extractqueriessince","text":"[jvm]\\ fun extractQueriesSince (connection: Connection , mysqlTime: Timestamp ): List < String > Digs into the MySQL log to find the last executed DML statement.","title":"extractQueriesSince"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/get-last-logged-command/","text":"// misk-jdbc-testing / misk.jdbc / ScaleSafetyChecks / getLastLoggedCommand getLastLoggedCommand \u00b6 [jvm]\\ fun getLastLoggedCommand (connection: Connection ): Timestamp ?","title":"getLastLoggedCommand - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/get-last-logged-command/#getlastloggedcommand","text":"[jvm]\\ fun getLastLoggedCommand (connection: Connection ): Timestamp ?","title":"getLastLoggedCommand"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/is-dml/","text":"// misk-jdbc-testing / misk.jdbc / ScaleSafetyChecks / isDml isDml \u00b6 [jvm]\\ fun isDml (query: String ): Boolean","title":"isDml - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/is-dml/#isdml","text":"[jvm]\\ fun isDml (query: String ): Boolean","title":"isDml"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/turn-on-sql-general-logging/","text":"// misk-jdbc-testing / misk.jdbc / ScaleSafetyChecks / turnOnSqlGeneralLogging turnOnSqlGeneralLogging \u00b6 [jvm]\\ fun turnOnSqlGeneralLogging (connection: Connection ) Turn on MySQL general_log so that we can inspect it in the detectors.","title":"turnOnSqlGeneralLogging - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-scale-safety-checks/turn-on-sql-general-logging/#turnonsqlgenerallogging","text":"[jvm]\\ fun turnOnSqlGeneralLogging (connection: Connection ) Turn on MySQL general_log so that we can inspect it in the detectors.","title":"turnOnSqlGeneralLogging"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool TestDatabasePool \u00b6 [jvm]\\ class TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock ) : DatabasePool Manages an inventory of databases for testing. Databases are named like movies__20190730__5 where movies is the database name in a DataSourceConfig, 20190730 is today\u2019s date, and 5 is a sequence number. These are used only in tests, so that each test gets a reserved database to avoid parallelism issues. Thread-safe. Constructors \u00b6 TestDatabasePool [jvm] fun TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock ) Types \u00b6 Name Summary Backend [jvm] interface Backend A backend for a ConfigSpecificPool. Companion [jvm] object Companion DatabaseName [jvm] data class DatabaseName (name: String , yearMonthDay: Long , version: Int ) Functions \u00b6 Name Summary pruneOldDatabases [jvm] fun pruneOldDatabases (retention: Duration = Duration.ofDays(2)) Drops all databases that were created by an allocator which are older than the retention duration of this allocator. releaseDatabase [jvm] open override fun releaseDatabase (config: DataSourceConfig) takeDatabase [jvm] open override fun takeDatabase (config: DataSourceConfig): DataSourceConfig Properties \u00b6 Name Summary backend [jvm] val backend : TestDatabasePool.Backend clock [jvm] val clock : Clock","title":"TestDatabasePool - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/#testdatabasepool","text":"[jvm]\\ class TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock ) : DatabasePool Manages an inventory of databases for testing. Databases are named like movies__20190730__5 where movies is the database name in a DataSourceConfig, 20190730 is today\u2019s date, and 5 is a sequence number. These are used only in tests, so that each test gets a reserved database to avoid parallelism issues. Thread-safe.","title":"TestDatabasePool"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/#constructors","text":"TestDatabasePool [jvm] fun TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock )","title":"Constructors"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/#types","text":"Name Summary Backend [jvm] interface Backend A backend for a ConfigSpecificPool. Companion [jvm] object Companion DatabaseName [jvm] data class DatabaseName (name: String , yearMonthDay: Long , version: Int )","title":"Types"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/#functions","text":"Name Summary pruneOldDatabases [jvm] fun pruneOldDatabases (retention: Duration = Duration.ofDays(2)) Drops all databases that were created by an allocator which are older than the retention duration of this allocator. releaseDatabase [jvm] open override fun releaseDatabase (config: DataSourceConfig) takeDatabase [jvm] open override fun takeDatabase (config: DataSourceConfig): DataSourceConfig","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/#properties","text":"Name Summary backend [jvm] val backend : TestDatabasePool.Backend clock [jvm] val clock : Clock","title":"Properties"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-test-database-pool/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / TestDatabasePool TestDatabasePool \u00b6 [jvm]\\ fun TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock )","title":"TestDatabasePool - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-test-database-pool/#testdatabasepool","text":"[jvm]\\ fun TestDatabasePool (backend: TestDatabasePool.Backend , clock: Clock )","title":"TestDatabasePool"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/backend/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / backend backend \u00b6 [jvm]\\ val backend : TestDatabasePool.Backend","title":"backend - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/backend/#backend","text":"[jvm]\\ val backend : TestDatabasePool.Backend","title":"backend"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/clock/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / clock clock \u00b6 [jvm]\\ val clock : Clock","title":"clock - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/clock/#clock","text":"[jvm]\\ val clock : Clock","title":"clock"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/prune-old-databases/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / pruneOldDatabases pruneOldDatabases \u00b6 [jvm]\\ fun pruneOldDatabases (retention: Duration = Duration.ofDays(2)) Drops all databases that were created by an allocator which are older than the retention duration of this allocator. Parameters \u00b6 jvm retention Must be longer than any test could possibly run for.","title":"pruneOldDatabases - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/prune-old-databases/#pruneolddatabases","text":"[jvm]\\ fun pruneOldDatabases (retention: Duration = Duration.ofDays(2)) Drops all databases that were created by an allocator which are older than the retention duration of this allocator.","title":"pruneOldDatabases"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/prune-old-databases/#parameters","text":"jvm retention Must be longer than any test could possibly run for.","title":"Parameters"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/release-database/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / releaseDatabase releaseDatabase \u00b6 [jvm]\\ open override fun releaseDatabase (config: DataSourceConfig)","title":"releaseDatabase - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/release-database/#releasedatabase","text":"[jvm]\\ open override fun releaseDatabase (config: DataSourceConfig)","title":"releaseDatabase"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/take-database/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / takeDatabase takeDatabase \u00b6 [jvm]\\ open override fun takeDatabase (config: DataSourceConfig): DataSourceConfig","title":"takeDatabase - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/take-database/#takedatabase","text":"[jvm]\\ open override fun takeDatabase (config: DataSourceConfig): DataSourceConfig","title":"takeDatabase"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / Backend Backend \u00b6 [jvm]\\ interface Backend A backend for a ConfigSpecificPool. Functions \u00b6 Name Summary createDatabase [jvm] abstract fun createDatabase (name: String ) Attempts to create the indicated database in the data source. dropDatabase [jvm] abstract fun dropDatabase (name: String ) Drops the indicated database from the data source. showDatabases [jvm] abstract fun showDatabases (): Set < String > Returns a list of all databases present in the data source.","title":"Backend - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/#backend","text":"[jvm]\\ interface Backend A backend for a ConfigSpecificPool.","title":"Backend"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/#functions","text":"Name Summary createDatabase [jvm] abstract fun createDatabase (name: String ) Attempts to create the indicated database in the data source. dropDatabase [jvm] abstract fun dropDatabase (name: String ) Drops the indicated database from the data source. showDatabases [jvm] abstract fun showDatabases (): Set < String > Returns a list of all databases present in the data source.","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/create-database/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / Backend / createDatabase createDatabase \u00b6 [jvm]\\ abstract fun createDatabase (name: String ) Attempts to create the indicated database in the data source. Throws PersistenceException if the database already exists.","title":"createDatabase - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/create-database/#createdatabase","text":"[jvm]\\ abstract fun createDatabase (name: String ) Attempts to create the indicated database in the data source. Throws PersistenceException if the database already exists.","title":"createDatabase"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/drop-database/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / Backend / dropDatabase dropDatabase \u00b6 [jvm]\\ abstract fun dropDatabase (name: String ) Drops the indicated database from the data source. Throws PersistenceException if the database cannot be dropped (i.e. it does not exist).","title":"dropDatabase - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/drop-database/#dropdatabase","text":"[jvm]\\ abstract fun dropDatabase (name: String ) Drops the indicated database from the data source. Throws PersistenceException if the database cannot be dropped (i.e. it does not exist).","title":"dropDatabase"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/show-databases/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / Backend / showDatabases showDatabases \u00b6 [jvm]\\ abstract fun showDatabases (): Set < String > Returns a list of all databases present in the data source.","title":"showDatabases - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-backend/show-databases/#showdatabases","text":"[jvm]\\ abstract fun showDatabases (): Set < String > Returns a list of all databases present in the data source.","title":"showDatabases"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-companion/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / DatabaseName DatabaseName \u00b6 [jvm]\\ data class DatabaseName (name: String , yearMonthDay: Long , version: Int ) Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String version [jvm] val version : Int yearMonthDay [jvm] val yearMonthDay : Long","title":"DatabaseName - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/#databasename","text":"[jvm]\\ data class DatabaseName (name: String , yearMonthDay: Long , version: Int )","title":"DatabaseName"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/#properties","text":"Name Summary name [jvm] val name : String version [jvm] val version : Int yearMonthDay [jvm] val yearMonthDay : Long","title":"Properties"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/-database-name/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / DatabaseName / DatabaseName DatabaseName \u00b6 [jvm]\\ fun DatabaseName (name: String , yearMonthDay: Long , version: Int )","title":"DatabaseName - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/-database-name/#databasename","text":"[jvm]\\ fun DatabaseName (name: String , yearMonthDay: Long , version: Int )","title":"DatabaseName"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/name/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / DatabaseName / name name \u00b6 [jvm]\\ val name : String","title":"name - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/name/#name","text":"[jvm]\\ val name : String","title":"name"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/to-string/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / DatabaseName / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/version/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / DatabaseName / version version \u00b6 [jvm]\\ val version : Int","title":"version - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/version/#version","text":"[jvm]\\ val version : Int","title":"version"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/year-month-day/","text":"// misk-jdbc-testing / misk.jdbc / TestDatabasePool / DatabaseName / yearMonthDay yearMonthDay \u00b6 [jvm]\\ val yearMonthDay : Long","title":"yearMonthDay - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-test-database-pool/-database-name/year-month-day/#yearmonthday","text":"[jvm]\\ val yearMonthDay : Long","title":"yearMonthDay"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-truncate-tables-service/","text":"// misk-jdbc-testing / misk.jdbc / TruncateTablesService TruncateTablesService \u00b6 [jvm]\\ class TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String >, shutDownStatements: List < String >) : AbstractIdleService Truncate tables before running each test. This deletes the data in the tables but leaves the schema as-is. It also leaves the schema_version table as is. We truncate before tests because that way we always have a clean slate, even if a preceding test wasn\u2019t able to clean up after itself. Constructors \u00b6 TruncateTablesService [jvm] fun TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf()) Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"TruncateTablesService - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-truncate-tables-service/#truncatetablesservice","text":"[jvm]\\ class TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String >, shutDownStatements: List < String >) : AbstractIdleService Truncate tables before running each test. This deletes the data in the tables but leaves the schema as-is. It also leaves the schema_version table as is. We truncate before tests because that way we always have a clean slate, even if a preceding test wasn\u2019t able to clean up after itself.","title":"TruncateTablesService"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-truncate-tables-service/#constructors","text":"TruncateTablesService [jvm] fun TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf())","title":"Constructors"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-truncate-tables-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-truncate-tables-service/-truncate-tables-service/","text":"// misk-jdbc-testing / misk.jdbc / TruncateTablesService / TruncateTablesService TruncateTablesService \u00b6 [jvm]\\ fun TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf())","title":"TruncateTablesService - Misk"},{"location":"0.x/misk-jdbc-testing/misk.jdbc/-truncate-tables-service/-truncate-tables-service/#truncatetablesservice","text":"[jvm]\\ fun TruncateTablesService (qualifier: KClass <out Annotation >, dataSourceService: DataSourceService, transacterProvider: Provider<Transacter>, startUpStatements: List < String > = listOf(), shutDownStatements: List < String > = listOf())","title":"TruncateTablesService"},{"location":"0.x/misk-jdbc-testing/misk.vitess/","text":"// misk-jdbc-testing / misk.vitess Package misk.vitess \u00b6 Types \u00b6 Name Summary VitessScaleSafetyChecks [jvm] @Singleton class VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService) : DataSourceDecorator Throws a FullScatterException for scatter queries that doesn\u2019t have a lookup vindex. Note: Current implementation is not thread safe and will not work in production.","title":"Package misk.vitess - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/#package-miskvitess","text":"","title":"Package misk.vitess"},{"location":"0.x/misk-jdbc-testing/misk.vitess/#types","text":"Name Summary VitessScaleSafetyChecks [jvm] @Singleton class VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService) : DataSourceDecorator Throws a FullScatterException for scatter queries that doesn\u2019t have a lookup vindex. Note: Current implementation is not thread safe and will not work in production.","title":"Types"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks VitessScaleSafetyChecks \u00b6 [jvm]\\ @Singleton class VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService) : DataSourceDecorator Throws a FullScatterException for scatter queries that doesn\u2019t have a lookup vindex. Note: Current implementation is not thread safe and will not work in production. Constructors \u00b6 VitessScaleSafetyChecks [jvm] fun VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService) Types \u00b6 Name Summary Companion [jvm] object Companion CowriteDetector [jvm] inner class CowriteDetector : ExtendedQueryExecutionListener FullScatterDetector [jvm] inner class FullScatterDetector : ExtendedQueryExecutionListener TableScanDetector [jvm] inner class TableScanDetector : ExtendedQueryExecutionListener Functions \u00b6 Name Summary connect [jvm] fun connect (): Connection ? Connects directly to the Docker Vitess mysqld, bypassing vtgate entirely. We use this to dig into the query log. This is a perpetual, not connection pooled connection so should not be closed. We shut down the Vitess docker container after the tests have completed running so this doesn\u2019t need to be closed explicitly. decorate [jvm] open override fun decorate (dataSource: DataSource ): DataSource Properties \u00b6 Name Summary config [jvm] val config : DataSourceConfig moshi [jvm] val moshi : Moshi okHttpClient [jvm] val okHttpClient : OkHttpClient startDatabaseService [jvm] val startDatabaseService : StartDatabaseService","title":"VitessScaleSafetyChecks - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/#vitessscalesafetychecks","text":"[jvm]\\ @Singleton class VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService) : DataSourceDecorator Throws a FullScatterException for scatter queries that doesn\u2019t have a lookup vindex. Note: Current implementation is not thread safe and will not work in production.","title":"VitessScaleSafetyChecks"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/#constructors","text":"VitessScaleSafetyChecks [jvm] fun VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService)","title":"Constructors"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/#types","text":"Name Summary Companion [jvm] object Companion CowriteDetector [jvm] inner class CowriteDetector : ExtendedQueryExecutionListener FullScatterDetector [jvm] inner class FullScatterDetector : ExtendedQueryExecutionListener TableScanDetector [jvm] inner class TableScanDetector : ExtendedQueryExecutionListener","title":"Types"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/#functions","text":"Name Summary connect [jvm] fun connect (): Connection ? Connects directly to the Docker Vitess mysqld, bypassing vtgate entirely. We use this to dig into the query log. This is a perpetual, not connection pooled connection so should not be closed. We shut down the Vitess docker container after the tests have completed running so this doesn\u2019t need to be closed explicitly. decorate [jvm] open override fun decorate (dataSource: DataSource ): DataSource","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/#properties","text":"Name Summary config [jvm] val config : DataSourceConfig moshi [jvm] val moshi : Moshi okHttpClient [jvm] val okHttpClient : OkHttpClient startDatabaseService [jvm] val startDatabaseService : StartDatabaseService","title":"Properties"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-vitess-scale-safety-checks/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / VitessScaleSafetyChecks VitessScaleSafetyChecks \u00b6 [jvm]\\ fun VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService)","title":"VitessScaleSafetyChecks - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-vitess-scale-safety-checks/#vitessscalesafetychecks","text":"[jvm]\\ fun VitessScaleSafetyChecks (config: DataSourceConfig, okHttpClient: OkHttpClient, moshi: Moshi, startDatabaseService: StartDatabaseService)","title":"VitessScaleSafetyChecks"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/config/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / config config \u00b6 [jvm]\\ val config : DataSourceConfig","title":"config - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/config/#config","text":"[jvm]\\ val config : DataSourceConfig","title":"config"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/connect/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / connect connect \u00b6 [jvm]\\ fun connect (): Connection ? Connects directly to the Docker Vitess mysqld, bypassing vtgate entirely. We use this to dig into the query log. This is a perpetual, not connection pooled connection so should not be closed. We shut down the Vitess docker container after the tests have completed running so this doesn\u2019t need to be closed explicitly.","title":"connect - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/connect/#connect","text":"[jvm]\\ fun connect (): Connection ? Connects directly to the Docker Vitess mysqld, bypassing vtgate entirely. We use this to dig into the query log. This is a perpetual, not connection pooled connection so should not be closed. We shut down the Vitess docker container after the tests have completed running so this doesn\u2019t need to be closed explicitly.","title":"connect"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/decorate/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / decorate decorate \u00b6 [jvm]\\ open override fun decorate (dataSource: DataSource ): DataSource","title":"decorate - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/decorate/#decorate","text":"[jvm]\\ open override fun decorate (dataSource: DataSource ): DataSource","title":"decorate"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/moshi/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / moshi moshi \u00b6 [jvm]\\ val moshi : Moshi","title":"moshi - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/moshi/#moshi","text":"[jvm]\\ val moshi : Moshi","title":"moshi"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/ok-http-client/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / okHttpClient okHttpClient \u00b6 [jvm]\\ val okHttpClient : OkHttpClient","title":"okHttpClient - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/ok-http-client/#okhttpclient","text":"[jvm]\\ val okHttpClient : OkHttpClient","title":"okHttpClient"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/start-database-service/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / startDatabaseService startDatabaseService \u00b6 [jvm]\\ val startDatabaseService : StartDatabaseService","title":"startDatabaseService - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/start-database-service/#startdatabaseservice","text":"[jvm]\\ val startDatabaseService : StartDatabaseService","title":"startDatabaseService"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-companion/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-cowrite-detector/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / CowriteDetector CowriteDetector \u00b6 [jvm]\\ inner class CowriteDetector : ExtendedQueryExecutionListener Functions \u00b6 Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"CowriteDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-cowrite-detector/#cowritedetector","text":"[jvm]\\ inner class CowriteDetector : ExtendedQueryExecutionListener","title":"CowriteDetector"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-cowrite-detector/#functions","text":"Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-cowrite-detector/-cowrite-detector/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / CowriteDetector / CowriteDetector CowriteDetector \u00b6 [jvm]\\ fun CowriteDetector ()","title":"CowriteDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-cowrite-detector/-cowrite-detector/#cowritedetector","text":"[jvm]\\ fun CowriteDetector ()","title":"CowriteDetector"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-full-scatter-detector/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / FullScatterDetector FullScatterDetector \u00b6 [jvm]\\ inner class FullScatterDetector : ExtendedQueryExecutionListener Functions \u00b6 Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"FullScatterDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-full-scatter-detector/#fullscatterdetector","text":"[jvm]\\ inner class FullScatterDetector : ExtendedQueryExecutionListener","title":"FullScatterDetector"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-full-scatter-detector/#functions","text":"Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-full-scatter-detector/-full-scatter-detector/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / FullScatterDetector / FullScatterDetector FullScatterDetector \u00b6 [jvm]\\ fun FullScatterDetector ()","title":"FullScatterDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-full-scatter-detector/-full-scatter-detector/#fullscatterdetector","text":"[jvm]\\ fun FullScatterDetector ()","title":"FullScatterDetector"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-table-scan-detector/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / TableScanDetector TableScanDetector \u00b6 [jvm]\\ inner class TableScanDetector : ExtendedQueryExecutionListener Functions \u00b6 Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"TableScanDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-table-scan-detector/#tablescandetector","text":"[jvm]\\ inner class TableScanDetector : ExtendedQueryExecutionListener","title":"TableScanDetector"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-table-scan-detector/#functions","text":"Name Summary afterMethod [jvm] open override fun afterMethod (executionContext: MethodExecutionContext) afterQuery [jvm] override fun afterQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?) beforeMethod [jvm] open override fun beforeMethod (executionContext: MethodExecutionContext) beforeQuery [jvm] override fun beforeQuery (execInfo: ExecutionInfo?, queryInfoList: List <QueryInfo>?)","title":"Functions"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-table-scan-detector/-table-scan-detector/","text":"// misk-jdbc-testing / misk.vitess / VitessScaleSafetyChecks / TableScanDetector / TableScanDetector TableScanDetector \u00b6 [jvm]\\ fun TableScanDetector ()","title":"TableScanDetector - Misk"},{"location":"0.x/misk-jdbc-testing/misk.vitess/-vitess-scale-safety-checks/-table-scan-detector/-table-scan-detector/#tablescandetector","text":"[jvm]\\ fun TableScanDetector ()","title":"TableScanDetector"},{"location":"0.x/misk-jobqueue/misk.jobqueue/","text":"// misk-jobqueue / misk.jobqueue Package misk.jobqueue \u00b6 Types \u00b6 Name Summary Job [jvm] interface Job Incoming job JobConsumer [jvm] interface JobConsumer A JobConsumer allows applications to subscribe to receive incoming jobs JobHandler [jvm] interface JobHandler A JobHandler is an application implemented interface that handles jobs received by this service. JobHandler s must explicitly call Job.acknowledge after successful processing to cause the to be deleted from the underlying queue and not redelivered, or can call Job.deadLetter to put the job onto the associated dead letter queue. The jobqueue framework assumes that the underlying queueing system is at-least-once, so handlers must be prepared for the possibility that a job will be delivered more than once (for example if the process fails or the visibility timeout expires after processing but before acknowledgement). Typically this is handled by either storing some sort of ticket in the local database when the job is enqueued and deleting it as part of the application transaction when the job is processed but prior to acknowledgement, or by storing some sort of \u201cprocessed marker\u201d in the local database during job processing and ignoring jobs whose marker is already recorded. JobQueue [jvm] interface JobQueue A JobQueue enqueues jobs for asynchronous execution, possibly in another process. Jobs are enqueued immediately and may involve an RPC to the underlying job queueing system, so should not be done from within a database transaction. Applications that need to enqueue jobs atomically with a local database transaction should use the TransactionalJobQueue interface QueueName [jvm] data class QueueName (value: String ) Functions \u00b6 Name Summary subscribe [jvm] inline fun JobConsumer . subscribe (queueName: QueueName , crossinline handler: ( Job ) -> Unit )","title":"Package misk.jobqueue - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/#package-miskjobqueue","text":"","title":"Package misk.jobqueue"},{"location":"0.x/misk-jobqueue/misk.jobqueue/#types","text":"Name Summary Job [jvm] interface Job Incoming job JobConsumer [jvm] interface JobConsumer A JobConsumer allows applications to subscribe to receive incoming jobs JobHandler [jvm] interface JobHandler A JobHandler is an application implemented interface that handles jobs received by this service. JobHandler s must explicitly call Job.acknowledge after successful processing to cause the to be deleted from the underlying queue and not redelivered, or can call Job.deadLetter to put the job onto the associated dead letter queue. The jobqueue framework assumes that the underlying queueing system is at-least-once, so handlers must be prepared for the possibility that a job will be delivered more than once (for example if the process fails or the visibility timeout expires after processing but before acknowledgement). Typically this is handled by either storing some sort of ticket in the local database when the job is enqueued and deleting it as part of the application transaction when the job is processed but prior to acknowledgement, or by storing some sort of \u201cprocessed marker\u201d in the local database during job processing and ignoring jobs whose marker is already recorded. JobQueue [jvm] interface JobQueue A JobQueue enqueues jobs for asynchronous execution, possibly in another process. Jobs are enqueued immediately and may involve an RPC to the underlying job queueing system, so should not be done from within a database transaction. Applications that need to enqueue jobs atomically with a local database transaction should use the TransactionalJobQueue interface QueueName [jvm] data class QueueName (value: String )","title":"Types"},{"location":"0.x/misk-jobqueue/misk.jobqueue/#functions","text":"Name Summary subscribe [jvm] inline fun JobConsumer . subscribe (queueName: QueueName , crossinline handler: ( Job ) -> Unit )","title":"Functions"},{"location":"0.x/misk-jobqueue/misk.jobqueue/subscribe/","text":"// misk-jobqueue / misk.jobqueue / subscribe subscribe \u00b6 [jvm]\\ inline fun JobConsumer . subscribe (queueName: QueueName , crossinline handler: ( Job ) -> Unit )","title":"subscribe - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/subscribe/#subscribe","text":"[jvm]\\ inline fun JobConsumer . subscribe (queueName: QueueName , crossinline handler: ( Job ) -> Unit )","title":"subscribe"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/","text":"// misk-jobqueue / misk.jobqueue / Job Job \u00b6 [jvm]\\ interface Job Incoming job Functions \u00b6 Name Summary acknowledge [jvm] abstract fun acknowledge () Acknowledges the job and deletes it from the underlying queue. May perform an RPC, and thus should not be called while holding database transactions or other resources deadLetter [jvm] abstract fun deadLetter () Moves the job from the main queue onto the associated dead letter queue. May perform an RPC Properties \u00b6 Name Summary attributes [jvm] abstract val attributes : Map < String , String > context attributes associated with the job body [jvm] abstract val body : String body of the job id [jvm] abstract val id : String system assigned globally unique id for the job idempotenceKey [jvm] abstract val idempotenceKey : String Application assigned key for a job. queueName [jvm] abstract val queueName : QueueName name of the queue on which the job was received","title":"Job - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/#job","text":"[jvm]\\ interface Job Incoming job","title":"Job"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/#functions","text":"Name Summary acknowledge [jvm] abstract fun acknowledge () Acknowledges the job and deletes it from the underlying queue. May perform an RPC, and thus should not be called while holding database transactions or other resources deadLetter [jvm] abstract fun deadLetter () Moves the job from the main queue onto the associated dead letter queue. May perform an RPC","title":"Functions"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/#properties","text":"Name Summary attributes [jvm] abstract val attributes : Map < String , String > context attributes associated with the job body [jvm] abstract val body : String body of the job id [jvm] abstract val id : String system assigned globally unique id for the job idempotenceKey [jvm] abstract val idempotenceKey : String Application assigned key for a job. queueName [jvm] abstract val queueName : QueueName name of the queue on which the job was received","title":"Properties"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/acknowledge/","text":"// misk-jobqueue / misk.jobqueue / Job / acknowledge acknowledge \u00b6 [jvm]\\ abstract fun acknowledge () Acknowledges the job and deletes it from the underlying queue. May perform an RPC, and thus should not be called while holding database transactions or other resources","title":"acknowledge - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/acknowledge/#acknowledge","text":"[jvm]\\ abstract fun acknowledge () Acknowledges the job and deletes it from the underlying queue. May perform an RPC, and thus should not be called while holding database transactions or other resources","title":"acknowledge"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/attributes/","text":"// misk-jobqueue / misk.jobqueue / Job / attributes attributes \u00b6 [jvm]\\ abstract val attributes : Map < String , String > context attributes associated with the job","title":"attributes - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/attributes/#attributes","text":"[jvm]\\ abstract val attributes : Map < String , String > context attributes associated with the job","title":"attributes"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/body/","text":"// misk-jobqueue / misk.jobqueue / Job / body body \u00b6 [jvm]\\ abstract val body : String body of the job","title":"body - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/body/#body","text":"[jvm]\\ abstract val body : String body of the job","title":"body"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/dead-letter/","text":"// misk-jobqueue / misk.jobqueue / Job / deadLetter deadLetter \u00b6 [jvm]\\ abstract fun deadLetter () Moves the job from the main queue onto the associated dead letter queue. May perform an RPC","title":"deadLetter - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/dead-letter/#deadletter","text":"[jvm]\\ abstract fun deadLetter () Moves the job from the main queue onto the associated dead letter queue. May perform an RPC","title":"deadLetter"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/id/","text":"// misk-jobqueue / misk.jobqueue / Job / id id \u00b6 [jvm]\\ abstract val id : String system assigned globally unique id for the job","title":"id - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/id/#id","text":"[jvm]\\ abstract val id : String system assigned globally unique id for the job","title":"id"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/idempotence-key/","text":"// misk-jobqueue / misk.jobqueue / Job / idempotenceKey idempotenceKey \u00b6 [jvm]\\ abstract val idempotenceKey : String Application assigned key for a job. See also \u00b6 jvm misk.jobqueue.JobQueue","title":"idempotenceKey - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/idempotence-key/#idempotencekey","text":"[jvm]\\ abstract val idempotenceKey : String Application assigned key for a job.","title":"idempotenceKey"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/idempotence-key/#see-also","text":"jvm misk.jobqueue.JobQueue","title":"See also"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/queue-name/","text":"// misk-jobqueue / misk.jobqueue / Job / queueName queueName \u00b6 [jvm]\\ abstract val queueName : QueueName name of the queue on which the job was received","title":"queueName - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job/queue-name/#queuename","text":"[jvm]\\ abstract val queueName : QueueName name of the queue on which the job was received","title":"queueName"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-consumer/","text":"// misk-jobqueue / misk.jobqueue / JobConsumer JobConsumer \u00b6 [jvm]\\ interface JobConsumer A JobConsumer allows applications to subscribe to receive incoming jobs Functions \u00b6 Name Summary subscribe [jvm] abstract fun subscribe (queueName: QueueName , handler: JobHandler ) Registers a handler to receive messages. Once registered, the consumer will immediately begin receiving messages from the underlying job queue and dispatch them to the provided handler. A service may only have one subscription outstanding per queue Extensions \u00b6 Name Summary subscribe [jvm] inline fun JobConsumer . subscribe (queueName: QueueName , crossinline handler: ( Job ) -> Unit )","title":"JobConsumer - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-consumer/#jobconsumer","text":"[jvm]\\ interface JobConsumer A JobConsumer allows applications to subscribe to receive incoming jobs","title":"JobConsumer"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-consumer/#functions","text":"Name Summary subscribe [jvm] abstract fun subscribe (queueName: QueueName , handler: JobHandler ) Registers a handler to receive messages. Once registered, the consumer will immediately begin receiving messages from the underlying job queue and dispatch them to the provided handler. A service may only have one subscription outstanding per queue","title":"Functions"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-consumer/#extensions","text":"Name Summary subscribe [jvm] inline fun JobConsumer . subscribe (queueName: QueueName , crossinline handler: ( Job ) -> Unit )","title":"Extensions"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-consumer/subscribe/","text":"// misk-jobqueue / misk.jobqueue / JobConsumer / subscribe subscribe \u00b6 [jvm]\\ abstract fun subscribe (queueName: QueueName , handler: JobHandler ) Registers a handler to receive messages. Once registered, the consumer will immediately begin receiving messages from the underlying job queue and dispatch them to the provided handler. A service may only have one subscription outstanding per queue","title":"subscribe - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-consumer/subscribe/#subscribe","text":"[jvm]\\ abstract fun subscribe (queueName: QueueName , handler: JobHandler ) Registers a handler to receive messages. Once registered, the consumer will immediately begin receiving messages from the underlying job queue and dispatch them to the provided handler. A service may only have one subscription outstanding per queue","title":"subscribe"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-handler/","text":"// misk-jobqueue / misk.jobqueue / JobHandler JobHandler \u00b6 [jvm]\\ interface JobHandler A JobHandler is an application implemented interface that handles jobs received by this service. JobHandler s must explicitly call Job.acknowledge after successful processing to cause the to be deleted from the underlying queue and not redelivered, or can call Job.deadLetter to put the job onto the associated dead letter queue. The jobqueue framework assumes that the underlying queueing system is at-least-once, so handlers must be prepared for the possibility that a job will be delivered more than once (for example if the process fails or the visibility timeout expires after processing but before acknowledgement). Typically this is handled by either storing some sort of ticket in the local database when the job is enqueued and deleting it as part of the application transaction when the job is processed but prior to acknowledgement, or by storing some sort of \u201cprocessed marker\u201d in the local database during job processing and ignoring jobs whose marker is already recorded. Functions \u00b6 Name Summary handleJob [jvm] abstract fun handleJob (job: Job )","title":"JobHandler - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-handler/#jobhandler","text":"[jvm]\\ interface JobHandler A JobHandler is an application implemented interface that handles jobs received by this service. JobHandler s must explicitly call Job.acknowledge after successful processing to cause the to be deleted from the underlying queue and not redelivered, or can call Job.deadLetter to put the job onto the associated dead letter queue. The jobqueue framework assumes that the underlying queueing system is at-least-once, so handlers must be prepared for the possibility that a job will be delivered more than once (for example if the process fails or the visibility timeout expires after processing but before acknowledgement). Typically this is handled by either storing some sort of ticket in the local database when the job is enqueued and deleting it as part of the application transaction when the job is processed but prior to acknowledgement, or by storing some sort of \u201cprocessed marker\u201d in the local database during job processing and ignoring jobs whose marker is already recorded.","title":"JobHandler"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-handler/#functions","text":"Name Summary handleJob [jvm] abstract fun handleJob (job: Job )","title":"Functions"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-handler/handle-job/","text":"// misk-jobqueue / misk.jobqueue / JobHandler / handleJob handleJob \u00b6 [jvm]\\ abstract fun handleJob (job: Job )","title":"handleJob - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-handler/handle-job/#handlejob","text":"[jvm]\\ abstract fun handleJob (job: Job )","title":"handleJob"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/","text":"// misk-jobqueue / misk.jobqueue / JobQueue JobQueue \u00b6 [jvm]\\ interface JobQueue A JobQueue enqueues jobs for asynchronous execution, possibly in another process. Jobs are enqueued immediately and may involve an RPC to the underlying job queueing system, so should not be done from within a database transaction. Applications that need to enqueue jobs atomically with a local database transaction should use the TransactionalJobQueue interface Types \u00b6 Name Summary BatchEnqueueException [jvm] data class BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >) : Exception Exception Data class containing the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned Companion [jvm] object Companion EnqueueErrorResult [jvm] data class EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String ) Data class containing the error result of a failed job enqueue JobRequest [jvm] data class JobRequest (body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) Data class containing the necessary information to be enqueued in a batch enqueue Functions \u00b6 Name Summary batchEnqueue [jvm] abstract fun batchEnqueue (queueName: QueueName , jobs: List < JobQueue.JobRequest >) throws BatchEnqueueException contains the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned enqueue [jvm] open fun enqueue (queueName: QueueName , body: String , deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) [jvm] abstract fun enqueue (queueName: QueueName , body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueue a job onto the given queue, along with a set of job attributes.","title":"JobQueue - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/#jobqueue","text":"[jvm]\\ interface JobQueue A JobQueue enqueues jobs for asynchronous execution, possibly in another process. Jobs are enqueued immediately and may involve an RPC to the underlying job queueing system, so should not be done from within a database transaction. Applications that need to enqueue jobs atomically with a local database transaction should use the TransactionalJobQueue interface","title":"JobQueue"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/#types","text":"Name Summary BatchEnqueueException [jvm] data class BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >) : Exception Exception Data class containing the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned Companion [jvm] object Companion EnqueueErrorResult [jvm] data class EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String ) Data class containing the error result of a failed job enqueue JobRequest [jvm] data class JobRequest (body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) Data class containing the necessary information to be enqueued in a batch enqueue","title":"Types"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/#functions","text":"Name Summary batchEnqueue [jvm] abstract fun batchEnqueue (queueName: QueueName , jobs: List < JobQueue.JobRequest >) throws BatchEnqueueException contains the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned enqueue [jvm] open fun enqueue (queueName: QueueName , body: String , deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) [jvm] abstract fun enqueue (queueName: QueueName , body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueue a job onto the given queue, along with a set of job attributes.","title":"Functions"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/batch-enqueue/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / batchEnqueue batchEnqueue \u00b6 [jvm]\\ abstract fun batchEnqueue (queueName: QueueName , jobs: List < JobQueue.JobRequest >) throws BatchEnqueueException contains the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned","title":"batchEnqueue - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/batch-enqueue/#batchenqueue","text":"[jvm]\\ abstract fun batchEnqueue (queueName: QueueName , jobs: List < JobQueue.JobRequest >) throws BatchEnqueueException contains the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned","title":"batchEnqueue"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/enqueue/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / enqueue enqueue \u00b6 [jvm]\\ open fun enqueue (queueName: QueueName , body: String , deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) [jvm]\\ abstract fun enqueue (queueName: QueueName , body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueue a job onto the given queue, along with a set of job attributes. Parameters \u00b6 jvm queueName The name of the queue on which to place the job. body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body. idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations of both JobQueue and JobConsumer are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandler s). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. Note that depending on implementation, there may be an upper limit to this value. For instance, SQS implementation limits deliveryDelay to 900s (15m). If a longer delay is required by applications, use the TransactionalJobQueue interface instead. attributes Arbitrary contextual attributes associated with the job. Implementations may limit the number of attributes per message.","title":"enqueue - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/enqueue/#enqueue","text":"[jvm]\\ open fun enqueue (queueName: QueueName , body: String , deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) [jvm]\\ abstract fun enqueue (queueName: QueueName , body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueue a job onto the given queue, along with a set of job attributes.","title":"enqueue"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/enqueue/#parameters","text":"jvm queueName The name of the queue on which to place the job. body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body. idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations of both JobQueue and JobConsumer are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandler s). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. Note that depending on implementation, there may be an upper limit to this value. For instance, SQS implementation limits deliveryDelay to 900s (15m). If a longer delay is required by applications, use the TransactionalJobQueue interface instead. attributes Arbitrary contextual attributes associated with the job. Implementations may limit the number of attributes per message.","title":"Parameters"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / BatchEnqueueException BatchEnqueueException \u00b6 [jvm]\\ data class BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >) : Exception Exception Data class containing the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned Constructors \u00b6 BatchEnqueueException [jvm] fun BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? failed [jvm] val failed : List < JobQueue.EnqueueErrorResult > message [jvm] open val message : String ? queueName [jvm] val queueName : QueueName successful [jvm] val successful : List < String >","title":"BatchEnqueueException - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/#batchenqueueexception","text":"[jvm]\\ data class BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >) : Exception Exception Data class containing the list of jobs successfully enqueued and the list of jobs that could not be enqueued. See EnqueueErrorResult for more details on the error information returned","title":"BatchEnqueueException"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/#constructors","text":"BatchEnqueueException [jvm] fun BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >)","title":"Constructors"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? failed [jvm] val failed : List < JobQueue.EnqueueErrorResult > message [jvm] open val message : String ? queueName [jvm] val queueName : QueueName successful [jvm] val successful : List < String >","title":"Properties"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/-batch-enqueue-exception/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / BatchEnqueueException / BatchEnqueueException BatchEnqueueException \u00b6 [jvm]\\ fun BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >)","title":"BatchEnqueueException - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/-batch-enqueue-exception/#batchenqueueexception","text":"[jvm]\\ fun BatchEnqueueException (queueName: QueueName , successful: List < String >, failed: List < JobQueue.EnqueueErrorResult >)","title":"BatchEnqueueException"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/failed/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / BatchEnqueueException / failed failed \u00b6 [jvm]\\ val failed : List < JobQueue.EnqueueErrorResult >","title":"failed - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/failed/#failed","text":"[jvm]\\ val failed : List < JobQueue.EnqueueErrorResult >","title":"failed"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/queue-name/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / BatchEnqueueException / queueName queueName \u00b6 [jvm]\\ val queueName : QueueName","title":"queueName - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/queue-name/#queuename","text":"[jvm]\\ val queueName : QueueName","title":"queueName"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/successful/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / BatchEnqueueException / successful successful \u00b6 [jvm]\\ val successful : List < String >","title":"successful - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-batch-enqueue-exception/successful/#successful","text":"[jvm]\\ val successful : List < String >","title":"successful"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-companion/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary SQS_MAX_BATCH_ENQUEUE_JOB_SIZE [jvm] const val SQS_MAX_BATCH_ENQUEUE_JOB_SIZE : Int = 10","title":"Companion - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-companion/#properties","text":"Name Summary SQS_MAX_BATCH_ENQUEUE_JOB_SIZE [jvm] const val SQS_MAX_BATCH_ENQUEUE_JOB_SIZE : Int = 10","title":"Properties"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-companion/-s-q-s_-m-a-x_-b-a-t-c-h_-e-n-q-u-e-u-e_-j-o-b_-s-i-z-e/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / Companion / SQS_MAX_BATCH_ENQUEUE_JOB_SIZE SQS_MAX_BATCH_ENQUEUE_JOB_SIZE \u00b6 [jvm]\\ const val SQS_MAX_BATCH_ENQUEUE_JOB_SIZE : Int = 10","title":"SQS_MAX_BATCH_ENQUEUE_JOB_SIZE - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-companion/-s-q-s_-m-a-x_-b-a-t-c-h_-e-n-q-u-e-u-e_-j-o-b_-s-i-z-e/#sqs_max_batch_enqueue_job_size","text":"[jvm]\\ const val SQS_MAX_BATCH_ENQUEUE_JOB_SIZE : Int = 10","title":"SQS_MAX_BATCH_ENQUEUE_JOB_SIZE"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / EnqueueErrorResult EnqueueErrorResult \u00b6 [jvm]\\ data class EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String ) Data class containing the error result of a failed job enqueue Parameters \u00b6 jvm idempotenceKey Client-assigned unique key for the failed enqueued job clientError Indicates whether the error is due to a clientside error code Error code returned by the JobQueue service message Error message returned by the JobQueue service Constructors \u00b6 EnqueueErrorResult [jvm] fun EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String ) Properties \u00b6 Name Summary clientError [jvm] val clientError : Boolean code [jvm] val code : String idempotenceKey [jvm] val idempotenceKey : String message [jvm] val message : String","title":"EnqueueErrorResult - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/#enqueueerrorresult","text":"[jvm]\\ data class EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String ) Data class containing the error result of a failed job enqueue","title":"EnqueueErrorResult"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/#parameters","text":"jvm idempotenceKey Client-assigned unique key for the failed enqueued job clientError Indicates whether the error is due to a clientside error code Error code returned by the JobQueue service message Error message returned by the JobQueue service","title":"Parameters"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/#constructors","text":"EnqueueErrorResult [jvm] fun EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String )","title":"Constructors"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/#properties","text":"Name Summary clientError [jvm] val clientError : Boolean code [jvm] val code : String idempotenceKey [jvm] val idempotenceKey : String message [jvm] val message : String","title":"Properties"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/-enqueue-error-result/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / EnqueueErrorResult / EnqueueErrorResult EnqueueErrorResult \u00b6 [jvm]\\ fun EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String ) Parameters \u00b6 jvm idempotenceKey Client-assigned unique key for the failed enqueued job clientError Indicates whether the error is due to a clientside error code Error code returned by the JobQueue service message Error message returned by the JobQueue service","title":"EnqueueErrorResult - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/-enqueue-error-result/#enqueueerrorresult","text":"[jvm]\\ fun EnqueueErrorResult (idempotenceKey: String , clientError: Boolean , code: String , message: String )","title":"EnqueueErrorResult"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/-enqueue-error-result/#parameters","text":"jvm idempotenceKey Client-assigned unique key for the failed enqueued job clientError Indicates whether the error is due to a clientside error code Error code returned by the JobQueue service message Error message returned by the JobQueue service","title":"Parameters"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/client-error/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / EnqueueErrorResult / clientError clientError \u00b6 [jvm]\\ val clientError : Boolean","title":"clientError - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/client-error/#clienterror","text":"[jvm]\\ val clientError : Boolean","title":"clientError"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/code/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / EnqueueErrorResult / code code \u00b6 [jvm]\\ val code : String","title":"code - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/code/#code","text":"[jvm]\\ val code : String","title":"code"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/idempotence-key/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / EnqueueErrorResult / idempotenceKey idempotenceKey \u00b6 [jvm]\\ val idempotenceKey : String","title":"idempotenceKey - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/idempotence-key/#idempotencekey","text":"[jvm]\\ val idempotenceKey : String","title":"idempotenceKey"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/message/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / EnqueueErrorResult / message message \u00b6 [jvm]\\ val message : String","title":"message - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-enqueue-error-result/message/#message","text":"[jvm]\\ val message : String","title":"message"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / JobRequest JobRequest \u00b6 [jvm]\\ data class JobRequest (body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) Data class containing the necessary information to be enqueued in a batch enqueue Parameters \u00b6 jvm body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body. idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations of both JobQueue and JobConsumer are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandler s). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. Note that depending on implementation, there may be an upper limit to this value. For instance, SQS implementation limits deliveryDelay to 900s (15m). attributes Arbitrary contextual attributes associated with the job. Implementations may limit the number of attributes per message. Constructors \u00b6 JobRequest [jvm] fun JobRequest (body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Properties \u00b6 Name Summary attributes [jvm] val attributes : Map < String , String > body [jvm] val body : String deliveryDelay [jvm] val deliveryDelay : Duration ? = null idempotenceKey [jvm] val idempotenceKey : String","title":"JobRequest - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/#jobrequest","text":"[jvm]\\ data class JobRequest (body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) Data class containing the necessary information to be enqueued in a batch enqueue","title":"JobRequest"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/#parameters","text":"jvm body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body. idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations of both JobQueue and JobConsumer are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandler s). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. Note that depending on implementation, there may be an upper limit to this value. For instance, SQS implementation limits deliveryDelay to 900s (15m). attributes Arbitrary contextual attributes associated with the job. Implementations may limit the number of attributes per message.","title":"Parameters"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/#constructors","text":"JobRequest [jvm] fun JobRequest (body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf())","title":"Constructors"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/#properties","text":"Name Summary attributes [jvm] val attributes : Map < String , String > body [jvm] val body : String deliveryDelay [jvm] val deliveryDelay : Duration ? = null idempotenceKey [jvm] val idempotenceKey : String","title":"Properties"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/-job-request/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / JobRequest / JobRequest JobRequest \u00b6 [jvm]\\ fun JobRequest (body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Parameters \u00b6 jvm body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body. idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations of both JobQueue and JobConsumer are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandler s). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. Note that depending on implementation, there may be an upper limit to this value. For instance, SQS implementation limits deliveryDelay to 900s (15m). attributes Arbitrary contextual attributes associated with the job. Implementations may limit the number of attributes per message.","title":"JobRequest - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/-job-request/#jobrequest","text":"[jvm]\\ fun JobRequest (body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf())","title":"JobRequest"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/-job-request/#parameters","text":"jvm body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body. idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations of both JobQueue and JobConsumer are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandler s). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. Note that depending on implementation, there may be an upper limit to this value. For instance, SQS implementation limits deliveryDelay to 900s (15m). attributes Arbitrary contextual attributes associated with the job. Implementations may limit the number of attributes per message.","title":"Parameters"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/attributes/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / JobRequest / attributes attributes \u00b6 [jvm]\\ val attributes : Map < String , String >","title":"attributes - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/attributes/#attributes","text":"[jvm]\\ val attributes : Map < String , String >","title":"attributes"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/body/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / JobRequest / body body \u00b6 [jvm]\\ val body : String","title":"body - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/body/#body","text":"[jvm]\\ val body : String","title":"body"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/delivery-delay/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / JobRequest / deliveryDelay deliveryDelay \u00b6 [jvm]\\ val deliveryDelay : Duration ? = null","title":"deliveryDelay - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/delivery-delay/#deliverydelay","text":"[jvm]\\ val deliveryDelay : Duration ? = null","title":"deliveryDelay"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/idempotence-key/","text":"// misk-jobqueue / misk.jobqueue / JobQueue / JobRequest / idempotenceKey idempotenceKey \u00b6 [jvm]\\ val idempotenceKey : String","title":"idempotenceKey - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-job-queue/-job-request/idempotence-key/#idempotencekey","text":"[jvm]\\ val idempotenceKey : String","title":"idempotenceKey"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-queue-name/","text":"// misk-jobqueue / misk.jobqueue / QueueName QueueName \u00b6 [jvm]\\ data class QueueName (value: String ) Properties \u00b6 Name Summary value [jvm] val value : String","title":"QueueName - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-queue-name/#queuename","text":"[jvm]\\ data class QueueName (value: String )","title":"QueueName"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-queue-name/#properties","text":"Name Summary value [jvm] val value : String","title":"Properties"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-queue-name/-queue-name/","text":"// misk-jobqueue / misk.jobqueue / QueueName / QueueName QueueName \u00b6 [jvm]\\ fun QueueName (value: String )","title":"QueueName - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-queue-name/-queue-name/#queuename","text":"[jvm]\\ fun QueueName (value: String )","title":"QueueName"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-queue-name/value/","text":"// misk-jobqueue / misk.jobqueue / QueueName / value value \u00b6 [jvm]\\ val value : String","title":"value - Misk"},{"location":"0.x/misk-jobqueue/misk.jobqueue/-queue-name/value/#value","text":"[jvm]\\ val value : String","title":"value"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/","text":"// misk-jobqueue-testing / misk.jobqueue Package misk.jobqueue \u00b6 Types \u00b6 Name Summary FakeJob [jvm] data class FakeJob (queueName: QueueName, id: String , idempotenceKey: String , body: String , attributes: Map < String , String >, enqueuedAt: Instant , deliveryDelay: Duration ?) : Job, Comparable < FakeJob > FakeJobHandlerModule [jvm] class FakeJobHandlerModule < T : JobHandler> : KAbstractModule FakeJobQueue [jvm] @Singleton class FakeJobQueue @Injectconstructor(clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator) : JobQueue, TransactionalJobQueue A fake implementation of JobQueue and FakeTransactionalJobQueue intended for testing. FakeJobQueueModule [jvm] class FakeJobQueueModule : KAbstractModule","title":"Package misk.jobqueue - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/#package-miskjobqueue","text":"","title":"Package misk.jobqueue"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/#types","text":"Name Summary FakeJob [jvm] data class FakeJob (queueName: QueueName, id: String , idempotenceKey: String , body: String , attributes: Map < String , String >, enqueuedAt: Instant , deliveryDelay: Duration ?) : Job, Comparable < FakeJob > FakeJobHandlerModule [jvm] class FakeJobHandlerModule < T : JobHandler> : KAbstractModule FakeJobQueue [jvm] @Singleton class FakeJobQueue @Injectconstructor(clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator) : JobQueue, TransactionalJobQueue A fake implementation of JobQueue and FakeTransactionalJobQueue intended for testing. FakeJobQueueModule [jvm] class FakeJobQueueModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob FakeJob \u00b6 [jvm]\\ data class FakeJob (queueName: QueueName, id: String , idempotenceKey: String , body: String , attributes: Map < String , String >, enqueuedAt: Instant , deliveryDelay: Duration ?) : Job, Comparable < FakeJob > Functions \u00b6 Name Summary acknowledge [jvm] open override fun acknowledge () compareTo [jvm] open operator override fun compareTo (other: FakeJob ): Int deadLetter [jvm] open override fun deadLetter () Properties \u00b6 Name Summary acknowledged [jvm] var acknowledged : Boolean = false attributes [jvm] open override val attributes : Map < String , String > body [jvm] open override val body : String deadLettered [jvm] var deadLettered : Boolean = false deliverAt [jvm] val deliverAt : Instant deliveryDelay [jvm] val deliveryDelay : Duration ? = null enqueuedAt [jvm] val enqueuedAt : Instant id [jvm] open override val id : String idempotenceKey [jvm] open override val idempotenceKey : String queueName [jvm] open override val queueName : QueueName","title":"FakeJob - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/#fakejob","text":"[jvm]\\ data class FakeJob (queueName: QueueName, id: String , idempotenceKey: String , body: String , attributes: Map < String , String >, enqueuedAt: Instant , deliveryDelay: Duration ?) : Job, Comparable < FakeJob >","title":"FakeJob"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/#functions","text":"Name Summary acknowledge [jvm] open override fun acknowledge () compareTo [jvm] open operator override fun compareTo (other: FakeJob ): Int deadLetter [jvm] open override fun deadLetter ()","title":"Functions"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/#properties","text":"Name Summary acknowledged [jvm] var acknowledged : Boolean = false attributes [jvm] open override val attributes : Map < String , String > body [jvm] open override val body : String deadLettered [jvm] var deadLettered : Boolean = false deliverAt [jvm] val deliverAt : Instant deliveryDelay [jvm] val deliveryDelay : Duration ? = null enqueuedAt [jvm] val enqueuedAt : Instant id [jvm] open override val id : String idempotenceKey [jvm] open override val idempotenceKey : String queueName [jvm] open override val queueName : QueueName","title":"Properties"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/-fake-job/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / FakeJob FakeJob \u00b6 [jvm]\\ fun FakeJob (queueName: QueueName, id: String , idempotenceKey: String , body: String , attributes: Map < String , String >, enqueuedAt: Instant , deliveryDelay: Duration ? = null)","title":"FakeJob - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/-fake-job/#fakejob","text":"[jvm]\\ fun FakeJob (queueName: QueueName, id: String , idempotenceKey: String , body: String , attributes: Map < String , String >, enqueuedAt: Instant , deliveryDelay: Duration ? = null)","title":"FakeJob"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/acknowledge/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / acknowledge acknowledge \u00b6 [jvm]\\ open override fun acknowledge ()","title":"acknowledge - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/acknowledge/#acknowledge","text":"[jvm]\\ open override fun acknowledge ()","title":"acknowledge"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/acknowledged/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / acknowledged acknowledged \u00b6 [jvm]\\ var acknowledged : Boolean = false","title":"acknowledged - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/acknowledged/#acknowledged","text":"[jvm]\\ var acknowledged : Boolean = false","title":"acknowledged"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/attributes/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / attributes attributes \u00b6 [jvm]\\ open override val attributes : Map < String , String >","title":"attributes - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/attributes/#attributes","text":"[jvm]\\ open override val attributes : Map < String , String >","title":"attributes"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/body/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / body body \u00b6 [jvm]\\ open override val body : String","title":"body - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/body/#body","text":"[jvm]\\ open override val body : String","title":"body"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/compare-to/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: FakeJob ): Int","title":"compareTo - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: FakeJob ): Int","title":"compareTo"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/dead-letter/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / deadLetter deadLetter \u00b6 [jvm]\\ open override fun deadLetter ()","title":"deadLetter - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/dead-letter/#deadletter","text":"[jvm]\\ open override fun deadLetter ()","title":"deadLetter"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/dead-lettered/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / deadLettered deadLettered \u00b6 [jvm]\\ var deadLettered : Boolean = false","title":"deadLettered - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/dead-lettered/#deadlettered","text":"[jvm]\\ var deadLettered : Boolean = false","title":"deadLettered"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/deliver-at/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / deliverAt deliverAt \u00b6 [jvm]\\ val deliverAt : Instant","title":"deliverAt - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/deliver-at/#deliverat","text":"[jvm]\\ val deliverAt : Instant","title":"deliverAt"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/delivery-delay/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / deliveryDelay deliveryDelay \u00b6 [jvm]\\ val deliveryDelay : Duration ? = null","title":"deliveryDelay - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/delivery-delay/#deliverydelay","text":"[jvm]\\ val deliveryDelay : Duration ? = null","title":"deliveryDelay"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/enqueued-at/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / enqueuedAt enqueuedAt \u00b6 [jvm]\\ val enqueuedAt : Instant","title":"enqueuedAt - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/enqueued-at/#enqueuedat","text":"[jvm]\\ val enqueuedAt : Instant","title":"enqueuedAt"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/id/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / id id \u00b6 [jvm]\\ open override val id : String","title":"id - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/id/#id","text":"[jvm]\\ open override val id : String","title":"id"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/idempotence-key/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / idempotenceKey idempotenceKey \u00b6 [jvm]\\ open override val idempotenceKey : String","title":"idempotenceKey - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/idempotence-key/#idempotencekey","text":"[jvm]\\ open override val idempotenceKey : String","title":"idempotenceKey"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/queue-name/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJob / queueName queueName \u00b6 [jvm]\\ open override val queueName : QueueName","title":"queueName - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job/queue-name/#queuename","text":"[jvm]\\ open override val queueName : QueueName","title":"queueName"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobHandlerModule FakeJobHandlerModule \u00b6 [jvm]\\ class FakeJobHandlerModule < T : JobHandler> : KAbstractModule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeJobHandlerModule - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/#fakejobhandlermodule","text":"[jvm]\\ class FakeJobHandlerModule < T : JobHandler> : KAbstractModule","title":"FakeJobHandlerModule"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/-companion/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobHandlerModule / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] inline fun < T : JobHandler> create (queueName: QueueName): FakeJobHandlerModule < T > @ JvmStatic fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >): FakeJobHandlerModule < T > [jvm] fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >): FakeJobHandlerModule < T > Returns a module that registers a handler for a fake job queue.","title":"Companion - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/-companion/#functions","text":"Name Summary create [jvm] inline fun < T : JobHandler> create (queueName: QueueName): FakeJobHandlerModule < T > @ JvmStatic fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >): FakeJobHandlerModule < T > [jvm] fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >): FakeJobHandlerModule < T > Returns a module that registers a handler for a fake job queue.","title":"Functions"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/-companion/create/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobHandlerModule / Companion / create create \u00b6 [jvm]\\ inline fun < T : JobHandler> create (queueName: QueueName): FakeJobHandlerModule < T > @ JvmStatic fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >): FakeJobHandlerModule < T > [jvm]\\ fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >): FakeJobHandlerModule < T > Returns a module that registers a handler for a fake job queue.","title":"create - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-handler-module/-companion/create/#create","text":"[jvm]\\ inline fun < T : JobHandler> create (queueName: QueueName): FakeJobHandlerModule < T > @ JvmStatic fun < T : JobHandler> create (queueName: QueueName, handlerClass: Class < T >): FakeJobHandlerModule < T > [jvm]\\ fun < T : JobHandler> create (queueName: QueueName, handlerClass: KClass < T >): FakeJobHandlerModule < T > Returns a module that registers a handler for a fake job queue.","title":"create"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue FakeJobQueue \u00b6 [jvm]\\ @Singleton class FakeJobQueue @Injectconstructor(clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator) : JobQueue, TransactionalJobQueue A fake implementation of JobQueue and FakeTransactionalJobQueue intended for testing. A FakeJobQueue adds helper methods to inspect the jobs in the queue and to trigger processing. Example usage might look like this: callApiThatEnqueuesJob()\\ assertJobIsCorrect(fakeJobQueue.peekJobs(MY_QUEUE).first())\\ \\ fakeJobQueue.handleJobs()\\ assertJobSideEffects() Constructors \u00b6 FakeJobQueue [jvm] @Inject fun FakeJobQueue (clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator) Functions \u00b6 Name Summary batchEnqueue [jvm] open override fun batchEnqueue (queueName: QueueName, jobs: List <JobQueue.JobRequest>) enqueue [jvm] open fun enqueue (queueName: QueueName, body: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) handleJob [jvm] fun handleJob (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled. handleJobs [jvm] fun handleJobs (assertAcknowledged: Boolean = true, considerDelays: Boolean = false): List < FakeJob > fun handleJobs (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1, considerDelays: Boolean = false): List < FakeJob > Returns all jobs that were handled. peekDeadlettered [jvm] fun peekDeadlettered (queueName: QueueName): List <Job> peekJobs [jvm] fun peekJobs (queueName: QueueName): List <Job> reprocessDeadlettered [jvm] fun reprocessDeadlettered (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled. [jvm] fun reprocessDeadlettered (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1): List < FakeJob > Returns all jobs that were handled.","title":"FakeJobQueue - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/#fakejobqueue","text":"[jvm]\\ @Singleton class FakeJobQueue @Injectconstructor(clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator) : JobQueue, TransactionalJobQueue A fake implementation of JobQueue and FakeTransactionalJobQueue intended for testing. A FakeJobQueue adds helper methods to inspect the jobs in the queue and to trigger processing. Example usage might look like this: callApiThatEnqueuesJob()\\ assertJobIsCorrect(fakeJobQueue.peekJobs(MY_QUEUE).first())\\ \\ fakeJobQueue.handleJobs()\\ assertJobSideEffects()","title":"FakeJobQueue"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/#constructors","text":"FakeJobQueue [jvm] @Inject fun FakeJobQueue (clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator)","title":"Constructors"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/#functions","text":"Name Summary batchEnqueue [jvm] open override fun batchEnqueue (queueName: QueueName, jobs: List <JobQueue.JobRequest>) enqueue [jvm] open fun enqueue (queueName: QueueName, body: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) handleJob [jvm] fun handleJob (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled. handleJobs [jvm] fun handleJobs (assertAcknowledged: Boolean = true, considerDelays: Boolean = false): List < FakeJob > fun handleJobs (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1, considerDelays: Boolean = false): List < FakeJob > Returns all jobs that were handled. peekDeadlettered [jvm] fun peekDeadlettered (queueName: QueueName): List <Job> peekJobs [jvm] fun peekJobs (queueName: QueueName): List <Job> reprocessDeadlettered [jvm] fun reprocessDeadlettered (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled. [jvm] fun reprocessDeadlettered (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1): List < FakeJob > Returns all jobs that were handled.","title":"Functions"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/-fake-job-queue/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / FakeJobQueue FakeJobQueue \u00b6 [jvm]\\ @Inject fun FakeJobQueue (clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator)","title":"FakeJobQueue - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/-fake-job-queue/#fakejobqueue","text":"[jvm]\\ @Inject fun FakeJobQueue (clock: Clock , jobHandlers: Provider< Map <QueueName, JobHandler>>, tokenGenerator: TokenGenerator)","title":"FakeJobQueue"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/batch-enqueue/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / batchEnqueue batchEnqueue \u00b6 [jvm]\\ open override fun batchEnqueue (queueName: QueueName, jobs: List <JobQueue.JobRequest>)","title":"batchEnqueue - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/batch-enqueue/#batchenqueue","text":"[jvm]\\ open override fun batchEnqueue (queueName: QueueName, jobs: List <JobQueue.JobRequest>)","title":"batchEnqueue"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/enqueue/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / enqueue enqueue \u00b6 [jvm]\\ open override fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >)","title":"enqueue - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/enqueue/#enqueue","text":"[jvm]\\ open override fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >) open override fun enqueue (queueName: QueueName, body: String , idempotenceKey: String , deliveryDelay: Duration ?, attributes: Map < String , String >)","title":"enqueue"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/handle-job/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / handleJob handleJob \u00b6 [jvm]\\ fun handleJob (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled.","title":"handleJob - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/handle-job/#handlejob","text":"[jvm]\\ fun handleJob (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled.","title":"handleJob"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/handle-jobs/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / handleJobs handleJobs \u00b6 [jvm]\\ fun handleJobs (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1, considerDelays: Boolean = false): List < FakeJob > fun handleJobs (assertAcknowledged: Boolean = true, considerDelays: Boolean = false): List < FakeJob > Returns all jobs that were handled.","title":"handleJobs - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/handle-jobs/#handlejobs","text":"[jvm]\\ fun handleJobs (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1, considerDelays: Boolean = false): List < FakeJob > fun handleJobs (assertAcknowledged: Boolean = true, considerDelays: Boolean = false): List < FakeJob > Returns all jobs that were handled.","title":"handleJobs"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/peek-deadlettered/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / peekDeadlettered peekDeadlettered \u00b6 [jvm]\\ fun peekDeadlettered (queueName: QueueName): List <Job>","title":"peekDeadlettered - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/peek-deadlettered/#peekdeadlettered","text":"[jvm]\\ fun peekDeadlettered (queueName: QueueName): List <Job>","title":"peekDeadlettered"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/peek-jobs/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / peekJobs peekJobs \u00b6 [jvm]\\ fun peekJobs (queueName: QueueName): List <Job>","title":"peekJobs - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/peek-jobs/#peekjobs","text":"[jvm]\\ fun peekJobs (queueName: QueueName): List <Job>","title":"peekJobs"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/reprocess-deadlettered/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueue / reprocessDeadlettered reprocessDeadlettered \u00b6 [jvm]\\ fun reprocessDeadlettered (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1): List < FakeJob > Returns all jobs that were handled. [jvm]\\ fun reprocessDeadlettered (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled.","title":"reprocessDeadlettered - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue/reprocess-deadlettered/#reprocessdeadlettered","text":"[jvm]\\ fun reprocessDeadlettered (queueName: QueueName, assertAcknowledged: Boolean = true, retries: Int = 1): List < FakeJob > Returns all jobs that were handled. [jvm]\\ fun reprocessDeadlettered (job: Job, assertAcknowledged: Boolean = true, retries: Int = 1): Boolean Returns true if job was handled.","title":"reprocessDeadlettered"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue-module/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueueModule FakeJobQueueModule \u00b6 [jvm]\\ class FakeJobQueueModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeJobQueueModule - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue-module/#fakejobqueuemodule","text":"[jvm]\\ class FakeJobQueueModule : KAbstractModule","title":"FakeJobQueueModule"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue-module/-fake-job-queue-module/","text":"// misk-jobqueue-testing / misk.jobqueue / FakeJobQueueModule / FakeJobQueueModule FakeJobQueueModule \u00b6 [jvm]\\ fun FakeJobQueueModule ()","title":"FakeJobQueueModule - Misk"},{"location":"0.x/misk-jobqueue-testing/misk.jobqueue/-fake-job-queue-module/-fake-job-queue-module/#fakejobqueuemodule","text":"[jvm]\\ fun FakeJobQueueModule ()","title":"FakeJobQueueModule"},{"location":"0.x/misk-jooq/misk.jooq/","text":"// misk-jooq / misk.jooq Package misk.jooq \u00b6 Types \u00b6 Name Summary JooqHealthCheck [jvm] class JooqHealthCheck (qualifier: KClass <out Annotation >, dataSourceProvider: Provider<out Service>, jooqTransacterProvider: Provider< JooqTransacter >, clock: Clock ) : HealthCheck JooqModule [jvm] class JooqModule (qualifier: KClass <out Annotation >, dataSourceClusterConfig: DataSourceClusterConfig, jooqCodeGenSchemaName: String , databasePool: DatabasePool, readerQualifier: KClass <out Annotation >?, jooqTimestampRecordListenerOptions: JooqTimestampRecordListenerOptions , jooqConfigExtension: Configuration.() -> Unit ) : KAbstractModule JooqSession [jvm] class JooqSession (ctx: DSLContext) : Session JooqTransacter [jvm] class JooqTransacter (dslContext: DSLContext) Functions \u00b6 Name Summary fetchOneOrNull [jvm] fun < RECORD : Record?> ResultQuery< RECORD >. fetchOneOrNull (): RECORD ? getOrThrow [jvm] fun < ANY > ANY ?. getOrThrow (): ANY ifNotNull [jvm] inline fun < ANY > ANY ?. ifNotNull (condition: ( ANY ) -> Condition): Condition toInstant [jvm] fun LocalDateTime . toInstant (): Instant toLocalDateTime [jvm] fun Instant . toLocalDateTime (): LocalDateTime","title":"Package misk.jooq - Misk"},{"location":"0.x/misk-jooq/misk.jooq/#package-miskjooq","text":"","title":"Package misk.jooq"},{"location":"0.x/misk-jooq/misk.jooq/#types","text":"Name Summary JooqHealthCheck [jvm] class JooqHealthCheck (qualifier: KClass <out Annotation >, dataSourceProvider: Provider<out Service>, jooqTransacterProvider: Provider< JooqTransacter >, clock: Clock ) : HealthCheck JooqModule [jvm] class JooqModule (qualifier: KClass <out Annotation >, dataSourceClusterConfig: DataSourceClusterConfig, jooqCodeGenSchemaName: String , databasePool: DatabasePool, readerQualifier: KClass <out Annotation >?, jooqTimestampRecordListenerOptions: JooqTimestampRecordListenerOptions , jooqConfigExtension: Configuration.() -> Unit ) : KAbstractModule JooqSession [jvm] class JooqSession (ctx: DSLContext) : Session JooqTransacter [jvm] class JooqTransacter (dslContext: DSLContext)","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq/#functions","text":"Name Summary fetchOneOrNull [jvm] fun < RECORD : Record?> ResultQuery< RECORD >. fetchOneOrNull (): RECORD ? getOrThrow [jvm] fun < ANY > ANY ?. getOrThrow (): ANY ifNotNull [jvm] inline fun < ANY > ANY ?. ifNotNull (condition: ( ANY ) -> Condition): Condition toInstant [jvm] fun LocalDateTime . toInstant (): Instant toLocalDateTime [jvm] fun Instant . toLocalDateTime (): LocalDateTime","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq/fetch-one-or-null/","text":"// misk-jooq / misk.jooq / fetchOneOrNull fetchOneOrNull \u00b6 [jvm]\\ fun < RECORD : Record?> ResultQuery< RECORD >. fetchOneOrNull (): RECORD ?","title":"fetchOneOrNull - Misk"},{"location":"0.x/misk-jooq/misk.jooq/fetch-one-or-null/#fetchoneornull","text":"[jvm]\\ fun < RECORD : Record?> ResultQuery< RECORD >. fetchOneOrNull (): RECORD ?","title":"fetchOneOrNull"},{"location":"0.x/misk-jooq/misk.jooq/get-or-throw/","text":"// misk-jooq / misk.jooq / getOrThrow getOrThrow \u00b6 [jvm]\\ fun < ANY > ANY ?. getOrThrow (): ANY","title":"getOrThrow - Misk"},{"location":"0.x/misk-jooq/misk.jooq/get-or-throw/#getorthrow","text":"[jvm]\\ fun < ANY > ANY ?. getOrThrow (): ANY","title":"getOrThrow"},{"location":"0.x/misk-jooq/misk.jooq/if-not-null/","text":"// misk-jooq / misk.jooq / ifNotNull ifNotNull \u00b6 [jvm]\\ inline fun < ANY > ANY ?. ifNotNull (condition: ( ANY ) -> Condition): Condition","title":"ifNotNull - Misk"},{"location":"0.x/misk-jooq/misk.jooq/if-not-null/#ifnotnull","text":"[jvm]\\ inline fun < ANY > ANY ?. ifNotNull (condition: ( ANY ) -> Condition): Condition","title":"ifNotNull"},{"location":"0.x/misk-jooq/misk.jooq/to-instant/","text":"// misk-jooq / misk.jooq / toInstant toInstant \u00b6 [jvm]\\ fun LocalDateTime . toInstant (): Instant","title":"toInstant - Misk"},{"location":"0.x/misk-jooq/misk.jooq/to-instant/#toinstant","text":"[jvm]\\ fun LocalDateTime . toInstant (): Instant","title":"toInstant"},{"location":"0.x/misk-jooq/misk.jooq/to-local-date-time/","text":"// misk-jooq / misk.jooq / toLocalDateTime toLocalDateTime \u00b6 [jvm]\\ fun Instant . toLocalDateTime (): LocalDateTime","title":"toLocalDateTime - Misk"},{"location":"0.x/misk-jooq/misk.jooq/to-local-date-time/#tolocaldatetime","text":"[jvm]\\ fun Instant . toLocalDateTime (): LocalDateTime","title":"toLocalDateTime"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/","text":"// misk-jooq / misk.jooq / JooqHealthCheck JooqHealthCheck \u00b6 [jvm]\\ class JooqHealthCheck (qualifier: KClass <out Annotation >, dataSourceProvider: Provider<out Service>, jooqTransacterProvider: Provider< JooqTransacter >, clock: Clock ) : HealthCheck Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary status [jvm] open override fun status (): HealthStatus","title":"JooqHealthCheck - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/#jooqhealthcheck","text":"[jvm]\\ class JooqHealthCheck (qualifier: KClass <out Annotation >, dataSourceProvider: Provider<out Service>, jooqTransacterProvider: Provider< JooqTransacter >, clock: Clock ) : HealthCheck","title":"JooqHealthCheck"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/#functions","text":"Name Summary status [jvm] open override fun status (): HealthStatus","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-jooq-health-check/","text":"// misk-jooq / misk.jooq / JooqHealthCheck / JooqHealthCheck JooqHealthCheck \u00b6 [jvm]\\ fun JooqHealthCheck (qualifier: KClass <out Annotation >, dataSourceProvider: Provider<out Service>, jooqTransacterProvider: Provider< JooqTransacter >, clock: Clock )","title":"JooqHealthCheck - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-jooq-health-check/#jooqhealthcheck","text":"[jvm]\\ fun JooqHealthCheck (qualifier: KClass <out Annotation >, dataSourceProvider: Provider<out Service>, jooqTransacterProvider: Provider< JooqTransacter >, clock: Clock )","title":"JooqHealthCheck"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/status/","text":"// misk-jooq / misk.jooq / JooqHealthCheck / status status \u00b6 [jvm]\\ open override fun status (): HealthStatus","title":"status - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/status/#status","text":"[jvm]\\ open override fun status (): HealthStatus","title":"status"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/","text":"// misk-jooq / misk.jooq / JooqHealthCheck / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary CLOCK_SKEW_UNHEALTHY_THRESHOLD [jvm] val CLOCK_SKEW_UNHEALTHY_THRESHOLD : Duration CLOCK_SKEW_WARN_THRESHOLD [jvm] val CLOCK_SKEW_WARN_THRESHOLD : Duration log [jvm] val log : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/#properties","text":"Name Summary CLOCK_SKEW_UNHEALTHY_THRESHOLD [jvm] val CLOCK_SKEW_UNHEALTHY_THRESHOLD : Duration CLOCK_SKEW_WARN_THRESHOLD [jvm] val CLOCK_SKEW_WARN_THRESHOLD : Duration log [jvm] val log : KLogger","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/-c-l-o-c-k_-s-k-e-w_-u-n-h-e-a-l-t-h-y_-t-h-r-e-s-h-o-l-d/","text":"// misk-jooq / misk.jooq / JooqHealthCheck / Companion / CLOCK_SKEW_UNHEALTHY_THRESHOLD CLOCK_SKEW_UNHEALTHY_THRESHOLD \u00b6 [jvm]\\ val CLOCK_SKEW_UNHEALTHY_THRESHOLD : Duration","title":"CLOCK_SKEW_UNHEALTHY_THRESHOLD - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/-c-l-o-c-k_-s-k-e-w_-u-n-h-e-a-l-t-h-y_-t-h-r-e-s-h-o-l-d/#clock_skew_unhealthy_threshold","text":"[jvm]\\ val CLOCK_SKEW_UNHEALTHY_THRESHOLD : Duration","title":"CLOCK_SKEW_UNHEALTHY_THRESHOLD"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/-c-l-o-c-k_-s-k-e-w_-w-a-r-n_-t-h-r-e-s-h-o-l-d/","text":"// misk-jooq / misk.jooq / JooqHealthCheck / Companion / CLOCK_SKEW_WARN_THRESHOLD CLOCK_SKEW_WARN_THRESHOLD \u00b6 [jvm]\\ val CLOCK_SKEW_WARN_THRESHOLD : Duration","title":"CLOCK_SKEW_WARN_THRESHOLD - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/-c-l-o-c-k_-s-k-e-w_-w-a-r-n_-t-h-r-e-s-h-o-l-d/#clock_skew_warn_threshold","text":"[jvm]\\ val CLOCK_SKEW_WARN_THRESHOLD : Duration","title":"CLOCK_SKEW_WARN_THRESHOLD"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/log/","text":"// misk-jooq / misk.jooq / JooqHealthCheck / Companion / log log \u00b6 [jvm]\\ val log : KLogger","title":"log - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-health-check/-companion/log/#log","text":"[jvm]\\ val log : KLogger","title":"log"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-module/","text":"// misk-jooq / misk.jooq / JooqModule JooqModule \u00b6 [jvm]\\ class JooqModule (qualifier: KClass <out Annotation >, dataSourceClusterConfig: DataSourceClusterConfig, jooqCodeGenSchemaName: String , databasePool: DatabasePool, readerQualifier: KClass <out Annotation >?, jooqTimestampRecordListenerOptions: JooqTimestampRecordListenerOptions , jooqConfigExtension: Configuration.() -> Unit ) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"JooqModule - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-module/#jooqmodule","text":"[jvm]\\ class JooqModule (qualifier: KClass <out Annotation >, dataSourceClusterConfig: DataSourceClusterConfig, jooqCodeGenSchemaName: String , databasePool: DatabasePool, readerQualifier: KClass <out Annotation >?, jooqTimestampRecordListenerOptions: JooqTimestampRecordListenerOptions , jooqConfigExtension: Configuration.() -> Unit ) : KAbstractModule","title":"JooqModule"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-module/-jooq-module/","text":"// misk-jooq / misk.jooq / JooqModule / JooqModule JooqModule \u00b6 [jvm]\\ fun JooqModule (qualifier: KClass <out Annotation >, dataSourceClusterConfig: DataSourceClusterConfig, jooqCodeGenSchemaName: String , databasePool: DatabasePool = RealDatabasePool, readerQualifier: KClass <out Annotation >? = null, jooqTimestampRecordListenerOptions: JooqTimestampRecordListenerOptions = JooqTimestampRecordListenerOptions(install = false), jooqConfigExtension: Configuration.() -> Unit = {})","title":"JooqModule - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-module/-jooq-module/#jooqmodule","text":"[jvm]\\ fun JooqModule (qualifier: KClass <out Annotation >, dataSourceClusterConfig: DataSourceClusterConfig, jooqCodeGenSchemaName: String , databasePool: DatabasePool = RealDatabasePool, readerQualifier: KClass <out Annotation >? = null, jooqTimestampRecordListenerOptions: JooqTimestampRecordListenerOptions = JooqTimestampRecordListenerOptions(install = false), jooqConfigExtension: Configuration.() -> Unit = {})","title":"JooqModule"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/","text":"// misk-jooq / misk.jooq / JooqSession JooqSession \u00b6 [jvm]\\ class JooqSession (ctx: DSLContext) : Session Types \u00b6 Name Summary HookType [jvm] enum HookType : Enum < JooqSession.HookType > Functions \u00b6 Name Summary add [jvm] fun ConcurrentMap < JooqSession.HookType , List <() -> Unit >>. add (hookType: JooqSession.HookType , work: () -> Unit ) component1 [jvm] operator fun component1 (): DSLContext Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (ctx) -> \u2026 } executePostCommitHooks [jvm] fun executePostCommitHooks () executePreCommitHooks [jvm] fun executePreCommitHooks () executeSessionCloseHooks [jvm] fun executeSessionCloseHooks () onPostCommit [jvm] open override fun onPostCommit (work: () -> Unit ) onPreCommit [jvm] open override fun onPreCommit (work: () -> Unit ) onSessionClose [jvm] open override fun onSessionClose (work: () -> Unit ) useConnection [jvm] open override fun < T > useConnection (work: ( Connection ) -> T ): T Properties \u00b6 Name Summary ctx [jvm] val ctx : DSLContext","title":"JooqSession - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/#jooqsession","text":"[jvm]\\ class JooqSession (ctx: DSLContext) : Session","title":"JooqSession"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/#types","text":"Name Summary HookType [jvm] enum HookType : Enum < JooqSession.HookType >","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/#functions","text":"Name Summary add [jvm] fun ConcurrentMap < JooqSession.HookType , List <() -> Unit >>. add (hookType: JooqSession.HookType , work: () -> Unit ) component1 [jvm] operator fun component1 (): DSLContext Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (ctx) -> \u2026 } executePostCommitHooks [jvm] fun executePostCommitHooks () executePreCommitHooks [jvm] fun executePreCommitHooks () executeSessionCloseHooks [jvm] fun executeSessionCloseHooks () onPostCommit [jvm] open override fun onPostCommit (work: () -> Unit ) onPreCommit [jvm] open override fun onPreCommit (work: () -> Unit ) onSessionClose [jvm] open override fun onSessionClose (work: () -> Unit ) useConnection [jvm] open override fun < T > useConnection (work: ( Connection ) -> T ): T","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/#properties","text":"Name Summary ctx [jvm] val ctx : DSLContext","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-jooq-session/","text":"// misk-jooq / misk.jooq / JooqSession / JooqSession JooqSession \u00b6 [jvm]\\ fun JooqSession (ctx: DSLContext)","title":"JooqSession - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-jooq-session/#jooqsession","text":"[jvm]\\ fun JooqSession (ctx: DSLContext)","title":"JooqSession"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/add/","text":"// misk-jooq / misk.jooq / JooqSession / add add \u00b6 [jvm]\\ fun ConcurrentMap < JooqSession.HookType , List <() -> Unit >>. add (hookType: JooqSession.HookType , work: () -> Unit )","title":"add - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/add/#add","text":"[jvm]\\ fun ConcurrentMap < JooqSession.HookType , List <() -> Unit >>. add (hookType: JooqSession.HookType , work: () -> Unit )","title":"add"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/component1/","text":"// misk-jooq / misk.jooq / JooqSession / component1 component1 \u00b6 [jvm]\\ operator fun component1 (): DSLContext Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (ctx) -> \u2026 }","title":"component1 - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/component1/#component1","text":"[jvm]\\ operator fun component1 (): DSLContext Allows for destructuring the JooqSession and writing simpler code like this transacter.transaction { (ctx) -> \u2026 }","title":"component1"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/ctx/","text":"// misk-jooq / misk.jooq / JooqSession / ctx ctx \u00b6 [jvm]\\ val ctx : DSLContext","title":"ctx - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/ctx/#ctx","text":"[jvm]\\ val ctx : DSLContext","title":"ctx"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/execute-post-commit-hooks/","text":"// misk-jooq / misk.jooq / JooqSession / executePostCommitHooks executePostCommitHooks \u00b6 [jvm]\\ fun executePostCommitHooks ()","title":"executePostCommitHooks - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/execute-post-commit-hooks/#executepostcommithooks","text":"[jvm]\\ fun executePostCommitHooks ()","title":"executePostCommitHooks"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/execute-pre-commit-hooks/","text":"// misk-jooq / misk.jooq / JooqSession / executePreCommitHooks executePreCommitHooks \u00b6 [jvm]\\ fun executePreCommitHooks ()","title":"executePreCommitHooks - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/execute-pre-commit-hooks/#executeprecommithooks","text":"[jvm]\\ fun executePreCommitHooks ()","title":"executePreCommitHooks"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/execute-session-close-hooks/","text":"// misk-jooq / misk.jooq / JooqSession / executeSessionCloseHooks executeSessionCloseHooks \u00b6 [jvm]\\ fun executeSessionCloseHooks ()","title":"executeSessionCloseHooks - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/execute-session-close-hooks/#executesessionclosehooks","text":"[jvm]\\ fun executeSessionCloseHooks ()","title":"executeSessionCloseHooks"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/on-post-commit/","text":"// misk-jooq / misk.jooq / JooqSession / onPostCommit onPostCommit \u00b6 [jvm]\\ open override fun onPostCommit (work: () -> Unit )","title":"onPostCommit - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/on-post-commit/#onpostcommit","text":"[jvm]\\ open override fun onPostCommit (work: () -> Unit )","title":"onPostCommit"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/on-pre-commit/","text":"// misk-jooq / misk.jooq / JooqSession / onPreCommit onPreCommit \u00b6 [jvm]\\ open override fun onPreCommit (work: () -> Unit )","title":"onPreCommit - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/on-pre-commit/#onprecommit","text":"[jvm]\\ open override fun onPreCommit (work: () -> Unit )","title":"onPreCommit"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/on-session-close/","text":"// misk-jooq / misk.jooq / JooqSession / onSessionClose onSessionClose \u00b6 [jvm]\\ open override fun onSessionClose (work: () -> Unit )","title":"onSessionClose - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/on-session-close/#onsessionclose","text":"[jvm]\\ open override fun onSessionClose (work: () -> Unit )","title":"onSessionClose"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/use-connection/","text":"// misk-jooq / misk.jooq / JooqSession / useConnection useConnection \u00b6 [jvm]\\ open override fun < T > useConnection (work: ( Connection ) -> T ): T","title":"useConnection - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/use-connection/#useconnection","text":"[jvm]\\ open override fun < T > useConnection (work: ( Connection ) -> T ): T","title":"useConnection"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/","text":"// misk-jooq / misk.jooq / JooqSession / HookType HookType \u00b6 [jvm]\\ enum HookType : Enum < JooqSession.HookType > Entries \u00b6 SESSION_CLOSE [jvm] SESSION_CLOSE () POST [jvm] POST () PRE [jvm] PRE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"HookType - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/#hooktype","text":"[jvm]\\ enum HookType : Enum < JooqSession.HookType >","title":"HookType"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/#entries","text":"SESSION_CLOSE [jvm] SESSION_CLOSE () POST [jvm] POST () PRE [jvm] PRE ()","title":"Entries"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-p-o-s-t/","text":"// misk-jooq / misk.jooq / JooqSession / HookType / POST POST \u00b6 [jvm]\\ POST () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"POST - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-p-o-s-t/#post","text":"[jvm]\\ POST ()","title":"POST"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-p-o-s-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-p-r-e/","text":"// misk-jooq / misk.jooq / JooqSession / HookType / PRE PRE \u00b6 [jvm]\\ PRE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"PRE - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-p-r-e/#pre","text":"[jvm]\\ PRE ()","title":"PRE"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-p-r-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-s-e-s-s-i-o-n_-c-l-o-s-e/","text":"// misk-jooq / misk.jooq / JooqSession / HookType / SESSION_CLOSE SESSION_CLOSE \u00b6 [jvm]\\ SESSION_CLOSE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"SESSION_CLOSE - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-s-e-s-s-i-o-n_-c-l-o-s-e/#session_close","text":"[jvm]\\ SESSION_CLOSE ()","title":"SESSION_CLOSE"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-session/-hook-type/-s-e-s-s-i-o-n_-c-l-o-s-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/","text":"// misk-jooq / misk.jooq / JooqTransacter JooqTransacter \u00b6 [jvm]\\ class JooqTransacter (dslContext: DSLContext) Types \u00b6 Name Summary Companion [jvm] object Companion TransacterOptions [jvm] data class TransacterOptions (maxAttempts: Int , maxRetryDelayMillis: Long ) Functions \u00b6 Name Summary transaction [jvm] fun < RETURN_TYPE > transaction (options: JooqTransacter.TransacterOptions = TransacterOptions(), callback: (jooqSession: JooqSession ) -> RETURN_TYPE ): RETURN_TYPE","title":"JooqTransacter - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/#jooqtransacter","text":"[jvm]\\ class JooqTransacter (dslContext: DSLContext)","title":"JooqTransacter"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/#types","text":"Name Summary Companion [jvm] object Companion TransacterOptions [jvm] data class TransacterOptions (maxAttempts: Int , maxRetryDelayMillis: Long )","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/#functions","text":"Name Summary transaction [jvm] fun < RETURN_TYPE > transaction (options: JooqTransacter.TransacterOptions = TransacterOptions(), callback: (jooqSession: JooqSession ) -> RETURN_TYPE ): RETURN_TYPE","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-jooq-transacter/","text":"// misk-jooq / misk.jooq / JooqTransacter / JooqTransacter JooqTransacter \u00b6 [jvm]\\ fun JooqTransacter (dslContext: DSLContext)","title":"JooqTransacter - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-jooq-transacter/#jooqtransacter","text":"[jvm]\\ fun JooqTransacter (dslContext: DSLContext)","title":"JooqTransacter"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/transaction/","text":"// misk-jooq / misk.jooq / JooqTransacter / transaction transaction \u00b6 [jvm]\\ fun < RETURN_TYPE > transaction (options: JooqTransacter.TransacterOptions = TransacterOptions(), callback: (jooqSession: JooqSession ) -> RETURN_TYPE ): RETURN_TYPE","title":"transaction - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/transaction/#transaction","text":"[jvm]\\ fun < RETURN_TYPE > transaction (options: JooqTransacter.TransacterOptions = TransacterOptions(), callback: (jooqSession: JooqSession ) -> RETURN_TYPE ): RETURN_TYPE","title":"transaction"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-companion/","text":"// misk-jooq / misk.jooq / JooqTransacter / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary log [jvm] val log : KLogger noRetriesOptions [jvm] val noRetriesOptions : JooqTransacter.TransacterOptions","title":"Companion - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-companion/#properties","text":"Name Summary log [jvm] val log : KLogger noRetriesOptions [jvm] val noRetriesOptions : JooqTransacter.TransacterOptions","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-companion/log/","text":"// misk-jooq / misk.jooq / JooqTransacter / Companion / log log \u00b6 [jvm]\\ val log : KLogger","title":"log - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-companion/log/#log","text":"[jvm]\\ val log : KLogger","title":"log"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-companion/no-retries-options/","text":"// misk-jooq / misk.jooq / JooqTransacter / Companion / noRetriesOptions noRetriesOptions \u00b6 [jvm]\\ val noRetriesOptions : JooqTransacter.TransacterOptions","title":"noRetriesOptions - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-companion/no-retries-options/#noretriesoptions","text":"[jvm]\\ val noRetriesOptions : JooqTransacter.TransacterOptions","title":"noRetriesOptions"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/","text":"// misk-jooq / misk.jooq / JooqTransacter / TransacterOptions TransacterOptions \u00b6 [jvm]\\ data class TransacterOptions (maxAttempts: Int , maxRetryDelayMillis: Long ) Properties \u00b6 Name Summary maxAttempts [jvm] val maxAttempts : Int = 3 maxRetryDelayMillis [jvm] val maxRetryDelayMillis : Long = 500","title":"TransacterOptions - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/#transacteroptions","text":"[jvm]\\ data class TransacterOptions (maxAttempts: Int , maxRetryDelayMillis: Long )","title":"TransacterOptions"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/#properties","text":"Name Summary maxAttempts [jvm] val maxAttempts : Int = 3 maxRetryDelayMillis [jvm] val maxRetryDelayMillis : Long = 500","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/-transacter-options/","text":"// misk-jooq / misk.jooq / JooqTransacter / TransacterOptions / TransacterOptions TransacterOptions \u00b6 [jvm]\\ fun TransacterOptions (maxAttempts: Int = 3, maxRetryDelayMillis: Long = 500)","title":"TransacterOptions - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/-transacter-options/#transacteroptions","text":"[jvm]\\ fun TransacterOptions (maxAttempts: Int = 3, maxRetryDelayMillis: Long = 500)","title":"TransacterOptions"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/max-attempts/","text":"// misk-jooq / misk.jooq / JooqTransacter / TransacterOptions / maxAttempts maxAttempts \u00b6 [jvm]\\ val maxAttempts : Int = 3","title":"maxAttempts - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/max-attempts/#maxattempts","text":"[jvm]\\ val maxAttempts : Int = 3","title":"maxAttempts"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/max-retry-delay-millis/","text":"// misk-jooq / misk.jooq / JooqTransacter / TransacterOptions / maxRetryDelayMillis maxRetryDelayMillis \u00b6 [jvm]\\ val maxRetryDelayMillis : Long = 500","title":"maxRetryDelayMillis - Misk"},{"location":"0.x/misk-jooq/misk.jooq/-jooq-transacter/-transacter-options/max-retry-delay-millis/#maxretrydelaymillis","text":"[jvm]\\ val maxRetryDelayMillis : Long = 500","title":"maxRetryDelayMillis"},{"location":"0.x/misk-jooq/misk.jooq.listeners/","text":"// misk-jooq / misk.jooq.listeners Package misk.jooq.listeners \u00b6 Types \u00b6 Name Summary AvoidUsingSelectStarException [jvm] class AvoidUsingSelectStarException (message: String ) : RuntimeException AvoidUsingSelectStarListener [jvm] class AvoidUsingSelectStarListener : DefaultExecuteListener JooqSQLLogger [jvm] class JooqSQLLogger : DefaultExecuteListener JooqTimestampRecordListener [jvm] class JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String ) : DefaultRecordListener A Record Listener that will automatically set the current timestamp for the createdAtColumnName during insertions. And the current timestamp to the updatedAtColumnName while updating a row JooqTimestampRecordListenerOptions [jvm] data class JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String , updatedAtColumnName: String ) Use this class to configure the installation of the misk.jooq.listeners.JooqTimestampRecordListener You can use both or configure just one of the createdAtColumnName to be set to the current timestamp when inserting or updating it. If you leave the one you don\u2019t want set as an empty string the JooqTimestampRecordListener will ignore it.","title":"Package misk.jooq.listeners - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/#package-miskjooqlisteners","text":"","title":"Package misk.jooq.listeners"},{"location":"0.x/misk-jooq/misk.jooq.listeners/#types","text":"Name Summary AvoidUsingSelectStarException [jvm] class AvoidUsingSelectStarException (message: String ) : RuntimeException AvoidUsingSelectStarListener [jvm] class AvoidUsingSelectStarListener : DefaultExecuteListener JooqSQLLogger [jvm] class JooqSQLLogger : DefaultExecuteListener JooqTimestampRecordListener [jvm] class JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String ) : DefaultRecordListener A Record Listener that will automatically set the current timestamp for the createdAtColumnName during insertions. And the current timestamp to the updatedAtColumnName while updating a row JooqTimestampRecordListenerOptions [jvm] data class JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String , updatedAtColumnName: String ) Use this class to configure the installation of the misk.jooq.listeners.JooqTimestampRecordListener You can use both or configure just one of the createdAtColumnName to be set to the current timestamp when inserting or updating it. If you leave the one you don\u2019t want set as an empty string the JooqTimestampRecordListener will ignore it.","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-exception/","text":"// misk-jooq / misk.jooq.listeners / AvoidUsingSelectStarException AvoidUsingSelectStarException \u00b6 [jvm]\\ class AvoidUsingSelectStarException (message: String ) : RuntimeException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"AvoidUsingSelectStarException - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-exception/#avoidusingselectstarexception","text":"[jvm]\\ class AvoidUsingSelectStarException (message: String ) : RuntimeException","title":"AvoidUsingSelectStarException"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-exception/-avoid-using-select-star-exception/","text":"// misk-jooq / misk.jooq.listeners / AvoidUsingSelectStarException / AvoidUsingSelectStarException AvoidUsingSelectStarException \u00b6 [jvm]\\ fun AvoidUsingSelectStarException (message: String )","title":"AvoidUsingSelectStarException - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-exception/-avoid-using-select-star-exception/#avoidusingselectstarexception","text":"[jvm]\\ fun AvoidUsingSelectStarException (message: String )","title":"AvoidUsingSelectStarException"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/","text":"// misk-jooq / misk.jooq.listeners / AvoidUsingSelectStarListener AvoidUsingSelectStarListener \u00b6 [jvm]\\ class AvoidUsingSelectStarListener : DefaultExecuteListener Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary bindEnd [jvm] open override fun bindEnd (p0: ExecuteContext) bindStart [jvm] open override fun bindStart (p0: ExecuteContext) end [jvm] open override fun end (p0: ExecuteContext) exception [jvm] open override fun exception (p0: ExecuteContext) executeEnd [jvm] open override fun executeEnd (p0: ExecuteContext) executeStart [jvm] open override fun executeStart (p0: ExecuteContext) fetchEnd [jvm] open override fun fetchEnd (p0: ExecuteContext) fetchStart [jvm] open override fun fetchStart (p0: ExecuteContext) outEnd [jvm] open override fun outEnd (p0: ExecuteContext) outStart [jvm] open override fun outStart (p0: ExecuteContext) prepareEnd [jvm] open override fun prepareEnd (p0: ExecuteContext) prepareStart [jvm] open override fun prepareStart (p0: ExecuteContext) recordEnd [jvm] open override fun recordEnd (p0: ExecuteContext) recordStart [jvm] open override fun recordStart (p0: ExecuteContext) renderEnd [jvm] open override fun renderEnd (ctx: ExecuteContext?) This catches any query that has a select * from or select table.* from. We don\u2019t want to use any query that uses a select * in it, as jooq has a hard time converting the result set into a jooq table record. It captures the result set via indexes and not the column names. If you try to fetch the result set into a jooq record, jooq will expect the order in which the columns are returned in the query matches the order of in which the columns are declared in the jooq generated code. I suppose it does ResultSet.get(0), ResulSet.get(1) instead of doing ResultSet.get( renderStart [jvm] open override fun renderStart (p0: ExecuteContext) resultEnd [jvm] open override fun resultEnd (p0: ExecuteContext) resultStart [jvm] open override fun resultStart (p0: ExecuteContext) start [jvm] open override fun start (p0: ExecuteContext) warning [jvm] open override fun warning (p0: ExecuteContext)","title":"AvoidUsingSelectStarListener - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/#avoidusingselectstarlistener","text":"[jvm]\\ class AvoidUsingSelectStarListener : DefaultExecuteListener","title":"AvoidUsingSelectStarListener"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/#functions","text":"Name Summary bindEnd [jvm] open override fun bindEnd (p0: ExecuteContext) bindStart [jvm] open override fun bindStart (p0: ExecuteContext) end [jvm] open override fun end (p0: ExecuteContext) exception [jvm] open override fun exception (p0: ExecuteContext) executeEnd [jvm] open override fun executeEnd (p0: ExecuteContext) executeStart [jvm] open override fun executeStart (p0: ExecuteContext) fetchEnd [jvm] open override fun fetchEnd (p0: ExecuteContext) fetchStart [jvm] open override fun fetchStart (p0: ExecuteContext) outEnd [jvm] open override fun outEnd (p0: ExecuteContext) outStart [jvm] open override fun outStart (p0: ExecuteContext) prepareEnd [jvm] open override fun prepareEnd (p0: ExecuteContext) prepareStart [jvm] open override fun prepareStart (p0: ExecuteContext) recordEnd [jvm] open override fun recordEnd (p0: ExecuteContext) recordStart [jvm] open override fun recordStart (p0: ExecuteContext) renderEnd [jvm] open override fun renderEnd (ctx: ExecuteContext?) This catches any query that has a select * from or select table.* from. We don\u2019t want to use any query that uses a select * in it, as jooq has a hard time converting the result set into a jooq table record. It captures the result set via indexes and not the column names. If you try to fetch the result set into a jooq record, jooq will expect the order in which the columns are returned in the query matches the order of in which the columns are declared in the jooq generated code. I suppose it does ResultSet.get(0), ResulSet.get(1) instead of doing ResultSet.get( renderStart [jvm] open override fun renderStart (p0: ExecuteContext) resultEnd [jvm] open override fun resultEnd (p0: ExecuteContext) resultStart [jvm] open override fun resultStart (p0: ExecuteContext) start [jvm] open override fun start (p0: ExecuteContext) warning [jvm] open override fun warning (p0: ExecuteContext)","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/-avoid-using-select-star-listener/","text":"// misk-jooq / misk.jooq.listeners / AvoidUsingSelectStarListener / AvoidUsingSelectStarListener AvoidUsingSelectStarListener \u00b6 [jvm]\\ fun AvoidUsingSelectStarListener ()","title":"AvoidUsingSelectStarListener - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/-avoid-using-select-star-listener/#avoidusingselectstarlistener","text":"[jvm]\\ fun AvoidUsingSelectStarListener ()","title":"AvoidUsingSelectStarListener"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/render-end/","text":"// misk-jooq / misk.jooq.listeners / AvoidUsingSelectStarListener / renderEnd renderEnd \u00b6 [jvm]\\ open override fun renderEnd (ctx: ExecuteContext?) This catches any query that has a select * from or select table.* from. We don\u2019t want to use any query that uses a select * in it, as jooq has a hard time converting the result set into a jooq table record. It captures the result set via indexes and not the column names. If you try to fetch the result set into a jooq record, jooq will expect the order in which the columns are returned in the query matches the order of in which the columns are declared in the jooq generated code. I suppose it does ResultSet.get(0), ResulSet.get(1) instead of doing ResultSet.get( If the databases in dev, staging and prod don\u2019t all have the same column ordering, then things start to fail. Either way from a code maintainability point of view it is best to avoid select * from and always specify the columns you need. If you need all the columns in a table 2 ways of doing that in jooq ctx.selectFrom(<table name>)\u2026 If you are joining multiple tables and need the columns of only one table ctx.select(<jooq gen table>.fields().toList()).from(<table>.innerJoin....) DO NOT DO THIS: ctx.select(<jooq gen table>.asterisk()).from(<table>)\u2026 This listener\u2019s purpose is to catch the above and prevent it from happening.","title":"renderEnd - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/render-end/#renderend","text":"[jvm]\\ open override fun renderEnd (ctx: ExecuteContext?) This catches any query that has a select * from or select table.* from. We don\u2019t want to use any query that uses a select * in it, as jooq has a hard time converting the result set into a jooq table record. It captures the result set via indexes and not the column names. If you try to fetch the result set into a jooq record, jooq will expect the order in which the columns are returned in the query matches the order of in which the columns are declared in the jooq generated code. I suppose it does ResultSet.get(0), ResulSet.get(1) instead of doing ResultSet.get( If the databases in dev, staging and prod don\u2019t all have the same column ordering, then things start to fail. Either way from a code maintainability point of view it is best to avoid select * from and always specify the columns you need. If you need all the columns in a table 2 ways of doing that in jooq ctx.selectFrom(<table name>)\u2026 If you are joining multiple tables and need the columns of only one table ctx.select(<jooq gen table>.fields().toList()).from(<table>.innerJoin....) DO NOT DO THIS: ctx.select(<jooq gen table>.asterisk()).from(<table>)\u2026 This listener\u2019s purpose is to catch the above and prevent it from happening.","title":"renderEnd"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/-companion/","text":"// misk-jooq / misk.jooq.listeners / AvoidUsingSelectStarListener / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary selectStarFromRegex [jvm] val selectStarFromRegex : Regex","title":"Companion - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/-companion/#properties","text":"Name Summary selectStarFromRegex [jvm] val selectStarFromRegex : Regex","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/-companion/select-star-from-regex/","text":"// misk-jooq / misk.jooq.listeners / AvoidUsingSelectStarListener / Companion / selectStarFromRegex selectStarFromRegex \u00b6 [jvm]\\ val selectStarFromRegex : Regex","title":"selectStarFromRegex - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-avoid-using-select-star-listener/-companion/select-star-from-regex/#selectstarfromregex","text":"[jvm]\\ val selectStarFromRegex : Regex","title":"selectStarFromRegex"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger JooqSQLLogger \u00b6 [jvm]\\ class JooqSQLLogger : DefaultExecuteListener Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary bindEnd [jvm] open override fun bindEnd (p0: ExecuteContext) bindStart [jvm] open override fun bindStart (p0: ExecuteContext) end [jvm] open override fun end (p0: ExecuteContext) exception [jvm] open override fun exception (ctx: ExecuteContext) executeEnd [jvm] open override fun executeEnd (ctx: ExecuteContext) executeStart [jvm] open override fun executeStart (p0: ExecuteContext) fetchEnd [jvm] open override fun fetchEnd (p0: ExecuteContext) fetchStart [jvm] open override fun fetchStart (p0: ExecuteContext) outEnd [jvm] open override fun outEnd (ctx: ExecuteContext) outStart [jvm] open override fun outStart (p0: ExecuteContext) prepareEnd [jvm] open override fun prepareEnd (p0: ExecuteContext) prepareStart [jvm] open override fun prepareStart (p0: ExecuteContext) recordEnd [jvm] open override fun recordEnd (ctx: ExecuteContext) recordStart [jvm] open override fun recordStart (p0: ExecuteContext) renderEnd [jvm] open override fun renderEnd (ctx: ExecuteContext) renderStart [jvm] open override fun renderStart (p0: ExecuteContext) resultEnd [jvm] open override fun resultEnd (ctx: ExecuteContext) resultStart [jvm] open override fun resultStart (p0: ExecuteContext) start [jvm] open override fun start (p0: ExecuteContext) warning [jvm] open override fun warning (p0: ExecuteContext)","title":"JooqSQLLogger - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/#jooqsqllogger","text":"[jvm]\\ class JooqSQLLogger : DefaultExecuteListener","title":"JooqSQLLogger"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/#functions","text":"Name Summary bindEnd [jvm] open override fun bindEnd (p0: ExecuteContext) bindStart [jvm] open override fun bindStart (p0: ExecuteContext) end [jvm] open override fun end (p0: ExecuteContext) exception [jvm] open override fun exception (ctx: ExecuteContext) executeEnd [jvm] open override fun executeEnd (ctx: ExecuteContext) executeStart [jvm] open override fun executeStart (p0: ExecuteContext) fetchEnd [jvm] open override fun fetchEnd (p0: ExecuteContext) fetchStart [jvm] open override fun fetchStart (p0: ExecuteContext) outEnd [jvm] open override fun outEnd (ctx: ExecuteContext) outStart [jvm] open override fun outStart (p0: ExecuteContext) prepareEnd [jvm] open override fun prepareEnd (p0: ExecuteContext) prepareStart [jvm] open override fun prepareStart (p0: ExecuteContext) recordEnd [jvm] open override fun recordEnd (ctx: ExecuteContext) recordStart [jvm] open override fun recordStart (p0: ExecuteContext) renderEnd [jvm] open override fun renderEnd (ctx: ExecuteContext) renderStart [jvm] open override fun renderStart (p0: ExecuteContext) resultEnd [jvm] open override fun resultEnd (ctx: ExecuteContext) resultStart [jvm] open override fun resultStart (p0: ExecuteContext) start [jvm] open override fun start (p0: ExecuteContext) warning [jvm] open override fun warning (p0: ExecuteContext)","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/-jooq-s-q-l-logger/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / JooqSQLLogger JooqSQLLogger \u00b6 [jvm]\\ fun JooqSQLLogger ()","title":"JooqSQLLogger - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/-jooq-s-q-l-logger/#jooqsqllogger","text":"[jvm]\\ fun JooqSQLLogger ()","title":"JooqSQLLogger"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/exception/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / exception exception \u00b6 [jvm]\\ open override fun exception (ctx: ExecuteContext)","title":"exception - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/exception/#exception","text":"[jvm]\\ open override fun exception (ctx: ExecuteContext)","title":"exception"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/execute-end/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / executeEnd executeEnd \u00b6 [jvm]\\ open override fun executeEnd (ctx: ExecuteContext)","title":"executeEnd - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/execute-end/#executeend","text":"[jvm]\\ open override fun executeEnd (ctx: ExecuteContext)","title":"executeEnd"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/out-end/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / outEnd outEnd \u00b6 [jvm]\\ open override fun outEnd (ctx: ExecuteContext)","title":"outEnd - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/out-end/#outend","text":"[jvm]\\ open override fun outEnd (ctx: ExecuteContext)","title":"outEnd"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/record-end/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / recordEnd recordEnd \u00b6 [jvm]\\ open override fun recordEnd (ctx: ExecuteContext)","title":"recordEnd - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/record-end/#recordend","text":"[jvm]\\ open override fun recordEnd (ctx: ExecuteContext)","title":"recordEnd"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/render-end/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / renderEnd renderEnd \u00b6 [jvm]\\ open override fun renderEnd (ctx: ExecuteContext)","title":"renderEnd - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/render-end/#renderend","text":"[jvm]\\ open override fun renderEnd (ctx: ExecuteContext)","title":"renderEnd"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/result-end/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / resultEnd resultEnd \u00b6 [jvm]\\ open override fun resultEnd (ctx: ExecuteContext)","title":"resultEnd - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/result-end/#resultend","text":"[jvm]\\ open override fun resultEnd (ctx: ExecuteContext)","title":"resultEnd"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/-companion/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary log [jvm] val log : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/-companion/#properties","text":"Name Summary log [jvm] val log : KLogger","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/-companion/log/","text":"// misk-jooq / misk.jooq.listeners / JooqSQLLogger / Companion / log log \u00b6 [jvm]\\ val log : KLogger","title":"log - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-s-q-l-logger/-companion/log/#log","text":"[jvm]\\ val log : KLogger","title":"log"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListener JooqTimestampRecordListener \u00b6 [jvm]\\ class JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String ) : DefaultRecordListener A Record Listener that will automatically set the current timestamp for the createdAtColumnName during insertions. And the current timestamp to the updatedAtColumnName while updating a row Constructors \u00b6 JooqTimestampRecordListener [jvm] fun JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String ) Functions \u00b6 Name Summary deleteEnd [jvm] open override fun deleteEnd (p0: RecordContext) deleteStart [jvm] open override fun deleteStart (p0: RecordContext) exception [jvm] open override fun exception (p0: RecordContext) insertEnd [jvm] open override fun insertEnd (p0: RecordContext) insertStart [jvm] open override fun insertStart (ctx: RecordContext?) loadEnd [jvm] open override fun loadEnd (p0: RecordContext) loadStart [jvm] open override fun loadStart (p0: RecordContext) mergeEnd [jvm] open override fun mergeEnd (p0: RecordContext) mergeStart [jvm] open override fun mergeStart (p0: RecordContext) refreshEnd [jvm] open override fun refreshEnd (p0: RecordContext) refreshStart [jvm] open override fun refreshStart (p0: RecordContext) storeEnd [jvm] open override fun storeEnd (p0: RecordContext) storeStart [jvm] open override fun storeStart (p0: RecordContext) updateEnd [jvm] open override fun updateEnd (p0: RecordContext) updateStart [jvm] open override fun updateStart (ctx: RecordContext?)","title":"JooqTimestampRecordListener - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/#jooqtimestamprecordlistener","text":"[jvm]\\ class JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String ) : DefaultRecordListener A Record Listener that will automatically set the current timestamp for the createdAtColumnName during insertions. And the current timestamp to the updatedAtColumnName while updating a row","title":"JooqTimestampRecordListener"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/#constructors","text":"JooqTimestampRecordListener [jvm] fun JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String )","title":"Constructors"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/#functions","text":"Name Summary deleteEnd [jvm] open override fun deleteEnd (p0: RecordContext) deleteStart [jvm] open override fun deleteStart (p0: RecordContext) exception [jvm] open override fun exception (p0: RecordContext) insertEnd [jvm] open override fun insertEnd (p0: RecordContext) insertStart [jvm] open override fun insertStart (ctx: RecordContext?) loadEnd [jvm] open override fun loadEnd (p0: RecordContext) loadStart [jvm] open override fun loadStart (p0: RecordContext) mergeEnd [jvm] open override fun mergeEnd (p0: RecordContext) mergeStart [jvm] open override fun mergeStart (p0: RecordContext) refreshEnd [jvm] open override fun refreshEnd (p0: RecordContext) refreshStart [jvm] open override fun refreshStart (p0: RecordContext) storeEnd [jvm] open override fun storeEnd (p0: RecordContext) storeStart [jvm] open override fun storeStart (p0: RecordContext) updateEnd [jvm] open override fun updateEnd (p0: RecordContext) updateStart [jvm] open override fun updateStart (ctx: RecordContext?)","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/-jooq-timestamp-record-listener/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListener / JooqTimestampRecordListener JooqTimestampRecordListener \u00b6 [jvm]\\ fun JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String )","title":"JooqTimestampRecordListener - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/-jooq-timestamp-record-listener/#jooqtimestamprecordlistener","text":"[jvm]\\ fun JooqTimestampRecordListener (clock: Clock , createdAtColumnName: String , updatedAtColumnName: String )","title":"JooqTimestampRecordListener"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/insert-start/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListener / insertStart insertStart \u00b6 [jvm]\\ open override fun insertStart (ctx: RecordContext?)","title":"insertStart - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/insert-start/#insertstart","text":"[jvm]\\ open override fun insertStart (ctx: RecordContext?)","title":"insertStart"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/update-start/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListener / updateStart updateStart \u00b6 [jvm]\\ open override fun updateStart (ctx: RecordContext?)","title":"updateStart - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener/update-start/#updatestart","text":"[jvm]\\ open override fun updateStart (ctx: RecordContext?)","title":"updateStart"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListenerOptions JooqTimestampRecordListenerOptions \u00b6 [jvm]\\ data class JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String , updatedAtColumnName: String ) Use this class to configure the installation of the misk.jooq.listeners.JooqTimestampRecordListener You can use both or configure just one of the createdAtColumnName to be set to the current timestamp when inserting or updating it. If you leave the one you don\u2019t want set as an empty string the JooqTimestampRecordListener will ignore it. Constructors \u00b6 JooqTimestampRecordListenerOptions [jvm] fun JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String = \u201c\u201d, updatedAtColumnName: String = \u201c\u201d) Properties \u00b6 Name Summary createdAtColumnName [jvm] val createdAtColumnName : String install [jvm] val install : Boolean updatedAtColumnName [jvm] val updatedAtColumnName : String","title":"JooqTimestampRecordListenerOptions - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/#jooqtimestamprecordlisteneroptions","text":"[jvm]\\ data class JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String , updatedAtColumnName: String ) Use this class to configure the installation of the misk.jooq.listeners.JooqTimestampRecordListener You can use both or configure just one of the createdAtColumnName to be set to the current timestamp when inserting or updating it. If you leave the one you don\u2019t want set as an empty string the JooqTimestampRecordListener will ignore it.","title":"JooqTimestampRecordListenerOptions"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/#constructors","text":"JooqTimestampRecordListenerOptions [jvm] fun JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String = \u201c\u201d, updatedAtColumnName: String = \u201c\u201d)","title":"Constructors"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/#properties","text":"Name Summary createdAtColumnName [jvm] val createdAtColumnName : String install [jvm] val install : Boolean updatedAtColumnName [jvm] val updatedAtColumnName : String","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/-jooq-timestamp-record-listener-options/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListenerOptions / JooqTimestampRecordListenerOptions JooqTimestampRecordListenerOptions \u00b6 [jvm]\\ fun JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String = \u201c\u201d, updatedAtColumnName: String = \u201c\u201d)","title":"JooqTimestampRecordListenerOptions - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/-jooq-timestamp-record-listener-options/#jooqtimestamprecordlisteneroptions","text":"[jvm]\\ fun JooqTimestampRecordListenerOptions (install: Boolean , createdAtColumnName: String = \u201c\u201d, updatedAtColumnName: String = \u201c\u201d)","title":"JooqTimestampRecordListenerOptions"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/created-at-column-name/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListenerOptions / createdAtColumnName createdAtColumnName \u00b6 [jvm]\\ val createdAtColumnName : String","title":"createdAtColumnName - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/created-at-column-name/#createdatcolumnname","text":"[jvm]\\ val createdAtColumnName : String","title":"createdAtColumnName"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/install/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListenerOptions / install install \u00b6 [jvm]\\ val install : Boolean","title":"install - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/install/#install","text":"[jvm]\\ val install : Boolean","title":"install"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/updated-at-column-name/","text":"// misk-jooq / misk.jooq.listeners / JooqTimestampRecordListenerOptions / updatedAtColumnName updatedAtColumnName \u00b6 [jvm]\\ val updatedAtColumnName : String","title":"updatedAtColumnName - Misk"},{"location":"0.x/misk-jooq/misk.jooq.listeners/-jooq-timestamp-record-listener-options/updated-at-column-name/#updatedatcolumnname","text":"[jvm]\\ val updatedAtColumnName : String","title":"updatedAtColumnName"},{"location":"0.x/misk-jooq/misk.jooq.testgen/","text":"// misk-jooq / misk.jooq.testgen Package misk.jooq.testgen \u00b6 Types \u00b6 Name Summary DefaultCatalog [jvm] open class DefaultCatalog : CatalogImpl This class is generated by jOOQ. Jooq [jvm] open class Jooq : SchemaImpl This class is generated by jOOQ.","title":"Package misk.jooq.testgen - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/#package-miskjooqtestgen","text":"","title":"Package misk.jooq.testgen"},{"location":"0.x/misk-jooq/misk.jooq.testgen/#types","text":"Name Summary DefaultCatalog [jvm] open class DefaultCatalog : CatalogImpl This class is generated by jOOQ. Jooq [jvm] open class Jooq : SchemaImpl This class is generated by jOOQ.","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/","text":"// misk-jooq / misk.jooq.testgen / DefaultCatalog DefaultCatalog \u00b6 [jvm]\\ open class DefaultCatalog : CatalogImpl This class is generated by jOOQ. Constructors \u00b6 DefaultCatalog [jvm] fun DefaultCatalog () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary accept [jvm] override fun accept (p0: Context<*>) clauses [jvm] override fun clauses (p0: Context<*>): Array <Clause> configuration [jvm] open fun configuration (): Configuration declaresCTE [jvm] open override fun declaresCTE (): Boolean declaresFields [jvm] open override fun declaresFields (): Boolean declaresTables [jvm] open override fun declaresTables (): Boolean declaresWindows [jvm] open override fun declaresWindows (): Boolean equals [jvm] open operator override fun equals (other: Any ?): Boolean generatesCast [jvm] open override fun generatesCast (): Boolean getComment [jvm] override fun getComment (): String getCommentPart [jvm] override fun getCommentPart (): Comment getName [jvm] override fun getName (): String getQualifiedName [jvm] open override fun getQualifiedName (): Name getSchema [jvm] override fun getSchema (p0: String ): Schema? override fun getSchema (p0: Name): Schema? getSchemas [jvm] open override fun getSchemas (): List <Schema> getUnqualifiedName [jvm] override fun getUnqualifiedName (): Name hashCode [jvm] open override fun hashCode (): Int rendersContent [jvm] open override fun rendersContent (p0: Context<*>): Boolean schemaStream [jvm] override fun schemaStream (): Stream <Schema> toString [jvm] open override fun toString (): String translate [jvm] fun translate (p0: String , p1: SQLException ): DataAccessException Properties \u00b6 Name Summary JOOQ [jvm] val JOOQ : Jooq The schema jooq .","title":"DefaultCatalog - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/#defaultcatalog","text":"[jvm]\\ open class DefaultCatalog : CatalogImpl This class is generated by jOOQ.","title":"DefaultCatalog"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/#constructors","text":"DefaultCatalog [jvm] fun DefaultCatalog ()","title":"Constructors"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/#functions","text":"Name Summary accept [jvm] override fun accept (p0: Context<*>) clauses [jvm] override fun clauses (p0: Context<*>): Array <Clause> configuration [jvm] open fun configuration (): Configuration declaresCTE [jvm] open override fun declaresCTE (): Boolean declaresFields [jvm] open override fun declaresFields (): Boolean declaresTables [jvm] open override fun declaresTables (): Boolean declaresWindows [jvm] open override fun declaresWindows (): Boolean equals [jvm] open operator override fun equals (other: Any ?): Boolean generatesCast [jvm] open override fun generatesCast (): Boolean getComment [jvm] override fun getComment (): String getCommentPart [jvm] override fun getCommentPart (): Comment getName [jvm] override fun getName (): String getQualifiedName [jvm] open override fun getQualifiedName (): Name getSchema [jvm] override fun getSchema (p0: String ): Schema? override fun getSchema (p0: Name): Schema? getSchemas [jvm] open override fun getSchemas (): List <Schema> getUnqualifiedName [jvm] override fun getUnqualifiedName (): Name hashCode [jvm] open override fun hashCode (): Int rendersContent [jvm] open override fun rendersContent (p0: Context<*>): Boolean schemaStream [jvm] override fun schemaStream (): Stream <Schema> toString [jvm] open override fun toString (): String translate [jvm] fun translate (p0: String , p1: SQLException ): DataAccessException","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/#properties","text":"Name Summary JOOQ [jvm] val JOOQ : Jooq The schema jooq .","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-default-catalog/","text":"// misk-jooq / misk.jooq.testgen / DefaultCatalog / DefaultCatalog DefaultCatalog \u00b6 [jvm]\\ fun DefaultCatalog ()","title":"DefaultCatalog - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-default-catalog/#defaultcatalog","text":"[jvm]\\ fun DefaultCatalog ()","title":"DefaultCatalog"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-j-o-o-q/","text":"// misk-jooq / misk.jooq.testgen / DefaultCatalog / JOOQ JOOQ \u00b6 [jvm]\\ val JOOQ : Jooq The schema jooq .","title":"JOOQ - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-j-o-o-q/#jooq","text":"[jvm]\\ val JOOQ : Jooq The schema jooq .","title":"JOOQ"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/get-schemas/","text":"// misk-jooq / misk.jooq.testgen / DefaultCatalog / getSchemas getSchemas \u00b6 [jvm]\\ open override fun getSchemas (): List <Schema>","title":"getSchemas - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/get-schemas/#getschemas","text":"[jvm]\\ open override fun getSchemas (): List <Schema>","title":"getSchemas"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-companion/","text":"// misk-jooq / misk.jooq.testgen / DefaultCatalog / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary DEFAULT_CATALOG [jvm] val DEFAULT_CATALOG : DefaultCatalog The reference instance of DEFAULT_CATALOG","title":"Companion - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-companion/#properties","text":"Name Summary DEFAULT_CATALOG [jvm] val DEFAULT_CATALOG : DefaultCatalog The reference instance of DEFAULT_CATALOG","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-companion/-d-e-f-a-u-l-t_-c-a-t-a-l-o-g/","text":"// misk-jooq / misk.jooq.testgen / DefaultCatalog / Companion / DEFAULT_CATALOG DEFAULT_CATALOG \u00b6 [jvm]\\ val DEFAULT_CATALOG : DefaultCatalog The reference instance of DEFAULT_CATALOG","title":"DEFAULT_CATALOG - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-default-catalog/-companion/-d-e-f-a-u-l-t_-c-a-t-a-l-o-g/#default_catalog","text":"[jvm]\\ val DEFAULT_CATALOG : DefaultCatalog The reference instance of DEFAULT_CATALOG","title":"DEFAULT_CATALOG"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/","text":"// misk-jooq / misk.jooq.testgen / Jooq Jooq \u00b6 [jvm]\\ open class Jooq : SchemaImpl This class is generated by jOOQ. Constructors \u00b6 Jooq [jvm] fun Jooq () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary accept [jvm] override fun accept (p0: Context<*>) clauses [jvm] override fun clauses (p0: Context<*>): Array <Clause> configuration [jvm] open fun configuration (): Configuration declaresCTE [jvm] open override fun declaresCTE (): Boolean declaresFields [jvm] open override fun declaresFields (): Boolean declaresTables [jvm] open override fun declaresTables (): Boolean declaresWindows [jvm] open override fun declaresWindows (): Boolean domainStream [jvm] override fun domainStream (): Stream <Domain<*>> equals [jvm] open operator override fun equals (other: Any ?): Boolean generatesCast [jvm] open override fun generatesCast (): Boolean getCatalog [jvm] open override fun getCatalog (): Catalog getComment [jvm] override fun getComment (): String getCommentPart [jvm] override fun getCommentPart (): Comment getDomain [jvm] override fun getDomain (p0: String ): Domain< >? override fun getDomain (p0: Name): Domain< >? getDomains [jvm] open override fun getDomains (): MutableList <Domain<*>> getName [jvm] override fun getName (): String getQualifiedName [jvm] open override fun getQualifiedName (): Name getSequence [jvm] override fun getSequence (p0: String ): Sequence< >? override fun getSequence (p0: Name): Sequence< >? getSequences [jvm] open override fun getSequences (): MutableList <Sequence<*>> getTable [jvm] override fun getTable (p0: String ): Table< >? override fun getTable (p0: Name): Table< >? getTables [jvm] open override fun getTables (): List <Table<*>> getUDT [jvm] override fun getUDT (p0: String ): UDT< >? override fun getUDT (p0: Name): UDT< >? getUDTs [jvm] open override fun getUDTs (): MutableList <UDT<*>> getUnqualifiedName [jvm] override fun getUnqualifiedName (): Name hashCode [jvm] open override fun hashCode (): Int rendersContent [jvm] open override fun rendersContent (p0: Context<*>): Boolean sequenceStream [jvm] override fun sequenceStream (): Stream <Sequence<*>> tableStream [jvm] override fun tableStream (): Stream <Table<*>> toString [jvm] open override fun toString (): String translate [jvm] fun translate (p0: String , p1: SQLException ): DataAccessException udtStream [jvm] override fun udtStream (): Stream <UDT<*>> Properties \u00b6 Name Summary MOVIE [jvm] val MOVIE : Movie The table jooq.movie .","title":"Jooq - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/#jooq","text":"[jvm]\\ open class Jooq : SchemaImpl This class is generated by jOOQ.","title":"Jooq"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/#constructors","text":"Jooq [jvm] fun Jooq ()","title":"Constructors"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/#functions","text":"Name Summary accept [jvm] override fun accept (p0: Context<*>) clauses [jvm] override fun clauses (p0: Context<*>): Array <Clause> configuration [jvm] open fun configuration (): Configuration declaresCTE [jvm] open override fun declaresCTE (): Boolean declaresFields [jvm] open override fun declaresFields (): Boolean declaresTables [jvm] open override fun declaresTables (): Boolean declaresWindows [jvm] open override fun declaresWindows (): Boolean domainStream [jvm] override fun domainStream (): Stream <Domain<*>> equals [jvm] open operator override fun equals (other: Any ?): Boolean generatesCast [jvm] open override fun generatesCast (): Boolean getCatalog [jvm] open override fun getCatalog (): Catalog getComment [jvm] override fun getComment (): String getCommentPart [jvm] override fun getCommentPart (): Comment getDomain [jvm] override fun getDomain (p0: String ): Domain< >? override fun getDomain (p0: Name): Domain< >? getDomains [jvm] open override fun getDomains (): MutableList <Domain<*>> getName [jvm] override fun getName (): String getQualifiedName [jvm] open override fun getQualifiedName (): Name getSequence [jvm] override fun getSequence (p0: String ): Sequence< >? override fun getSequence (p0: Name): Sequence< >? getSequences [jvm] open override fun getSequences (): MutableList <Sequence<*>> getTable [jvm] override fun getTable (p0: String ): Table< >? override fun getTable (p0: Name): Table< >? getTables [jvm] open override fun getTables (): List <Table<*>> getUDT [jvm] override fun getUDT (p0: String ): UDT< >? override fun getUDT (p0: Name): UDT< >? getUDTs [jvm] open override fun getUDTs (): MutableList <UDT<*>> getUnqualifiedName [jvm] override fun getUnqualifiedName (): Name hashCode [jvm] open override fun hashCode (): Int rendersContent [jvm] open override fun rendersContent (p0: Context<*>): Boolean sequenceStream [jvm] override fun sequenceStream (): Stream <Sequence<*>> tableStream [jvm] override fun tableStream (): Stream <Table<*>> toString [jvm] open override fun toString (): String translate [jvm] fun translate (p0: String , p1: SQLException ): DataAccessException udtStream [jvm] override fun udtStream (): Stream <UDT<*>>","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/#properties","text":"Name Summary MOVIE [jvm] val MOVIE : Movie The table jooq.movie .","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-jooq/","text":"// misk-jooq / misk.jooq.testgen / Jooq / Jooq Jooq \u00b6 [jvm]\\ fun Jooq ()","title":"Jooq - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-jooq/#jooq","text":"[jvm]\\ fun Jooq ()","title":"Jooq"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-m-o-v-i-e/","text":"// misk-jooq / misk.jooq.testgen / Jooq / MOVIE MOVIE \u00b6 [jvm]\\ val MOVIE : Movie The table jooq.movie .","title":"MOVIE - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-m-o-v-i-e/#movie","text":"[jvm]\\ val MOVIE : Movie The table jooq.movie .","title":"MOVIE"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/get-catalog/","text":"// misk-jooq / misk.jooq.testgen / Jooq / getCatalog getCatalog \u00b6 [jvm]\\ open override fun getCatalog (): Catalog","title":"getCatalog - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/get-catalog/#getcatalog","text":"[jvm]\\ open override fun getCatalog (): Catalog","title":"getCatalog"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/get-tables/","text":"// misk-jooq / misk.jooq.testgen / Jooq / getTables getTables \u00b6 [jvm]\\ open override fun getTables (): List <Table<*>>","title":"getTables - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/get-tables/#gettables","text":"[jvm]\\ open override fun getTables (): List <Table<*>>","title":"getTables"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-companion/","text":"// misk-jooq / misk.jooq.testgen / Jooq / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary JOOQ [jvm] val JOOQ : Jooq The reference instance of jooq","title":"Companion - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-companion/#properties","text":"Name Summary JOOQ [jvm] val JOOQ : Jooq The reference instance of jooq","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-companion/-j-o-o-q/","text":"// misk-jooq / misk.jooq.testgen / Jooq / Companion / JOOQ JOOQ \u00b6 [jvm]\\ val JOOQ : Jooq The reference instance of jooq","title":"JOOQ - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen/-jooq/-companion/-j-o-o-q/#jooq","text":"[jvm]\\ val JOOQ : Jooq The reference instance of jooq","title":"JOOQ"},{"location":"0.x/misk-jooq/misk.jooq.testgen.keys/","text":"// misk-jooq / misk.jooq.testgen.keys Package misk.jooq.testgen.keys \u00b6 Properties \u00b6 Name Summary KEY_MOVIE_PRIMARY [jvm] val KEY_MOVIE_PRIMARY : UniqueKey< MovieRecord >","title":"Package misk.jooq.testgen.keys - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.keys/#package-miskjooqtestgenkeys","text":"","title":"Package misk.jooq.testgen.keys"},{"location":"0.x/misk-jooq/misk.jooq.testgen.keys/#properties","text":"Name Summary KEY_MOVIE_PRIMARY [jvm] val KEY_MOVIE_PRIMARY : UniqueKey< MovieRecord >","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen.keys/-k-e-y_-m-o-v-i-e_-p-r-i-m-a-r-y/","text":"// misk-jooq / misk.jooq.testgen.keys / KEY_MOVIE_PRIMARY KEY_MOVIE_PRIMARY \u00b6 [jvm]\\ val KEY_MOVIE_PRIMARY : UniqueKey< MovieRecord >","title":"KEY_MOVIE_PRIMARY - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.keys/-k-e-y_-m-o-v-i-e_-p-r-i-m-a-r-y/#key_movie_primary","text":"[jvm]\\ val KEY_MOVIE_PRIMARY : UniqueKey< MovieRecord >","title":"KEY_MOVIE_PRIMARY"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/","text":"// misk-jooq / misk.jooq.testgen.tables Package misk.jooq.testgen.tables \u00b6 Types \u00b6 Name Summary Movie [jvm] open class Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?) : TableImpl< MovieRecord > This class is generated by jOOQ.","title":"Package misk.jooq.testgen.tables - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/#package-miskjooqtestgentables","text":"","title":"Package misk.jooq.testgen.tables"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/#types","text":"Name Summary Movie [jvm] open class Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?) : TableImpl< MovieRecord > This class is generated by jOOQ.","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie Movie \u00b6 [jvm]\\ open class Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?) : TableImpl< MovieRecord > This class is generated by jOOQ. Constructors \u00b6 Movie [jvm] fun Movie (alias: String ) Create an aliased jooq.movie table reference Movie [jvm] fun Movie (alias: Name) Create an aliased jooq.movie table reference Movie [jvm] fun Movie () Create a jooq.movie table reference Movie [jvm] fun Movie (child: Table<out Record>, key: ForeignKey<out Record, MovieRecord >) Movie [jvm] fun Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary accept [jvm] override fun accept (p0: Context<*>) aliased [jvm] @Internal open fun aliased (): Boolean as [jvm] open override fun as (alias: String ): Movie open override fun as (alias: Name): Movie override fun as (p0: Table< >): Table< MovieRecord > override fun as (p0: String , p1: BiFunction <in Field< >, in Int , out String >): Table< MovieRecord > override fun as (p0: String , p1: Function <in Field< >, out String >): Table< MovieRecord > open override fun as (p0: String , vararg p1: String ): Table< MovieRecord > override fun as (p0: Name, p1: BiFunction <in Field< >, in Int , out Name>): Table< MovieRecord > override fun as (p0: Name, p1: Function <in Field< >, out Name>): Table< MovieRecord > override fun as (p0: Table< >, p1: BiFunction <in Field< >, in Int , out Field< >>): Table< MovieRecord > override fun as (p0: Table< >, p1: Function <in Field< >, out Field< >>): Table< MovieRecord > override fun as (p0: Table< >, vararg p1: Field<*>): Table< MovieRecord > open override fun as (p0: Name, vararg p1: Name): Table< MovieRecord > asTable [jvm] override fun asTable (): Table< MovieRecord > override fun asTable (p0: String ): Table< MovieRecord > override fun asTable (p0: Name): Table< MovieRecord > override fun asTable (p0: Table< >): Table< MovieRecord > override fun asTable (p0: String , p1: BiFunction <in Field< >, in Int , out String >): Table< MovieRecord > override fun asTable (p0: String , p1: Function <in Field< >, out String >): Table< MovieRecord > override fun asTable (p0: String , vararg p1: String ): Table< MovieRecord > override fun asTable (p0: Name, vararg p1: Name): Table< MovieRecord > override fun asTable (p0: Table< >, vararg p1: Field<*>): Table< MovieRecord > asterisk [jvm] override fun asterisk (): QualifiedAsterisk clauses [jvm] override fun clauses (p0: Context<*>): Array <Clause> configuration [jvm] open fun configuration (): Configuration createField [jvm] fun < T : Any > createField (p0: Name, p1: DataType< T >): TableField< MovieRecord , T > fun < T : Any > createField (p0: Name, p1: DataType< T >, p2: String ): TableField< MovieRecord , T > fun < T : Any , U : Any > createField (p0: Name, p1: DataType< T >, p2: String , p3: Binding< T , U >): TableField< MovieRecord , U > fun < T : Any , U : Any > createField (p0: Name, p1: DataType< T >, p2: String , p3: Converter< T , U >): TableField< MovieRecord , U > fun < T : Any , X : Any , U : Any > createField (p0: Name, p1: DataType< T >, p2: String , p3: Converter< X , U >, p4: Binding< T , X >): TableField< MovieRecord , U > crossApply [jvm] override fun crossApply (p0: String ): Table<Record> override fun crossApply (p0: Name): Table<Record> override fun crossApply (p0: SQL): Table<Record> override fun crossApply (p0: TableLike<*>): Table<Record> override fun crossApply (p0: String , vararg p1: Any ): Table<Record> override fun crossApply (p0: String , vararg p1: QueryPart): Table<Record> crossJoin [jvm] override fun crossJoin (p0: String ): Table<Record> override fun crossJoin (p0: Name): Table<Record> override fun crossJoin (p0: SQL): Table<Record> override fun crossJoin (p0: TableLike<*>): Table<Record> override fun crossJoin (p0: String , vararg p1: Any ): Table<Record> override fun crossJoin (p0: String , vararg p1: QueryPart): Table<Record> declaresCTE [jvm] open override fun declaresCTE (): Boolean declaresFields [jvm] open override fun declaresFields (): Boolean declaresTables [jvm] open override fun declaresTables (): Boolean declaresWindows [jvm] open override fun declaresWindows (): Boolean divideBy [jvm] override fun divideBy (p0: Table<*>): DivideByOnStep eq [jvm] override fun eq (p0: Table< MovieRecord >): Condition equal [jvm] override fun equal (p0: Table< MovieRecord >): Condition equals [jvm] open operator override fun equals (other: Any ?): Boolean field [jvm] override fun field (p0: Int ): Field< >? override fun field (p0: String ): Field< >? override fun < T : Any > field (p0: Field< T >): Field< T >? override fun field (p0: Name): Field<*>? override fun < T : Any > field (p0: Int , p1: Class < T >): Field< T >? override fun < T : Any > field (p0: Int , p1: DataType< T >): Field< T >? override fun < T : Any > field (p0: String , p1: Class < T >): Field< T >? override fun < T : Any > field (p0: String , p1: DataType< T >): Field< T >? override fun < T : Any > field (p0: Name, p1: Class < T >): Field< T >? override fun < T : Any > field (p0: Name, p1: DataType< T >): Field< T >? fields [jvm] override fun fields (): Array <Field< >> override fun fields (vararg p0: String ): Array <Field< >> override fun fields (vararg p0: Field< >): Array <Field< >> override fun fields (vararg p0: Name): Array <Field< >> override fun fields (vararg p0: Int ): Array <Field< >> fields0 [jvm] override fun fields0 (): Fields< MovieRecord > fieldsRow [jvm] open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> fieldStream [jvm] override fun fieldStream (): Stream <Field<*>> forceIndex [jvm] override fun forceIndex (vararg p0: String ): Table< MovieRecord > forceIndexForGroupBy [jvm] override fun forceIndexForGroupBy (vararg p0: String ): Table< MovieRecord > forceIndexForJoin [jvm] override fun forceIndexForJoin (vararg p0: String ): Table< MovieRecord > forceIndexForOrderBy [jvm] override fun forceIndexForOrderBy (vararg p0: String ): Table< MovieRecord > from [jvm] override fun from (p0: Record): MovieRecord fullJoin [jvm] override fun fullJoin (p0: String ): TableOnStep<Record> override fun fullJoin (p0: Name): TableOnStep<Record> override fun fullJoin (p0: SQL): TableOnStep<Record> override fun fullJoin (p0: TableLike<*>): TableOnStep<Record> override fun fullJoin (p0: String , vararg p1: Any ): TableOnStep<Record> override fun fullJoin (p0: String , vararg p1: QueryPart): TableOnStep<Record> fullOuterJoin [jvm] override fun fullOuterJoin (p0: String ): TableOnStep<Record> override fun fullOuterJoin (p0: Name): TableOnStep<Record> override fun fullOuterJoin (p0: SQL): TableOnStep<Record> override fun fullOuterJoin (p0: TableLike<*>): TableOnStep<Record> override fun fullOuterJoin (p0: String , vararg p1: Any ): TableOnStep<Record> override fun fullOuterJoin (p0: String , vararg p1: QueryPart): TableOnStep<Record> generatesCast [jvm] open override fun generatesCast (): Boolean getAliasedTable [jvm] open fun getAliasedTable (): Table< MovieRecord > getCatalog [jvm] override fun getCatalog (): Catalog? getChecks [jvm] open override fun getChecks (): MutableList <Check< MovieRecord >> getComment [jvm] override fun getComment (): String getCommentPart [jvm] override fun getCommentPart (): Comment getDataType [jvm] override fun getDataType (): DataType< MovieRecord > getIdentity [jvm] open override fun getIdentity (): Identity< MovieRecord , Long ?> getIndexes [jvm] open override fun getIndexes (): MutableList <Index> getKeys [jvm] open override fun getKeys (): List <UniqueKey< MovieRecord >> getName [jvm] override fun getName (): String getOptions [jvm] override fun getOptions (): TableOptions getPrimaryKey [jvm] open override fun getPrimaryKey (): UniqueKey< MovieRecord > getQualifiedName [jvm] open override fun getQualifiedName (): Name getRecordTimestamp [jvm] open override fun getRecordTimestamp (): TableField< MovieRecord , *>? getRecordType [jvm] open override fun getRecordType (): Class < MovieRecord > The class holding records for this type getRecordVersion [jvm] open override fun getRecordVersion (): TableField< MovieRecord , Int ?> getReferences [jvm] open override fun getReferences (): MutableList <ForeignKey< MovieRecord , *>> getReferencesFrom [jvm] override fun < O : Record> getReferencesFrom (p0: Table< O >): MutableList <ForeignKey< O , MovieRecord >> getReferencesTo [jvm] override fun < O : Record> getReferencesTo (p0: Table< O >): MutableList <ForeignKey< MovieRecord , O >> getSchema [jvm] open override fun getSchema (): Schema getType [jvm] override fun getType (): TableOptions.TableType getUnqualifiedName [jvm] override fun getUnqualifiedName (): Name hashCode [jvm] open override fun hashCode (): Int ignoreIndex [jvm] override fun ignoreIndex (vararg p0: String ): Table< MovieRecord > ignoreIndexForGroupBy [jvm] override fun ignoreIndexForGroupBy (vararg p0: String ): Table< MovieRecord > ignoreIndexForJoin [jvm] override fun ignoreIndexForJoin (vararg p0: String ): Table< MovieRecord > ignoreIndexForOrderBy [jvm] override fun ignoreIndexForOrderBy (vararg p0: String ): Table< MovieRecord > indexOf [jvm] override fun indexOf (p0: String ): Int override fun indexOf (p0: Field<*>): Int override fun indexOf (p0: Name): Int innerJoin [jvm] override fun innerJoin (p0: String ): TableOnStep<Record> override fun innerJoin (p0: Name): TableOnStep<Record> override fun innerJoin (p0: SQL): TableOnStep<Record> override fun innerJoin (p0: TableLike<*>): TableOnStep<Record> override fun innerJoin (p0: String , vararg p1: Any ): TableOnStep<Record> override fun innerJoin (p0: String , vararg p1: QueryPart): TableOnStep<Record> join [jvm] override fun join (p0: String ): TableOnStep<Record> override fun join (p0: Name): TableOnStep<Record> override fun join (p0: SQL): TableOnStep<Record> override fun join (p0: TableLike< >): TableOnStep<Record> override fun join (p0: String , vararg p1: Any ): TableOnStep<Record> override fun join (p0: String , vararg p1: QueryPart): TableOnStep<Record> override fun join (p0: TableLike< >, p1: JoinType): TableOptionalOnStep<Record> leftAntiJoin [jvm] override fun leftAntiJoin (p0: TableLike<*>): TableOnStep< MovieRecord > leftJoin [jvm] override fun leftJoin (p0: String ): TablePartitionByStep<Record> override fun leftJoin (p0: Name): TablePartitionByStep<Record> override fun leftJoin (p0: SQL): TablePartitionByStep<Record> override fun leftJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun leftJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun leftJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> leftOuterJoin [jvm] override fun leftOuterJoin (p0: String ): TablePartitionByStep<Record> override fun leftOuterJoin (p0: Name): TablePartitionByStep<Record> override fun leftOuterJoin (p0: SQL): TablePartitionByStep<Record> override fun leftOuterJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun leftOuterJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun leftOuterJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> leftSemiJoin [jvm] override fun leftSemiJoin (p0: TableLike<*>): TableOnStep< MovieRecord > naturalFullOuterJoin [jvm] override fun naturalFullOuterJoin (p0: String ): Table<Record> override fun naturalFullOuterJoin (p0: Name): Table<Record> override fun naturalFullOuterJoin (p0: SQL): Table<Record> override fun naturalFullOuterJoin (p0: TableLike<*>): Table<Record> override fun naturalFullOuterJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalFullOuterJoin (p0: String , vararg p1: QueryPart): Table<Record> naturalJoin [jvm] override fun naturalJoin (p0: String ): Table<Record> override fun naturalJoin (p0: Name): Table<Record> override fun naturalJoin (p0: SQL): Table<Record> override fun naturalJoin (p0: TableLike<*>): Table<Record> override fun naturalJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalJoin (p0: String , vararg p1: QueryPart): Table<Record> naturalLeftOuterJoin [jvm] override fun naturalLeftOuterJoin (p0: String ): Table<Record> override fun naturalLeftOuterJoin (p0: Name): Table<Record> override fun naturalLeftOuterJoin (p0: SQL): Table<Record> override fun naturalLeftOuterJoin (p0: TableLike<*>): Table<Record> override fun naturalLeftOuterJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalLeftOuterJoin (p0: String , vararg p1: QueryPart): Table<Record> naturalRightOuterJoin [jvm] override fun naturalRightOuterJoin (p0: String ): Table<Record> override fun naturalRightOuterJoin (p0: Name): Table<Record> override fun naturalRightOuterJoin (p0: SQL): Table<Record> override fun naturalRightOuterJoin (p0: TableLike<*>): Table<Record> override fun naturalRightOuterJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalRightOuterJoin (p0: String , vararg p1: QueryPart): Table<Record> ne [jvm] override fun ne (p0: Table< MovieRecord >): Condition newRecord [jvm] override fun newRecord (): MovieRecord notEqual [jvm] override fun notEqual (p0: Table< MovieRecord >): Condition outerApply [jvm] override fun outerApply (p0: String ): Table<Record> override fun outerApply (p0: Name): Table<Record> override fun outerApply (p0: SQL): Table<Record> override fun outerApply (p0: TableLike<*>): Table<Record> override fun outerApply (p0: String , vararg p1: Any ): Table<Record> override fun outerApply (p0: String , vararg p1: QueryPart): Table<Record> recordType [jvm] override fun recordType (): RecordType< MovieRecord > rename [jvm] open override fun rename (name: String ): Movie open override fun rename (name: Name): Movie Rename this table rendersContent [jvm] open override fun rendersContent (p0: Context<*>): Boolean rightJoin [jvm] override fun rightJoin (p0: String ): TablePartitionByStep<Record> override fun rightJoin (p0: Name): TablePartitionByStep<Record> override fun rightJoin (p0: SQL): TablePartitionByStep<Record> override fun rightJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun rightJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun rightJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> rightOuterJoin [jvm] override fun rightOuterJoin (p0: String ): TablePartitionByStep<Record> override fun rightOuterJoin (p0: Name): TablePartitionByStep<Record> override fun rightOuterJoin (p0: SQL): TablePartitionByStep<Record> override fun rightOuterJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun rightOuterJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun rightOuterJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> rowid [jvm] override fun rowid (): Field<RowId> straightJoin [jvm] override fun straightJoin (p0: String ): TableOptionalOnStep<Record> override fun straightJoin (p0: Name): TableOptionalOnStep<Record> override fun straightJoin (p0: SQL): TableOptionalOnStep<Record> override fun straightJoin (p0: TableLike<*>): TableOptionalOnStep<Record> override fun straightJoin (p0: String , vararg p1: Any ): TableOptionalOnStep<Record> override fun straightJoin (p0: String , vararg p1: QueryPart): TableOptionalOnStep<Record> toString [jvm] open override fun toString (): String translate [jvm] fun translate (p0: String , p1: SQLException ): DataAccessException useIndex [jvm] override fun useIndex (vararg p0: String ): Table< MovieRecord > useIndexForGroupBy [jvm] override fun useIndexForGroupBy (vararg p0: String ): Table< MovieRecord > useIndexForJoin [jvm] override fun useIndexForJoin (vararg p0: String ): Table< MovieRecord > useIndexForOrderBy [jvm] override fun useIndexForOrderBy (vararg p0: String ): Table< MovieRecord > where [jvm] open override fun where (vararg p0: Condition): Table< MovieRecord > open override fun where (p0: String ): Table< MovieRecord > open override fun where (p0: MutableCollection <out Condition>): Table< MovieRecord > open override fun where (p0: Condition): Table< MovieRecord > open override fun where (p0: Field< Boolean >): Table< MovieRecord > open override fun where (p0: SQL): Table< MovieRecord > open override fun where (p0: String , vararg p1: Any ): Table< MovieRecord > open override fun where (p0: String , vararg p1: QueryPart): Table< MovieRecord > whereExists [jvm] open override fun whereExists (p0: Select<*>): Table< MovieRecord > whereNotExists [jvm] open override fun whereNotExists (p0: Select<*>): Table< MovieRecord > Properties \u00b6 Name Summary alias [jvm] val alias : Alias<Table< MovieRecord >> child [jvm] val child : Table<*> childPath [jvm] val childPath : ForeignKey<*, MovieRecord > CREATED_AT [jvm] val CREATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.created_at . fields [jvm] val fields : Fields< MovieRecord > GENRE [jvm] val GENRE : TableField< MovieRecord , String ?> The column jooq.movie.genre . ID [jvm] val ID : TableField< MovieRecord , Long ?> The column jooq.movie.id . NAME [jvm] val NAME : TableField< MovieRecord , String ?> The column jooq.movie.name . parameters [jvm] val parameters : Array <Field<*>> UPDATED_AT [jvm] val UPDATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.updated_at . VERSION [jvm] val VERSION : TableField< MovieRecord , Int ?> The column jooq.movie.version .","title":"Movie - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/#movie","text":"[jvm]\\ open class Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?) : TableImpl< MovieRecord > This class is generated by jOOQ.","title":"Movie"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/#constructors","text":"Movie [jvm] fun Movie (alias: String ) Create an aliased jooq.movie table reference Movie [jvm] fun Movie (alias: Name) Create an aliased jooq.movie table reference Movie [jvm] fun Movie () Create a jooq.movie table reference Movie [jvm] fun Movie (child: Table<out Record>, key: ForeignKey<out Record, MovieRecord >) Movie [jvm] fun Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?)","title":"Constructors"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/#functions","text":"Name Summary accept [jvm] override fun accept (p0: Context<*>) aliased [jvm] @Internal open fun aliased (): Boolean as [jvm] open override fun as (alias: String ): Movie open override fun as (alias: Name): Movie override fun as (p0: Table< >): Table< MovieRecord > override fun as (p0: String , p1: BiFunction <in Field< >, in Int , out String >): Table< MovieRecord > override fun as (p0: String , p1: Function <in Field< >, out String >): Table< MovieRecord > open override fun as (p0: String , vararg p1: String ): Table< MovieRecord > override fun as (p0: Name, p1: BiFunction <in Field< >, in Int , out Name>): Table< MovieRecord > override fun as (p0: Name, p1: Function <in Field< >, out Name>): Table< MovieRecord > override fun as (p0: Table< >, p1: BiFunction <in Field< >, in Int , out Field< >>): Table< MovieRecord > override fun as (p0: Table< >, p1: Function <in Field< >, out Field< >>): Table< MovieRecord > override fun as (p0: Table< >, vararg p1: Field<*>): Table< MovieRecord > open override fun as (p0: Name, vararg p1: Name): Table< MovieRecord > asTable [jvm] override fun asTable (): Table< MovieRecord > override fun asTable (p0: String ): Table< MovieRecord > override fun asTable (p0: Name): Table< MovieRecord > override fun asTable (p0: Table< >): Table< MovieRecord > override fun asTable (p0: String , p1: BiFunction <in Field< >, in Int , out String >): Table< MovieRecord > override fun asTable (p0: String , p1: Function <in Field< >, out String >): Table< MovieRecord > override fun asTable (p0: String , vararg p1: String ): Table< MovieRecord > override fun asTable (p0: Name, vararg p1: Name): Table< MovieRecord > override fun asTable (p0: Table< >, vararg p1: Field<*>): Table< MovieRecord > asterisk [jvm] override fun asterisk (): QualifiedAsterisk clauses [jvm] override fun clauses (p0: Context<*>): Array <Clause> configuration [jvm] open fun configuration (): Configuration createField [jvm] fun < T : Any > createField (p0: Name, p1: DataType< T >): TableField< MovieRecord , T > fun < T : Any > createField (p0: Name, p1: DataType< T >, p2: String ): TableField< MovieRecord , T > fun < T : Any , U : Any > createField (p0: Name, p1: DataType< T >, p2: String , p3: Binding< T , U >): TableField< MovieRecord , U > fun < T : Any , U : Any > createField (p0: Name, p1: DataType< T >, p2: String , p3: Converter< T , U >): TableField< MovieRecord , U > fun < T : Any , X : Any , U : Any > createField (p0: Name, p1: DataType< T >, p2: String , p3: Converter< X , U >, p4: Binding< T , X >): TableField< MovieRecord , U > crossApply [jvm] override fun crossApply (p0: String ): Table<Record> override fun crossApply (p0: Name): Table<Record> override fun crossApply (p0: SQL): Table<Record> override fun crossApply (p0: TableLike<*>): Table<Record> override fun crossApply (p0: String , vararg p1: Any ): Table<Record> override fun crossApply (p0: String , vararg p1: QueryPart): Table<Record> crossJoin [jvm] override fun crossJoin (p0: String ): Table<Record> override fun crossJoin (p0: Name): Table<Record> override fun crossJoin (p0: SQL): Table<Record> override fun crossJoin (p0: TableLike<*>): Table<Record> override fun crossJoin (p0: String , vararg p1: Any ): Table<Record> override fun crossJoin (p0: String , vararg p1: QueryPart): Table<Record> declaresCTE [jvm] open override fun declaresCTE (): Boolean declaresFields [jvm] open override fun declaresFields (): Boolean declaresTables [jvm] open override fun declaresTables (): Boolean declaresWindows [jvm] open override fun declaresWindows (): Boolean divideBy [jvm] override fun divideBy (p0: Table<*>): DivideByOnStep eq [jvm] override fun eq (p0: Table< MovieRecord >): Condition equal [jvm] override fun equal (p0: Table< MovieRecord >): Condition equals [jvm] open operator override fun equals (other: Any ?): Boolean field [jvm] override fun field (p0: Int ): Field< >? override fun field (p0: String ): Field< >? override fun < T : Any > field (p0: Field< T >): Field< T >? override fun field (p0: Name): Field<*>? override fun < T : Any > field (p0: Int , p1: Class < T >): Field< T >? override fun < T : Any > field (p0: Int , p1: DataType< T >): Field< T >? override fun < T : Any > field (p0: String , p1: Class < T >): Field< T >? override fun < T : Any > field (p0: String , p1: DataType< T >): Field< T >? override fun < T : Any > field (p0: Name, p1: Class < T >): Field< T >? override fun < T : Any > field (p0: Name, p1: DataType< T >): Field< T >? fields [jvm] override fun fields (): Array <Field< >> override fun fields (vararg p0: String ): Array <Field< >> override fun fields (vararg p0: Field< >): Array <Field< >> override fun fields (vararg p0: Name): Array <Field< >> override fun fields (vararg p0: Int ): Array <Field< >> fields0 [jvm] override fun fields0 (): Fields< MovieRecord > fieldsRow [jvm] open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> fieldStream [jvm] override fun fieldStream (): Stream <Field<*>> forceIndex [jvm] override fun forceIndex (vararg p0: String ): Table< MovieRecord > forceIndexForGroupBy [jvm] override fun forceIndexForGroupBy (vararg p0: String ): Table< MovieRecord > forceIndexForJoin [jvm] override fun forceIndexForJoin (vararg p0: String ): Table< MovieRecord > forceIndexForOrderBy [jvm] override fun forceIndexForOrderBy (vararg p0: String ): Table< MovieRecord > from [jvm] override fun from (p0: Record): MovieRecord fullJoin [jvm] override fun fullJoin (p0: String ): TableOnStep<Record> override fun fullJoin (p0: Name): TableOnStep<Record> override fun fullJoin (p0: SQL): TableOnStep<Record> override fun fullJoin (p0: TableLike<*>): TableOnStep<Record> override fun fullJoin (p0: String , vararg p1: Any ): TableOnStep<Record> override fun fullJoin (p0: String , vararg p1: QueryPart): TableOnStep<Record> fullOuterJoin [jvm] override fun fullOuterJoin (p0: String ): TableOnStep<Record> override fun fullOuterJoin (p0: Name): TableOnStep<Record> override fun fullOuterJoin (p0: SQL): TableOnStep<Record> override fun fullOuterJoin (p0: TableLike<*>): TableOnStep<Record> override fun fullOuterJoin (p0: String , vararg p1: Any ): TableOnStep<Record> override fun fullOuterJoin (p0: String , vararg p1: QueryPart): TableOnStep<Record> generatesCast [jvm] open override fun generatesCast (): Boolean getAliasedTable [jvm] open fun getAliasedTable (): Table< MovieRecord > getCatalog [jvm] override fun getCatalog (): Catalog? getChecks [jvm] open override fun getChecks (): MutableList <Check< MovieRecord >> getComment [jvm] override fun getComment (): String getCommentPart [jvm] override fun getCommentPart (): Comment getDataType [jvm] override fun getDataType (): DataType< MovieRecord > getIdentity [jvm] open override fun getIdentity (): Identity< MovieRecord , Long ?> getIndexes [jvm] open override fun getIndexes (): MutableList <Index> getKeys [jvm] open override fun getKeys (): List <UniqueKey< MovieRecord >> getName [jvm] override fun getName (): String getOptions [jvm] override fun getOptions (): TableOptions getPrimaryKey [jvm] open override fun getPrimaryKey (): UniqueKey< MovieRecord > getQualifiedName [jvm] open override fun getQualifiedName (): Name getRecordTimestamp [jvm] open override fun getRecordTimestamp (): TableField< MovieRecord , *>? getRecordType [jvm] open override fun getRecordType (): Class < MovieRecord > The class holding records for this type getRecordVersion [jvm] open override fun getRecordVersion (): TableField< MovieRecord , Int ?> getReferences [jvm] open override fun getReferences (): MutableList <ForeignKey< MovieRecord , *>> getReferencesFrom [jvm] override fun < O : Record> getReferencesFrom (p0: Table< O >): MutableList <ForeignKey< O , MovieRecord >> getReferencesTo [jvm] override fun < O : Record> getReferencesTo (p0: Table< O >): MutableList <ForeignKey< MovieRecord , O >> getSchema [jvm] open override fun getSchema (): Schema getType [jvm] override fun getType (): TableOptions.TableType getUnqualifiedName [jvm] override fun getUnqualifiedName (): Name hashCode [jvm] open override fun hashCode (): Int ignoreIndex [jvm] override fun ignoreIndex (vararg p0: String ): Table< MovieRecord > ignoreIndexForGroupBy [jvm] override fun ignoreIndexForGroupBy (vararg p0: String ): Table< MovieRecord > ignoreIndexForJoin [jvm] override fun ignoreIndexForJoin (vararg p0: String ): Table< MovieRecord > ignoreIndexForOrderBy [jvm] override fun ignoreIndexForOrderBy (vararg p0: String ): Table< MovieRecord > indexOf [jvm] override fun indexOf (p0: String ): Int override fun indexOf (p0: Field<*>): Int override fun indexOf (p0: Name): Int innerJoin [jvm] override fun innerJoin (p0: String ): TableOnStep<Record> override fun innerJoin (p0: Name): TableOnStep<Record> override fun innerJoin (p0: SQL): TableOnStep<Record> override fun innerJoin (p0: TableLike<*>): TableOnStep<Record> override fun innerJoin (p0: String , vararg p1: Any ): TableOnStep<Record> override fun innerJoin (p0: String , vararg p1: QueryPart): TableOnStep<Record> join [jvm] override fun join (p0: String ): TableOnStep<Record> override fun join (p0: Name): TableOnStep<Record> override fun join (p0: SQL): TableOnStep<Record> override fun join (p0: TableLike< >): TableOnStep<Record> override fun join (p0: String , vararg p1: Any ): TableOnStep<Record> override fun join (p0: String , vararg p1: QueryPart): TableOnStep<Record> override fun join (p0: TableLike< >, p1: JoinType): TableOptionalOnStep<Record> leftAntiJoin [jvm] override fun leftAntiJoin (p0: TableLike<*>): TableOnStep< MovieRecord > leftJoin [jvm] override fun leftJoin (p0: String ): TablePartitionByStep<Record> override fun leftJoin (p0: Name): TablePartitionByStep<Record> override fun leftJoin (p0: SQL): TablePartitionByStep<Record> override fun leftJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun leftJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun leftJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> leftOuterJoin [jvm] override fun leftOuterJoin (p0: String ): TablePartitionByStep<Record> override fun leftOuterJoin (p0: Name): TablePartitionByStep<Record> override fun leftOuterJoin (p0: SQL): TablePartitionByStep<Record> override fun leftOuterJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun leftOuterJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun leftOuterJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> leftSemiJoin [jvm] override fun leftSemiJoin (p0: TableLike<*>): TableOnStep< MovieRecord > naturalFullOuterJoin [jvm] override fun naturalFullOuterJoin (p0: String ): Table<Record> override fun naturalFullOuterJoin (p0: Name): Table<Record> override fun naturalFullOuterJoin (p0: SQL): Table<Record> override fun naturalFullOuterJoin (p0: TableLike<*>): Table<Record> override fun naturalFullOuterJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalFullOuterJoin (p0: String , vararg p1: QueryPart): Table<Record> naturalJoin [jvm] override fun naturalJoin (p0: String ): Table<Record> override fun naturalJoin (p0: Name): Table<Record> override fun naturalJoin (p0: SQL): Table<Record> override fun naturalJoin (p0: TableLike<*>): Table<Record> override fun naturalJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalJoin (p0: String , vararg p1: QueryPart): Table<Record> naturalLeftOuterJoin [jvm] override fun naturalLeftOuterJoin (p0: String ): Table<Record> override fun naturalLeftOuterJoin (p0: Name): Table<Record> override fun naturalLeftOuterJoin (p0: SQL): Table<Record> override fun naturalLeftOuterJoin (p0: TableLike<*>): Table<Record> override fun naturalLeftOuterJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalLeftOuterJoin (p0: String , vararg p1: QueryPart): Table<Record> naturalRightOuterJoin [jvm] override fun naturalRightOuterJoin (p0: String ): Table<Record> override fun naturalRightOuterJoin (p0: Name): Table<Record> override fun naturalRightOuterJoin (p0: SQL): Table<Record> override fun naturalRightOuterJoin (p0: TableLike<*>): Table<Record> override fun naturalRightOuterJoin (p0: String , vararg p1: Any ): Table<Record> override fun naturalRightOuterJoin (p0: String , vararg p1: QueryPart): Table<Record> ne [jvm] override fun ne (p0: Table< MovieRecord >): Condition newRecord [jvm] override fun newRecord (): MovieRecord notEqual [jvm] override fun notEqual (p0: Table< MovieRecord >): Condition outerApply [jvm] override fun outerApply (p0: String ): Table<Record> override fun outerApply (p0: Name): Table<Record> override fun outerApply (p0: SQL): Table<Record> override fun outerApply (p0: TableLike<*>): Table<Record> override fun outerApply (p0: String , vararg p1: Any ): Table<Record> override fun outerApply (p0: String , vararg p1: QueryPart): Table<Record> recordType [jvm] override fun recordType (): RecordType< MovieRecord > rename [jvm] open override fun rename (name: String ): Movie open override fun rename (name: Name): Movie Rename this table rendersContent [jvm] open override fun rendersContent (p0: Context<*>): Boolean rightJoin [jvm] override fun rightJoin (p0: String ): TablePartitionByStep<Record> override fun rightJoin (p0: Name): TablePartitionByStep<Record> override fun rightJoin (p0: SQL): TablePartitionByStep<Record> override fun rightJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun rightJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun rightJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> rightOuterJoin [jvm] override fun rightOuterJoin (p0: String ): TablePartitionByStep<Record> override fun rightOuterJoin (p0: Name): TablePartitionByStep<Record> override fun rightOuterJoin (p0: SQL): TablePartitionByStep<Record> override fun rightOuterJoin (p0: TableLike<*>): TablePartitionByStep<Record> override fun rightOuterJoin (p0: String , vararg p1: Any ): TablePartitionByStep<Record> override fun rightOuterJoin (p0: String , vararg p1: QueryPart): TablePartitionByStep<Record> rowid [jvm] override fun rowid (): Field<RowId> straightJoin [jvm] override fun straightJoin (p0: String ): TableOptionalOnStep<Record> override fun straightJoin (p0: Name): TableOptionalOnStep<Record> override fun straightJoin (p0: SQL): TableOptionalOnStep<Record> override fun straightJoin (p0: TableLike<*>): TableOptionalOnStep<Record> override fun straightJoin (p0: String , vararg p1: Any ): TableOptionalOnStep<Record> override fun straightJoin (p0: String , vararg p1: QueryPart): TableOptionalOnStep<Record> toString [jvm] open override fun toString (): String translate [jvm] fun translate (p0: String , p1: SQLException ): DataAccessException useIndex [jvm] override fun useIndex (vararg p0: String ): Table< MovieRecord > useIndexForGroupBy [jvm] override fun useIndexForGroupBy (vararg p0: String ): Table< MovieRecord > useIndexForJoin [jvm] override fun useIndexForJoin (vararg p0: String ): Table< MovieRecord > useIndexForOrderBy [jvm] override fun useIndexForOrderBy (vararg p0: String ): Table< MovieRecord > where [jvm] open override fun where (vararg p0: Condition): Table< MovieRecord > open override fun where (p0: String ): Table< MovieRecord > open override fun where (p0: MutableCollection <out Condition>): Table< MovieRecord > open override fun where (p0: Condition): Table< MovieRecord > open override fun where (p0: Field< Boolean >): Table< MovieRecord > open override fun where (p0: SQL): Table< MovieRecord > open override fun where (p0: String , vararg p1: Any ): Table< MovieRecord > open override fun where (p0: String , vararg p1: QueryPart): Table< MovieRecord > whereExists [jvm] open override fun whereExists (p0: Select<*>): Table< MovieRecord > whereNotExists [jvm] open override fun whereNotExists (p0: Select<*>): Table< MovieRecord >","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/#properties","text":"Name Summary alias [jvm] val alias : Alias<Table< MovieRecord >> child [jvm] val child : Table<*> childPath [jvm] val childPath : ForeignKey<*, MovieRecord > CREATED_AT [jvm] val CREATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.created_at . fields [jvm] val fields : Fields< MovieRecord > GENRE [jvm] val GENRE : TableField< MovieRecord , String ?> The column jooq.movie.genre . ID [jvm] val ID : TableField< MovieRecord , Long ?> The column jooq.movie.id . NAME [jvm] val NAME : TableField< MovieRecord , String ?> The column jooq.movie.name . parameters [jvm] val parameters : Array <Field<*>> UPDATED_AT [jvm] val UPDATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.updated_at . VERSION [jvm] val VERSION : TableField< MovieRecord , Int ?> The column jooq.movie.version .","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-c-r-e-a-t-e-d_-a-t/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / CREATED_AT CREATED_AT \u00b6 [jvm]\\ val CREATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.created_at .","title":"CREATED_AT - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-c-r-e-a-t-e-d_-a-t/#created_at","text":"[jvm]\\ val CREATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.created_at .","title":"CREATED_AT"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-g-e-n-r-e/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / GENRE GENRE \u00b6 [jvm]\\ val GENRE : TableField< MovieRecord , String ?> The column jooq.movie.genre .","title":"GENRE - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-g-e-n-r-e/#genre","text":"[jvm]\\ val GENRE : TableField< MovieRecord , String ?> The column jooq.movie.genre .","title":"GENRE"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-i-d/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / ID ID \u00b6 [jvm]\\ val ID : TableField< MovieRecord , Long ?> The column jooq.movie.id .","title":"ID - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-i-d/#id","text":"[jvm]\\ val ID : TableField< MovieRecord , Long ?> The column jooq.movie.id .","title":"ID"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-movie/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / Movie Movie \u00b6 [jvm]\\ fun Movie (alias: String ) fun Movie (alias: Name) Create an aliased jooq.movie table reference [jvm]\\ fun Movie () Create a jooq.movie table reference [jvm]\\ fun Movie (child: Table<out Record>, key: ForeignKey<out Record, MovieRecord >) fun Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?)","title":"Movie - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-movie/#movie","text":"[jvm]\\ fun Movie (alias: String ) fun Movie (alias: Name) Create an aliased jooq.movie table reference [jvm]\\ fun Movie () Create a jooq.movie table reference [jvm]\\ fun Movie (child: Table<out Record>, key: ForeignKey<out Record, MovieRecord >) fun Movie (alias: Name, child: Table<out Record>?, path: ForeignKey<out Record, MovieRecord >?, aliased: Table< MovieRecord >?, parameters: Array <Field<*>?>?)","title":"Movie"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-n-a-m-e/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / NAME NAME \u00b6 [jvm]\\ val NAME : TableField< MovieRecord , String ?> The column jooq.movie.name .","title":"NAME - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-n-a-m-e/#name","text":"[jvm]\\ val NAME : TableField< MovieRecord , String ?> The column jooq.movie.name .","title":"NAME"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-u-p-d-a-t-e-d_-a-t/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / UPDATED_AT UPDATED_AT \u00b6 [jvm]\\ val UPDATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.updated_at .","title":"UPDATED_AT - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-u-p-d-a-t-e-d_-a-t/#updated_at","text":"[jvm]\\ val UPDATED_AT : TableField< MovieRecord , LocalDateTime ?> The column jooq.movie.updated_at .","title":"UPDATED_AT"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-v-e-r-s-i-o-n/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / VERSION VERSION \u00b6 [jvm]\\ val VERSION : TableField< MovieRecord , Int ?> The column jooq.movie.version .","title":"VERSION - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-v-e-r-s-i-o-n/#version","text":"[jvm]\\ val VERSION : TableField< MovieRecord , Int ?> The column jooq.movie.version .","title":"VERSION"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/as/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / as as \u00b6 [jvm]\\ open override fun as (alias: String ): Movie open override fun as (alias: Name): Movie","title":"as - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/as/#as","text":"[jvm]\\ open override fun as (alias: String ): Movie open override fun as (alias: Name): Movie","title":"as"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/fields-row/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / fieldsRow fieldsRow \u00b6 [jvm]\\ open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?>","title":"fieldsRow - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/fields-row/#fieldsrow","text":"[jvm]\\ open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?>","title":"fieldsRow"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-identity/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / getIdentity getIdentity \u00b6 [jvm]\\ open override fun getIdentity (): Identity< MovieRecord , Long ?>","title":"getIdentity - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-identity/#getidentity","text":"[jvm]\\ open override fun getIdentity (): Identity< MovieRecord , Long ?>","title":"getIdentity"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-keys/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / getKeys getKeys \u00b6 [jvm]\\ open override fun getKeys (): List <UniqueKey< MovieRecord >>","title":"getKeys - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-keys/#getkeys","text":"[jvm]\\ open override fun getKeys (): List <UniqueKey< MovieRecord >>","title":"getKeys"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-primary-key/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / getPrimaryKey getPrimaryKey \u00b6 [jvm]\\ open override fun getPrimaryKey (): UniqueKey< MovieRecord >","title":"getPrimaryKey - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-primary-key/#getprimarykey","text":"[jvm]\\ open override fun getPrimaryKey (): UniqueKey< MovieRecord >","title":"getPrimaryKey"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-record-type/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / getRecordType getRecordType \u00b6 [jvm]\\ open override fun getRecordType (): Class < MovieRecord > The class holding records for this type","title":"getRecordType - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-record-type/#getrecordtype","text":"[jvm]\\ open override fun getRecordType (): Class < MovieRecord > The class holding records for this type","title":"getRecordType"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-record-version/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / getRecordVersion getRecordVersion \u00b6 [jvm]\\ open override fun getRecordVersion (): TableField< MovieRecord , Int ?>","title":"getRecordVersion - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-record-version/#getrecordversion","text":"[jvm]\\ open override fun getRecordVersion (): TableField< MovieRecord , Int ?>","title":"getRecordVersion"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-schema/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / getSchema getSchema \u00b6 [jvm]\\ open override fun getSchema (): Schema","title":"getSchema - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/get-schema/#getschema","text":"[jvm]\\ open override fun getSchema (): Schema","title":"getSchema"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/rename/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / rename rename \u00b6 [jvm]\\ open override fun rename (name: String ): Movie open override fun rename (name: Name): Movie Rename this table","title":"rename - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/rename/#rename","text":"[jvm]\\ open override fun rename (name: String ): Movie open override fun rename (name: Name): Movie Rename this table","title":"rename"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-companion/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary MOVIE [jvm] val MOVIE : Movie The reference instance of jooq.movie","title":"Companion - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-companion/#properties","text":"Name Summary MOVIE [jvm] val MOVIE : Movie The reference instance of jooq.movie","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-companion/-m-o-v-i-e/","text":"// misk-jooq / misk.jooq.testgen.tables / Movie / Companion / MOVIE MOVIE \u00b6 [jvm]\\ val MOVIE : Movie The reference instance of jooq.movie","title":"MOVIE - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables/-movie/-companion/-m-o-v-i-e/#movie","text":"[jvm]\\ val MOVIE : Movie The reference instance of jooq.movie","title":"MOVIE"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/","text":"// misk-jooq / misk.jooq.testgen.tables.records Package misk.jooq.testgen.tables.records \u00b6 Types \u00b6 Name Summary MovieRecord [jvm] open class MovieRecord : UpdatableRecordImpl< MovieRecord > , Record6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> This class is generated by jOOQ.","title":"Package misk.jooq.testgen.tables.records - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/#package-miskjooqtestgentablesrecords","text":"","title":"Package misk.jooq.testgen.tables.records"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/#types","text":"Name Summary MovieRecord [jvm] open class MovieRecord : UpdatableRecordImpl< MovieRecord > , Record6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> This class is generated by jOOQ.","title":"Types"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord MovieRecord \u00b6 [jvm]\\ open class MovieRecord : UpdatableRecordImpl< MovieRecord > , Record6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> This class is generated by jOOQ. Constructors \u00b6 MovieRecord [jvm] fun MovieRecord (id: Long ? = null, name: String ? = null, genre: String ? = null, version: Int ? = null, createdAt: LocalDateTime ? = null, updatedAt: LocalDateTime ? = null) Create a detached, initialised MovieRecord MovieRecord [jvm] fun MovieRecord () Functions \u00b6 Name Summary addChangedValues [jvm] fun addChangedValues (p0: Array <Field<*>>, p1: StoreQuery< MovieRecord >, p2: Boolean ) addRecordTimestamp [jvm] fun addRecordTimestamp (p0: StoreQuery<*>, p1: Boolean ): Timestamp addRecordVersion [jvm] fun addRecordVersion (p0: StoreQuery<*>, p1: Boolean ): BigInteger addValue [jvm] fun < T : Any > addValue (p0: StoreQuery< >, p1: Field< T >, p2: Boolean ) fun < T : Any > addValue (p0: StoreQuery< >, p1: Field< T >, p2: Any , p3: Boolean ) asResult [jvm] fun asResult (): Result<AbstractRecord> attach [jvm] override fun attach (p0: Configuration) changed [jvm] override fun changed (): Boolean override fun changed (p0: Boolean ) override fun changed (p0: Int ): Boolean override fun changed (p0: String ): Boolean override fun changed (p0: Field< >): Boolean override fun changed (p0: Name): Boolean override fun changed (p0: Int , p1: Boolean ) override fun changed (p0: String , p1: Boolean ) override fun changed (p0: Field< >, p1: Boolean ) override fun changed (p0: Name, p1: Boolean ) children [jvm] override fun < O : TableRecord< O >> children (p0: ForeignKey< O , MovieRecord >): Table< O > compare [jvm] fun compare (p0: Array < Any >, p1: Array < Any >): Int fun compare (p0: ByteArray , p1: ByteArray ): Int compare0 [jvm] fun compare0 (p0: Any , p1: Any ): Int compareTo [jvm] open operator override fun compareTo (other: Record): Int component1 [jvm] open operator override fun component1 (): Long ? component2 [jvm] open operator override fun component2 (): String ? component3 [jvm] open operator override fun component3 (): String ? component4 [jvm] open operator override fun component4 (): Int ? component5 [jvm] open operator override fun component5 (): LocalDateTime ? component6 [jvm] open operator override fun component6 (): LocalDateTime ? configuration [jvm] override fun configuration (): Configuration? copy [jvm] override fun copy (): MovieRecord delete [jvm] override fun delete (): Int detach [jvm] override fun detach () equals [jvm] open operator override fun equals (other: Any ?): Boolean fetchChild [jvm] override fun < O : TableRecord< O >> fetchChild (p0: ForeignKey< O , MovieRecord >): O ? fetchChildren [jvm] override fun < O : TableRecord< O >> fetchChildren (p0: ForeignKey< O , MovieRecord >): Result< O > fetchParent [jvm] override fun < O : UpdatableRecord< O >> fetchParent (p0: ForeignKey< MovieRecord , O >): O ? field [jvm] override fun field (p0: Int ): Field< >? override fun field (p0: String ): Field< >? override fun < T : Any > field (p0: Field< T >): Field< T >? override fun field (p0: Name): Field<*>? field1 [jvm] open override fun field1 (): Field< Long ?> field2 [jvm] open override fun field2 (): Field< String ?> field3 [jvm] open override fun field3 (): Field< String ?> field4 [jvm] open override fun field4 (): Field< Int ?> field5 [jvm] open override fun field5 (): Field< LocalDateTime ?> field6 [jvm] open override fun field6 (): Field< LocalDateTime ?> fields [jvm] override fun fields (): Array <Field< >> override fun fields (vararg p0: String ): Array <Field< >> override fun fields (vararg p0: Field< >): Array <Field< >> override fun fields (vararg p0: Name): Array <Field< >> override fun fields (vararg p0: Int ): Array <Field< >> fieldsRow [jvm] open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> format [jvm] override fun format (): String override fun format (p0: OutputStream ) override fun format (p0: Writer ) override fun format (p0: Int ): String override fun format (p0: TXTFormat): String override fun format (p0: OutputStream , p1: Int ) override fun format (p0: OutputStream , p1: TXTFormat) override fun format (p0: Writer , p1: Int ) override fun format (p0: Writer , p1: TXTFormat) formatChart [jvm] override fun formatChart (): String override fun formatChart (p0: OutputStream ) override fun formatChart (p0: Writer ) override fun formatChart (p0: ChartFormat): String override fun formatChart (p0: OutputStream , p1: ChartFormat) override fun formatChart (p0: Writer , p1: ChartFormat) formatCSV [jvm] override fun formatCSV (): String override fun formatCSV (p0: OutputStream ) override fun formatCSV (p0: Writer ) override fun formatCSV (p0: Boolean ): String override fun formatCSV (p0: Char ): String override fun formatCSV (p0: CSVFormat): String override fun formatCSV (p0: OutputStream , p1: Boolean ) override fun formatCSV (p0: OutputStream , p1: Char ) override fun formatCSV (p0: OutputStream , p1: CSVFormat) override fun formatCSV (p0: Writer , p1: Boolean ) override fun formatCSV (p0: Writer , p1: Char ) override fun formatCSV (p0: Boolean , p1: Char ): String override fun formatCSV (p0: Char , p1: String ): String override fun formatCSV (p0: Writer , p1: CSVFormat) override fun formatCSV (p0: OutputStream , p1: Boolean , p2: Char ) override fun formatCSV (p0: OutputStream , p1: Char , p2: String ) override fun formatCSV (p0: Writer , p1: Boolean , p2: Char ) override fun formatCSV (p0: Writer , p1: Char , p2: String ) override fun formatCSV (p0: Boolean , p1: Char , p2: String ): String override fun formatCSV (p0: OutputStream , p1: Boolean , p2: Char , p3: String ) override fun formatCSV (p0: Writer , p1: Boolean , p2: Char , p3: String ) formatHTML [jvm] override fun formatHTML (): String override fun formatHTML (p0: OutputStream ) override fun formatHTML (p0: Writer ) formatInsert [jvm] override fun formatInsert (): String override fun formatInsert (p0: OutputStream ) override fun formatInsert (p0: Writer ) override fun formatInsert (p0: Table< >, vararg p1: Field< >): String override fun formatInsert (p0: OutputStream , p1: Table< >, vararg p2: Field< >) override fun formatInsert (p0: Writer , p1: Table< >, vararg p2: Field< >) formatJSON [jvm] override fun formatJSON (): String override fun formatJSON (p0: OutputStream ) override fun formatJSON (p0: Writer ) override fun formatJSON (p0: JSONFormat): String override fun formatJSON (p0: OutputStream , p1: JSONFormat) override fun formatJSON (p0: Writer , p1: JSONFormat) formatXML [jvm] override fun formatXML (): String override fun formatXML (p0: OutputStream ) override fun formatXML (p0: Writer ) override fun formatXML (p0: XMLFormat): String override fun formatXML (p0: OutputStream , p1: XMLFormat) override fun formatXML (p0: Writer , p1: XMLFormat) from [jvm] override fun from (p0: Any ) fun from (p0: Record) override fun from (p0: Any , vararg p1: String ) override fun from (p0: Any , vararg p1: Field<*>) override fun from (p0: Any , vararg p1: Name) override fun from (p0: Any , vararg p1: Int ) fromArray [jvm] override fun fromArray (vararg p0: Any ) override fun fromArray (p0: Array < Any >, vararg p1: String ) override fun fromArray (p0: Array < Any >, vararg p1: Field<*>) override fun fromArray (p0: Array < Any >, vararg p1: Name) override fun fromArray (p0: Array < Any >, vararg p1: Int ) fromMap [jvm] override fun fromMap (p0: MutableMap < String , >) override fun fromMap (p0: MutableMap < String , *>, vararg p1: String ) override fun fromMap (p0: MutableMap < String , *>, vararg p1: Field< >) override fun fromMap (p0: MutableMap < String , *>, vararg p1: Name) override fun fromMap (p0: MutableMap < String , *>, vararg p1: Int ) get [jvm] operator override fun get (p0: Int ): Any ? operator override fun get (p0: String ): Any ? operator override fun < T : Any > get (p0: Field< T >): T operator override fun get (p0: Name): Any ? operator override fun < T : Any > get (p0: Int , p1: Class <out T >): T operator override fun < U : Any > get (p0: Int , p1: Converter< , out U >): U operator override fun < T : Any > get (p0: String , p1: Class <out T >): T operator override fun < U : Any > get (p0: String , p1: Converter< , out U >): U operator override fun < T : Any > get (p0: Field< >, p1: Class <out T >): T operator override fun < T : Any , U : Any > get (p0: Field< T >, p1: Converter<in T , out U >): U operator override fun < T : Any > get (p0: Name, p1: Class <out T >): T operator override fun < U : Any > get (p0: Name, p1: Converter< , out U >): U getAttachables [jvm] override fun getAttachables (): MutableList <Attachable> getPrimaryKey [jvm] override fun getPrimaryKey (): UniqueKey< MovieRecord > getRecordTimestamp [jvm] fun getRecordTimestamp (): Any getRecordVersion [jvm] fun getRecordVersion (): Any getReturning [jvm] fun getReturning (): MutableCollection <Field<*>> getReturningIfNeeded [jvm] fun getReturningIfNeeded (p0: StoreQuery< MovieRecord >, p1: MutableCollection <Field<*>>) getTable [jvm] override fun getTable (): Table< MovieRecord > getValue [jvm] override fun getValue (p0: Int ): Any override fun getValue (p0: String ): Any override fun < T : Any > getValue (p0: Field< T >): T override fun getValue (p0: Name): Any override fun < T : Any > getValue (p0: Int , p1: Class <out T >): T override fun < U : Any > getValue (p0: Int , p1: Converter< , out U >): U override fun < T : Any > getValue (p0: String , p1: Class <out T >): T override fun < U : Any > getValue (p0: String , p1: Converter< , out U >): U override fun < T : Any > getValue (p0: Field< >, p1: Class <out T >): T override fun < T : Any , U : Any > getValue (p0: Field< T >, p1: Converter<in T , out U >): U override fun < T : Any > getValue (p0: Name, p1: Class <out T >): T override fun < U : Any > getValue (p0: Name, p1: Converter< , out U >): U hashCode [jvm] open override fun hashCode (): Int indexOf [jvm] override fun indexOf (p0: String ): Int override fun indexOf (p0: Field<*>): Int override fun indexOf (p0: Name): Int insert [jvm] override fun insert (): Int override fun insert (vararg p0: Field< >): Int override fun insert (p0: MutableCollection <out Field< >>): Int intern [jvm] fun intern (p0: String ): String intern0 [jvm] fun intern0 (p0: Int ) into [jvm] open override fun < E : Any > into (p0: E ): E override fun < E : Any > into (p0: Class <out E >): E override fun into (vararg p0: Field<*>): Record override fun < T1 : Any > into (p0: Field< T1 >): Record1< T1 > override fun < R : Record> into (p0: Table< R >): R override fun < T1 : Any , T2 : Any > into (p0: Field< T1 >, p1: Field< T2 >): Record2< T1 , T2 > override fun < T1 : Any , T2 : Any , T3 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >): Record3< T1 , T2 , T3 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >): Record4< T1 , T2 , T3 , T4 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >): Record5< T1 , T2 , T3 , T4 , T5 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >): Record6< T1 , T2 , T3 , T4 , T5 , T6 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >): Record7< T1 , T2 , T3 , T4 , T5 , T6 , T7 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >): Record8< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >): Record9< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >): Record10< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >): Record11< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >): Record12< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >): Record13< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >): Record14< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >): Record15< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >): Record16< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >): Record17< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >): Record18< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >): Record19< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any , T20 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >, p19: Field< T20 >): Record20< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any , T20 : Any , T21 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >, p19: Field< T20 >, p20: Field< T21 >): Record21< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any , T20 : Any , T21 : Any , T22 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >, p19: Field< T20 >, p20: Field< T21 >, p21: Field< T22 >): Record22< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 > intoArray [jvm] override fun intoArray (): Array < Any > intoList [jvm] override fun intoList (): MutableList < Any > intoMap [jvm] override fun intoMap (): MutableMap < String , Any > intoRecord [jvm] fun < R : Record> intoRecord (p0: Class < R >): R intoResultSet [jvm] override fun intoResultSet (): ResultSet intoStream [jvm] override fun intoStream (): Stream < Any > intoXML [jvm] override fun intoXML (): Document override fun < H : ContentHandler > intoXML (p0: H ): H override fun intoXML (p0: XMLFormat): Document override fun < H : ContentHandler > intoXML (p0: H , p1: XMLFormat): H isTimestampOrVersionAvailable [jvm] fun isTimestampOrVersionAvailable (): Boolean isUpdateRecordTimestamp [jvm] fun isUpdateRecordTimestamp (): Boolean isUpdateRecordVersion [jvm] fun isUpdateRecordVersion (): Boolean key [jvm] open override fun key (): Record1< Long ?> map [jvm] override fun < E : Any > map (p0: RecordMapper<Record, E >): E merge [jvm] override fun merge (): Int open override fun merge (vararg p0: Field< >): Int override fun merge (p0: MutableCollection <out Field< >>): Int original [jvm] override fun original (): MovieRecord override fun original (p0: Int ): Any ? override fun original (p0: String ): Any ? override fun < T : Any > original (p0: Field< T >): T override fun original (p0: Name): Any ? parent [jvm] override fun < O : UpdatableRecord< O >> parent (p0: ForeignKey< MovieRecord , O >): Table< O > refresh [jvm] override fun refresh () override fun refresh (vararg p0: Field< >) override fun refresh (p0: MutableCollection <out Field< >>) reset [jvm] override fun reset () override fun reset (p0: Int ) override fun reset (p0: String ) override fun reset (p0: Field<*>) override fun reset (p0: Name) safeIndex [jvm] fun safeIndex (p0: Int ): Int set [jvm] operator fun set (p0: Int , p1: Any ) operator override fun < T : Any > set (p0: Field< T >, p1: T ) operator fun set (p0: Int , p1: Field<*>, p2: Any ) operator override fun < T : Any , U : Any > set (p0: Field< T >, p1: U , p2: Converter<out T , in U >) setRecordVersionAndTimestamp [jvm] fun setRecordVersionAndTimestamp (p0: BigInteger , p1: Timestamp ) setReturningIfNeeded [jvm] fun setReturningIfNeeded (p0: StoreQuery< MovieRecord >): MutableCollection <Field<*>> setValue [jvm] override fun < T : Any > setValue (p0: Field< T >, p1: T ) override fun < T : Any , U : Any > setValue (p0: Field< T >, p1: U , p2: Converter<out T , in U >) setValues [jvm] fun setValues (p0: Array <Field<*>>, p1: AbstractRecord) size [jvm] override fun size (): Int store [jvm] override fun store (): Int override fun store (vararg p0: Field< >): Int override fun store (p0: MutableCollection <out Field< >>): Int storeInsert [jvm] fun storeInsert (p0: Array <Field<*>>): Int storeInsert0 [jvm] fun storeInsert0 (p0: Array <Field<*>>): Int toString [jvm] open override fun toString (): String update [jvm] override fun update (): Int open override fun update (vararg p0: Field< >): Int override fun update (p0: MutableCollection <out Field< >>): Int value1 [jvm] open override fun value1 (): Long ? open override fun value1 (value: Long ?): MovieRecord value2 [jvm] open override fun value2 (): String ? open override fun value2 (value: String ?): MovieRecord value3 [jvm] open override fun value3 (): String ? open override fun value3 (value: String ?): MovieRecord value4 [jvm] open override fun value4 (): Int ? open override fun value4 (value: Int ?): MovieRecord value5 [jvm] open override fun value5 (): LocalDateTime ? open override fun value5 (value: LocalDateTime ?): MovieRecord value6 [jvm] open override fun value6 (): LocalDateTime ? open override fun value6 (value: LocalDateTime ?): MovieRecord values [jvm] open override fun values (value1: Long ?, value2: String ?, value3: String ?, value4: Int ?, value5: LocalDateTime ?, value6: LocalDateTime ?): MovieRecord valuesRow [jvm] open override fun valuesRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> with [jvm] override fun < T : Any > with (p0: Field< T >, p1: T ): MovieRecord override fun < T : Any , U : Any > with (p0: Field< T >, p1: U , p2: Converter<out T , in U >): MovieRecord Properties \u00b6 Name Summary changed [jvm] val changed : BitSet createdAt [jvm] var createdAt : LocalDateTime ? fetched [jvm] val fetched : Boolean fields [jvm] val fields : AbstractRow genre [jvm] var genre : String ? id [jvm] var id : Long ? name [jvm] var name : String ? originals [jvm] val originals : Array < Any > updatedAt [jvm] var updatedAt : LocalDateTime ? values [jvm] val values : Array < Any > version [jvm] var version : Int ?","title":"MovieRecord - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/#movierecord","text":"[jvm]\\ open class MovieRecord : UpdatableRecordImpl< MovieRecord > , Record6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> This class is generated by jOOQ.","title":"MovieRecord"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/#constructors","text":"MovieRecord [jvm] fun MovieRecord (id: Long ? = null, name: String ? = null, genre: String ? = null, version: Int ? = null, createdAt: LocalDateTime ? = null, updatedAt: LocalDateTime ? = null) Create a detached, initialised MovieRecord MovieRecord [jvm] fun MovieRecord ()","title":"Constructors"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/#functions","text":"Name Summary addChangedValues [jvm] fun addChangedValues (p0: Array <Field<*>>, p1: StoreQuery< MovieRecord >, p2: Boolean ) addRecordTimestamp [jvm] fun addRecordTimestamp (p0: StoreQuery<*>, p1: Boolean ): Timestamp addRecordVersion [jvm] fun addRecordVersion (p0: StoreQuery<*>, p1: Boolean ): BigInteger addValue [jvm] fun < T : Any > addValue (p0: StoreQuery< >, p1: Field< T >, p2: Boolean ) fun < T : Any > addValue (p0: StoreQuery< >, p1: Field< T >, p2: Any , p3: Boolean ) asResult [jvm] fun asResult (): Result<AbstractRecord> attach [jvm] override fun attach (p0: Configuration) changed [jvm] override fun changed (): Boolean override fun changed (p0: Boolean ) override fun changed (p0: Int ): Boolean override fun changed (p0: String ): Boolean override fun changed (p0: Field< >): Boolean override fun changed (p0: Name): Boolean override fun changed (p0: Int , p1: Boolean ) override fun changed (p0: String , p1: Boolean ) override fun changed (p0: Field< >, p1: Boolean ) override fun changed (p0: Name, p1: Boolean ) children [jvm] override fun < O : TableRecord< O >> children (p0: ForeignKey< O , MovieRecord >): Table< O > compare [jvm] fun compare (p0: Array < Any >, p1: Array < Any >): Int fun compare (p0: ByteArray , p1: ByteArray ): Int compare0 [jvm] fun compare0 (p0: Any , p1: Any ): Int compareTo [jvm] open operator override fun compareTo (other: Record): Int component1 [jvm] open operator override fun component1 (): Long ? component2 [jvm] open operator override fun component2 (): String ? component3 [jvm] open operator override fun component3 (): String ? component4 [jvm] open operator override fun component4 (): Int ? component5 [jvm] open operator override fun component5 (): LocalDateTime ? component6 [jvm] open operator override fun component6 (): LocalDateTime ? configuration [jvm] override fun configuration (): Configuration? copy [jvm] override fun copy (): MovieRecord delete [jvm] override fun delete (): Int detach [jvm] override fun detach () equals [jvm] open operator override fun equals (other: Any ?): Boolean fetchChild [jvm] override fun < O : TableRecord< O >> fetchChild (p0: ForeignKey< O , MovieRecord >): O ? fetchChildren [jvm] override fun < O : TableRecord< O >> fetchChildren (p0: ForeignKey< O , MovieRecord >): Result< O > fetchParent [jvm] override fun < O : UpdatableRecord< O >> fetchParent (p0: ForeignKey< MovieRecord , O >): O ? field [jvm] override fun field (p0: Int ): Field< >? override fun field (p0: String ): Field< >? override fun < T : Any > field (p0: Field< T >): Field< T >? override fun field (p0: Name): Field<*>? field1 [jvm] open override fun field1 (): Field< Long ?> field2 [jvm] open override fun field2 (): Field< String ?> field3 [jvm] open override fun field3 (): Field< String ?> field4 [jvm] open override fun field4 (): Field< Int ?> field5 [jvm] open override fun field5 (): Field< LocalDateTime ?> field6 [jvm] open override fun field6 (): Field< LocalDateTime ?> fields [jvm] override fun fields (): Array <Field< >> override fun fields (vararg p0: String ): Array <Field< >> override fun fields (vararg p0: Field< >): Array <Field< >> override fun fields (vararg p0: Name): Array <Field< >> override fun fields (vararg p0: Int ): Array <Field< >> fieldsRow [jvm] open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> format [jvm] override fun format (): String override fun format (p0: OutputStream ) override fun format (p0: Writer ) override fun format (p0: Int ): String override fun format (p0: TXTFormat): String override fun format (p0: OutputStream , p1: Int ) override fun format (p0: OutputStream , p1: TXTFormat) override fun format (p0: Writer , p1: Int ) override fun format (p0: Writer , p1: TXTFormat) formatChart [jvm] override fun formatChart (): String override fun formatChart (p0: OutputStream ) override fun formatChart (p0: Writer ) override fun formatChart (p0: ChartFormat): String override fun formatChart (p0: OutputStream , p1: ChartFormat) override fun formatChart (p0: Writer , p1: ChartFormat) formatCSV [jvm] override fun formatCSV (): String override fun formatCSV (p0: OutputStream ) override fun formatCSV (p0: Writer ) override fun formatCSV (p0: Boolean ): String override fun formatCSV (p0: Char ): String override fun formatCSV (p0: CSVFormat): String override fun formatCSV (p0: OutputStream , p1: Boolean ) override fun formatCSV (p0: OutputStream , p1: Char ) override fun formatCSV (p0: OutputStream , p1: CSVFormat) override fun formatCSV (p0: Writer , p1: Boolean ) override fun formatCSV (p0: Writer , p1: Char ) override fun formatCSV (p0: Boolean , p1: Char ): String override fun formatCSV (p0: Char , p1: String ): String override fun formatCSV (p0: Writer , p1: CSVFormat) override fun formatCSV (p0: OutputStream , p1: Boolean , p2: Char ) override fun formatCSV (p0: OutputStream , p1: Char , p2: String ) override fun formatCSV (p0: Writer , p1: Boolean , p2: Char ) override fun formatCSV (p0: Writer , p1: Char , p2: String ) override fun formatCSV (p0: Boolean , p1: Char , p2: String ): String override fun formatCSV (p0: OutputStream , p1: Boolean , p2: Char , p3: String ) override fun formatCSV (p0: Writer , p1: Boolean , p2: Char , p3: String ) formatHTML [jvm] override fun formatHTML (): String override fun formatHTML (p0: OutputStream ) override fun formatHTML (p0: Writer ) formatInsert [jvm] override fun formatInsert (): String override fun formatInsert (p0: OutputStream ) override fun formatInsert (p0: Writer ) override fun formatInsert (p0: Table< >, vararg p1: Field< >): String override fun formatInsert (p0: OutputStream , p1: Table< >, vararg p2: Field< >) override fun formatInsert (p0: Writer , p1: Table< >, vararg p2: Field< >) formatJSON [jvm] override fun formatJSON (): String override fun formatJSON (p0: OutputStream ) override fun formatJSON (p0: Writer ) override fun formatJSON (p0: JSONFormat): String override fun formatJSON (p0: OutputStream , p1: JSONFormat) override fun formatJSON (p0: Writer , p1: JSONFormat) formatXML [jvm] override fun formatXML (): String override fun formatXML (p0: OutputStream ) override fun formatXML (p0: Writer ) override fun formatXML (p0: XMLFormat): String override fun formatXML (p0: OutputStream , p1: XMLFormat) override fun formatXML (p0: Writer , p1: XMLFormat) from [jvm] override fun from (p0: Any ) fun from (p0: Record) override fun from (p0: Any , vararg p1: String ) override fun from (p0: Any , vararg p1: Field<*>) override fun from (p0: Any , vararg p1: Name) override fun from (p0: Any , vararg p1: Int ) fromArray [jvm] override fun fromArray (vararg p0: Any ) override fun fromArray (p0: Array < Any >, vararg p1: String ) override fun fromArray (p0: Array < Any >, vararg p1: Field<*>) override fun fromArray (p0: Array < Any >, vararg p1: Name) override fun fromArray (p0: Array < Any >, vararg p1: Int ) fromMap [jvm] override fun fromMap (p0: MutableMap < String , >) override fun fromMap (p0: MutableMap < String , *>, vararg p1: String ) override fun fromMap (p0: MutableMap < String , *>, vararg p1: Field< >) override fun fromMap (p0: MutableMap < String , *>, vararg p1: Name) override fun fromMap (p0: MutableMap < String , *>, vararg p1: Int ) get [jvm] operator override fun get (p0: Int ): Any ? operator override fun get (p0: String ): Any ? operator override fun < T : Any > get (p0: Field< T >): T operator override fun get (p0: Name): Any ? operator override fun < T : Any > get (p0: Int , p1: Class <out T >): T operator override fun < U : Any > get (p0: Int , p1: Converter< , out U >): U operator override fun < T : Any > get (p0: String , p1: Class <out T >): T operator override fun < U : Any > get (p0: String , p1: Converter< , out U >): U operator override fun < T : Any > get (p0: Field< >, p1: Class <out T >): T operator override fun < T : Any , U : Any > get (p0: Field< T >, p1: Converter<in T , out U >): U operator override fun < T : Any > get (p0: Name, p1: Class <out T >): T operator override fun < U : Any > get (p0: Name, p1: Converter< , out U >): U getAttachables [jvm] override fun getAttachables (): MutableList <Attachable> getPrimaryKey [jvm] override fun getPrimaryKey (): UniqueKey< MovieRecord > getRecordTimestamp [jvm] fun getRecordTimestamp (): Any getRecordVersion [jvm] fun getRecordVersion (): Any getReturning [jvm] fun getReturning (): MutableCollection <Field<*>> getReturningIfNeeded [jvm] fun getReturningIfNeeded (p0: StoreQuery< MovieRecord >, p1: MutableCollection <Field<*>>) getTable [jvm] override fun getTable (): Table< MovieRecord > getValue [jvm] override fun getValue (p0: Int ): Any override fun getValue (p0: String ): Any override fun < T : Any > getValue (p0: Field< T >): T override fun getValue (p0: Name): Any override fun < T : Any > getValue (p0: Int , p1: Class <out T >): T override fun < U : Any > getValue (p0: Int , p1: Converter< , out U >): U override fun < T : Any > getValue (p0: String , p1: Class <out T >): T override fun < U : Any > getValue (p0: String , p1: Converter< , out U >): U override fun < T : Any > getValue (p0: Field< >, p1: Class <out T >): T override fun < T : Any , U : Any > getValue (p0: Field< T >, p1: Converter<in T , out U >): U override fun < T : Any > getValue (p0: Name, p1: Class <out T >): T override fun < U : Any > getValue (p0: Name, p1: Converter< , out U >): U hashCode [jvm] open override fun hashCode (): Int indexOf [jvm] override fun indexOf (p0: String ): Int override fun indexOf (p0: Field<*>): Int override fun indexOf (p0: Name): Int insert [jvm] override fun insert (): Int override fun insert (vararg p0: Field< >): Int override fun insert (p0: MutableCollection <out Field< >>): Int intern [jvm] fun intern (p0: String ): String intern0 [jvm] fun intern0 (p0: Int ) into [jvm] open override fun < E : Any > into (p0: E ): E override fun < E : Any > into (p0: Class <out E >): E override fun into (vararg p0: Field<*>): Record override fun < T1 : Any > into (p0: Field< T1 >): Record1< T1 > override fun < R : Record> into (p0: Table< R >): R override fun < T1 : Any , T2 : Any > into (p0: Field< T1 >, p1: Field< T2 >): Record2< T1 , T2 > override fun < T1 : Any , T2 : Any , T3 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >): Record3< T1 , T2 , T3 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >): Record4< T1 , T2 , T3 , T4 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >): Record5< T1 , T2 , T3 , T4 , T5 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >): Record6< T1 , T2 , T3 , T4 , T5 , T6 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >): Record7< T1 , T2 , T3 , T4 , T5 , T6 , T7 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >): Record8< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >): Record9< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >): Record10< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >): Record11< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >): Record12< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >): Record13< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >): Record14< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >): Record15< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >): Record16< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >): Record17< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >): Record18< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >): Record19< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any , T20 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >, p19: Field< T20 >): Record20< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any , T20 : Any , T21 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >, p19: Field< T20 >, p20: Field< T21 >): Record21< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 > override fun < T1 : Any , T2 : Any , T3 : Any , T4 : Any , T5 : Any , T6 : Any , T7 : Any , T8 : Any , T9 : Any , T10 : Any , T11 : Any , T12 : Any , T13 : Any , T14 : Any , T15 : Any , T16 : Any , T17 : Any , T18 : Any , T19 : Any , T20 : Any , T21 : Any , T22 : Any > into (p0: Field< T1 >, p1: Field< T2 >, p2: Field< T3 >, p3: Field< T4 >, p4: Field< T5 >, p5: Field< T6 >, p6: Field< T7 >, p7: Field< T8 >, p8: Field< T9 >, p9: Field< T10 >, p10: Field< T11 >, p11: Field< T12 >, p12: Field< T13 >, p13: Field< T14 >, p14: Field< T15 >, p15: Field< T16 >, p16: Field< T17 >, p17: Field< T18 >, p18: Field< T19 >, p19: Field< T20 >, p20: Field< T21 >, p21: Field< T22 >): Record22< T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 > intoArray [jvm] override fun intoArray (): Array < Any > intoList [jvm] override fun intoList (): MutableList < Any > intoMap [jvm] override fun intoMap (): MutableMap < String , Any > intoRecord [jvm] fun < R : Record> intoRecord (p0: Class < R >): R intoResultSet [jvm] override fun intoResultSet (): ResultSet intoStream [jvm] override fun intoStream (): Stream < Any > intoXML [jvm] override fun intoXML (): Document override fun < H : ContentHandler > intoXML (p0: H ): H override fun intoXML (p0: XMLFormat): Document override fun < H : ContentHandler > intoXML (p0: H , p1: XMLFormat): H isTimestampOrVersionAvailable [jvm] fun isTimestampOrVersionAvailable (): Boolean isUpdateRecordTimestamp [jvm] fun isUpdateRecordTimestamp (): Boolean isUpdateRecordVersion [jvm] fun isUpdateRecordVersion (): Boolean key [jvm] open override fun key (): Record1< Long ?> map [jvm] override fun < E : Any > map (p0: RecordMapper<Record, E >): E merge [jvm] override fun merge (): Int open override fun merge (vararg p0: Field< >): Int override fun merge (p0: MutableCollection <out Field< >>): Int original [jvm] override fun original (): MovieRecord override fun original (p0: Int ): Any ? override fun original (p0: String ): Any ? override fun < T : Any > original (p0: Field< T >): T override fun original (p0: Name): Any ? parent [jvm] override fun < O : UpdatableRecord< O >> parent (p0: ForeignKey< MovieRecord , O >): Table< O > refresh [jvm] override fun refresh () override fun refresh (vararg p0: Field< >) override fun refresh (p0: MutableCollection <out Field< >>) reset [jvm] override fun reset () override fun reset (p0: Int ) override fun reset (p0: String ) override fun reset (p0: Field<*>) override fun reset (p0: Name) safeIndex [jvm] fun safeIndex (p0: Int ): Int set [jvm] operator fun set (p0: Int , p1: Any ) operator override fun < T : Any > set (p0: Field< T >, p1: T ) operator fun set (p0: Int , p1: Field<*>, p2: Any ) operator override fun < T : Any , U : Any > set (p0: Field< T >, p1: U , p2: Converter<out T , in U >) setRecordVersionAndTimestamp [jvm] fun setRecordVersionAndTimestamp (p0: BigInteger , p1: Timestamp ) setReturningIfNeeded [jvm] fun setReturningIfNeeded (p0: StoreQuery< MovieRecord >): MutableCollection <Field<*>> setValue [jvm] override fun < T : Any > setValue (p0: Field< T >, p1: T ) override fun < T : Any , U : Any > setValue (p0: Field< T >, p1: U , p2: Converter<out T , in U >) setValues [jvm] fun setValues (p0: Array <Field<*>>, p1: AbstractRecord) size [jvm] override fun size (): Int store [jvm] override fun store (): Int override fun store (vararg p0: Field< >): Int override fun store (p0: MutableCollection <out Field< >>): Int storeInsert [jvm] fun storeInsert (p0: Array <Field<*>>): Int storeInsert0 [jvm] fun storeInsert0 (p0: Array <Field<*>>): Int toString [jvm] open override fun toString (): String update [jvm] override fun update (): Int open override fun update (vararg p0: Field< >): Int override fun update (p0: MutableCollection <out Field< >>): Int value1 [jvm] open override fun value1 (): Long ? open override fun value1 (value: Long ?): MovieRecord value2 [jvm] open override fun value2 (): String ? open override fun value2 (value: String ?): MovieRecord value3 [jvm] open override fun value3 (): String ? open override fun value3 (value: String ?): MovieRecord value4 [jvm] open override fun value4 (): Int ? open override fun value4 (value: Int ?): MovieRecord value5 [jvm] open override fun value5 (): LocalDateTime ? open override fun value5 (value: LocalDateTime ?): MovieRecord value6 [jvm] open override fun value6 (): LocalDateTime ? open override fun value6 (value: LocalDateTime ?): MovieRecord values [jvm] open override fun values (value1: Long ?, value2: String ?, value3: String ?, value4: Int ?, value5: LocalDateTime ?, value6: LocalDateTime ?): MovieRecord valuesRow [jvm] open override fun valuesRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?> with [jvm] override fun < T : Any > with (p0: Field< T >, p1: T ): MovieRecord override fun < T : Any , U : Any > with (p0: Field< T >, p1: U , p2: Converter<out T , in U >): MovieRecord","title":"Functions"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/#properties","text":"Name Summary changed [jvm] val changed : BitSet createdAt [jvm] var createdAt : LocalDateTime ? fetched [jvm] val fetched : Boolean fields [jvm] val fields : AbstractRow genre [jvm] var genre : String ? id [jvm] var id : Long ? name [jvm] var name : String ? originals [jvm] val originals : Array < Any > updatedAt [jvm] var updatedAt : LocalDateTime ? values [jvm] val values : Array < Any > version [jvm] var version : Int ?","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/-movie-record/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / MovieRecord MovieRecord \u00b6 [jvm]\\ fun MovieRecord (id: Long ? = null, name: String ? = null, genre: String ? = null, version: Int ? = null, createdAt: LocalDateTime ? = null, updatedAt: LocalDateTime ? = null) Create a detached, initialised MovieRecord [jvm]\\ fun MovieRecord ()","title":"MovieRecord - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/-movie-record/#movierecord","text":"[jvm]\\ fun MovieRecord (id: Long ? = null, name: String ? = null, genre: String ? = null, version: Int ? = null, createdAt: LocalDateTime ? = null, updatedAt: LocalDateTime ? = null) Create a detached, initialised MovieRecord [jvm]\\ fun MovieRecord ()","title":"MovieRecord"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component1/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / component1 component1 \u00b6 [jvm]\\ open operator override fun component1 (): Long ?","title":"component1 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component1/#component1","text":"[jvm]\\ open operator override fun component1 (): Long ?","title":"component1"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component2/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / component2 component2 \u00b6 [jvm]\\ open operator override fun component2 (): String ?","title":"component2 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component2/#component2","text":"[jvm]\\ open operator override fun component2 (): String ?","title":"component2"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component3/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / component3 component3 \u00b6 [jvm]\\ open operator override fun component3 (): String ?","title":"component3 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component3/#component3","text":"[jvm]\\ open operator override fun component3 (): String ?","title":"component3"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component4/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / component4 component4 \u00b6 [jvm]\\ open operator override fun component4 (): Int ?","title":"component4 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component4/#component4","text":"[jvm]\\ open operator override fun component4 (): Int ?","title":"component4"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component5/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / component5 component5 \u00b6 [jvm]\\ open operator override fun component5 (): LocalDateTime ?","title":"component5 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component5/#component5","text":"[jvm]\\ open operator override fun component5 (): LocalDateTime ?","title":"component5"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component6/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / component6 component6 \u00b6 [jvm]\\ open operator override fun component6 (): LocalDateTime ?","title":"component6 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/component6/#component6","text":"[jvm]\\ open operator override fun component6 (): LocalDateTime ?","title":"component6"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/created-at/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / createdAt createdAt \u00b6 [jvm]\\ var createdAt : LocalDateTime ?","title":"createdAt - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/created-at/#createdat","text":"[jvm]\\ var createdAt : LocalDateTime ?","title":"createdAt"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field1/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / field1 field1 \u00b6 [jvm]\\ open override fun field1 (): Field< Long ?>","title":"field1 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field1/#field1","text":"[jvm]\\ open override fun field1 (): Field< Long ?>","title":"field1"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field2/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / field2 field2 \u00b6 [jvm]\\ open override fun field2 (): Field< String ?>","title":"field2 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field2/#field2","text":"[jvm]\\ open override fun field2 (): Field< String ?>","title":"field2"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field3/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / field3 field3 \u00b6 [jvm]\\ open override fun field3 (): Field< String ?>","title":"field3 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field3/#field3","text":"[jvm]\\ open override fun field3 (): Field< String ?>","title":"field3"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field4/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / field4 field4 \u00b6 [jvm]\\ open override fun field4 (): Field< Int ?>","title":"field4 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field4/#field4","text":"[jvm]\\ open override fun field4 (): Field< Int ?>","title":"field4"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field5/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / field5 field5 \u00b6 [jvm]\\ open override fun field5 (): Field< LocalDateTime ?>","title":"field5 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field5/#field5","text":"[jvm]\\ open override fun field5 (): Field< LocalDateTime ?>","title":"field5"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field6/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / field6 field6 \u00b6 [jvm]\\ open override fun field6 (): Field< LocalDateTime ?>","title":"field6 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/field6/#field6","text":"[jvm]\\ open override fun field6 (): Field< LocalDateTime ?>","title":"field6"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/fields-row/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / fieldsRow fieldsRow \u00b6 [jvm]\\ open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?>","title":"fieldsRow - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/fields-row/#fieldsrow","text":"[jvm]\\ open override fun fieldsRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?>","title":"fieldsRow"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/genre/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / genre genre \u00b6 [jvm]\\ var genre : String ?","title":"genre - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/genre/#genre","text":"[jvm]\\ var genre : String ?","title":"genre"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/id/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / id id \u00b6 [jvm]\\ var id : Long ?","title":"id - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/id/#id","text":"[jvm]\\ var id : Long ?","title":"id"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/key/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / key key \u00b6 [jvm]\\ open override fun key (): Record1< Long ?>","title":"key - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/key/#key","text":"[jvm]\\ open override fun key (): Record1< Long ?>","title":"key"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/name/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / name name \u00b6 [jvm]\\ var name : String ?","title":"name - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/name/#name","text":"[jvm]\\ var name : String ?","title":"name"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/updated-at/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / updatedAt updatedAt \u00b6 [jvm]\\ var updatedAt : LocalDateTime ?","title":"updatedAt - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/updated-at/#updatedat","text":"[jvm]\\ var updatedAt : LocalDateTime ?","title":"updatedAt"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value1/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / value1 value1 \u00b6 [jvm]\\ open override fun value1 (): Long ? open override fun value1 (value: Long ?): MovieRecord","title":"value1 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value1/#value1","text":"[jvm]\\ open override fun value1 (): Long ? open override fun value1 (value: Long ?): MovieRecord","title":"value1"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value2/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / value2 value2 \u00b6 [jvm]\\ open override fun value2 (): String ? open override fun value2 (value: String ?): MovieRecord","title":"value2 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value2/#value2","text":"[jvm]\\ open override fun value2 (): String ? open override fun value2 (value: String ?): MovieRecord","title":"value2"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value3/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / value3 value3 \u00b6 [jvm]\\ open override fun value3 (): String ? open override fun value3 (value: String ?): MovieRecord","title":"value3 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value3/#value3","text":"[jvm]\\ open override fun value3 (): String ? open override fun value3 (value: String ?): MovieRecord","title":"value3"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value4/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / value4 value4 \u00b6 [jvm]\\ open override fun value4 (): Int ? open override fun value4 (value: Int ?): MovieRecord","title":"value4 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value4/#value4","text":"[jvm]\\ open override fun value4 (): Int ? open override fun value4 (value: Int ?): MovieRecord","title":"value4"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value5/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / value5 value5 \u00b6 [jvm]\\ open override fun value5 (): LocalDateTime ? open override fun value5 (value: LocalDateTime ?): MovieRecord","title":"value5 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value5/#value5","text":"[jvm]\\ open override fun value5 (): LocalDateTime ? open override fun value5 (value: LocalDateTime ?): MovieRecord","title":"value5"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value6/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / value6 value6 \u00b6 [jvm]\\ open override fun value6 (): LocalDateTime ? open override fun value6 (value: LocalDateTime ?): MovieRecord","title":"value6 - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/value6/#value6","text":"[jvm]\\ open override fun value6 (): LocalDateTime ? open override fun value6 (value: LocalDateTime ?): MovieRecord","title":"value6"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/values-row/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / valuesRow valuesRow \u00b6 [jvm]\\ open override fun valuesRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?>","title":"valuesRow - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/values-row/#valuesrow","text":"[jvm]\\ open override fun valuesRow (): Row6< Long ?, String ?, String ?, Int ?, LocalDateTime ?, LocalDateTime ?>","title":"valuesRow"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/values/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / values values \u00b6 [jvm]\\ open override fun values (value1: Long ?, value2: String ?, value3: String ?, value4: Int ?, value5: LocalDateTime ?, value6: LocalDateTime ?): MovieRecord","title":"values - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/values/#values","text":"[jvm]\\ open override fun values (value1: Long ?, value2: String ?, value3: String ?, value4: Int ?, value5: LocalDateTime ?, value6: LocalDateTime ?): MovieRecord","title":"values"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/version/","text":"// misk-jooq / misk.jooq.testgen.tables.records / MovieRecord / version version \u00b6 [jvm]\\ var version : Int ?","title":"version - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.records/-movie-record/version/#version","text":"[jvm]\\ var version : Int ?","title":"version"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.references/","text":"// misk-jooq / misk.jooq.testgen.tables.references Package misk.jooq.testgen.tables.references \u00b6 Properties \u00b6 Name Summary MOVIE [jvm] val MOVIE : Movie The table jooq.movie .","title":"Package misk.jooq.testgen.tables.references - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.references/#package-miskjooqtestgentablesreferences","text":"","title":"Package misk.jooq.testgen.tables.references"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.references/#properties","text":"Name Summary MOVIE [jvm] val MOVIE : Movie The table jooq.movie .","title":"Properties"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.references/-m-o-v-i-e/","text":"// misk-jooq / misk.jooq.testgen.tables.references / MOVIE MOVIE \u00b6 [jvm]\\ val MOVIE : Movie The table jooq.movie .","title":"MOVIE - Misk"},{"location":"0.x/misk-jooq/misk.jooq.testgen.tables.references/-m-o-v-i-e/#movie","text":"[jvm]\\ val MOVIE : Movie The table jooq.movie .","title":"MOVIE"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/","text":"// misk-launchdarkly / misk.feature.launchdarkly Package misk.feature.launchdarkly \u00b6 Types \u00b6 Name Summary LaunchDarklyConfig [jvm] data class LaunchDarklyConfig (sdk_key: String , base_uri: String , ssl: HttpClientSSLConfig?) : Config LaunchDarklyModule [jvm] class LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FeatureFlags backed by LaunchDarkly ( https://launchdarkly.com ).","title":"Package misk.feature.launchdarkly - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/#package-miskfeaturelaunchdarkly","text":"","title":"Package misk.feature.launchdarkly"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/#types","text":"Name Summary LaunchDarklyConfig [jvm] data class LaunchDarklyConfig (sdk_key: String , base_uri: String , ssl: HttpClientSSLConfig?) : Config LaunchDarklyModule [jvm] class LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FeatureFlags backed by LaunchDarkly ( https://launchdarkly.com ).","title":"Types"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyConfig LaunchDarklyConfig \u00b6 [jvm]\\ data class LaunchDarklyConfig (sdk_key: String , base_uri: String , ssl: HttpClientSSLConfig?) : Config Properties \u00b6 Name Summary base_uri [jvm] val base_uri : String sdk_key [jvm] val sdk_key : String ssl [jvm] val ssl : HttpClientSSLConfig? = null","title":"LaunchDarklyConfig - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/#launchdarklyconfig","text":"[jvm]\\ data class LaunchDarklyConfig (sdk_key: String , base_uri: String , ssl: HttpClientSSLConfig?) : Config","title":"LaunchDarklyConfig"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/#properties","text":"Name Summary base_uri [jvm] val base_uri : String sdk_key [jvm] val sdk_key : String ssl [jvm] val ssl : HttpClientSSLConfig? = null","title":"Properties"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/-launch-darkly-config/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyConfig / LaunchDarklyConfig LaunchDarklyConfig \u00b6 [jvm]\\ fun LaunchDarklyConfig (sdk_key: String , base_uri: String , ssl: HttpClientSSLConfig? = null)","title":"LaunchDarklyConfig - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/-launch-darkly-config/#launchdarklyconfig","text":"[jvm]\\ fun LaunchDarklyConfig (sdk_key: String , base_uri: String , ssl: HttpClientSSLConfig? = null)","title":"LaunchDarklyConfig"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/base_uri/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyConfig / base_uri base_uri \u00b6 [jvm]\\ val base_uri : String","title":"base_uri - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/base_uri/#base_uri","text":"[jvm]\\ val base_uri : String","title":"base_uri"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/sdk_key/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyConfig / sdk_key sdk_key \u00b6 [jvm]\\ val sdk_key : String","title":"sdk_key - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/sdk_key/#sdk_key","text":"[jvm]\\ val sdk_key : String","title":"sdk_key"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/ssl/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyConfig / ssl ssl \u00b6 [jvm]\\ val ssl : HttpClientSSLConfig? = null","title":"ssl - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-config/ssl/#ssl","text":"[jvm]\\ val ssl : HttpClientSSLConfig? = null","title":"ssl"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyModule LaunchDarklyModule \u00b6 [jvm]\\ class LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FeatureFlags backed by LaunchDarkly ( https://launchdarkly.com ). Constructors \u00b6 LaunchDarklyModule [jvm] fun LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideLaunchDarklyClient [jvm] @Provides fun provideLaunchDarklyClient (sslLoader: SslLoader, sslContextFactory: SslContextFactory, resourceLoader: ResourceLoader): LDClientInterface requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"LaunchDarklyModule - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/#launchdarklymodule","text":"[jvm]\\ class LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a FeatureFlags backed by LaunchDarkly ( https://launchdarkly.com ).","title":"LaunchDarklyModule"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/#constructors","text":"LaunchDarklyModule [jvm] fun LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >? = null)","title":"Constructors"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideLaunchDarklyClient [jvm] @Provides fun provideLaunchDarklyClient (sslLoader: SslLoader, sslContextFactory: SslContextFactory, resourceLoader: ResourceLoader): LDClientInterface requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/-launch-darkly-module/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyModule / LaunchDarklyModule LaunchDarklyModule \u00b6 [jvm]\\ fun LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >? = null)","title":"LaunchDarklyModule - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/-launch-darkly-module/#launchdarklymodule","text":"[jvm]\\ fun LaunchDarklyModule (config: LaunchDarklyConfig , qualifier: KClass <out Annotation >? = null)","title":"LaunchDarklyModule"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/provide-launch-darkly-client/","text":"// misk-launchdarkly / misk.feature.launchdarkly / LaunchDarklyModule / provideLaunchDarklyClient provideLaunchDarklyClient \u00b6 [jvm]\\ @Provides fun provideLaunchDarklyClient (sslLoader: SslLoader, sslContextFactory: SslContextFactory, resourceLoader: ResourceLoader): LDClientInterface","title":"provideLaunchDarklyClient - Misk"},{"location":"0.x/misk-launchdarkly/misk.feature.launchdarkly/-launch-darkly-module/provide-launch-darkly-client/#providelaunchdarklyclient","text":"[jvm]\\ @Provides fun provideLaunchDarklyClient (sslLoader: SslLoader, sslContextFactory: SslContextFactory, resourceLoader: ResourceLoader): LDClientInterface","title":"provideLaunchDarklyClient"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly Package misk.feature.launchdarkly \u00b6 Types \u00b6 Name Summary LaunchDarklyDynamicConfig [jvm] @Singleton class LaunchDarklyDynamicConfig (featureFlags: FeatureFlags) : DynamicConfig LaunchDarklyFeatureFlags [jvm] @Singleton class LaunchDarklyFeatureFlags @Injectconstructor(delegate: LaunchDarklyFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService Implementation of FeatureFlags using LaunchDarkly\u2019s Java SDK. See https://docs.launchdarkly.com/docs/java-sdk-reference documentation.","title":"Package misk.feature.launchdarkly - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/#package-miskfeaturelaunchdarkly","text":"","title":"Package misk.feature.launchdarkly"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/#types","text":"Name Summary LaunchDarklyDynamicConfig [jvm] @Singleton class LaunchDarklyDynamicConfig (featureFlags: FeatureFlags) : DynamicConfig LaunchDarklyFeatureFlags [jvm] @Singleton class LaunchDarklyFeatureFlags @Injectconstructor(delegate: LaunchDarklyFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService Implementation of FeatureFlags using LaunchDarkly\u2019s Java SDK. See https://docs.launchdarkly.com/docs/java-sdk-reference documentation.","title":"Types"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig LaunchDarklyDynamicConfig \u00b6 [jvm]\\ @Singleton class LaunchDarklyDynamicConfig (featureFlags: FeatureFlags) : DynamicConfig Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary getBoolean [jvm] open override fun getBoolean (feature: Feature): Boolean getDouble [jvm] open override fun getDouble (feature: Feature): Double getEnum [jvm] open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T getInt [jvm] open override fun getInt (feature: Feature): Int getJson [jvm] open override fun < T > getJson (feature: Feature, clazz: Class < T >): T getString [jvm] open override fun getString (feature: Feature): String trackBoolean [jvm] open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference trackDouble [jvm] open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference trackEnum [jvm] open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackInt [jvm] open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference trackJson [jvm] open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackString [jvm] open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"LaunchDarklyDynamicConfig - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/#launchdarklydynamicconfig","text":"[jvm]\\ @Singleton class LaunchDarklyDynamicConfig (featureFlags: FeatureFlags) : DynamicConfig","title":"LaunchDarklyDynamicConfig"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/#functions","text":"Name Summary getBoolean [jvm] open override fun getBoolean (feature: Feature): Boolean getDouble [jvm] open override fun getDouble (feature: Feature): Double getEnum [jvm] open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T getInt [jvm] open override fun getInt (feature: Feature): Int getJson [jvm] open override fun < T > getJson (feature: Feature, clazz: Class < T >): T getString [jvm] open override fun getString (feature: Feature): String trackBoolean [jvm] open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference trackDouble [jvm] open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference trackEnum [jvm] open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackInt [jvm] open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference trackJson [jvm] open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackString [jvm] open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"Functions"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-launch-darkly-dynamic-config/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / LaunchDarklyDynamicConfig LaunchDarklyDynamicConfig \u00b6 [jvm]\\ fun LaunchDarklyDynamicConfig (featureFlags: FeatureFlags)","title":"LaunchDarklyDynamicConfig - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-launch-darkly-dynamic-config/#launchdarklydynamicconfig","text":"[jvm]\\ fun LaunchDarklyDynamicConfig (featureFlags: FeatureFlags)","title":"LaunchDarklyDynamicConfig"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-boolean/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / getBoolean getBoolean \u00b6 [jvm]\\ open override fun getBoolean (feature: Feature): Boolean","title":"getBoolean - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-boolean/#getboolean","text":"[jvm]\\ open override fun getBoolean (feature: Feature): Boolean","title":"getBoolean"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-double/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / getDouble getDouble \u00b6 [jvm]\\ open override fun getDouble (feature: Feature): Double","title":"getDouble - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-double/#getdouble","text":"[jvm]\\ open override fun getDouble (feature: Feature): Double","title":"getDouble"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-enum/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / getEnum getEnum \u00b6 [jvm]\\ open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T","title":"getEnum - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-enum/#getenum","text":"[jvm]\\ open override fun < T : Enum < T >> getEnum (feature: Feature, clazz: Class < T >): T","title":"getEnum"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-int/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / getInt getInt \u00b6 [jvm]\\ open override fun getInt (feature: Feature): Int","title":"getInt - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-int/#getint","text":"[jvm]\\ open override fun getInt (feature: Feature): Int","title":"getInt"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-json/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / getJson getJson \u00b6 [jvm]\\ open override fun < T > getJson (feature: Feature, clazz: Class < T >): T","title":"getJson - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-json/#getjson","text":"[jvm]\\ open override fun < T > getJson (feature: Feature, clazz: Class < T >): T","title":"getJson"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-string/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / getString getString \u00b6 [jvm]\\ open override fun getString (feature: Feature): String","title":"getString - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/get-string/#getstring","text":"[jvm]\\ open override fun getString (feature: Feature): String","title":"getString"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-boolean/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / trackBoolean trackBoolean \u00b6 [jvm]\\ open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"trackBoolean - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-boolean/#trackboolean","text":"[jvm]\\ open override fun trackBoolean (feature: Feature, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"trackBoolean"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-double/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / trackDouble trackDouble \u00b6 [jvm]\\ open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"trackDouble - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-double/#trackdouble","text":"[jvm]\\ open override fun trackDouble (feature: Feature, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"trackDouble"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-enum/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / trackEnum trackEnum \u00b6 [jvm]\\ open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-enum/#trackenum","text":"[jvm]\\ open override fun < T : Enum < T >> trackEnum (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-int/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / trackInt trackInt \u00b6 [jvm]\\ open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"trackInt - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-int/#trackint","text":"[jvm]\\ open override fun trackInt (feature: Feature, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"trackInt"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-json/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / trackJson trackJson \u00b6 [jvm]\\ open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-json/#trackjson","text":"[jvm]\\ open override fun < T > trackJson (feature: Feature, clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-string/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / trackString trackString \u00b6 [jvm]\\ open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"trackString - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/track-string/#trackstring","text":"[jvm]\\ open override fun trackString (feature: Feature, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"trackString"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-companion/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary ATTRIBUTES [jvm] val ATTRIBUTES : Attributes KEY [jvm] const val KEY : String","title":"Companion - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-companion/#properties","text":"Name Summary ATTRIBUTES [jvm] val ATTRIBUTES : Attributes KEY [jvm] const val KEY : String","title":"Properties"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-companion/-a-t-t-r-i-b-u-t-e-s/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / Companion / ATTRIBUTES ATTRIBUTES \u00b6 [jvm]\\ val ATTRIBUTES : Attributes","title":"ATTRIBUTES - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-companion/-a-t-t-r-i-b-u-t-e-s/#attributes","text":"[jvm]\\ val ATTRIBUTES : Attributes","title":"ATTRIBUTES"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-companion/-k-e-y/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyDynamicConfig / Companion / KEY KEY \u00b6 [jvm]\\ const val KEY : String","title":"KEY - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-dynamic-config/-companion/-k-e-y/#key","text":"[jvm]\\ const val KEY : String","title":"KEY"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags LaunchDarklyFeatureFlags \u00b6 [jvm]\\ @Singleton class LaunchDarklyFeatureFlags @Injectconstructor(delegate: LaunchDarklyFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService Implementation of FeatureFlags using LaunchDarkly\u2019s Java SDK. See https://docs.launchdarkly.com/docs/java-sdk-reference documentation. Constructors \u00b6 LaunchDarklyFeatureFlags [jvm] @Inject fun LaunchDarklyFeatureFlags (delegate: LaunchDarklyFeatureFlags) Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable get [jvm] open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun get (flag: IntFeatureFlag): Int open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T open override fun get (flag: StringFeatureFlag): String getBoolean [jvm] open fun getBoolean (feature: Feature, key: String ): Boolean open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean getDouble [jvm] open fun getDouble (feature: Feature, key: String ): Double open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double getEnum [jvm] open fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >): T open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getInt [jvm] open fun getInt (feature: Feature, key: String ): Int open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int getJson [jvm] open fun < T > getJson (feature: Feature, key: String , clazz: Class < T >): T open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getString [jvm] open fun getString (feature: Feature, key: String ): String open override fun getString (feature: Feature, key: String , attributes: Attributes): String isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String trackBoolean [jvm] open fun trackBoolean (feature: Feature, key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference trackDouble [jvm] open fun trackDouble (feature: Feature, key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference trackEnum [jvm] open fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackInt [jvm] open fun trackInt (feature: Feature, key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference trackJson [jvm] open fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackString [jvm] open fun trackString (feature: Feature, key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"LaunchDarklyFeatureFlags - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/#launchdarklyfeatureflags","text":"[jvm]\\ @Singleton class LaunchDarklyFeatureFlags @Injectconstructor(delegate: LaunchDarklyFeatureFlags) : AbstractIdleService, FeatureFlags, FeatureService Implementation of FeatureFlags using LaunchDarkly\u2019s Java SDK. See https://docs.launchdarkly.com/docs/java-sdk-reference documentation.","title":"LaunchDarklyFeatureFlags"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/#constructors","text":"LaunchDarklyFeatureFlags [jvm] @Inject fun LaunchDarklyFeatureFlags (delegate: LaunchDarklyFeatureFlags)","title":"Constructors"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable get [jvm] open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun get (flag: IntFeatureFlag): Int open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T open override fun get (flag: StringFeatureFlag): String getBoolean [jvm] open fun getBoolean (feature: Feature, key: String ): Boolean open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean getDouble [jvm] open fun getDouble (feature: Feature, key: String ): Double open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double getEnum [jvm] open fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >): T open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getInt [jvm] open fun getInt (feature: Feature, key: String ): Int open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int getJson [jvm] open fun < T > getJson (feature: Feature, key: String , clazz: Class < T >): T open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T getString [jvm] open fun getString (feature: Feature, key: String ): String open override fun getString (feature: Feature, key: String , attributes: Attributes): String isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String trackBoolean [jvm] open fun trackBoolean (feature: Feature, key: String , executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference trackDouble [jvm] open fun trackDouble (feature: Feature, key: String , executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference trackEnum [jvm] open fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackInt [jvm] open fun trackInt (feature: Feature, key: String , executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference trackJson [jvm] open fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference trackString [jvm] open fun trackString (feature: Feature, key: String , executor: Executor , tracker: ( String ) -> Unit ): TrackerReference open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"Functions"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/-launch-darkly-feature-flags/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / LaunchDarklyFeatureFlags LaunchDarklyFeatureFlags \u00b6 [jvm]\\ @Inject fun LaunchDarklyFeatureFlags (delegate: LaunchDarklyFeatureFlags)","title":"LaunchDarklyFeatureFlags - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/-launch-darkly-feature-flags/#launchdarklyfeatureflags","text":"[jvm]\\ @Inject fun LaunchDarklyFeatureFlags (delegate: LaunchDarklyFeatureFlags)","title":"LaunchDarklyFeatureFlags"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-boolean/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / getBoolean getBoolean \u00b6 [jvm]\\ open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean","title":"getBoolean - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-boolean/#getboolean","text":"[jvm]\\ open override fun getBoolean (feature: Feature, key: String , attributes: Attributes): Boolean","title":"getBoolean"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-double/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / getDouble getDouble \u00b6 [jvm]\\ open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double","title":"getDouble - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-double/#getdouble","text":"[jvm]\\ open override fun getDouble (feature: Feature, key: String , attributes: Attributes): Double","title":"getDouble"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-enum/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / getEnum getEnum \u00b6 [jvm]\\ open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T","title":"getEnum - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-enum/#getenum","text":"[jvm]\\ open override fun < T : Enum < T >> getEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T","title":"getEnum"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-int/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / getInt getInt \u00b6 [jvm]\\ open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int","title":"getInt - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-int/#getint","text":"[jvm]\\ open override fun getInt (feature: Feature, key: String , attributes: Attributes): Int","title":"getInt"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-json/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / getJson getJson \u00b6 [jvm]\\ open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T","title":"getJson - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-json/#getjson","text":"[jvm]\\ open override fun < T > getJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes): T","title":"getJson"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-string/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / getString getString \u00b6 [jvm]\\ open override fun getString (feature: Feature, key: String , attributes: Attributes): String","title":"getString - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get-string/#getstring","text":"[jvm]\\ open override fun getString (feature: Feature, key: String , attributes: Attributes): String","title":"getString"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / get get \u00b6 [jvm]\\ open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: StringFeatureFlag): String open override fun get (flag: IntFeatureFlag): Int open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T","title":"get - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/get/#get","text":"[jvm]\\ open override fun get (flag: BooleanFeatureFlag): Boolean open override fun get (flag: StringFeatureFlag): String open override fun get (flag: IntFeatureFlag): Int open override fun get (flag: DoubleFeatureFlag): Double open override fun < T : Enum < T >> get (flag: EnumFeatureFlag< T >): T open override fun < T : Any > get (flag: JsonFeatureFlag< T >): T","title":"get"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-boolean/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / trackBoolean trackBoolean \u00b6 [jvm]\\ open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"trackBoolean - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-boolean/#trackboolean","text":"[jvm]\\ open override fun trackBoolean (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Boolean ) -> Unit ): TrackerReference","title":"trackBoolean"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-double/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / trackDouble trackDouble \u00b6 [jvm]\\ open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"trackDouble - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-double/#trackdouble","text":"[jvm]\\ open override fun trackDouble (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Double ) -> Unit ): TrackerReference","title":"trackDouble"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-enum/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / trackEnum trackEnum \u00b6 [jvm]\\ open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-enum/#trackenum","text":"[jvm]\\ open override fun < T : Enum < T >> trackEnum (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackEnum"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-int/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / trackInt trackInt \u00b6 [jvm]\\ open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"trackInt - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-int/#trackint","text":"[jvm]\\ open override fun trackInt (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( Int ) -> Unit ): TrackerReference","title":"trackInt"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-json/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / trackJson trackJson \u00b6 [jvm]\\ open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-json/#trackjson","text":"[jvm]\\ open override fun < T > trackJson (feature: Feature, key: String , clazz: Class < T >, attributes: Attributes, executor: Executor , tracker: ( T ) -> Unit ): TrackerReference","title":"trackJson"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-string/","text":"// misk-launchdarkly-core / misk.feature.launchdarkly / LaunchDarklyFeatureFlags / trackString trackString \u00b6 [jvm]\\ open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"trackString - Misk"},{"location":"0.x/misk-launchdarkly-core/misk.feature.launchdarkly/-launch-darkly-feature-flags/track-string/#trackstring","text":"[jvm]\\ open override fun trackString (feature: Feature, key: String , attributes: Attributes, executor: Executor , tracker: ( String ) -> Unit ): TrackerReference","title":"trackString"},{"location":"0.x/misk-metrics/misk.metrics/","text":"// misk-metrics / misk.metrics Package misk.metrics \u00b6 Types \u00b6 Name Summary Histogram [jvm] interface Histogram Skeleton for the functionality of histograms Metrics [jvm] interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus. Properties \u00b6 Name Summary defaultQuantiles [jvm] val defaultQuantiles : Map < Double , Double >","title":"Package misk.metrics - Misk"},{"location":"0.x/misk-metrics/misk.metrics/#package-miskmetrics","text":"","title":"Package misk.metrics"},{"location":"0.x/misk-metrics/misk.metrics/#types","text":"Name Summary Histogram [jvm] interface Histogram Skeleton for the functionality of histograms Metrics [jvm] interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus.","title":"Types"},{"location":"0.x/misk-metrics/misk.metrics/#properties","text":"Name Summary defaultQuantiles [jvm] val defaultQuantiles : Map < Double , Double >","title":"Properties"},{"location":"0.x/misk-metrics/misk.metrics/default-quantiles/","text":"// misk-metrics / misk.metrics / defaultQuantiles defaultQuantiles \u00b6 [jvm]\\ val defaultQuantiles : Map < Double , Double >","title":"defaultQuantiles - Misk"},{"location":"0.x/misk-metrics/misk.metrics/default-quantiles/#defaultquantiles","text":"[jvm]\\ val defaultQuantiles : Map < Double , Double >","title":"defaultQuantiles"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/","text":"// misk-metrics / misk.metrics / Histogram Histogram \u00b6 [jvm]\\ interface Histogram Skeleton for the functionality of histograms A histogram samples observations (usually things like request durations or response sizes) and counts them in configurable buckets. A sample implementation can be found in PrometheusHistogram Functions \u00b6 Name Summary count [jvm] abstract fun count (vararg labelValues: String ): Int returns the number of buckets record [jvm] abstract fun record (duration: Double , vararg labelValues: String ) records a new set of labels and accompanying duration timedMills [jvm] open fun < T > timedMills (vararg labelValues: String , work: () -> T ): T records a new set of labels and the time to execute the work lambda in milliseconds","title":"Histogram - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/#histogram","text":"[jvm]\\ interface Histogram Skeleton for the functionality of histograms A histogram samples observations (usually things like request durations or response sizes) and counts them in configurable buckets. A sample implementation can be found in PrometheusHistogram","title":"Histogram"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/#functions","text":"Name Summary count [jvm] abstract fun count (vararg labelValues: String ): Int returns the number of buckets record [jvm] abstract fun record (duration: Double , vararg labelValues: String ) records a new set of labels and accompanying duration timedMills [jvm] open fun < T > timedMills (vararg labelValues: String , work: () -> T ): T records a new set of labels and the time to execute the work lambda in milliseconds","title":"Functions"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/count/","text":"// misk-metrics / misk.metrics / Histogram / count count \u00b6 [jvm]\\ abstract fun count (vararg labelValues: String ): Int returns the number of buckets","title":"count - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/count/#count","text":"[jvm]\\ abstract fun count (vararg labelValues: String ): Int returns the number of buckets","title":"count"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/record/","text":"// misk-metrics / misk.metrics / Histogram / record record \u00b6 [jvm]\\ abstract fun record (duration: Double , vararg labelValues: String ) records a new set of labels and accompanying duration","title":"record - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/record/#record","text":"[jvm]\\ abstract fun record (duration: Double , vararg labelValues: String ) records a new set of labels and accompanying duration","title":"record"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/timed-mills/","text":"// misk-metrics / misk.metrics / Histogram / timedMills timedMills \u00b6 [jvm]\\ open fun < T > timedMills (vararg labelValues: String , work: () -> T ): T records a new set of labels and the time to execute the work lambda in milliseconds","title":"timedMills - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-histogram/timed-mills/#timedmills","text":"[jvm]\\ open fun < T > timedMills (vararg labelValues: String , work: () -> T ): T records a new set of labels and the time to execute the work lambda in milliseconds","title":"timedMills"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/","text":"// misk-metrics / misk.metrics / Metrics Metrics \u00b6 [jvm]\\ interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus. Tests that use this should install a metrics client like PrometheusMetricsClientModule. Services that use this should install a metrics service like PrometheusMetricsServiceModule. Functions \u00b6 Name Summary counter [jvm] abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. gauge [jvm] abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. histogram [jvm] abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Histogram histogram creates and registers a new Summary prometheus type.","title":"Metrics - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/#metrics","text":"[jvm]\\ interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus. Tests that use this should install a metrics client like PrometheusMetricsClientModule. Services that use this should install a metrics service like PrometheusMetricsServiceModule.","title":"Metrics"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/#functions","text":"Name Summary counter [jvm] abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. gauge [jvm] abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. histogram [jvm] abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Histogram histogram creates and registers a new Summary prometheus type.","title":"Functions"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/counter/","text":"// misk-metrics / misk.metrics / Metrics / counter counter \u00b6 [jvm]\\ abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Counter.html for more info. Parameters \u00b6 jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"counter - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/counter/#counter","text":"[jvm]\\ abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Counter.html for more info.","title":"counter"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/counter/#parameters","text":"jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"Parameters"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/gauge/","text":"// misk-metrics / misk.metrics / Metrics / gauge gauge \u00b6 [jvm]\\ abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Gauge.html for more info. Parameters \u00b6 jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"gauge - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/gauge/#gauge","text":"[jvm]\\ abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Gauge.html for more info.","title":"gauge"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/gauge/#parameters","text":"jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"Parameters"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/histogram/","text":"// misk-metrics / misk.metrics / Metrics / histogram histogram \u00b6 [jvm]\\ abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Histogram histogram creates and registers a new Summary prometheus type. For legacy reasons, this function is called histogram(\u2026) but it\u2019s not backed by a histogram which is confusing. See https://prometheus.github.io/client_java/io/prometheus/client/Summary.html for more info. Parameters \u00b6 jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric. quantiles is a map of all of the quantiles (a.k.a. percentiles) that will be computed for the metric. The key of the map is the quantile as a ratio (e.g. 0.99 represents p99) and the value is the \u201ctolerable error\u201d of the computed quantile.","title":"histogram - Misk"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/histogram/#histogram","text":"[jvm]\\ abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Histogram histogram creates and registers a new Summary prometheus type. For legacy reasons, this function is called histogram(\u2026) but it\u2019s not backed by a histogram which is confusing. See https://prometheus.github.io/client_java/io/prometheus/client/Summary.html for more info.","title":"histogram"},{"location":"0.x/misk-metrics/misk.metrics/-metrics/histogram/#parameters","text":"jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric. quantiles is a map of all of the quantiles (a.k.a. percentiles) that will be computed for the metric. The key of the map is the quantile as a ratio (e.g. 0.99 represents p99) and the value is the \u201ctolerable error\u201d of the computed quantile.","title":"Parameters"},{"location":"0.x/misk-metrics/misk.metrics.v2/","text":"// misk-metrics / misk.metrics.v2 Package misk.metrics.v2 \u00b6 Types \u00b6 Name Summary Metrics [jvm] interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus. Functions \u00b6 Name Summary exponentialBuckets [jvm] fun exponentialBuckets (start: Double , factor: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with an exponential sequence. linearBuckets [jvm] fun linearBuckets (start: Double , width: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with a linear sequence. Properties \u00b6 Name Summary defaultBuckets [jvm] val defaultBuckets : List < Double > defaultBuckets is a default set of buckets which assumes the value is in milliseconds (ms). defaultQuantiles [jvm] val defaultQuantiles : Map < Double , Double > defaultSparseBuckets [jvm] val defaultSparseBuckets : List < Double > defaultSparseBuckets is a default set of buckets which assumes the value is in milliseconds (ms).","title":"Package misk.metrics.v2 - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/#package-miskmetricsv2","text":"","title":"Package misk.metrics.v2"},{"location":"0.x/misk-metrics/misk.metrics.v2/#types","text":"Name Summary Metrics [jvm] interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus.","title":"Types"},{"location":"0.x/misk-metrics/misk.metrics.v2/#functions","text":"Name Summary exponentialBuckets [jvm] fun exponentialBuckets (start: Double , factor: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with an exponential sequence. linearBuckets [jvm] fun linearBuckets (start: Double , width: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with a linear sequence.","title":"Functions"},{"location":"0.x/misk-metrics/misk.metrics.v2/#properties","text":"Name Summary defaultBuckets [jvm] val defaultBuckets : List < Double > defaultBuckets is a default set of buckets which assumes the value is in milliseconds (ms). defaultQuantiles [jvm] val defaultQuantiles : Map < Double , Double > defaultSparseBuckets [jvm] val defaultSparseBuckets : List < Double > defaultSparseBuckets is a default set of buckets which assumes the value is in milliseconds (ms).","title":"Properties"},{"location":"0.x/misk-metrics/misk.metrics.v2/default-buckets/","text":"// misk-metrics / misk.metrics.v2 / defaultBuckets defaultBuckets \u00b6 [jvm]\\ val defaultBuckets : List < Double > defaultBuckets is a default set of buckets which assumes the value is in milliseconds (ms). It contains 58 buckets which range from 1ms to 1hr. Adapted from the default M3 buckets. https://github.com/m3db/m3/blob/v1.1.0/src/x/instrument/methods.go#L57-L83","title":"defaultBuckets - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/default-buckets/#defaultbuckets","text":"[jvm]\\ val defaultBuckets : List < Double > defaultBuckets is a default set of buckets which assumes the value is in milliseconds (ms). It contains 58 buckets which range from 1ms to 1hr. Adapted from the default M3 buckets. https://github.com/m3db/m3/blob/v1.1.0/src/x/instrument/methods.go#L57-L83","title":"defaultBuckets"},{"location":"0.x/misk-metrics/misk.metrics.v2/default-quantiles/","text":"// misk-metrics / misk.metrics.v2 / defaultQuantiles defaultQuantiles \u00b6 [jvm]\\ val defaultQuantiles : Map < Double , Double >","title":"defaultQuantiles - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/default-quantiles/#defaultquantiles","text":"[jvm]\\ val defaultQuantiles : Map < Double , Double >","title":"defaultQuantiles"},{"location":"0.x/misk-metrics/misk.metrics.v2/default-sparse-buckets/","text":"// misk-metrics / misk.metrics.v2 / defaultSparseBuckets defaultSparseBuckets \u00b6 [jvm]\\ val defaultSparseBuckets : List < Double > defaultSparseBuckets is a default set of buckets which assumes the value is in milliseconds (ms). It contains 21 buckets which range from 1ms to 8m. Adapted from the default M3 buckets. https://github.com/m3db/m3/blob/v1.1.0/src/x/instrument/methods.go#L85-L147","title":"defaultSparseBuckets - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/default-sparse-buckets/#defaultsparsebuckets","text":"[jvm]\\ val defaultSparseBuckets : List < Double > defaultSparseBuckets is a default set of buckets which assumes the value is in milliseconds (ms). It contains 21 buckets which range from 1ms to 8m. Adapted from the default M3 buckets. https://github.com/m3db/m3/blob/v1.1.0/src/x/instrument/methods.go#L85-L147","title":"defaultSparseBuckets"},{"location":"0.x/misk-metrics/misk.metrics.v2/exponential-buckets/","text":"// misk-metrics / misk.metrics.v2 / exponentialBuckets exponentialBuckets \u00b6 [jvm]\\ fun exponentialBuckets (start: Double , factor: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with an exponential sequence.","title":"exponentialBuckets - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/exponential-buckets/#exponentialbuckets","text":"[jvm]\\ fun exponentialBuckets (start: Double , factor: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with an exponential sequence.","title":"exponentialBuckets"},{"location":"0.x/misk-metrics/misk.metrics.v2/linear-buckets/","text":"// misk-metrics / misk.metrics.v2 / linearBuckets linearBuckets \u00b6 [jvm]\\ fun linearBuckets (start: Double , width: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with a linear sequence.","title":"linearBuckets - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/linear-buckets/#linearbuckets","text":"[jvm]\\ fun linearBuckets (start: Double , width: Double , count: Int ): List < Double > Generate a list of upper bounds of buckets for a histogram with a linear sequence.","title":"linearBuckets"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/","text":"// misk-metrics / misk.metrics.v2 / Metrics Metrics \u00b6 [jvm]\\ interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus. NOTE: misk.metrics.v2.Metrics is NOT backward compatible with misk.metrics.Metrics. This is because the metric type of the histogram(\u2026) function has changed. If a callsite which used misk.metrics.Metrics.histogram(\u2026) is upgraded to use misk.metrics.v2.Metrics.histogram(\u2026), the dashboards and monitors based on the metric will break because the data type of the metric will have changed. Tests that use this should install a metrics client like PrometheusMetricsClientModule. Services that use this should install a metrics service like PrometheusMetricsServiceModule. Functions \u00b6 Name Summary counter [jvm] abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. gauge [jvm] abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. histogram [jvm] abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, buckets: List < Double > = defaultBuckets): Histogram histogram creates a new Histogram prometheus type with the supplied parameters. summary [jvm] abstract fun summary (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Summary summary creates and registers a new Summary prometheus type.","title":"Metrics - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/#metrics","text":"[jvm]\\ interface Metrics Interface for application code to emit metrics to a metrics backend like Prometheus. NOTE: misk.metrics.v2.Metrics is NOT backward compatible with misk.metrics.Metrics. This is because the metric type of the histogram(\u2026) function has changed. If a callsite which used misk.metrics.Metrics.histogram(\u2026) is upgraded to use misk.metrics.v2.Metrics.histogram(\u2026), the dashboards and monitors based on the metric will break because the data type of the metric will have changed. Tests that use this should install a metrics client like PrometheusMetricsClientModule. Services that use this should install a metrics service like PrometheusMetricsServiceModule.","title":"Metrics"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/#functions","text":"Name Summary counter [jvm] abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. gauge [jvm] abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. histogram [jvm] abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, buckets: List < Double > = defaultBuckets): Histogram histogram creates a new Histogram prometheus type with the supplied parameters. summary [jvm] abstract fun summary (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Summary summary creates and registers a new Summary prometheus type.","title":"Functions"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/counter/","text":"// misk-metrics / misk.metrics.v2 / Metrics / counter counter \u00b6 [jvm]\\ abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Counter.html for more info. Parameters \u00b6 jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"counter - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/counter/#counter","text":"[jvm]\\ abstract fun counter (name: String , help: String , labelNames: List < String > = listOf()): Counter counter creates and registers a new Counter prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Counter.html for more info.","title":"counter"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/counter/#parameters","text":"jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"Parameters"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/gauge/","text":"// misk-metrics / misk.metrics.v2 / Metrics / gauge gauge \u00b6 [jvm]\\ abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Gauge.html for more info. Parameters \u00b6 jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"gauge - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/gauge/#gauge","text":"[jvm]\\ abstract fun gauge (name: String , help: String = \u201c\u201d, labelNames: List < String > = listOf()): Gauge gauge creates and registers a new Gauge prometheus type. See https://prometheus.github.io/client_java/io/prometheus/client/Gauge.html for more info.","title":"gauge"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/gauge/#parameters","text":"jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric.","title":"Parameters"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/histogram/","text":"// misk-metrics / misk.metrics.v2 / Metrics / histogram histogram \u00b6 [jvm]\\ abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, buckets: List < Double > = defaultBuckets): Histogram histogram creates a new Histogram prometheus type with the supplied parameters. NOTE: misk.metrics.v2.Metrics is NOT backward compatible with misk.metrics.Metrics. This is because the metric type of the histogram(\u2026) function has changed. If a callsite which used misk.metrics.Metrics.histogram(\u2026) is upgraded to use misk.metrics.v2.Metrics.histogram(\u2026), the dashboards and monitors based on the metric will break because the data type of the metric will have changed. See https://prometheus.github.io/client_java/io/prometheus/client/Histogram.html for more info. Parameters \u00b6 jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric. buckets a list of upper bounds of buckets for the histogram.","title":"histogram - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/histogram/#histogram","text":"[jvm]\\ abstract fun histogram (name: String , help: String = \u201c\u201d, labelNames: List < String >, buckets: List < Double > = defaultBuckets): Histogram histogram creates a new Histogram prometheus type with the supplied parameters. NOTE: misk.metrics.v2.Metrics is NOT backward compatible with misk.metrics.Metrics. This is because the metric type of the histogram(\u2026) function has changed. If a callsite which used misk.metrics.Metrics.histogram(\u2026) is upgraded to use misk.metrics.v2.Metrics.histogram(\u2026), the dashboards and monitors based on the metric will break because the data type of the metric will have changed. See https://prometheus.github.io/client_java/io/prometheus/client/Histogram.html for more info.","title":"histogram"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/histogram/#parameters","text":"jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric. buckets a list of upper bounds of buckets for the histogram.","title":"Parameters"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/summary/","text":"// misk-metrics / misk.metrics.v2 / Metrics / summary summary \u00b6 [jvm]\\ abstract fun summary (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Summary summary creates and registers a new Summary prometheus type. This function used to be called histogram(\u2026) but was updated because it\u2019s not backed by a histogram which is confusing. See https://prometheus.github.io/client_java/io/prometheus/client/Summary.html for more info. Parameters \u00b6 jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric. quantiles is a map of all of the quantiles (a.k.a. percentiles) that will be computed for the metric. The key of the map is the quantile as a ratio (e.g. 0.99 represents p99) and the value is the \u201ctolerable error\u201d of the computed quantile.","title":"summary - Misk"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/summary/#summary","text":"[jvm]\\ abstract fun summary (name: String , help: String = \u201c\u201d, labelNames: List < String >, quantiles: Map < Double , Double > = defaultQuantiles, maxAgeSeconds: Long ? = null): Summary summary creates and registers a new Summary prometheus type. This function used to be called histogram(\u2026) but was updated because it\u2019s not backed by a histogram which is confusing. See https://prometheus.github.io/client_java/io/prometheus/client/Summary.html for more info.","title":"summary"},{"location":"0.x/misk-metrics/misk.metrics.v2/-metrics/summary/#parameters","text":"jvm name the name of the metric which will be supplied to prometheus. Must be unique across all metric types. help human-readable help text that will be supplied to prometheus. labelNames the names (a.k.a. keys) of all the labels that will be used for this metric. quantiles is a map of all of the quantiles (a.k.a. percentiles) that will be computed for the metric. The key of the map is the quantile as a ratio (e.g. 0.99 represents p99) and the value is the \u201ctolerable error\u201d of the computed quantile.","title":"Parameters"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/","text":"// misk-metrics-digester / com.squareup.digester.protos.service Package com.squareup.digester.protos.service \u00b6 Types \u00b6 Name Summary DigestData [jvm] class DigestData : Message< DigestData , DigestData.Builder > Representation of internals of a t-digest implementation. GetDigestsRequest [jvm] class GetDigestsRequest : Message< GetDigestsRequest , GetDigestsRequest.Builder > GetDigestsResponse [jvm] class GetDigestsResponse : Message< GetDigestsResponse , GetDigestsResponse.Builder > MetricFamily [jvm] class MetricFamily : Message< MetricFamily , MetricFamily.Builder > A group of digest metrics all having the same name and label names.","title":"Package com.squareup.digester.protos.service - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/#package-comsquareupdigesterprotosservice","text":"","title":"Package com.squareup.digester.protos.service"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/#types","text":"Name Summary DigestData [jvm] class DigestData : Message< DigestData , DigestData.Builder > Representation of internals of a t-digest implementation. GetDigestsRequest [jvm] class GetDigestsRequest : Message< GetDigestsRequest , GetDigestsRequest.Builder > GetDigestsResponse [jvm] class GetDigestsResponse : Message< GetDigestsResponse , GetDigestsResponse.Builder > MetricFamily [jvm] class MetricFamily : Message< MetricFamily , MetricFamily.Builder > A group of digest metrics all having the same name and label names.","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData DigestData \u00b6 [jvm]\\ class DigestData : Message< DigestData , DigestData.Builder > Representation of internals of a t-digest implementation. Constructors \u00b6 DigestData [jvm] open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString) DigestData [jvm] open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString, unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< DigestData , DigestData.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): DigestData.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< DigestData > count [jvm] val count : Long Count of values observed. DEFAULT_COUNT [jvm] val DEFAULT_COUNT : Long DEFAULT_SUM [jvm] val DEFAULT_SUM : Double DEFAULT_VENEUR_DIGEST [jvm] val DEFAULT_VENEUR_DIGEST : ByteString sum [jvm] val sum : Double Sum of observed values. veneur_digest [jvm] val veneur_digest : ByteString Serialized Veneur t-digest proto bytes.","title":"DigestData - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/#digestdata","text":"[jvm]\\ class DigestData : Message< DigestData , DigestData.Builder > Representation of internals of a t-digest implementation.","title":"DigestData"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/#constructors","text":"DigestData [jvm] open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString) DigestData [jvm] open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString, unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< DigestData , DigestData.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): DigestData.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< DigestData > count [jvm] val count : Long Count of values observed. DEFAULT_COUNT [jvm] val DEFAULT_COUNT : Long DEFAULT_SUM [jvm] val DEFAULT_SUM : Double DEFAULT_VENEUR_DIGEST [jvm] val DEFAULT_VENEUR_DIGEST : ByteString sum [jvm] val sum : Double Sum of observed values. veneur_digest [jvm] val veneur_digest : ByteString Serialized Veneur t-digest proto bytes.","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< DigestData >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< DigestData >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-d-e-f-a-u-l-t_-c-o-u-n-t/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / DEFAULT_COUNT DEFAULT_COUNT \u00b6 [jvm]\\ val DEFAULT_COUNT : Long","title":"DEFAULT_COUNT - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-d-e-f-a-u-l-t_-c-o-u-n-t/#default_count","text":"[jvm]\\ val DEFAULT_COUNT : Long","title":"DEFAULT_COUNT"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-d-e-f-a-u-l-t_-s-u-m/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / DEFAULT_SUM DEFAULT_SUM \u00b6 [jvm]\\ val DEFAULT_SUM : Double","title":"DEFAULT_SUM - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-d-e-f-a-u-l-t_-s-u-m/#default_sum","text":"[jvm]\\ val DEFAULT_SUM : Double","title":"DEFAULT_SUM"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-d-e-f-a-u-l-t_-v-e-n-e-u-r_-d-i-g-e-s-t/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / DEFAULT_VENEUR_DIGEST DEFAULT_VENEUR_DIGEST \u00b6 [jvm]\\ val DEFAULT_VENEUR_DIGEST : ByteString","title":"DEFAULT_VENEUR_DIGEST - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-d-e-f-a-u-l-t_-v-e-n-e-u-r_-d-i-g-e-s-t/#default_veneur_digest","text":"[jvm]\\ val DEFAULT_VENEUR_DIGEST : ByteString","title":"DEFAULT_VENEUR_DIGEST"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-digest-data/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / DigestData DigestData \u00b6 [jvm]\\ open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString) open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString, unknownFields: ByteString)","title":"DigestData - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-digest-data/#digestdata","text":"[jvm]\\ open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString) open fun DigestData (count: Long , sum: Double , veneur_digest: ByteString, unknownFields: ByteString)","title":"DigestData"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/count/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / count count \u00b6 [jvm]\\ val count : Long Count of values observed.","title":"count - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/count/#count","text":"[jvm]\\ val count : Long Count of values observed.","title":"count"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): DigestData.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): DigestData.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/sum/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / sum sum \u00b6 [jvm]\\ val sum : Double Sum of observed values.","title":"sum - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/sum/#sum","text":"[jvm]\\ val sum : Double Sum of observed values.","title":"sum"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/veneur_digest/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / veneur_digest veneur_digest \u00b6 [jvm]\\ val veneur_digest : ByteString Serialized Veneur t-digest proto bytes. github.com/stripe/veneur/tdigest","title":"veneur_digest - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/veneur_digest/#veneur_digest","text":"[jvm]\\ val veneur_digest : ByteString Serialized Veneur t-digest proto bytes. github.com/stripe/veneur/tdigest","title":"veneur_digest"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< DigestData , DigestData.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): DigestData buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> count [jvm] open fun count (count: Long ): DigestData.Builder Count of values observed. getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) sum [jvm] open fun sum (sum: Double ): DigestData.Builder Sum of observed values. veneur_digest [jvm] open fun veneur_digest (veneur_digest: ByteString): DigestData.Builder Serialized Veneur t-digest proto bytes. Properties \u00b6 Name Summary count [jvm] open val count : Long sum [jvm] open val sum : Double veneur_digest [jvm] open val veneur_digest : ByteString","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< DigestData , DigestData.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): DigestData buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> count [jvm] open fun count (count: Long ): DigestData.Builder Count of values observed. getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) sum [jvm] open fun sum (sum: Double ): DigestData.Builder Sum of observed values. veneur_digest [jvm] open fun veneur_digest (veneur_digest: ByteString): DigestData.Builder Serialized Veneur t-digest proto bytes.","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/#properties","text":"Name Summary count [jvm] open val count : Long sum [jvm] open val sum : Double veneur_digest [jvm] open val veneur_digest : ByteString","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / Builder / build build \u00b6 [jvm]\\ open fun build (): DigestData","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/build/#build","text":"[jvm]\\ open fun build (): DigestData","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/count/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / Builder / count count \u00b6 [jvm]\\ open fun count (count: Long ): DigestData.Builder Count of values observed. [jvm]\\ open val count : Long","title":"count - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/count/#count","text":"[jvm]\\ open fun count (count: Long ): DigestData.Builder Count of values observed. [jvm]\\ open val count : Long","title":"count"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/sum/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / Builder / sum sum \u00b6 [jvm]\\ open fun sum (sum: Double ): DigestData.Builder Sum of observed values. [jvm]\\ open val sum : Double","title":"sum - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/sum/#sum","text":"[jvm]\\ open fun sum (sum: Double ): DigestData.Builder Sum of observed values. [jvm]\\ open val sum : Double","title":"sum"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/veneur_digest/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / DigestData / Builder / veneur_digest veneur_digest \u00b6 [jvm]\\ open fun veneur_digest (veneur_digest: ByteString): DigestData.Builder Serialized Veneur t-digest proto bytes. github.com/stripe/veneur/tdigest [jvm]\\ open val veneur_digest : ByteString","title":"veneur_digest - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-digest-data/-builder/veneur_digest/#veneur_digest","text":"[jvm]\\ open fun veneur_digest (veneur_digest: ByteString): DigestData.Builder Serialized Veneur t-digest proto bytes. github.com/stripe/veneur/tdigest [jvm]\\ open val veneur_digest : ByteString","title":"veneur_digest"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest GetDigestsRequest \u00b6 [jvm]\\ class GetDigestsRequest : Message< GetDigestsRequest , GetDigestsRequest.Builder > Constructors \u00b6 GetDigestsRequest [jvm] open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long ) GetDigestsRequest [jvm] open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long , unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< GetDigestsRequest , GetDigestsRequest.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): GetDigestsRequest.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< GetDigestsRequest > DEFAULT_WINDOWS_END_FROM_MS [jvm] val DEFAULT_WINDOWS_END_FROM_MS : Long DEFAULT_WINDOWS_END_TO_MS [jvm] val DEFAULT_WINDOWS_END_TO_MS : Long windows_end_from_ms [jvm] val windows_end_from_ms : Long Earliest end time of windows to return, inclusive. windows_end_to_ms [jvm] val windows_end_to_ms : Long Latest end time of windows to return, inclusive.","title":"GetDigestsRequest - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/#getdigestsrequest","text":"[jvm]\\ class GetDigestsRequest : Message< GetDigestsRequest , GetDigestsRequest.Builder >","title":"GetDigestsRequest"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/#constructors","text":"GetDigestsRequest [jvm] open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long ) GetDigestsRequest [jvm] open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long , unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< GetDigestsRequest , GetDigestsRequest.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): GetDigestsRequest.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< GetDigestsRequest > DEFAULT_WINDOWS_END_FROM_MS [jvm] val DEFAULT_WINDOWS_END_FROM_MS : Long DEFAULT_WINDOWS_END_TO_MS [jvm] val DEFAULT_WINDOWS_END_TO_MS : Long windows_end_from_ms [jvm] val windows_end_from_ms : Long Earliest end time of windows to return, inclusive. windows_end_to_ms [jvm] val windows_end_to_ms : Long Latest end time of windows to return, inclusive.","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< GetDigestsRequest >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< GetDigestsRequest >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-d-e-f-a-u-l-t_-w-i-n-d-o-w-s_-e-n-d_-f-r-o-m_-m-s/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / DEFAULT_WINDOWS_END_FROM_MS DEFAULT_WINDOWS_END_FROM_MS \u00b6 [jvm]\\ val DEFAULT_WINDOWS_END_FROM_MS : Long","title":"DEFAULT_WINDOWS_END_FROM_MS - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-d-e-f-a-u-l-t_-w-i-n-d-o-w-s_-e-n-d_-f-r-o-m_-m-s/#default_windows_end_from_ms","text":"[jvm]\\ val DEFAULT_WINDOWS_END_FROM_MS : Long","title":"DEFAULT_WINDOWS_END_FROM_MS"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-d-e-f-a-u-l-t_-w-i-n-d-o-w-s_-e-n-d_-t-o_-m-s/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / DEFAULT_WINDOWS_END_TO_MS DEFAULT_WINDOWS_END_TO_MS \u00b6 [jvm]\\ val DEFAULT_WINDOWS_END_TO_MS : Long","title":"DEFAULT_WINDOWS_END_TO_MS - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-d-e-f-a-u-l-t_-w-i-n-d-o-w-s_-e-n-d_-t-o_-m-s/#default_windows_end_to_ms","text":"[jvm]\\ val DEFAULT_WINDOWS_END_TO_MS : Long","title":"DEFAULT_WINDOWS_END_TO_MS"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-get-digests-request/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / GetDigestsRequest GetDigestsRequest \u00b6 [jvm]\\ open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long ) open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long , unknownFields: ByteString)","title":"GetDigestsRequest - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-get-digests-request/#getdigestsrequest","text":"[jvm]\\ open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long ) open fun GetDigestsRequest (windows_end_from_ms: Long , windows_end_to_ms: Long , unknownFields: ByteString)","title":"GetDigestsRequest"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): GetDigestsRequest.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): GetDigestsRequest.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/windows_end_from_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / windows_end_from_ms windows_end_from_ms \u00b6 [jvm]\\ val windows_end_from_ms : Long Earliest end time of windows to return, inclusive.","title":"windows_end_from_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/windows_end_from_ms/#windows_end_from_ms","text":"[jvm]\\ val windows_end_from_ms : Long Earliest end time of windows to return, inclusive.","title":"windows_end_from_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/windows_end_to_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / windows_end_to_ms windows_end_to_ms \u00b6 [jvm]\\ val windows_end_to_ms : Long Latest end time of windows to return, inclusive.","title":"windows_end_to_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/windows_end_to_ms/#windows_end_to_ms","text":"[jvm]\\ val windows_end_to_ms : Long Latest end time of windows to return, inclusive.","title":"windows_end_to_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< GetDigestsRequest , GetDigestsRequest.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): GetDigestsRequest buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) windows_end_from_ms [jvm] open fun windows_end_from_ms (windows_end_from_ms: Long ): GetDigestsRequest.Builder Earliest end time of windows to return, inclusive. windows_end_to_ms [jvm] open fun windows_end_to_ms (windows_end_to_ms: Long ): GetDigestsRequest.Builder Latest end time of windows to return, inclusive. Properties \u00b6 Name Summary windows_end_from_ms [jvm] open val windows_end_from_ms : Long windows_end_to_ms [jvm] open val windows_end_to_ms : Long","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< GetDigestsRequest , GetDigestsRequest.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): GetDigestsRequest buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) windows_end_from_ms [jvm] open fun windows_end_from_ms (windows_end_from_ms: Long ): GetDigestsRequest.Builder Earliest end time of windows to return, inclusive. windows_end_to_ms [jvm] open fun windows_end_to_ms (windows_end_to_ms: Long ): GetDigestsRequest.Builder Latest end time of windows to return, inclusive.","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/#properties","text":"Name Summary windows_end_from_ms [jvm] open val windows_end_from_ms : Long windows_end_to_ms [jvm] open val windows_end_to_ms : Long","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / Builder / build build \u00b6 [jvm]\\ open fun build (): GetDigestsRequest","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/build/#build","text":"[jvm]\\ open fun build (): GetDigestsRequest","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/windows_end_from_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / Builder / windows_end_from_ms windows_end_from_ms \u00b6 [jvm]\\ open fun windows_end_from_ms (windows_end_from_ms: Long ): GetDigestsRequest.Builder Earliest end time of windows to return, inclusive. [jvm]\\ open val windows_end_from_ms : Long","title":"windows_end_from_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/windows_end_from_ms/#windows_end_from_ms","text":"[jvm]\\ open fun windows_end_from_ms (windows_end_from_ms: Long ): GetDigestsRequest.Builder Earliest end time of windows to return, inclusive. [jvm]\\ open val windows_end_from_ms : Long","title":"windows_end_from_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/windows_end_to_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsRequest / Builder / windows_end_to_ms windows_end_to_ms \u00b6 [jvm]\\ open fun windows_end_to_ms (windows_end_to_ms: Long ): GetDigestsRequest.Builder Latest end time of windows to return, inclusive. [jvm]\\ open val windows_end_to_ms : Long","title":"windows_end_to_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-request/-builder/windows_end_to_ms/#windows_end_to_ms","text":"[jvm]\\ open fun windows_end_to_ms (windows_end_to_ms: Long ): GetDigestsRequest.Builder Latest end time of windows to return, inclusive. [jvm]\\ open val windows_end_to_ms : Long","title":"windows_end_to_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse GetDigestsResponse \u00b6 [jvm]\\ class GetDigestsResponse : Message< GetDigestsResponse , GetDigestsResponse.Builder > Constructors \u00b6 GetDigestsResponse [jvm] open fun GetDigestsResponse (metric_family: MetricFamily ) GetDigestsResponse [jvm] open fun GetDigestsResponse (metric_family: MetricFamily , unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< GetDigestsResponse , GetDigestsResponse.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): GetDigestsResponse.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< GetDigestsResponse > metric_family [jvm] val metric_family : MetricFamily","title":"GetDigestsResponse - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/#getdigestsresponse","text":"[jvm]\\ class GetDigestsResponse : Message< GetDigestsResponse , GetDigestsResponse.Builder >","title":"GetDigestsResponse"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/#constructors","text":"GetDigestsResponse [jvm] open fun GetDigestsResponse (metric_family: MetricFamily ) GetDigestsResponse [jvm] open fun GetDigestsResponse (metric_family: MetricFamily , unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< GetDigestsResponse , GetDigestsResponse.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): GetDigestsResponse.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< GetDigestsResponse > metric_family [jvm] val metric_family : MetricFamily","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< GetDigestsResponse >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< GetDigestsResponse >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-get-digests-response/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / GetDigestsResponse GetDigestsResponse \u00b6 [jvm]\\ open fun GetDigestsResponse (metric_family: MetricFamily ) open fun GetDigestsResponse (metric_family: MetricFamily , unknownFields: ByteString)","title":"GetDigestsResponse - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-get-digests-response/#getdigestsresponse","text":"[jvm]\\ open fun GetDigestsResponse (metric_family: MetricFamily ) open fun GetDigestsResponse (metric_family: MetricFamily , unknownFields: ByteString)","title":"GetDigestsResponse"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/metric_family/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / metric_family metric_family \u00b6 [jvm]\\ val metric_family : MetricFamily","title":"metric_family - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/metric_family/#metric_family","text":"[jvm]\\ val metric_family : MetricFamily","title":"metric_family"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): GetDigestsResponse.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): GetDigestsResponse.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< GetDigestsResponse , GetDigestsResponse.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): GetDigestsResponse buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter metric_family [jvm] open fun metric_family (metric_family: MetricFamily ): GetDigestsResponse.Builder setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) Properties \u00b6 Name Summary metric_family [jvm] open val metric_family : MetricFamily","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< GetDigestsResponse , GetDigestsResponse.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): GetDigestsResponse buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter metric_family [jvm] open fun metric_family (metric_family: MetricFamily ): GetDigestsResponse.Builder setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter)","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/#properties","text":"Name Summary metric_family [jvm] open val metric_family : MetricFamily","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / Builder / build build \u00b6 [jvm]\\ open fun build (): GetDigestsResponse","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/build/#build","text":"[jvm]\\ open fun build (): GetDigestsResponse","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/metric_family/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / GetDigestsResponse / Builder / metric_family metric_family \u00b6 [jvm]\\ open fun metric_family (metric_family: MetricFamily ): GetDigestsResponse.Builder open val metric_family : MetricFamily","title":"metric_family - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-get-digests-response/-builder/metric_family/#metric_family","text":"[jvm]\\ open fun metric_family (metric_family: MetricFamily ): GetDigestsResponse.Builder open val metric_family : MetricFamily","title":"metric_family"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily MetricFamily \u00b6 [jvm]\\ class MetricFamily : Message< MetricFamily , MetricFamily.Builder > A group of digest metrics all having the same name and label names. Constructors \u00b6 MetricFamily [jvm] open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >) MetricFamily [jvm] open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >, unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily , MetricFamily.Builder > Digest [jvm] class Digest : Message< MetricFamily.Digest , MetricFamily.Digest.Builder > Digest holds a t-digest of data points observed in a specific time range. Metric [jvm] class Metric : Message< MetricFamily.Metric , MetricFamily.Metric.Builder > MetricDescriptor [jvm] class MetricDescriptor : Message< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder > MetricDescriptor describes a named metric. Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily > metric_descriptor [jvm] val metric_descriptor : MetricFamily.MetricDescriptor Descriptor shared by each metric in this family. metrics [jvm] val metrics : List < MetricFamily.Metric > Metrics in the family, each having a unique set of labels.","title":"MetricFamily - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/#metricfamily","text":"[jvm]\\ class MetricFamily : Message< MetricFamily , MetricFamily.Builder > A group of digest metrics all having the same name and label names.","title":"MetricFamily"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/#constructors","text":"MetricFamily [jvm] open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >) MetricFamily [jvm] open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >, unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily , MetricFamily.Builder > Digest [jvm] class Digest : Message< MetricFamily.Digest , MetricFamily.Digest.Builder > Digest holds a t-digest of data points observed in a specific time range. Metric [jvm] class Metric : Message< MetricFamily.Metric , MetricFamily.Metric.Builder > MetricDescriptor [jvm] class MetricDescriptor : Message< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder > MetricDescriptor describes a named metric.","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily > metric_descriptor [jvm] val metric_descriptor : MetricFamily.MetricDescriptor Descriptor shared by each metric in this family. metrics [jvm] val metrics : List < MetricFamily.Metric > Metrics in the family, each having a unique set of labels.","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-family/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricFamily MetricFamily \u00b6 [jvm]\\ open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >) open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >, unknownFields: ByteString)","title":"MetricFamily - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-family/#metricfamily","text":"[jvm]\\ open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >) open fun MetricFamily (metric_descriptor: MetricFamily.MetricDescriptor , metrics: List < MetricFamily.Metric >, unknownFields: ByteString)","title":"MetricFamily"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/metric_descriptor/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / metric_descriptor metric_descriptor \u00b6 [jvm]\\ val metric_descriptor : MetricFamily.MetricDescriptor Descriptor shared by each metric in this family.","title":"metric_descriptor - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/metric_descriptor/#metric_descriptor","text":"[jvm]\\ val metric_descriptor : MetricFamily.MetricDescriptor Descriptor shared by each metric in this family.","title":"metric_descriptor"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/metrics/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / metrics metrics \u00b6 [jvm]\\ val metrics : List < MetricFamily.Metric > Metrics in the family, each having a unique set of labels.","title":"metrics - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/metrics/#metrics","text":"[jvm]\\ val metrics : List < MetricFamily.Metric > Metrics in the family, each having a unique set of labels.","title":"metrics"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): MetricFamily.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): MetricFamily.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< MetricFamily , MetricFamily.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter metric_descriptor [jvm] open fun metric_descriptor (metric_descriptor: MetricFamily.MetricDescriptor ): MetricFamily.Builder Descriptor shared by each metric in this family. metrics [jvm] open fun metrics (metrics: List < MetricFamily.Metric >): MetricFamily.Builder Metrics in the family, each having a unique set of labels. setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) Properties \u00b6 Name Summary metric_descriptor [jvm] open val metric_descriptor : MetricFamily.MetricDescriptor metrics [jvm] open val metrics : List < MetricFamily.Metric >","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< MetricFamily , MetricFamily.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter metric_descriptor [jvm] open fun metric_descriptor (metric_descriptor: MetricFamily.MetricDescriptor ): MetricFamily.Builder Descriptor shared by each metric in this family. metrics [jvm] open fun metrics (metrics: List < MetricFamily.Metric >): MetricFamily.Builder Metrics in the family, each having a unique set of labels. setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter)","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/#properties","text":"Name Summary metric_descriptor [jvm] open val metric_descriptor : MetricFamily.MetricDescriptor metrics [jvm] open val metrics : List < MetricFamily.Metric >","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Builder / build build \u00b6 [jvm]\\ open fun build (): MetricFamily","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/build/#build","text":"[jvm]\\ open fun build (): MetricFamily","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/metric_descriptor/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Builder / metric_descriptor metric_descriptor \u00b6 [jvm]\\ open fun metric_descriptor (metric_descriptor: MetricFamily.MetricDescriptor ): MetricFamily.Builder Descriptor shared by each metric in this family. [jvm]\\ open val metric_descriptor : MetricFamily.MetricDescriptor","title":"metric_descriptor - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/metric_descriptor/#metric_descriptor","text":"[jvm]\\ open fun metric_descriptor (metric_descriptor: MetricFamily.MetricDescriptor ): MetricFamily.Builder Descriptor shared by each metric in this family. [jvm]\\ open val metric_descriptor : MetricFamily.MetricDescriptor","title":"metric_descriptor"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/metrics/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Builder / metrics metrics \u00b6 [jvm]\\ open fun metrics (metrics: List < MetricFamily.Metric >): MetricFamily.Builder Metrics in the family, each having a unique set of labels. [jvm]\\ open val metrics : List < MetricFamily.Metric >","title":"metrics - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-builder/metrics/#metrics","text":"[jvm]\\ open fun metrics (metrics: List < MetricFamily.Metric >): MetricFamily.Builder Metrics in the family, each having a unique set of labels. [jvm]\\ open val metrics : List < MetricFamily.Metric >","title":"metrics"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest Digest \u00b6 [jvm]\\ class Digest : Message< MetricFamily.Digest , MetricFamily.Digest.Builder > Digest holds a t-digest of data points observed in a specific time range. Constructors \u00b6 Digest [jvm] open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData ) Digest [jvm] open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData , unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily.Digest , MetricFamily.Digest.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.Digest.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily.Digest > DEFAULT_END_AT_MS [jvm] val DEFAULT_END_AT_MS : Long DEFAULT_STAGGER [jvm] val DEFAULT_STAGGER : Long DEFAULT_START_AT_MS [jvm] val DEFAULT_START_AT_MS : Long digest_data [jvm] val digest_data : DigestData t-digest of observed values. end_at_ms [jvm] val end_at_ms : Long End time window of data points, exclusive. stagger [jvm] val stagger : Long Number of overlapping windows. start_at_ms [jvm] val start_at_ms : Long Start time window of data points, inclusive.","title":"Digest - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/#digest","text":"[jvm]\\ class Digest : Message< MetricFamily.Digest , MetricFamily.Digest.Builder > Digest holds a t-digest of data points observed in a specific time range.","title":"Digest"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/#constructors","text":"Digest [jvm] open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData ) Digest [jvm] open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData , unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily.Digest , MetricFamily.Digest.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.Digest.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily.Digest > DEFAULT_END_AT_MS [jvm] val DEFAULT_END_AT_MS : Long DEFAULT_STAGGER [jvm] val DEFAULT_STAGGER : Long DEFAULT_START_AT_MS [jvm] val DEFAULT_START_AT_MS : Long digest_data [jvm] val digest_data : DigestData t-digest of observed values. end_at_ms [jvm] val end_at_ms : Long End time window of data points, exclusive. stagger [jvm] val stagger : Long Number of overlapping windows. start_at_ms [jvm] val start_at_ms : Long Start time window of data points, inclusive.","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily.Digest >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily.Digest >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-d-e-f-a-u-l-t_-e-n-d_-a-t_-m-s/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / DEFAULT_END_AT_MS DEFAULT_END_AT_MS \u00b6 [jvm]\\ val DEFAULT_END_AT_MS : Long","title":"DEFAULT_END_AT_MS - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-d-e-f-a-u-l-t_-e-n-d_-a-t_-m-s/#default_end_at_ms","text":"[jvm]\\ val DEFAULT_END_AT_MS : Long","title":"DEFAULT_END_AT_MS"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-d-e-f-a-u-l-t_-s-t-a-g-g-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / DEFAULT_STAGGER DEFAULT_STAGGER \u00b6 [jvm]\\ val DEFAULT_STAGGER : Long","title":"DEFAULT_STAGGER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-d-e-f-a-u-l-t_-s-t-a-g-g-e-r/#default_stagger","text":"[jvm]\\ val DEFAULT_STAGGER : Long","title":"DEFAULT_STAGGER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-d-e-f-a-u-l-t_-s-t-a-r-t_-a-t_-m-s/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / DEFAULT_START_AT_MS DEFAULT_START_AT_MS \u00b6 [jvm]\\ val DEFAULT_START_AT_MS : Long","title":"DEFAULT_START_AT_MS - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-d-e-f-a-u-l-t_-s-t-a-r-t_-a-t_-m-s/#default_start_at_ms","text":"[jvm]\\ val DEFAULT_START_AT_MS : Long","title":"DEFAULT_START_AT_MS"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-digest/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Digest Digest \u00b6 [jvm]\\ open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData ) open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData , unknownFields: ByteString)","title":"Digest - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-digest/#digest","text":"[jvm]\\ open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData ) open fun Digest (start_at_ms: Long , end_at_ms: Long , stagger: Long , digest_data: DigestData , unknownFields: ByteString)","title":"Digest"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/digest_data/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / digest_data digest_data \u00b6 [jvm]\\ val digest_data : DigestData t-digest of observed values. The registry and server must agree on the format of the digest.","title":"digest_data - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/digest_data/#digest_data","text":"[jvm]\\ val digest_data : DigestData t-digest of observed values. The registry and server must agree on the format of the digest.","title":"digest_data"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/end_at_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / end_at_ms end_at_ms \u00b6 [jvm]\\ val end_at_ms : Long End time window of data points, exclusive.","title":"end_at_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/end_at_ms/#end_at_ms","text":"[jvm]\\ val end_at_ms : Long End time window of data points, exclusive.","title":"end_at_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): MetricFamily.Digest.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): MetricFamily.Digest.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/stagger/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / stagger stagger \u00b6 [jvm]\\ val stagger : Long Number of overlapping windows. This is not directly related to the data, but is used by the collector to validate that registry and server configurations are compatible.","title":"stagger - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/stagger/#stagger","text":"[jvm]\\ val stagger : Long Number of overlapping windows. This is not directly related to the data, but is used by the collector to validate that registry and server configurations are compatible.","title":"stagger"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/start_at_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / start_at_ms start_at_ms \u00b6 [jvm]\\ val start_at_ms : Long Start time window of data points, inclusive.","title":"start_at_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/start_at_ms/#start_at_ms","text":"[jvm]\\ val start_at_ms : Long Start time window of data points, inclusive.","title":"start_at_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< MetricFamily.Digest , MetricFamily.Digest.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily.Digest buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> digest_data [jvm] open fun digest_data (digest_data: DigestData ): MetricFamily.Digest.Builder t-digest of observed values. end_at_ms [jvm] open fun end_at_ms (end_at_ms: Long ): MetricFamily.Digest.Builder End time window of data points, exclusive. getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) stagger [jvm] open fun stagger (stagger: Long ): MetricFamily.Digest.Builder Number of overlapping windows. start_at_ms [jvm] open fun start_at_ms (start_at_ms: Long ): MetricFamily.Digest.Builder Start time window of data points, inclusive. Properties \u00b6 Name Summary digest_data [jvm] open val digest_data : DigestData end_at_ms [jvm] open val end_at_ms : Long stagger [jvm] open val stagger : Long start_at_ms [jvm] open val start_at_ms : Long","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< MetricFamily.Digest , MetricFamily.Digest.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily.Digest buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> digest_data [jvm] open fun digest_data (digest_data: DigestData ): MetricFamily.Digest.Builder t-digest of observed values. end_at_ms [jvm] open fun end_at_ms (end_at_ms: Long ): MetricFamily.Digest.Builder End time window of data points, exclusive. getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) stagger [jvm] open fun stagger (stagger: Long ): MetricFamily.Digest.Builder Number of overlapping windows. start_at_ms [jvm] open fun start_at_ms (start_at_ms: Long ): MetricFamily.Digest.Builder Start time window of data points, inclusive.","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/#properties","text":"Name Summary digest_data [jvm] open val digest_data : DigestData end_at_ms [jvm] open val end_at_ms : Long stagger [jvm] open val stagger : Long start_at_ms [jvm] open val start_at_ms : Long","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Builder / build build \u00b6 [jvm]\\ open fun build (): MetricFamily.Digest","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/build/#build","text":"[jvm]\\ open fun build (): MetricFamily.Digest","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/digest_data/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Builder / digest_data digest_data \u00b6 [jvm]\\ open fun digest_data (digest_data: DigestData ): MetricFamily.Digest.Builder t-digest of observed values. The registry and server must agree on the format of the digest. [jvm]\\ open val digest_data : DigestData","title":"digest_data - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/digest_data/#digest_data","text":"[jvm]\\ open fun digest_data (digest_data: DigestData ): MetricFamily.Digest.Builder t-digest of observed values. The registry and server must agree on the format of the digest. [jvm]\\ open val digest_data : DigestData","title":"digest_data"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/end_at_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Builder / end_at_ms end_at_ms \u00b6 [jvm]\\ open fun end_at_ms (end_at_ms: Long ): MetricFamily.Digest.Builder End time window of data points, exclusive. [jvm]\\ open val end_at_ms : Long","title":"end_at_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/end_at_ms/#end_at_ms","text":"[jvm]\\ open fun end_at_ms (end_at_ms: Long ): MetricFamily.Digest.Builder End time window of data points, exclusive. [jvm]\\ open val end_at_ms : Long","title":"end_at_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/stagger/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Builder / stagger stagger \u00b6 [jvm]\\ open fun stagger (stagger: Long ): MetricFamily.Digest.Builder Number of overlapping windows. This is not directly related to the data, but is used by the collector to validate that registry and server configurations are compatible. [jvm]\\ open val stagger : Long","title":"stagger - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/stagger/#stagger","text":"[jvm]\\ open fun stagger (stagger: Long ): MetricFamily.Digest.Builder Number of overlapping windows. This is not directly related to the data, but is used by the collector to validate that registry and server configurations are compatible. [jvm]\\ open val stagger : Long","title":"stagger"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/start_at_ms/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Digest / Builder / start_at_ms start_at_ms \u00b6 [jvm]\\ open fun start_at_ms (start_at_ms: Long ): MetricFamily.Digest.Builder Start time window of data points, inclusive. [jvm]\\ open val start_at_ms : Long","title":"start_at_ms - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-digest/-builder/start_at_ms/#start_at_ms","text":"[jvm]\\ open fun start_at_ms (start_at_ms: Long ): MetricFamily.Digest.Builder Start time window of data points, inclusive. [jvm]\\ open val start_at_ms : Long","title":"start_at_ms"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric Metric \u00b6 [jvm]\\ class Metric : Message< MetricFamily.Metric , MetricFamily.Metric.Builder > Constructors \u00b6 Metric [jvm] open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >) Metric [jvm] open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >, unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily.Metric , MetricFamily.Metric.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.Metric.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily.Metric > digests [jvm] val digests : List < MetricFamily.Digest > t-digests for the metric, each for a different window of time. labels [jvm] val labels : Map < String , String > Label values.","title":"Metric - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/#metric","text":"[jvm]\\ class Metric : Message< MetricFamily.Metric , MetricFamily.Metric.Builder >","title":"Metric"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/#constructors","text":"Metric [jvm] open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >) Metric [jvm] open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >, unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily.Metric , MetricFamily.Metric.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.Metric.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily.Metric > digests [jvm] val digests : List < MetricFamily.Digest > t-digests for the metric, each for a different window of time. labels [jvm] val labels : Map < String , String > Label values.","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily.Metric >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily.Metric >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-metric/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / Metric Metric \u00b6 [jvm]\\ open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >) open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >, unknownFields: ByteString)","title":"Metric - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-metric/#metric","text":"[jvm]\\ open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >) open fun Metric (labels: Map < String , String >, digests: List < MetricFamily.Digest >, unknownFields: ByteString)","title":"Metric"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/digests/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / digests digests \u00b6 [jvm]\\ val digests : List < MetricFamily.Digest > t-digests for the metric, each for a different window of time.","title":"digests - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/digests/#digests","text":"[jvm]\\ val digests : List < MetricFamily.Digest > t-digests for the metric, each for a different window of time.","title":"digests"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/labels/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / labels labels \u00b6 [jvm]\\ val labels : Map < String , String > Label values. There will be one value corresponding to each entry in the MetricDescriptor\u2019s label_names.","title":"labels - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/labels/#labels","text":"[jvm]\\ val labels : Map < String , String > Label values. There will be one value corresponding to each entry in the MetricDescriptor\u2019s label_names.","title":"labels"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): MetricFamily.Metric.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): MetricFamily.Metric.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< MetricFamily.Metric , MetricFamily.Metric.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily.Metric buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> digests [jvm] open fun digests (digests: List < MetricFamily.Digest >): MetricFamily.Metric.Builder t-digests for the metric, each for a different window of time. getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter labels [jvm] open fun labels (labels: Map < String , String >): MetricFamily.Metric.Builder Label values. setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) Properties \u00b6 Name Summary digests [jvm] open val digests : List < MetricFamily.Digest > labels [jvm] open val labels : Map < String , String >","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< MetricFamily.Metric , MetricFamily.Metric.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily.Metric buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> digests [jvm] open fun digests (digests: List < MetricFamily.Digest >): MetricFamily.Metric.Builder t-digests for the metric, each for a different window of time. getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter labels [jvm] open fun labels (labels: Map < String , String >): MetricFamily.Metric.Builder Label values. setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter)","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/#properties","text":"Name Summary digests [jvm] open val digests : List < MetricFamily.Digest > labels [jvm] open val labels : Map < String , String >","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / Builder / build build \u00b6 [jvm]\\ open fun build (): MetricFamily.Metric","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/build/#build","text":"[jvm]\\ open fun build (): MetricFamily.Metric","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/digests/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / Builder / digests digests \u00b6 [jvm]\\ open fun digests (digests: List < MetricFamily.Digest >): MetricFamily.Metric.Builder t-digests for the metric, each for a different window of time. [jvm]\\ open val digests : List < MetricFamily.Digest >","title":"digests - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/digests/#digests","text":"[jvm]\\ open fun digests (digests: List < MetricFamily.Digest >): MetricFamily.Metric.Builder t-digests for the metric, each for a different window of time. [jvm]\\ open val digests : List < MetricFamily.Digest >","title":"digests"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/labels/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / Metric / Builder / labels labels \u00b6 [jvm]\\ open fun labels (labels: Map < String , String >): MetricFamily.Metric.Builder Label values. There will be one value corresponding to each entry in the MetricDescriptor\u2019s label_names. [jvm]\\ open val labels : Map < String , String >","title":"labels - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric/-builder/labels/#labels","text":"[jvm]\\ open fun labels (labels: Map < String , String >): MetricFamily.Metric.Builder Label values. There will be one value corresponding to each entry in the MetricDescriptor\u2019s label_names. [jvm]\\ open val labels : Map < String , String >","title":"labels"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor MetricDescriptor \u00b6 [jvm]\\ class MetricDescriptor : Message< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder > MetricDescriptor describes a named metric. Constructors \u00b6 MetricDescriptor [jvm] open fun MetricDescriptor (name: String , help: String ) MetricDescriptor [jvm] open fun MetricDescriptor (name: String , help: String , unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.MetricDescriptor.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily.MetricDescriptor > DEFAULT_HELP [jvm] val DEFAULT_HELP : String DEFAULT_NAME [jvm] val DEFAULT_NAME : String help [jvm] val help : String User-friendly description of the metric. name [jvm] val name : String Name of the metric.","title":"MetricDescriptor - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/#metricdescriptor","text":"[jvm]\\ class MetricDescriptor : Message< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder > MetricDescriptor describes a named metric.","title":"MetricDescriptor"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/#constructors","text":"MetricDescriptor [jvm] open fun MetricDescriptor (name: String , help: String ) MetricDescriptor [jvm] open fun MetricDescriptor (name: String , help: String , unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MetricFamily.MetricDescriptor.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MetricFamily.MetricDescriptor > DEFAULT_HELP [jvm] val DEFAULT_HELP : String DEFAULT_NAME [jvm] val DEFAULT_NAME : String help [jvm] val help : String User-friendly description of the metric. name [jvm] val name : String Name of the metric.","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily.MetricDescriptor >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< MetricFamily.MetricDescriptor >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-d-e-f-a-u-l-t_-h-e-l-p/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / DEFAULT_HELP DEFAULT_HELP \u00b6 [jvm]\\ val DEFAULT_HELP : String","title":"DEFAULT_HELP - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-d-e-f-a-u-l-t_-h-e-l-p/#default_help","text":"[jvm]\\ val DEFAULT_HELP : String","title":"DEFAULT_HELP"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-d-e-f-a-u-l-t_-n-a-m-e/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / DEFAULT_NAME DEFAULT_NAME \u00b6 [jvm]\\ val DEFAULT_NAME : String","title":"DEFAULT_NAME - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-d-e-f-a-u-l-t_-n-a-m-e/#default_name","text":"[jvm]\\ val DEFAULT_NAME : String","title":"DEFAULT_NAME"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-metric-descriptor/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / MetricDescriptor MetricDescriptor \u00b6 [jvm]\\ open fun MetricDescriptor (name: String , help: String ) open fun MetricDescriptor (name: String , help: String , unknownFields: ByteString)","title":"MetricDescriptor - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-metric-descriptor/#metricdescriptor","text":"[jvm]\\ open fun MetricDescriptor (name: String , help: String ) open fun MetricDescriptor (name: String , help: String , unknownFields: ByteString)","title":"MetricDescriptor"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/help/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / help help \u00b6 [jvm]\\ val help : String User-friendly description of the metric.","title":"help - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/help/#help","text":"[jvm]\\ val help : String User-friendly description of the metric.","title":"help"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/name/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / name name \u00b6 [jvm]\\ val name : String Name of the metric.","title":"name - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/name/#name","text":"[jvm]\\ val name : String Name of the metric.","title":"name"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): MetricFamily.MetricDescriptor.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): MetricFamily.MetricDescriptor.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily.MetricDescriptor buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter help [jvm] open fun help (help: String ): MetricFamily.MetricDescriptor.Builder User-friendly description of the metric. name [jvm] open fun name (name: String ): MetricFamily.MetricDescriptor.Builder Name of the metric. setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) Properties \u00b6 Name Summary help [jvm] open val help : String name [jvm] open val name : String","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< MetricFamily.MetricDescriptor , MetricFamily.MetricDescriptor.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MetricFamily.MetricDescriptor buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter help [jvm] open fun help (help: String ): MetricFamily.MetricDescriptor.Builder User-friendly description of the metric. name [jvm] open fun name (name: String ): MetricFamily.MetricDescriptor.Builder Name of the metric. setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter)","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/#properties","text":"Name Summary help [jvm] open val help : String name [jvm] open val name : String","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / Builder / build build \u00b6 [jvm]\\ open fun build (): MetricFamily.MetricDescriptor","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/build/#build","text":"[jvm]\\ open fun build (): MetricFamily.MetricDescriptor","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/help/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / Builder / help help \u00b6 [jvm]\\ open fun help (help: String ): MetricFamily.MetricDescriptor.Builder User-friendly description of the metric. [jvm]\\ open val help : String","title":"help - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/help/#help","text":"[jvm]\\ open fun help (help: String ): MetricFamily.MetricDescriptor.Builder User-friendly description of the metric. [jvm]\\ open val help : String","title":"help"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/name/","text":"// misk-metrics-digester / com.squareup.digester.protos.service / MetricFamily / MetricDescriptor / Builder / name name \u00b6 [jvm]\\ open fun name (name: String ): MetricFamily.MetricDescriptor.Builder Name of the metric. [jvm]\\ open val name : String","title":"name - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.service/-metric-family/-metric-descriptor/-builder/name/#name","text":"[jvm]\\ open fun name (name: String ): MetricFamily.MetricDescriptor.Builder Name of the metric. [jvm]\\ open val name : String","title":"name"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest Package com.squareup.digester.protos.tdigest \u00b6 Types \u00b6 Name Summary Centroid [jvm] class Centroid : Message< Centroid , Centroid.Builder > MergingDigestData [jvm] class MergingDigestData : Message< MergingDigestData , MergingDigestData.Builder > MergingDigestData contains all fields necessary to generate a MergingDigest.","title":"Package com.squareup.digester.protos.tdigest - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/#package-comsquareupdigesterprotostdigest","text":"","title":"Package com.squareup.digester.protos.tdigest"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/#types","text":"Name Summary Centroid [jvm] class Centroid : Message< Centroid , Centroid.Builder > MergingDigestData [jvm] class MergingDigestData : Message< MergingDigestData , MergingDigestData.Builder > MergingDigestData contains all fields necessary to generate a MergingDigest.","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid Centroid \u00b6 [jvm]\\ class Centroid : Message< Centroid , Centroid.Builder > Constructors \u00b6 Centroid [jvm] open fun Centroid (mean: Double , weight: Double , samples: List < Double >) Centroid [jvm] open fun Centroid (mean: Double , weight: Double , samples: List < Double >, unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< Centroid , Centroid.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): Centroid.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< Centroid > DEFAULT_MEAN [jvm] val DEFAULT_MEAN : Double DEFAULT_WEIGHT [jvm] val DEFAULT_WEIGHT : Double mean [jvm] val mean : Double samples [jvm] val samples : List < Double > weight [jvm] val weight : Double","title":"Centroid - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/#centroid","text":"[jvm]\\ class Centroid : Message< Centroid , Centroid.Builder >","title":"Centroid"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/#constructors","text":"Centroid [jvm] open fun Centroid (mean: Double , weight: Double , samples: List < Double >) Centroid [jvm] open fun Centroid (mean: Double , weight: Double , samples: List < Double >, unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< Centroid , Centroid.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): Centroid.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< Centroid > DEFAULT_MEAN [jvm] val DEFAULT_MEAN : Double DEFAULT_WEIGHT [jvm] val DEFAULT_WEIGHT : Double mean [jvm] val mean : Double samples [jvm] val samples : List < Double > weight [jvm] val weight : Double","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< Centroid >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< Centroid >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-centroid/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / Centroid Centroid \u00b6 [jvm]\\ open fun Centroid (mean: Double , weight: Double , samples: List < Double >) open fun Centroid (mean: Double , weight: Double , samples: List < Double >, unknownFields: ByteString)","title":"Centroid - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-centroid/#centroid","text":"[jvm]\\ open fun Centroid (mean: Double , weight: Double , samples: List < Double >) open fun Centroid (mean: Double , weight: Double , samples: List < Double >, unknownFields: ByteString)","title":"Centroid"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-d-e-f-a-u-l-t_-m-e-a-n/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / DEFAULT_MEAN DEFAULT_MEAN \u00b6 [jvm]\\ val DEFAULT_MEAN : Double","title":"DEFAULT_MEAN - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-d-e-f-a-u-l-t_-m-e-a-n/#default_mean","text":"[jvm]\\ val DEFAULT_MEAN : Double","title":"DEFAULT_MEAN"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-d-e-f-a-u-l-t_-w-e-i-g-h-t/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / DEFAULT_WEIGHT DEFAULT_WEIGHT \u00b6 [jvm]\\ val DEFAULT_WEIGHT : Double","title":"DEFAULT_WEIGHT - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-d-e-f-a-u-l-t_-w-e-i-g-h-t/#default_weight","text":"[jvm]\\ val DEFAULT_WEIGHT : Double","title":"DEFAULT_WEIGHT"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/mean/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / mean mean \u00b6 [jvm]\\ val mean : Double","title":"mean - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/mean/#mean","text":"[jvm]\\ val mean : Double","title":"mean"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): Centroid.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): Centroid.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/samples/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / samples samples \u00b6 [jvm]\\ val samples : List < Double >","title":"samples - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/samples/#samples","text":"[jvm]\\ val samples : List < Double >","title":"samples"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/weight/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / weight weight \u00b6 [jvm]\\ val weight : Double","title":"weight - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/weight/#weight","text":"[jvm]\\ val weight : Double","title":"weight"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< Centroid , Centroid.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): Centroid buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter mean [jvm] open fun mean (mean: Double ): Centroid.Builder samples [jvm] open fun samples (samples: List < Double >): Centroid.Builder setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) weight [jvm] open fun weight (weight: Double ): Centroid.Builder Properties \u00b6 Name Summary mean [jvm] open val mean : Double samples [jvm] open val samples : List < Double > weight [jvm] open val weight : Double","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< Centroid , Centroid.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): Centroid buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter mean [jvm] open fun mean (mean: Double ): Centroid.Builder samples [jvm] open fun samples (samples: List < Double >): Centroid.Builder setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) weight [jvm] open fun weight (weight: Double ): Centroid.Builder","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/#properties","text":"Name Summary mean [jvm] open val mean : Double samples [jvm] open val samples : List < Double > weight [jvm] open val weight : Double","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / Builder / build build \u00b6 [jvm]\\ open fun build (): Centroid","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/build/#build","text":"[jvm]\\ open fun build (): Centroid","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/mean/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / Builder / mean mean \u00b6 [jvm]\\ open fun mean (mean: Double ): Centroid.Builder open val mean : Double","title":"mean - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/mean/#mean","text":"[jvm]\\ open fun mean (mean: Double ): Centroid.Builder open val mean : Double","title":"mean"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/samples/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / Builder / samples samples \u00b6 [jvm]\\ open fun samples (samples: List < Double >): Centroid.Builder open val samples : List < Double >","title":"samples - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/samples/#samples","text":"[jvm]\\ open fun samples (samples: List < Double >): Centroid.Builder open val samples : List < Double >","title":"samples"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/weight/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / Centroid / Builder / weight weight \u00b6 [jvm]\\ open fun weight (weight: Double ): Centroid.Builder open val weight : Double","title":"weight - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-centroid/-builder/weight/#weight","text":"[jvm]\\ open fun weight (weight: Double ): Centroid.Builder open val weight : Double","title":"weight"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData MergingDigestData \u00b6 [jvm]\\ class MergingDigestData : Message< MergingDigestData , MergingDigestData.Builder > MergingDigestData contains all fields necessary to generate a MergingDigest. This type should generally just be used when serializing MergingDigest\u2019s, and doesn\u2019t have much of a purpose on its own. Replica of stripe\u2019s tdigest implementation https://github.com/stripe/veneur/blob/master/tdigest/tdigest.proto Constructors \u00b6 MergingDigestData [jvm] open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double ) MergingDigestData [jvm] open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double , unknownFields: ByteString) Types \u00b6 Name Summary Builder [jvm] class Builder : Message.Builder< MergingDigestData , MergingDigestData.Builder > Functions \u00b6 Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MergingDigestData.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M Properties \u00b6 Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MergingDigestData > compression [jvm] val compression : Double DEFAULT_COMPRESSION [jvm] val DEFAULT_COMPRESSION : Double DEFAULT_MAX [jvm] val DEFAULT_MAX : Double DEFAULT_MIN [jvm] val DEFAULT_MIN : Double main_centroids [jvm] val main_centroids : List < Centroid > max [jvm] val max : Double min [jvm] val min : Double","title":"MergingDigestData - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/#mergingdigestdata","text":"[jvm]\\ class MergingDigestData : Message< MergingDigestData , MergingDigestData.Builder > MergingDigestData contains all fields necessary to generate a MergingDigest. This type should generally just be used when serializing MergingDigest\u2019s, and doesn\u2019t have much of a purpose on its own. Replica of stripe\u2019s tdigest implementation https://github.com/stripe/veneur/blob/master/tdigest/tdigest.proto","title":"MergingDigestData"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/#constructors","text":"MergingDigestData [jvm] open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double ) MergingDigestData [jvm] open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double , unknownFields: ByteString)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/#types","text":"Name Summary Builder [jvm] class Builder : Message.Builder< MergingDigestData , MergingDigestData.Builder >","title":"Types"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/#functions","text":"Name Summary adapter [jvm] fun adapter (): ProtoAdapter<M> encode [jvm] fun encode (): Array < Byte > fun encode (sink: BufferedSink) encodeByteString [jvm] fun encodeByteString (): ByteString equals [jvm] open fun equals (other: Any ): Boolean getCachedSerializedSize$wire_runtime [jvm] fun getCachedSerializedSize$wire_runtime (): Int hashCode [jvm] open fun hashCode (): Int newBuilder [jvm] open fun newBuilder (): MergingDigestData.Builder setCachedSerializedSize$wire_runtime [jvm] fun setCachedSerializedSize$wire_runtime (p: Int ) toString [jvm] open fun toString (): String unknownFields [jvm] fun unknownFields (): ByteString withoutUnknownFields [jvm] fun withoutUnknownFields (): M","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/#properties","text":"Name Summary ADAPTER [jvm] val ADAPTER : ProtoAdapter< MergingDigestData > compression [jvm] val compression : Double DEFAULT_COMPRESSION [jvm] val DEFAULT_COMPRESSION : Double DEFAULT_MAX [jvm] val DEFAULT_MAX : Double DEFAULT_MIN [jvm] val DEFAULT_MIN : Double main_centroids [jvm] val main_centroids : List < Centroid > max [jvm] val max : Double min [jvm] val min : Double","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-a-d-a-p-t-e-r/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / ADAPTER ADAPTER \u00b6 [jvm]\\ val ADAPTER : ProtoAdapter< MergingDigestData >","title":"ADAPTER - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-a-d-a-p-t-e-r/#adapter","text":"[jvm]\\ val ADAPTER : ProtoAdapter< MergingDigestData >","title":"ADAPTER"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-d-e-f-a-u-l-t_-c-o-m-p-r-e-s-s-i-o-n/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / DEFAULT_COMPRESSION DEFAULT_COMPRESSION \u00b6 [jvm]\\ val DEFAULT_COMPRESSION : Double","title":"DEFAULT_COMPRESSION - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-d-e-f-a-u-l-t_-c-o-m-p-r-e-s-s-i-o-n/#default_compression","text":"[jvm]\\ val DEFAULT_COMPRESSION : Double","title":"DEFAULT_COMPRESSION"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-d-e-f-a-u-l-t_-m-a-x/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / DEFAULT_MAX DEFAULT_MAX \u00b6 [jvm]\\ val DEFAULT_MAX : Double","title":"DEFAULT_MAX - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-d-e-f-a-u-l-t_-m-a-x/#default_max","text":"[jvm]\\ val DEFAULT_MAX : Double","title":"DEFAULT_MAX"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-d-e-f-a-u-l-t_-m-i-n/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / DEFAULT_MIN DEFAULT_MIN \u00b6 [jvm]\\ val DEFAULT_MIN : Double","title":"DEFAULT_MIN - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-d-e-f-a-u-l-t_-m-i-n/#default_min","text":"[jvm]\\ val DEFAULT_MIN : Double","title":"DEFAULT_MIN"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-merging-digest-data/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / MergingDigestData MergingDigestData \u00b6 [jvm]\\ open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double ) open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double , unknownFields: ByteString)","title":"MergingDigestData - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-merging-digest-data/#mergingdigestdata","text":"[jvm]\\ open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double ) open fun MergingDigestData (main_centroids: List < Centroid >, compression: Double , min: Double , max: Double , unknownFields: ByteString)","title":"MergingDigestData"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/compression/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / compression compression \u00b6 [jvm]\\ val compression : Double","title":"compression - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/compression/#compression","text":"[jvm]\\ val compression : Double","title":"compression"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/equals/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / equals equals \u00b6 [jvm]\\ open fun equals (other: Any ): Boolean","title":"equals - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/equals/#equals","text":"[jvm]\\ open fun equals (other: Any ): Boolean","title":"equals"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/hash-code/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / hashCode hashCode \u00b6 [jvm]\\ open fun hashCode (): Int","title":"hashCode - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/hash-code/#hashcode","text":"[jvm]\\ open fun hashCode (): Int","title":"hashCode"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/main_centroids/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / main_centroids main_centroids \u00b6 [jvm]\\ val main_centroids : List < Centroid >","title":"main_centroids - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/main_centroids/#main_centroids","text":"[jvm]\\ val main_centroids : List < Centroid >","title":"main_centroids"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/max/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / max max \u00b6 [jvm]\\ val max : Double","title":"max - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/max/#max","text":"[jvm]\\ val max : Double","title":"max"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/min/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / min min \u00b6 [jvm]\\ val min : Double","title":"min - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/min/#min","text":"[jvm]\\ val min : Double","title":"min"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/new-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / newBuilder newBuilder \u00b6 [jvm]\\ open fun newBuilder (): MergingDigestData.Builder","title":"newBuilder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/new-builder/#newbuilder","text":"[jvm]\\ open fun newBuilder (): MergingDigestData.Builder","title":"newBuilder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/to-string/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / toString toString \u00b6 [jvm]\\ open fun toString (): String","title":"toString - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/to-string/#tostring","text":"[jvm]\\ open fun toString (): String","title":"toString"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / Builder Builder \u00b6 [jvm]\\ class Builder : Message.Builder< MergingDigestData , MergingDigestData.Builder > Constructors \u00b6 Builder [jvm] open fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MergingDigestData buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> compression [jvm] open fun compression (compression: Double ): MergingDigestData.Builder getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter main_centroids [jvm] open fun main_centroids (main_centroids: List < Centroid >): MergingDigestData.Builder max [jvm] open fun max (max: Double ): MergingDigestData.Builder min [jvm] open fun min (min: Double ): MergingDigestData.Builder setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter) Properties \u00b6 Name Summary compression [jvm] open val compression : Double main_centroids [jvm] open val main_centroids : List < Centroid > max [jvm] open val max : Double min [jvm] open val min : Double","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/#builder","text":"[jvm]\\ class Builder : Message.Builder< MergingDigestData , MergingDigestData.Builder >","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/#constructors","text":"Builder [jvm] open fun Builder ()","title":"Constructors"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ): Message.Builder<M, B> addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder<M, B> build [jvm] open fun build (): MergingDigestData buildUnknownFields [jvm] fun buildUnknownFields (): ByteString clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder<M, B> compression [jvm] open fun compression (compression: Double ): MergingDigestData.Builder getUnknownFieldsBuffer$wire_runtime [jvm] fun getUnknownFieldsBuffer$wire_runtime (): Buffer getUnknownFieldsByteString$wire_runtime [jvm] fun getUnknownFieldsByteString$wire_runtime (): ByteString getUnknownFieldsWriter$wire_runtime [jvm] fun getUnknownFieldsWriter$wire_runtime (): ProtoWriter main_centroids [jvm] open fun main_centroids (main_centroids: List < Centroid >): MergingDigestData.Builder max [jvm] open fun max (max: Double ): MergingDigestData.Builder min [jvm] open fun min (min: Double ): MergingDigestData.Builder setUnknownFieldsBuffer$wire_runtime [jvm] fun setUnknownFieldsBuffer$wire_runtime (p: Buffer) setUnknownFieldsByteString$wire_runtime [jvm] fun setUnknownFieldsByteString$wire_runtime (p: ByteString) setUnknownFieldsWriter$wire_runtime [jvm] fun setUnknownFieldsWriter$wire_runtime (p: ProtoWriter)","title":"Functions"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/#properties","text":"Name Summary compression [jvm] open val compression : Double main_centroids [jvm] open val main_centroids : List < Centroid > max [jvm] open val max : Double min [jvm] open val min : Double","title":"Properties"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/-builder/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / Builder / Builder Builder \u00b6 [jvm]\\ open fun Builder ()","title":"Builder - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/-builder/#builder","text":"[jvm]\\ open fun Builder ()","title":"Builder"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/build/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / Builder / build build \u00b6 [jvm]\\ open fun build (): MergingDigestData","title":"build - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/build/#build","text":"[jvm]\\ open fun build (): MergingDigestData","title":"build"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/compression/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / Builder / compression compression \u00b6 [jvm]\\ open fun compression (compression: Double ): MergingDigestData.Builder open val compression : Double","title":"compression - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/compression/#compression","text":"[jvm]\\ open fun compression (compression: Double ): MergingDigestData.Builder open val compression : Double","title":"compression"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/main_centroids/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / Builder / main_centroids main_centroids \u00b6 [jvm]\\ open fun main_centroids (main_centroids: List < Centroid >): MergingDigestData.Builder open val main_centroids : List < Centroid >","title":"main_centroids - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/main_centroids/#main_centroids","text":"[jvm]\\ open fun main_centroids (main_centroids: List < Centroid >): MergingDigestData.Builder open val main_centroids : List < Centroid >","title":"main_centroids"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/max/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / Builder / max max \u00b6 [jvm]\\ open fun max (max: Double ): MergingDigestData.Builder open val max : Double","title":"max - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/max/#max","text":"[jvm]\\ open fun max (max: Double ): MergingDigestData.Builder open val max : Double","title":"max"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/min/","text":"// misk-metrics-digester / com.squareup.digester.protos.tdigest / MergingDigestData / Builder / min min \u00b6 [jvm]\\ open fun min (min: Double ): MergingDigestData.Builder open val min : Double","title":"min - Misk"},{"location":"0.x/misk-metrics-digester/com.squareup.digester.protos.tdigest/-merging-digest-data/-builder/min/#min","text":"[jvm]\\ open fun min (min: Double ): MergingDigestData.Builder open val min : Double","title":"min"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/","text":"// misk-metrics-digester / misk.metrics.digester Package misk.metrics.digester \u00b6 Types \u00b6 Name Summary FakeDigest [jvm] class FakeDigest : TDigest < FakeDigest > Simulates VeneurDigest for testing purposes MergingDigest [jvm] class MergingDigest (compression: Double ) Provides an implementation of t-digest to be used to send histogram data SlidingWindowDigest [jvm] class SlidingWindowDigest < T : TDigest < T >>(windower: Windower , tDigest: () -> T , utcNowClock: Clock ) SlidingWindowDigest approximates quantiles of data for a trailing time period. It is thread-safe. Snapshot [jvm] data class Snapshot (quantileVals: List < Double >, count: Long , sum: Double ) Snapshot is the state of a SlidingWindowDigest at a point in time. TDigest [jvm] interface TDigest < T : TDigest < T >> TDigest abstract common methods for t-digest implementations VeneurDigest [jvm] class VeneurDigest : TDigest < VeneurDigest > Wraps an adapted t-digest implementation from Stripe\u2019s Veneur project Window [jvm] data class Window (start: ZonedDateTime , end: ZonedDateTime ) Window represents a time range WindowDigest [jvm] data class WindowDigest < T : TDigest < T >>(window: Window , digest: T ) WindowDigest holds a t-digest whose data points are scoped to a specific time window. Windower [jvm] class Windower (windowSecs: Int , stagger: Int ) Windower contains multiple windows with a specified duration","title":"Package misk.metrics.digester - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/#package-miskmetricsdigester","text":"","title":"Package misk.metrics.digester"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/#types","text":"Name Summary FakeDigest [jvm] class FakeDigest : TDigest < FakeDigest > Simulates VeneurDigest for testing purposes MergingDigest [jvm] class MergingDigest (compression: Double ) Provides an implementation of t-digest to be used to send histogram data SlidingWindowDigest [jvm] class SlidingWindowDigest < T : TDigest < T >>(windower: Windower , tDigest: () -> T , utcNowClock: Clock ) SlidingWindowDigest approximates quantiles of data for a trailing time period. It is thread-safe. Snapshot [jvm] data class Snapshot (quantileVals: List < Double >, count: Long , sum: Double ) Snapshot is the state of a SlidingWindowDigest at a point in time. TDigest [jvm] interface TDigest < T : TDigest < T >> TDigest abstract common methods for t-digest implementations VeneurDigest [jvm] class VeneurDigest : TDigest < VeneurDigest > Wraps an adapted t-digest implementation from Stripe\u2019s Veneur project Window [jvm] data class Window (start: ZonedDateTime , end: ZonedDateTime ) Window represents a time range WindowDigest [jvm] data class WindowDigest < T : TDigest < T >>(window: Window , digest: T ) WindowDigest holds a t-digest whose data points are scoped to a specific time window. Windower [jvm] class Windower (windowSecs: Int , stagger: Int ) Windower contains multiple windows with a specified duration","title":"Types"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest FakeDigest \u00b6 [jvm]\\ class FakeDigest : TDigest < FakeDigest > Simulates VeneurDigest for testing purposes Constructors \u00b6 FakeDigest [jvm] fun FakeDigest () FakeDigest [jvm] fun FakeDigest (values: List < Double >) Functions \u00b6 Name Summary add [jvm] open override fun add (value: Double ) Adds a new observation to the t-digest count [jvm] open override fun count (): Long Returns the count of the number of observations recorded within the t-digest mergeInto [jvm] open override fun mergeInto (other: FakeDigest ) Merges this t-digest into another t-digest proto [jvm] open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type quantile [jvm] open override fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned. sum [jvm] open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"FakeDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/#fakedigest","text":"[jvm]\\ class FakeDigest : TDigest < FakeDigest > Simulates VeneurDigest for testing purposes","title":"FakeDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/#constructors","text":"FakeDigest [jvm] fun FakeDigest () FakeDigest [jvm] fun FakeDigest (values: List < Double >)","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/#functions","text":"Name Summary add [jvm] open override fun add (value: Double ) Adds a new observation to the t-digest count [jvm] open override fun count (): Long Returns the count of the number of observations recorded within the t-digest mergeInto [jvm] open override fun mergeInto (other: FakeDigest ) Merges this t-digest into another t-digest proto [jvm] open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type quantile [jvm] open override fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned. sum [jvm] open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"Functions"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/-fake-digest/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest / FakeDigest FakeDigest \u00b6 [jvm]\\ fun FakeDigest () fun FakeDigest (values: List < Double >)","title":"FakeDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/-fake-digest/#fakedigest","text":"[jvm]\\ fun FakeDigest () fun FakeDigest (values: List < Double >)","title":"FakeDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/add/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest / add add \u00b6 [jvm]\\ open override fun add (value: Double ) Adds a new observation to the t-digest","title":"add - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/add/#add","text":"[jvm]\\ open override fun add (value: Double ) Adds a new observation to the t-digest","title":"add"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/count/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest / count count \u00b6 [jvm]\\ open override fun count (): Long Returns the count of the number of observations recorded within the t-digest","title":"count - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/count/#count","text":"[jvm]\\ open override fun count (): Long Returns the count of the number of observations recorded within the t-digest","title":"count"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/merge-into/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest / mergeInto mergeInto \u00b6 [jvm]\\ open override fun mergeInto (other: FakeDigest ) Merges this t-digest into another t-digest","title":"mergeInto - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/merge-into/#mergeinto","text":"[jvm]\\ open override fun mergeInto (other: FakeDigest ) Merges this t-digest into another t-digest","title":"mergeInto"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/proto/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest / proto proto \u00b6 [jvm]\\ open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type","title":"proto - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/proto/#proto","text":"[jvm]\\ open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type","title":"proto"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/quantile/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest / quantile quantile \u00b6 [jvm]\\ open override fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned.","title":"quantile - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/quantile/#quantile","text":"[jvm]\\ open override fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned.","title":"quantile"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/sum/","text":"// misk-metrics-digester / misk.metrics.digester / FakeDigest / sum sum \u00b6 [jvm]\\ open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"sum - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-fake-digest/sum/#sum","text":"[jvm]\\ open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"sum"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/","text":"// misk-metrics-digester / misk.metrics.digester / MergingDigest MergingDigest \u00b6 [jvm]\\ class MergingDigest (compression: Double ) Provides an implementation of t-digest to be used to send histogram data Direct port of Veneur digest created by Stripe https://github.com/stripe/veneur/blob/master/tdigest/merging_digest.go Constructors \u00b6 MergingDigest [jvm] fun MergingDigest (mergingDigestData: MergingDigestData ) Constructs a MergingDigest with values initialized from MergingDigestData. This should be the way to generate a MergingDigest from a serialized protobuf. MergingDigest [jvm] fun MergingDigest (compression: Double ) Functions \u00b6 Name Summary add [jvm] fun add (value: Double , weight: Double ) Adds a new value to the t-digest, with a given weight that must be positive. Infinities and NaN cannot be added. data [jvm] fun data (): MergingDigestData MergingDigestData contains all fields necessary to generate a MergingDigest. This type should generally just be used when serializing MergingDigest\u2019s, and doesn\u2019t have much of a purpose on its own. mergeFrom [jvm] fun mergeFrom (other: MergingDigest ) Merge another digest into this one. Neither td nor other can be shared concurrently during the execution of this method. quantile [jvm] fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty.","title":"MergingDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/#mergingdigest","text":"[jvm]\\ class MergingDigest (compression: Double ) Provides an implementation of t-digest to be used to send histogram data Direct port of Veneur digest created by Stripe https://github.com/stripe/veneur/blob/master/tdigest/merging_digest.go","title":"MergingDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/#constructors","text":"MergingDigest [jvm] fun MergingDigest (mergingDigestData: MergingDigestData ) Constructs a MergingDigest with values initialized from MergingDigestData. This should be the way to generate a MergingDigest from a serialized protobuf. MergingDigest [jvm] fun MergingDigest (compression: Double )","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/#functions","text":"Name Summary add [jvm] fun add (value: Double , weight: Double ) Adds a new value to the t-digest, with a given weight that must be positive. Infinities and NaN cannot be added. data [jvm] fun data (): MergingDigestData MergingDigestData contains all fields necessary to generate a MergingDigest. This type should generally just be used when serializing MergingDigest\u2019s, and doesn\u2019t have much of a purpose on its own. mergeFrom [jvm] fun mergeFrom (other: MergingDigest ) Merge another digest into this one. Neither td nor other can be shared concurrently during the execution of this method. quantile [jvm] fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty.","title":"Functions"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/-merging-digest/","text":"// misk-metrics-digester / misk.metrics.digester / MergingDigest / MergingDigest MergingDigest \u00b6 [jvm]\\ fun MergingDigest (mergingDigestData: MergingDigestData ) Constructs a MergingDigest with values initialized from MergingDigestData. This should be the way to generate a MergingDigest from a serialized protobuf. [jvm]\\ fun MergingDigest (compression: Double )","title":"MergingDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/-merging-digest/#mergingdigest","text":"[jvm]\\ fun MergingDigest (mergingDigestData: MergingDigestData ) Constructs a MergingDigest with values initialized from MergingDigestData. This should be the way to generate a MergingDigest from a serialized protobuf. [jvm]\\ fun MergingDigest (compression: Double )","title":"MergingDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/add/","text":"// misk-metrics-digester / misk.metrics.digester / MergingDigest / add add \u00b6 [jvm]\\ fun add (value: Double , weight: Double ) Adds a new value to the t-digest, with a given weight that must be positive. Infinities and NaN cannot be added.","title":"add - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/add/#add","text":"[jvm]\\ fun add (value: Double , weight: Double ) Adds a new value to the t-digest, with a given weight that must be positive. Infinities and NaN cannot be added.","title":"add"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/data/","text":"// misk-metrics-digester / misk.metrics.digester / MergingDigest / data data \u00b6 [jvm]\\ fun data (): MergingDigestData MergingDigestData contains all fields necessary to generate a MergingDigest. This type should generally just be used when serializing MergingDigest\u2019s, and doesn\u2019t have much of a purpose on its own.","title":"data - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/data/#data","text":"[jvm]\\ fun data (): MergingDigestData MergingDigestData contains all fields necessary to generate a MergingDigest. This type should generally just be used when serializing MergingDigest\u2019s, and doesn\u2019t have much of a purpose on its own.","title":"data"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/merge-from/","text":"// misk-metrics-digester / misk.metrics.digester / MergingDigest / mergeFrom mergeFrom \u00b6 [jvm]\\ fun mergeFrom (other: MergingDigest ) Merge another digest into this one. Neither td nor other can be shared concurrently during the execution of this method.","title":"mergeFrom - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/merge-from/#mergefrom","text":"[jvm]\\ fun mergeFrom (other: MergingDigest ) Merge another digest into this one. Neither td nor other can be shared concurrently during the execution of this method.","title":"mergeFrom"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/quantile/","text":"// misk-metrics-digester / misk.metrics.digester / MergingDigest / quantile quantile \u00b6 [jvm]\\ fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty.","title":"quantile - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-merging-digest/quantile/#quantile","text":"[jvm]\\ fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty.","title":"quantile"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest SlidingWindowDigest \u00b6 [jvm]\\ class SlidingWindowDigest < T : TDigest < T >>(windower: Windower , tDigest: () -> T , utcNowClock: Clock ) SlidingWindowDigest approximates quantiles of data for a trailing time period. It is thread-safe. To efficiently store observed data in a mergeable way, t-openDigests are used. As t-openDigests do not support discarding older data points, the sliding window aspect is approximated by keeping multiple separate t-openDigests scoped to discrete overlapping time windows. As a result, quantile data is reported from the most recent window that has ended. The following example creates a 1 minute sliding window where there are 6 overlapping windows at a given time. Reported quantiles are at most 10 seconds out of date. SlidingWindowDigest(Windower(60, 6), fun() = VeneurDigest()) The following example creates a 10 second sliding window where there are 2 overlapping windows at a given time. Reported quantiles are at most 5 seconds out of date: NewSlidingWindowDigest(Windower(10, 2), fun() = VeneurDigest()) Constructors \u00b6 SlidingWindowDigest [jvm] fun < T : TDigest < T >> SlidingWindowDigest (windower: Windower , tDigest: () -> T , utcNowClock: Clock = Clock.systemUTC()) Functions \u00b6 Name Summary closedDigests [jvm] @ Synchronized fun closedDigests (from: ZonedDateTime ): List < WindowDigest < T >> Returns all WindowDigests that ended starting from the given time (inclusive). The returned WindowDigest are ordered by their start time. mergeIn [jvm] @ Synchronized fun mergeIn (windowDigests: List < WindowDigest < T >>) Merges in the data from the given WindowDigests. The given windowDigests should use the same windowing boundaries as this; if they do not then quantiles reported by this sliding window digest may be incorrect. observe [jvm] @ Synchronized fun observe (value: Double ) Adds the given value to all currently open t-openDigests. It is important to note that an observed value is not immediately reflected in calls to Quantile. openDigests [jvm] fun openDigests (gc: Boolean ): List < WindowDigest < T >> Returns all WindowDigests that are currently open, creating new windows if necessary. Older openDigests that ended more than 1 minute earlier are discarded if gc is true. quantile [jvm] @ Synchronized fun quantile (quantile: Double ): Double Returns estimated value for a quantile. The returned value may not include recently observed values due to how sliding windows are approximated. If no data has been observed then NaN is returned. snapshot [jvm] @ Synchronized fun snapshot (quantiles: List < Double >): Snapshot Returns a snapshot of estimated values for quantiles, along with the count of observations and their sum. The returned values may not include recent observations due to how sliding windows are approximated. If no data has been observed then a slice of NaNs of having quantiles.count() is returned and NaN is returned for the sum.","title":"SlidingWindowDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/#slidingwindowdigest","text":"[jvm]\\ class SlidingWindowDigest < T : TDigest < T >>(windower: Windower , tDigest: () -> T , utcNowClock: Clock ) SlidingWindowDigest approximates quantiles of data for a trailing time period. It is thread-safe. To efficiently store observed data in a mergeable way, t-openDigests are used. As t-openDigests do not support discarding older data points, the sliding window aspect is approximated by keeping multiple separate t-openDigests scoped to discrete overlapping time windows. As a result, quantile data is reported from the most recent window that has ended. The following example creates a 1 minute sliding window where there are 6 overlapping windows at a given time. Reported quantiles are at most 10 seconds out of date. SlidingWindowDigest(Windower(60, 6), fun() = VeneurDigest()) The following example creates a 10 second sliding window where there are 2 overlapping windows at a given time. Reported quantiles are at most 5 seconds out of date: NewSlidingWindowDigest(Windower(10, 2), fun() = VeneurDigest())","title":"SlidingWindowDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/#constructors","text":"SlidingWindowDigest [jvm] fun < T : TDigest < T >> SlidingWindowDigest (windower: Windower , tDigest: () -> T , utcNowClock: Clock = Clock.systemUTC())","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/#functions","text":"Name Summary closedDigests [jvm] @ Synchronized fun closedDigests (from: ZonedDateTime ): List < WindowDigest < T >> Returns all WindowDigests that ended starting from the given time (inclusive). The returned WindowDigest are ordered by their start time. mergeIn [jvm] @ Synchronized fun mergeIn (windowDigests: List < WindowDigest < T >>) Merges in the data from the given WindowDigests. The given windowDigests should use the same windowing boundaries as this; if they do not then quantiles reported by this sliding window digest may be incorrect. observe [jvm] @ Synchronized fun observe (value: Double ) Adds the given value to all currently open t-openDigests. It is important to note that an observed value is not immediately reflected in calls to Quantile. openDigests [jvm] fun openDigests (gc: Boolean ): List < WindowDigest < T >> Returns all WindowDigests that are currently open, creating new windows if necessary. Older openDigests that ended more than 1 minute earlier are discarded if gc is true. quantile [jvm] @ Synchronized fun quantile (quantile: Double ): Double Returns estimated value for a quantile. The returned value may not include recently observed values due to how sliding windows are approximated. If no data has been observed then NaN is returned. snapshot [jvm] @ Synchronized fun snapshot (quantiles: List < Double >): Snapshot Returns a snapshot of estimated values for quantiles, along with the count of observations and their sum. The returned values may not include recent observations due to how sliding windows are approximated. If no data has been observed then a slice of NaNs of having quantiles.count() is returned and NaN is returned for the sum.","title":"Functions"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/-sliding-window-digest/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest / SlidingWindowDigest SlidingWindowDigest \u00b6 [jvm]\\ fun < T : TDigest < T >> SlidingWindowDigest (windower: Windower , tDigest: () -> T , utcNowClock: Clock = Clock.systemUTC())","title":"SlidingWindowDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/-sliding-window-digest/#slidingwindowdigest","text":"[jvm]\\ fun < T : TDigest < T >> SlidingWindowDigest (windower: Windower , tDigest: () -> T , utcNowClock: Clock = Clock.systemUTC())","title":"SlidingWindowDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/closed-digests/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest / closedDigests closedDigests \u00b6 [jvm]\\ @ Synchronized fun closedDigests (from: ZonedDateTime ): List < WindowDigest < T >> Returns all WindowDigests that ended starting from the given time (inclusive). The returned WindowDigest are ordered by their start time.","title":"closedDigests - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/closed-digests/#closeddigests","text":"[jvm]\\ @ Synchronized fun closedDigests (from: ZonedDateTime ): List < WindowDigest < T >> Returns all WindowDigests that ended starting from the given time (inclusive). The returned WindowDigest are ordered by their start time.","title":"closedDigests"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/merge-in/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest / mergeIn mergeIn \u00b6 [jvm]\\ @ Synchronized fun mergeIn (windowDigests: List < WindowDigest < T >>) Merges in the data from the given WindowDigests. The given windowDigests should use the same windowing boundaries as this; if they do not then quantiles reported by this sliding window digest may be incorrect.","title":"mergeIn - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/merge-in/#mergein","text":"[jvm]\\ @ Synchronized fun mergeIn (windowDigests: List < WindowDigest < T >>) Merges in the data from the given WindowDigests. The given windowDigests should use the same windowing boundaries as this; if they do not then quantiles reported by this sliding window digest may be incorrect.","title":"mergeIn"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/observe/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest / observe observe \u00b6 [jvm]\\ @ Synchronized fun observe (value: Double ) Adds the given value to all currently open t-openDigests. It is important to note that an observed value is not immediately reflected in calls to Quantile.","title":"observe - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/observe/#observe","text":"[jvm]\\ @ Synchronized fun observe (value: Double ) Adds the given value to all currently open t-openDigests. It is important to note that an observed value is not immediately reflected in calls to Quantile.","title":"observe"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/open-digests/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest / openDigests openDigests \u00b6 [jvm]\\ fun openDigests (gc: Boolean ): List < WindowDigest < T >> Returns all WindowDigests that are currently open, creating new windows if necessary. Older openDigests that ended more than 1 minute earlier are discarded if gc is true.","title":"openDigests - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/open-digests/#opendigests","text":"[jvm]\\ fun openDigests (gc: Boolean ): List < WindowDigest < T >> Returns all WindowDigests that are currently open, creating new windows if necessary. Older openDigests that ended more than 1 minute earlier are discarded if gc is true.","title":"openDigests"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/quantile/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest / quantile quantile \u00b6 [jvm]\\ @ Synchronized fun quantile (quantile: Double ): Double Returns estimated value for a quantile. The returned value may not include recently observed values due to how sliding windows are approximated. If no data has been observed then NaN is returned.","title":"quantile - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/quantile/#quantile","text":"[jvm]\\ @ Synchronized fun quantile (quantile: Double ): Double Returns estimated value for a quantile. The returned value may not include recently observed values due to how sliding windows are approximated. If no data has been observed then NaN is returned.","title":"quantile"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/snapshot/","text":"// misk-metrics-digester / misk.metrics.digester / SlidingWindowDigest / snapshot snapshot \u00b6 [jvm]\\ @ Synchronized fun snapshot (quantiles: List < Double >): Snapshot Returns a snapshot of estimated values for quantiles, along with the count of observations and their sum. The returned values may not include recent observations due to how sliding windows are approximated. If no data has been observed then a slice of NaNs of having quantiles.count() is returned and NaN is returned for the sum.","title":"snapshot - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-sliding-window-digest/snapshot/#snapshot","text":"[jvm]\\ @ Synchronized fun snapshot (quantiles: List < Double >): Snapshot Returns a snapshot of estimated values for quantiles, along with the count of observations and their sum. The returned values may not include recent observations due to how sliding windows are approximated. If no data has been observed then a slice of NaNs of having quantiles.count() is returned and NaN is returned for the sum.","title":"snapshot"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/","text":"// misk-metrics-digester / misk.metrics.digester / Snapshot Snapshot \u00b6 [jvm]\\ data class Snapshot (quantileVals: List < Double >, count: Long , sum: Double ) Snapshot is the state of a SlidingWindowDigest at a point in time. Constructors \u00b6 Snapshot [jvm] fun Snapshot (quantileVals: List < Double >, count: Long , sum: Double ) Properties \u00b6 Name Summary count [jvm] val count : Long quantileVals [jvm] val quantileVals : List < Double > sum [jvm] val sum : Double","title":"Snapshot - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/#snapshot","text":"[jvm]\\ data class Snapshot (quantileVals: List < Double >, count: Long , sum: Double ) Snapshot is the state of a SlidingWindowDigest at a point in time.","title":"Snapshot"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/#constructors","text":"Snapshot [jvm] fun Snapshot (quantileVals: List < Double >, count: Long , sum: Double )","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/#properties","text":"Name Summary count [jvm] val count : Long quantileVals [jvm] val quantileVals : List < Double > sum [jvm] val sum : Double","title":"Properties"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/-snapshot/","text":"// misk-metrics-digester / misk.metrics.digester / Snapshot / Snapshot Snapshot \u00b6 [jvm]\\ fun Snapshot (quantileVals: List < Double >, count: Long , sum: Double )","title":"Snapshot - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/-snapshot/#snapshot","text":"[jvm]\\ fun Snapshot (quantileVals: List < Double >, count: Long , sum: Double )","title":"Snapshot"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/count/","text":"// misk-metrics-digester / misk.metrics.digester / Snapshot / count count \u00b6 [jvm]\\ val count : Long","title":"count - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/count/#count","text":"[jvm]\\ val count : Long","title":"count"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/quantile-vals/","text":"// misk-metrics-digester / misk.metrics.digester / Snapshot / quantileVals quantileVals \u00b6 [jvm]\\ val quantileVals : List < Double >","title":"quantileVals - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/quantile-vals/#quantilevals","text":"[jvm]\\ val quantileVals : List < Double >","title":"quantileVals"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/sum/","text":"// misk-metrics-digester / misk.metrics.digester / Snapshot / sum sum \u00b6 [jvm]\\ val sum : Double","title":"sum - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-snapshot/sum/#sum","text":"[jvm]\\ val sum : Double","title":"sum"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/","text":"// misk-metrics-digester / misk.metrics.digester / TDigest TDigest \u00b6 [jvm]\\ interface TDigest < T : TDigest < T >> TDigest abstract common methods for t-digest implementations Functions \u00b6 Name Summary add [jvm] abstract fun add (value: Double ) Adds an observed value to the digest. count [jvm] abstract fun count (): Long Returns the count of values added into the digest. mergeInto [jvm] abstract fun mergeInto (other: T ) MergeInto merges the data in this digest into the other digest. The other digest is mutated and must be of the same TDigest type. proto [jvm] abstract fun proto (): DigestData Proto returns a representation of the t-digest that can be later reconstituted into an instance of the same type. quantile [jvm] abstract fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned. sum [jvm] abstract fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added. Inheritors \u00b6 Name FakeDigest VeneurDigest","title":"TDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/#tdigest","text":"[jvm]\\ interface TDigest < T : TDigest < T >> TDigest abstract common methods for t-digest implementations","title":"TDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/#functions","text":"Name Summary add [jvm] abstract fun add (value: Double ) Adds an observed value to the digest. count [jvm] abstract fun count (): Long Returns the count of values added into the digest. mergeInto [jvm] abstract fun mergeInto (other: T ) MergeInto merges the data in this digest into the other digest. The other digest is mutated and must be of the same TDigest type. proto [jvm] abstract fun proto (): DigestData Proto returns a representation of the t-digest that can be later reconstituted into an instance of the same type. quantile [jvm] abstract fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned. sum [jvm] abstract fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added.","title":"Functions"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/#inheritors","text":"Name FakeDigest VeneurDigest","title":"Inheritors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/add/","text":"// misk-metrics-digester / misk.metrics.digester / TDigest / add add \u00b6 [jvm]\\ abstract fun add (value: Double ) Adds an observed value to the digest.","title":"add - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/add/#add","text":"[jvm]\\ abstract fun add (value: Double ) Adds an observed value to the digest.","title":"add"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/count/","text":"// misk-metrics-digester / misk.metrics.digester / TDigest / count count \u00b6 [jvm]\\ abstract fun count (): Long Returns the count of values added into the digest.","title":"count - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/count/#count","text":"[jvm]\\ abstract fun count (): Long Returns the count of values added into the digest.","title":"count"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/merge-into/","text":"// misk-metrics-digester / misk.metrics.digester / TDigest / mergeInto mergeInto \u00b6 [jvm]\\ abstract fun mergeInto (other: T ) MergeInto merges the data in this digest into the other digest. The other digest is mutated and must be of the same TDigest type.","title":"mergeInto - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/merge-into/#mergeinto","text":"[jvm]\\ abstract fun mergeInto (other: T ) MergeInto merges the data in this digest into the other digest. The other digest is mutated and must be of the same TDigest type.","title":"mergeInto"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/proto/","text":"// misk-metrics-digester / misk.metrics.digester / TDigest / proto proto \u00b6 [jvm]\\ abstract fun proto (): DigestData Proto returns a representation of the t-digest that can be later reconstituted into an instance of the same type.","title":"proto - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/proto/#proto","text":"[jvm]\\ abstract fun proto (): DigestData Proto returns a representation of the t-digest that can be later reconstituted into an instance of the same type.","title":"proto"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/quantile/","text":"// misk-metrics-digester / misk.metrics.digester / TDigest / quantile quantile \u00b6 [jvm]\\ abstract fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned.","title":"quantile - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/quantile/#quantile","text":"[jvm]\\ abstract fun quantile (quantile: Double ): Double Quantile returns the estimated value at quantile. A given quantile should be in the range of 0, 1.0. If no data has been added then NaN is returned.","title":"quantile"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/sum/","text":"// misk-metrics-digester / misk.metrics.digester / TDigest / sum sum \u00b6 [jvm]\\ abstract fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added.","title":"sum - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-t-digest/sum/#sum","text":"[jvm]\\ abstract fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added.","title":"sum"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest VeneurDigest \u00b6 [jvm]\\ class VeneurDigest : TDigest < VeneurDigest > Wraps an adapted t-digest implementation from Stripe\u2019s Veneur project Constructors \u00b6 VeneurDigest [jvm] fun VeneurDigest () Creates a TDigest backed by a VeneurDigest, using a default compression level VeneurDigest [jvm] fun VeneurDigest (digestData: DigestData ) Creates a VeneurDigest from a DigestData proto The DigestData proto must have veneur_digest set correctly Functions \u00b6 Name Summary add [jvm] open override fun add (value: Double ) Adds a new observation to the t-digest count [jvm] open override fun count (): Long Returns the count of the number of observations recorded within the t-digest mergeInto [jvm] open override fun mergeInto (other: VeneurDigest ) Merges this t-digest into another t-digest mergingDigest [jvm] fun mergingDigest (): MergingDigest Returns the mergingDigest instance proto [jvm] open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type quantile [jvm] open override fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty. sum [jvm] open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"VeneurDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/#veneurdigest","text":"[jvm]\\ class VeneurDigest : TDigest < VeneurDigest > Wraps an adapted t-digest implementation from Stripe\u2019s Veneur project","title":"VeneurDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/#constructors","text":"VeneurDigest [jvm] fun VeneurDigest () Creates a TDigest backed by a VeneurDigest, using a default compression level VeneurDigest [jvm] fun VeneurDigest (digestData: DigestData ) Creates a VeneurDigest from a DigestData proto The DigestData proto must have veneur_digest set correctly","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/#functions","text":"Name Summary add [jvm] open override fun add (value: Double ) Adds a new observation to the t-digest count [jvm] open override fun count (): Long Returns the count of the number of observations recorded within the t-digest mergeInto [jvm] open override fun mergeInto (other: VeneurDigest ) Merges this t-digest into another t-digest mergingDigest [jvm] fun mergingDigest (): MergingDigest Returns the mergingDigest instance proto [jvm] open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type quantile [jvm] open override fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty. sum [jvm] open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"Functions"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/-veneur-digest/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / VeneurDigest VeneurDigest \u00b6 [jvm]\\ fun VeneurDigest () Creates a TDigest backed by a VeneurDigest, using a default compression level [jvm]\\ fun VeneurDigest (digestData: DigestData ) Creates a VeneurDigest from a DigestData proto The DigestData proto must have veneur_digest set correctly","title":"VeneurDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/-veneur-digest/#veneurdigest","text":"[jvm]\\ fun VeneurDigest () Creates a TDigest backed by a VeneurDigest, using a default compression level [jvm]\\ fun VeneurDigest (digestData: DigestData ) Creates a VeneurDigest from a DigestData proto The DigestData proto must have veneur_digest set correctly","title":"VeneurDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/add/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / add add \u00b6 [jvm]\\ open override fun add (value: Double ) Adds a new observation to the t-digest","title":"add - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/add/#add","text":"[jvm]\\ open override fun add (value: Double ) Adds a new observation to the t-digest","title":"add"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/count/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / count count \u00b6 [jvm]\\ open override fun count (): Long Returns the count of the number of observations recorded within the t-digest","title":"count - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/count/#count","text":"[jvm]\\ open override fun count (): Long Returns the count of the number of observations recorded within the t-digest","title":"count"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/merge-into/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / mergeInto mergeInto \u00b6 [jvm]\\ open override fun mergeInto (other: VeneurDigest ) Merges this t-digest into another t-digest","title":"mergeInto - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/merge-into/#mergeinto","text":"[jvm]\\ open override fun mergeInto (other: VeneurDigest ) Merges this t-digest into another t-digest","title":"mergeInto"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/merging-digest/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / mergingDigest mergingDigest \u00b6 [jvm]\\ fun mergingDigest (): MergingDigest Returns the mergingDigest instance","title":"mergingDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/merging-digest/#mergingdigest","text":"[jvm]\\ fun mergingDigest (): MergingDigest Returns the mergingDigest instance","title":"mergingDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/proto/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / proto proto \u00b6 [jvm]\\ open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type","title":"proto - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/proto/#proto","text":"[jvm]\\ open override fun proto (): DigestData Returns a representation fo the t-digest that can be later be reconstituted into an instance of the same type","title":"proto"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/quantile/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / quantile quantile \u00b6 [jvm]\\ open override fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty.","title":"quantile - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/quantile/#quantile","text":"[jvm]\\ open override fun quantile (quantile: Double ): Double Returns a value such that the fraction of values in td below that value is approximately equal to quantile. Returns NaN if the digest is empty.","title":"quantile"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/sum/","text":"// misk-metrics-digester / misk.metrics.digester / VeneurDigest / sum sum \u00b6 [jvm]\\ open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"sum - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-veneur-digest/sum/#sum","text":"[jvm]\\ open override fun sum (): Double Returns the sum of all values added into the digest, or NaN if no values have been added","title":"sum"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/","text":"// misk-metrics-digester / misk.metrics.digester / Window Window \u00b6 [jvm]\\ data class Window (start: ZonedDateTime , end: ZonedDateTime ) Window represents a time range Constructors \u00b6 Window [jvm] fun Window (start: ZonedDateTime , end: ZonedDateTime ) Functions \u00b6 Name Summary contains [jvm] fun contains (t: ZonedDateTime ): Boolean Returns true if the given time t falls within the window\u2019s Start <= t < End. Properties \u00b6 Name Summary end [jvm] val end : ZonedDateTime start [jvm] val start : ZonedDateTime","title":"Window - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/#window","text":"[jvm]\\ data class Window (start: ZonedDateTime , end: ZonedDateTime ) Window represents a time range","title":"Window"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/#constructors","text":"Window [jvm] fun Window (start: ZonedDateTime , end: ZonedDateTime )","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/#functions","text":"Name Summary contains [jvm] fun contains (t: ZonedDateTime ): Boolean Returns true if the given time t falls within the window\u2019s Start <= t < End.","title":"Functions"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/#properties","text":"Name Summary end [jvm] val end : ZonedDateTime start [jvm] val start : ZonedDateTime","title":"Properties"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/-window/","text":"// misk-metrics-digester / misk.metrics.digester / Window / Window Window \u00b6 [jvm]\\ fun Window (start: ZonedDateTime , end: ZonedDateTime )","title":"Window - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/-window/#window","text":"[jvm]\\ fun Window (start: ZonedDateTime , end: ZonedDateTime )","title":"Window"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/contains/","text":"// misk-metrics-digester / misk.metrics.digester / Window / contains contains \u00b6 [jvm]\\ fun contains (t: ZonedDateTime ): Boolean Returns true if the given time t falls within the window\u2019s Start <= t < End.","title":"contains - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/contains/#contains","text":"[jvm]\\ fun contains (t: ZonedDateTime ): Boolean Returns true if the given time t falls within the window\u2019s Start <= t < End.","title":"contains"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/end/","text":"// misk-metrics-digester / misk.metrics.digester / Window / end end \u00b6 [jvm]\\ val end : ZonedDateTime","title":"end - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/end/#end","text":"[jvm]\\ val end : ZonedDateTime","title":"end"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/start/","text":"// misk-metrics-digester / misk.metrics.digester / Window / start start \u00b6 [jvm]\\ val start : ZonedDateTime","title":"start - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window/start/#start","text":"[jvm]\\ val start : ZonedDateTime","title":"start"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/","text":"// misk-metrics-digester / misk.metrics.digester / WindowDigest WindowDigest \u00b6 [jvm]\\ data class WindowDigest < T : TDigest < T >>(window: Window , digest: T ) WindowDigest holds a t-digest whose data points are scoped to a specific time window. Constructors \u00b6 WindowDigest [jvm] fun < T : TDigest < T >> WindowDigest (window: Window , digest: T ) Properties \u00b6 Name Summary digest [jvm] val digest : T window [jvm] val window : Window","title":"WindowDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/#windowdigest","text":"[jvm]\\ data class WindowDigest < T : TDigest < T >>(window: Window , digest: T ) WindowDigest holds a t-digest whose data points are scoped to a specific time window.","title":"WindowDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/#constructors","text":"WindowDigest [jvm] fun < T : TDigest < T >> WindowDigest (window: Window , digest: T )","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/#properties","text":"Name Summary digest [jvm] val digest : T window [jvm] val window : Window","title":"Properties"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/-window-digest/","text":"// misk-metrics-digester / misk.metrics.digester / WindowDigest / WindowDigest WindowDigest \u00b6 [jvm]\\ fun < T : TDigest < T >> WindowDigest (window: Window , digest: T )","title":"WindowDigest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/-window-digest/#windowdigest","text":"[jvm]\\ fun < T : TDigest < T >> WindowDigest (window: Window , digest: T )","title":"WindowDigest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/digest/","text":"// misk-metrics-digester / misk.metrics.digester / WindowDigest / digest digest \u00b6 [jvm]\\ val digest : T","title":"digest - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/digest/#digest","text":"[jvm]\\ val digest : T","title":"digest"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/window/","text":"// misk-metrics-digester / misk.metrics.digester / WindowDigest / window window \u00b6 [jvm]\\ val window : Window","title":"window - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-window-digest/window/#window","text":"[jvm]\\ val window : Window","title":"window"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/","text":"// misk-metrics-digester / misk.metrics.digester / Windower Windower \u00b6 [jvm]\\ class Windower (windowSecs: Int , stagger: Int ) Windower contains multiple windows with a specified duration Constructors \u00b6 Windower [jvm] fun Windower (windowSecs: Int , stagger: Int ) Functions \u00b6 Name Summary windowsContaining [jvm] fun windowsContaining (t: ZonedDateTime ): List < Window > Returns all windows that the given time falls into. The returned slice will be ordered by window start time, and the number of windows in the returned slice will the same as the stagger given when the Windower was created.","title":"Windower - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/#windower","text":"[jvm]\\ class Windower (windowSecs: Int , stagger: Int ) Windower contains multiple windows with a specified duration","title":"Windower"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/#constructors","text":"Windower [jvm] fun Windower (windowSecs: Int , stagger: Int )","title":"Constructors"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/#functions","text":"Name Summary windowsContaining [jvm] fun windowsContaining (t: ZonedDateTime ): List < Window > Returns all windows that the given time falls into. The returned slice will be ordered by window start time, and the number of windows in the returned slice will the same as the stagger given when the Windower was created.","title":"Functions"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/-windower/","text":"// misk-metrics-digester / misk.metrics.digester / Windower / Windower Windower \u00b6 [jvm]\\ fun Windower (windowSecs: Int , stagger: Int )","title":"Windower - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/-windower/#windower","text":"[jvm]\\ fun Windower (windowSecs: Int , stagger: Int )","title":"Windower"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/windows-containing/","text":"// misk-metrics-digester / misk.metrics.digester / Windower / windowsContaining windowsContaining \u00b6 [jvm]\\ fun windowsContaining (t: ZonedDateTime ): List < Window > Returns all windows that the given time falls into. The returned slice will be ordered by window start time, and the number of windows in the returned slice will the same as the stagger given when the Windower was created.","title":"windowsContaining - Misk"},{"location":"0.x/misk-metrics-digester/misk.metrics.digester/-windower/windows-containing/#windowscontaining","text":"[jvm]\\ fun windowsContaining (t: ZonedDateTime ): List < Window > Returns all windows that the given time falls into. The returned slice will be ordered by window start time, and the number of windows in the returned slice will the same as the stagger given when the Windower was created.","title":"windowsContaining"},{"location":"0.x/misk-metrics-testing/misk.metrics/","text":"// misk-metrics-testing / misk.metrics Package misk.metrics \u00b6 Types \u00b6 Name Summary FakeMetrics [jvm] @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. FakeMetricsModule [jvm] class FakeMetricsModule : KAbstractModule","title":"Package misk.metrics - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/#package-miskmetrics","text":"","title":"Package misk.metrics"},{"location":"0.x/misk-metrics-testing/misk.metrics/#types","text":"Name Summary FakeMetrics [jvm] @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. FakeMetricsModule [jvm] class FakeMetricsModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics FakeMetrics \u00b6 [jvm]\\ @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. The only way to create an instance of this is with FakeMetricsModule . Functions \u00b6 Name Summary counter [jvm] open override fun counter (name: String , help: String , labelNames: List < String >): Counter gauge [jvm] open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge get [jvm] fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge . getSample [jvm] fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample? histogram [jvm] open override fun histogram (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Histogram histogramCount [jvm] fun histogramCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken. histogramMean [jvm] fun histogramMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken. histogramP50 [jvm] fun histogramP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element. histogramP99 [jvm] fun histogramP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element. histogramQuantile [jvm] fun histogramQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ? histogramSum [jvm] fun histogramSum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"FakeMetrics - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/#fakemetrics","text":"[jvm]\\ @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. The only way to create an instance of this is with FakeMetricsModule .","title":"FakeMetrics"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/#functions","text":"Name Summary counter [jvm] open override fun counter (name: String , help: String , labelNames: List < String >): Counter gauge [jvm] open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge get [jvm] fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge . getSample [jvm] fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample? histogram [jvm] open override fun histogram (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Histogram histogramCount [jvm] fun histogramCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken. histogramMean [jvm] fun histogramMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken. histogramP50 [jvm] fun histogramP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element. histogramP99 [jvm] fun histogramP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element. histogramQuantile [jvm] fun histogramQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ? histogramSum [jvm] fun histogramSum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"Functions"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/counter/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / counter counter \u00b6 [jvm]\\ open override fun counter (name: String , help: String , labelNames: List < String >): Counter","title":"counter - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/counter/#counter","text":"[jvm]\\ open override fun counter (name: String , help: String , labelNames: List < String >): Counter","title":"counter"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/gauge/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / gauge gauge \u00b6 [jvm]\\ open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge","title":"gauge - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/gauge/#gauge","text":"[jvm]\\ open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge","title":"gauge"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/get-sample/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / getSample getSample \u00b6 [jvm]\\ fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample?","title":"getSample - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/get-sample/#getsample","text":"[jvm]\\ fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample?","title":"getSample"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/get/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / get get \u00b6 [jvm]\\ fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge .","title":"get - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/get/#get","text":"[jvm]\\ fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge .","title":"get"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-count/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / histogramCount histogramCount \u00b6 [jvm]\\ fun histogramCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken.","title":"histogramCount - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-count/#histogramcount","text":"[jvm]\\ fun histogramCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken.","title":"histogramCount"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-mean/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / histogramMean histogramMean \u00b6 [jvm]\\ fun histogramMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken.","title":"histogramMean - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-mean/#histogrammean","text":"[jvm]\\ fun histogramMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken.","title":"histogramMean"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-p50/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / histogramP50 histogramP50 \u00b6 [jvm]\\ fun histogramP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element.","title":"histogramP50 - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-p50/#histogramp50","text":"[jvm]\\ fun histogramP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element.","title":"histogramP50"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-p99/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / histogramP99 histogramP99 \u00b6 [jvm]\\ fun histogramP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element.","title":"histogramP99 - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-p99/#histogramp99","text":"[jvm]\\ fun histogramP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element.","title":"histogramP99"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-quantile/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / histogramQuantile histogramQuantile \u00b6 [jvm]\\ fun histogramQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ?","title":"histogramQuantile - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-quantile/#histogramquantile","text":"[jvm]\\ fun histogramQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ?","title":"histogramQuantile"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-sum/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / histogramSum histogramSum \u00b6 [jvm]\\ fun histogramSum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"histogramSum - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram-sum/#histogramsum","text":"[jvm]\\ fun histogramSum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"histogramSum"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram/","text":"// misk-metrics-testing / misk.metrics / FakeMetrics / histogram histogram \u00b6 [jvm]\\ open override fun histogram (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Histogram","title":"histogram - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics/histogram/#histogram","text":"[jvm]\\ open override fun histogram (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Histogram","title":"histogram"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics-module/","text":"// misk-metrics-testing / misk.metrics / FakeMetricsModule FakeMetricsModule \u00b6 [jvm]\\ class FakeMetricsModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeMetricsModule - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics-module/#fakemetricsmodule","text":"[jvm]\\ class FakeMetricsModule : KAbstractModule","title":"FakeMetricsModule"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics-module/-fake-metrics-module/","text":"// misk-metrics-testing / misk.metrics / FakeMetricsModule / FakeMetricsModule FakeMetricsModule \u00b6 [jvm]\\ fun FakeMetricsModule ()","title":"FakeMetricsModule - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics/-fake-metrics-module/-fake-metrics-module/#fakemetricsmodule","text":"[jvm]\\ fun FakeMetricsModule ()","title":"FakeMetricsModule"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/","text":"// misk-metrics-testing / misk.metrics.v2 Package misk.metrics.v2 \u00b6 Types \u00b6 Name Summary FakeMetrics [jvm] @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. FakeMetricsModule [jvm] class FakeMetricsModule : KAbstractModule","title":"Package misk.metrics.v2 - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/#package-miskmetricsv2","text":"","title":"Package misk.metrics.v2"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/#types","text":"Name Summary FakeMetrics [jvm] @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. FakeMetricsModule [jvm] class FakeMetricsModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics FakeMetrics \u00b6 [jvm]\\ @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. The only way to create an instance of this is with FakeMetricsModule . Functions \u00b6 Name Summary counter [jvm] open override fun counter (name: String , help: String , labelNames: List < String >): Counter gauge [jvm] open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge get [jvm] fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge . getSample [jvm] fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample? histogram [jvm] open override fun histogram (name: String , help: String , labelNames: List < String >, buckets: List < Double >): Histogram summary [jvm] open override fun summary (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Summary summaryCount [jvm] fun summaryCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken. summaryMean [jvm] fun summaryMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken. summaryP50 [jvm] fun summaryP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element. summaryP99 [jvm] fun summaryP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element. summaryQuantile [jvm] fun summaryQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ? summarySum [jvm] fun summarySum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"FakeMetrics - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/#fakemetrics","text":"[jvm]\\ @Singleton class FakeMetrics : Metrics An in-memory metrics store with APIs to verify which metrics were collected. The only way to create an instance of this is with FakeMetricsModule .","title":"FakeMetrics"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/#functions","text":"Name Summary counter [jvm] open override fun counter (name: String , help: String , labelNames: List < String >): Counter gauge [jvm] open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge get [jvm] fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge . getSample [jvm] fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample? histogram [jvm] open override fun histogram (name: String , help: String , labelNames: List < String >, buckets: List < Double >): Histogram summary [jvm] open override fun summary (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Summary summaryCount [jvm] fun summaryCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken. summaryMean [jvm] fun summaryMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken. summaryP50 [jvm] fun summaryP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element. summaryP99 [jvm] fun summaryP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element. summaryQuantile [jvm] fun summaryQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ? summarySum [jvm] fun summarySum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"Functions"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/counter/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / counter counter \u00b6 [jvm]\\ open override fun counter (name: String , help: String , labelNames: List < String >): Counter","title":"counter - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/counter/#counter","text":"[jvm]\\ open override fun counter (name: String , help: String , labelNames: List < String >): Counter","title":"counter"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/gauge/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / gauge gauge \u00b6 [jvm]\\ open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge","title":"gauge - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/gauge/#gauge","text":"[jvm]\\ open override fun gauge (name: String , help: String , labelNames: List < String >): Gauge","title":"gauge"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/get-sample/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / getSample getSample \u00b6 [jvm]\\ fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample?","title":"getSample - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/get-sample/#getsample","text":"[jvm]\\ fun getSample (name: String , labels: Array <out Pair < String , String >>, sampleName: String = name): Collector.MetricFamilySamples.Sample?","title":"getSample"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/get/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / get get \u00b6 [jvm]\\ fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge .","title":"get - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/get/#get","text":"[jvm]\\ fun get (name: String , vararg labels: Pair < String , String >): Double ? Returns a measurement for a counter or gauge .","title":"get"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/histogram/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / histogram histogram \u00b6 [jvm]\\ open override fun histogram (name: String , help: String , labelNames: List < String >, buckets: List < Double >): Histogram","title":"histogram - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/histogram/#histogram","text":"[jvm]\\ open override fun histogram (name: String , help: String , labelNames: List < String >, buckets: List < Double >): Histogram","title":"histogram"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-count/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / summaryCount summaryCount \u00b6 [jvm]\\ fun summaryCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken.","title":"summaryCount - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-count/#summarycount","text":"[jvm]\\ fun summaryCount (name: String , vararg labels: Pair < String , String >): Double ? Returns the number of histogram samples taken.","title":"summaryCount"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-mean/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / summaryMean summaryMean \u00b6 [jvm]\\ fun summaryMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken.","title":"summaryMean - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-mean/#summarymean","text":"[jvm]\\ fun summaryMean (name: String , vararg labels: Pair < String , String >): Double ? Returns the average of all histogram samples taken.","title":"summaryMean"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-p50/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / summaryP50 summaryP50 \u00b6 [jvm]\\ fun summaryP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element.","title":"summaryP50 - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-p50/#summaryp50","text":"[jvm]\\ fun summaryP50 (name: String , vararg labels: Pair < String , String >): Double ? Returns the median for a histogram . In small samples this is the element preceding the middle element.","title":"summaryP50"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-p99/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / summaryP99 summaryP99 \u00b6 [jvm]\\ fun summaryP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element.","title":"summaryP99 - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-p99/#summaryp99","text":"[jvm]\\ fun summaryP99 (name: String , vararg labels: Pair < String , String >): Double ? Returns the 0.99 th percentile for a histogram . In small samples this is the second largest element.","title":"summaryP99"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-quantile/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / summaryQuantile summaryQuantile \u00b6 [jvm]\\ fun summaryQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ?","title":"summaryQuantile - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-quantile/#summaryquantile","text":"[jvm]\\ fun summaryQuantile (name: String , quantile: String , vararg labels: Pair < String , String >): Double ?","title":"summaryQuantile"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-sum/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / summarySum summarySum \u00b6 [jvm]\\ fun summarySum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"summarySum - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary-sum/#summarysum","text":"[jvm]\\ fun summarySum (name: String , vararg labels: Pair < String , String >): Double ? Returns the sum of all histogram samples taken.","title":"summarySum"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetrics / summary summary \u00b6 [jvm]\\ open override fun summary (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Summary","title":"summary - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics/summary/#summary","text":"[jvm]\\ open override fun summary (name: String , help: String , labelNames: List < String >, quantiles: Map < Double , Double >, maxAgeSeconds: Long ?): Summary","title":"summary"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics-module/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetricsModule FakeMetricsModule \u00b6 [jvm]\\ class FakeMetricsModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeMetricsModule - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics-module/#fakemetricsmodule","text":"[jvm]\\ class FakeMetricsModule : KAbstractModule","title":"FakeMetricsModule"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics-module/-fake-metrics-module/","text":"// misk-metrics-testing / misk.metrics.v2 / FakeMetricsModule / FakeMetricsModule FakeMetricsModule \u00b6 [jvm]\\ fun FakeMetricsModule ()","title":"FakeMetricsModule - Misk"},{"location":"0.x/misk-metrics-testing/misk.metrics.v2/-fake-metrics-module/-fake-metrics-module/#fakemetricsmodule","text":"[jvm]\\ fun FakeMetricsModule ()","title":"FakeMetricsModule"},{"location":"0.x/misk-policy/misk.policy.opa/","text":"// misk-policy / misk.policy.opa Package misk.policy.opa \u00b6 Types \u00b6 Name Summary OpaApi [jvm] interface OpaApi OpaConfig [jvm] data class OpaConfig (baseUrl: String , unixSocket: String ?) : Config OpaModule [jvm] class OpaModule @Injectconstructor(config: OpaConfig ) : KAbstractModule OpaPolicyEngine [jvm] interface OpaPolicyEngine OpaRequest [jvm] interface OpaRequest OpaResponse [jvm] interface OpaResponse PolicyEngineException [jvm] class PolicyEngineException (message: String , cause: Throwable ?) : Exception RealOpaPolicyEngine [jvm] class RealOpaPolicyEngine @Injectconstructor(opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi) : OpaPolicyEngine Support for the Open Policy Engine (OPA). OPA provides a means to decouple policy from business logic. The resulting query response may have arbitrary shapes. Request [jvm] data class Request < T >(input: T ) OPA Request wrapper. Response [jvm] data class Response < T >(decision_id: String ?, result: T ?) OPA Response wrapper. Every response has this standard shape, made concrete by the expected response type. Functions \u00b6 Name Summary evaluate [jvm] inline fun < R : OpaResponse > OpaPolicyEngine . evaluate (document: String ): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. [jvm] inline fun < T : OpaRequest , R : OpaResponse > OpaPolicyEngine . evaluate (document: String , input: T ): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"Package misk.policy.opa - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/#package-miskpolicyopa","text":"","title":"Package misk.policy.opa"},{"location":"0.x/misk-policy/misk.policy.opa/#types","text":"Name Summary OpaApi [jvm] interface OpaApi OpaConfig [jvm] data class OpaConfig (baseUrl: String , unixSocket: String ?) : Config OpaModule [jvm] class OpaModule @Injectconstructor(config: OpaConfig ) : KAbstractModule OpaPolicyEngine [jvm] interface OpaPolicyEngine OpaRequest [jvm] interface OpaRequest OpaResponse [jvm] interface OpaResponse PolicyEngineException [jvm] class PolicyEngineException (message: String , cause: Throwable ?) : Exception RealOpaPolicyEngine [jvm] class RealOpaPolicyEngine @Injectconstructor(opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi) : OpaPolicyEngine Support for the Open Policy Engine (OPA). OPA provides a means to decouple policy from business logic. The resulting query response may have arbitrary shapes. Request [jvm] data class Request < T >(input: T ) OPA Request wrapper. Response [jvm] data class Response < T >(decision_id: String ?, result: T ?) OPA Response wrapper. Every response has this standard shape, made concrete by the expected response type.","title":"Types"},{"location":"0.x/misk-policy/misk.policy.opa/#functions","text":"Name Summary evaluate [jvm] inline fun < R : OpaResponse > OpaPolicyEngine . evaluate (document: String ): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. [jvm] inline fun < T : OpaRequest , R : OpaResponse > OpaPolicyEngine . evaluate (document: String , input: T ): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"Functions"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/","text":"// misk-policy / misk.policy.opa / evaluate evaluate \u00b6 [jvm]\\ inline fun < R : OpaResponse > OpaPolicyEngine . evaluate (document: String ): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. Return \u00b6 Response shape R from OPA. Parameters \u00b6 jvm document Name or Path of the OPA document to query. Throws \u00b6 misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified. [jvm]\\ inline fun < T : OpaRequest , R : OpaResponse > OpaPolicyEngine . evaluate (document: String , input: T ): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. Return \u00b6 Response shape R from OPA. Parameters \u00b6 jvm document Name or Path of the OPA document to query. input Input data to be supplied to OPA at evaluation time (the input global field). Throws \u00b6 misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified.","title":"evaluate - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/#evaluate","text":"[jvm]\\ inline fun < R : OpaResponse > OpaPolicyEngine . evaluate (document: String ): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"evaluate"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/#return","text":"Response shape R from OPA.","title":"Return"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/#parameters","text":"jvm document Name or Path of the OPA document to query.","title":"Parameters"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/#throws","text":"misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified. [jvm]\\ inline fun < T : OpaRequest , R : OpaResponse > OpaPolicyEngine . evaluate (document: String , input: T ): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"Throws"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/#return_1","text":"Response shape R from OPA.","title":"Return"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/#parameters_1","text":"jvm document Name or Path of the OPA document to query. input Input data to be supplied to OPA at evaluation time (the input global field).","title":"Parameters"},{"location":"0.x/misk-policy/misk.policy.opa/evaluate/#throws_1","text":"misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified.","title":"Throws"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-api/","text":"// misk-policy / misk.policy.opa / OpaApi OpaApi \u00b6 [jvm]\\ interface OpaApi Functions \u00b6 Name Summary queryDocument [jvm] @Headers(value = [\u201cContent-Type: application/json\u201d]) @POST(value = \u201c/v1/data/{documentPath}\u201d) abstract fun queryDocument (@Path(value = \u201cdocumentPath\u201d, encoded = true)documentPath: String , @Bodyinput: String ): Call<ResponseBody>","title":"OpaApi - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-api/#opaapi","text":"[jvm]\\ interface OpaApi","title":"OpaApi"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-api/#functions","text":"Name Summary queryDocument [jvm] @Headers(value = [\u201cContent-Type: application/json\u201d]) @POST(value = \u201c/v1/data/{documentPath}\u201d) abstract fun queryDocument (@Path(value = \u201cdocumentPath\u201d, encoded = true)documentPath: String , @Bodyinput: String ): Call<ResponseBody>","title":"Functions"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-api/query-document/","text":"// misk-policy / misk.policy.opa / OpaApi / queryDocument queryDocument \u00b6 [jvm]\\ @Headers(value = [\u201cContent-Type: application/json\u201d]) @POST(value = \u201c/v1/data/{documentPath}\u201d) abstract fun queryDocument (@Path(value = \u201cdocumentPath\u201d, encoded = true)documentPath: String , @Bodyinput: String ): Call<ResponseBody>","title":"queryDocument - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-api/query-document/#querydocument","text":"[jvm]\\ @Headers(value = [\u201cContent-Type: application/json\u201d]) @POST(value = \u201c/v1/data/{documentPath}\u201d) abstract fun queryDocument (@Path(value = \u201cdocumentPath\u201d, encoded = true)documentPath: String , @Bodyinput: String ): Call<ResponseBody>","title":"queryDocument"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/","text":"// misk-policy / misk.policy.opa / OpaConfig OpaConfig \u00b6 [jvm]\\ data class OpaConfig (baseUrl: String , unixSocket: String ?) : Config Properties \u00b6 Name Summary baseUrl [jvm] val baseUrl : String unixSocket [jvm] val unixSocket : String ?","title":"OpaConfig - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/#opaconfig","text":"[jvm]\\ data class OpaConfig (baseUrl: String , unixSocket: String ?) : Config","title":"OpaConfig"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/#properties","text":"Name Summary baseUrl [jvm] val baseUrl : String unixSocket [jvm] val unixSocket : String ?","title":"Properties"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/-opa-config/","text":"// misk-policy / misk.policy.opa / OpaConfig / OpaConfig OpaConfig \u00b6 [jvm]\\ fun OpaConfig (baseUrl: String , unixSocket: String ?)","title":"OpaConfig - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/-opa-config/#opaconfig","text":"[jvm]\\ fun OpaConfig (baseUrl: String , unixSocket: String ?)","title":"OpaConfig"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/base-url/","text":"// misk-policy / misk.policy.opa / OpaConfig / baseUrl baseUrl \u00b6 [jvm]\\ val baseUrl : String","title":"baseUrl - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/base-url/#baseurl","text":"[jvm]\\ val baseUrl : String","title":"baseUrl"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/unix-socket/","text":"// misk-policy / misk.policy.opa / OpaConfig / unixSocket unixSocket \u00b6 [jvm]\\ val unixSocket : String ?","title":"unixSocket - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-config/unix-socket/#unixsocket","text":"[jvm]\\ val unixSocket : String ?","title":"unixSocket"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/","text":"// misk-policy / misk.policy.opa / OpaModule OpaModule \u00b6 [jvm]\\ class OpaModule @Injectconstructor(config: OpaConfig ) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideMoshi [jvm] @Provides @Singleton @Named(value = \u201copa-moshi\u201d) fun provideMoshi (): Moshi requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"OpaModule - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/#opamodule","text":"[jvm]\\ class OpaModule @Injectconstructor(config: OpaConfig ) : KAbstractModule","title":"OpaModule"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideMoshi [jvm] @Provides @Singleton @Named(value = \u201copa-moshi\u201d) fun provideMoshi (): Moshi requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/-opa-module/","text":"// misk-policy / misk.policy.opa / OpaModule / OpaModule OpaModule \u00b6 [jvm]\\ @Inject fun OpaModule (config: OpaConfig )","title":"OpaModule - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/-opa-module/#opamodule","text":"[jvm]\\ @Inject fun OpaModule (config: OpaConfig )","title":"OpaModule"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/provide-moshi/","text":"// misk-policy / misk.policy.opa / OpaModule / provideMoshi provideMoshi \u00b6 [jvm]\\ @Provides @Singleton @Named(value = \u201copa-moshi\u201d) fun provideMoshi (): Moshi","title":"provideMoshi - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-module/provide-moshi/#providemoshi","text":"[jvm]\\ @Provides @Singleton @Named(value = \u201copa-moshi\u201d) fun provideMoshi (): Moshi","title":"provideMoshi"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/","text":"// misk-policy / misk.policy.opa / OpaPolicyEngine OpaPolicyEngine \u00b6 [jvm]\\ interface OpaPolicyEngine Functions \u00b6 Name Summary evaluateNoInput [jvm] abstract fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R evaluateWithInput [jvm] abstract fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R Inheritors \u00b6 Name RealOpaPolicyEngine Extensions \u00b6 Name Summary evaluate [jvm] inline fun < R : OpaResponse > OpaPolicyEngine . evaluate (document: String ): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. [jvm] inline fun < T : OpaRequest , R : OpaResponse > OpaPolicyEngine . evaluate (document: String , input: T ): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"OpaPolicyEngine - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/#opapolicyengine","text":"[jvm]\\ interface OpaPolicyEngine","title":"OpaPolicyEngine"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/#functions","text":"Name Summary evaluateNoInput [jvm] abstract fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R evaluateWithInput [jvm] abstract fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R","title":"Functions"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/#inheritors","text":"Name RealOpaPolicyEngine","title":"Inheritors"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/#extensions","text":"Name Summary evaluate [jvm] inline fun < R : OpaResponse > OpaPolicyEngine . evaluate (document: String ): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. [jvm] inline fun < T : OpaRequest , R : OpaResponse > OpaPolicyEngine . evaluate (document: String , input: T ): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"Extensions"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/evaluate-no-input/","text":"// misk-policy / misk.policy.opa / OpaPolicyEngine / evaluateNoInput evaluateNoInput \u00b6 [jvm]\\ abstract fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R","title":"evaluateNoInput - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/evaluate-no-input/#evaluatenoinput","text":"[jvm]\\ abstract fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R","title":"evaluateNoInput"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/evaluate-with-input/","text":"// misk-policy / misk.policy.opa / OpaPolicyEngine / evaluateWithInput evaluateWithInput \u00b6 [jvm]\\ abstract fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R","title":"evaluateWithInput - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-policy-engine/evaluate-with-input/#evaluatewithinput","text":"[jvm]\\ abstract fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R","title":"evaluateWithInput"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-request/","text":"// misk-policy / misk.policy.opa / OpaRequest OpaRequest \u00b6 [jvm]\\ interface OpaRequest","title":"OpaRequest - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-request/#oparequest","text":"[jvm]\\ interface OpaRequest","title":"OpaRequest"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-response/","text":"// misk-policy / misk.policy.opa / OpaResponse OpaResponse \u00b6 [jvm]\\ interface OpaResponse","title":"OpaResponse - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-opa-response/#oparesponse","text":"[jvm]\\ interface OpaResponse","title":"OpaResponse"},{"location":"0.x/misk-policy/misk.policy.opa/-policy-engine-exception/","text":"// misk-policy / misk.policy.opa / PolicyEngineException PolicyEngineException \u00b6 [jvm]\\ class PolicyEngineException (message: String , cause: Throwable ?) : Exception Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"PolicyEngineException - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-policy-engine-exception/#policyengineexception","text":"[jvm]\\ class PolicyEngineException (message: String , cause: Throwable ?) : Exception","title":"PolicyEngineException"},{"location":"0.x/misk-policy/misk.policy.opa/-policy-engine-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-policy/misk.policy.opa/-policy-engine-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-policy/misk.policy.opa/-policy-engine-exception/-policy-engine-exception/","text":"// misk-policy / misk.policy.opa / PolicyEngineException / PolicyEngineException PolicyEngineException \u00b6 [jvm]\\ fun PolicyEngineException (message: String , cause: Throwable ? = null)","title":"PolicyEngineException - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-policy-engine-exception/-policy-engine-exception/#policyengineexception","text":"[jvm]\\ fun PolicyEngineException (message: String , cause: Throwable ? = null)","title":"PolicyEngineException"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/","text":"// misk-policy / misk.policy.opa / RealOpaPolicyEngine RealOpaPolicyEngine \u00b6 [jvm]\\ class RealOpaPolicyEngine @Injectconstructor(opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi) : OpaPolicyEngine Support for the Open Policy Engine (OPA). OPA provides a means to decouple policy from business logic. The resulting query response may have arbitrary shapes. Constructors \u00b6 RealOpaPolicyEngine [jvm] @Inject fun RealOpaPolicyEngine (opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi) Functions \u00b6 Name Summary evaluateNoInput [jvm] open override fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. evaluateWithInput [jvm] open override fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"RealOpaPolicyEngine - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/#realopapolicyengine","text":"[jvm]\\ class RealOpaPolicyEngine @Injectconstructor(opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi) : OpaPolicyEngine Support for the Open Policy Engine (OPA). OPA provides a means to decouple policy from business logic. The resulting query response may have arbitrary shapes.","title":"RealOpaPolicyEngine"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/#constructors","text":"RealOpaPolicyEngine [jvm] @Inject fun RealOpaPolicyEngine (opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi)","title":"Constructors"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/#functions","text":"Name Summary evaluateNoInput [jvm] open override fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. evaluateWithInput [jvm] open override fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"Functions"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/-real-opa-policy-engine/","text":"// misk-policy / misk.policy.opa / RealOpaPolicyEngine / RealOpaPolicyEngine RealOpaPolicyEngine \u00b6 [jvm]\\ @Inject fun RealOpaPolicyEngine (opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi)","title":"RealOpaPolicyEngine - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/-real-opa-policy-engine/#realopapolicyengine","text":"[jvm]\\ @Inject fun RealOpaPolicyEngine (opaApi: OpaApi , @Named(value = \u201copa-moshi\u201d)moshi: Moshi)","title":"RealOpaPolicyEngine"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-no-input/","text":"// misk-policy / misk.policy.opa / RealOpaPolicyEngine / evaluateNoInput evaluateNoInput \u00b6 [jvm]\\ open override fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. Return \u00b6 Response shape R from OPA. Parameters \u00b6 jvm document Name or Path of the OPA document to query. returnType Shape of response to be demarshelled from OPA Throws \u00b6 misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified.","title":"evaluateNoInput - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-no-input/#evaluatenoinput","text":"[jvm]\\ open override fun < R : OpaResponse > evaluateNoInput (document: String , returnType: Class < R >): R Evaluate / Query a document with no additional input. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"evaluateNoInput"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-no-input/#return","text":"Response shape R from OPA.","title":"Return"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-no-input/#parameters","text":"jvm document Name or Path of the OPA document to query. returnType Shape of response to be demarshelled from OPA","title":"Parameters"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-no-input/#throws","text":"misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified.","title":"Throws"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-with-input/","text":"// misk-policy / misk.policy.opa / RealOpaPolicyEngine / evaluateWithInput evaluateWithInput \u00b6 [jvm]\\ open override fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST. Return \u00b6 Response shape R from OPA. Parameters \u00b6 jvm document Name or Path of the OPA document to query. input Input data to be supplied to OPA at evaluation time (the input global field). inputType Input shape to be JSONified for OPA returnType Return shape to be JSONified from OPA Throws \u00b6 misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified.","title":"evaluateWithInput - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-with-input/#evaluatewithinput","text":"[jvm]\\ open override fun < T : OpaRequest , R : OpaResponse > evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R Evaluate / Query a document with given input of shape T. This will connect to OPA via a retrofit interface and perform a /v1/data/{document} POST.","title":"evaluateWithInput"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-with-input/#return","text":"Response shape R from OPA.","title":"Return"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-with-input/#parameters","text":"jvm document Name or Path of the OPA document to query. input Input data to be supplied to OPA at evaluation time (the input global field). inputType Input shape to be JSONified for OPA returnType Return shape to be JSONified from OPA","title":"Parameters"},{"location":"0.x/misk-policy/misk.policy.opa/-real-opa-policy-engine/evaluate-with-input/#throws","text":"misk.policy.opa.PolicyEngineException if the request to OPA failed or the response shape didn\u2019t match R. kotlin.IllegalArgumentException if no document path was specified.","title":"Throws"},{"location":"0.x/misk-policy/misk.policy.opa/-request/","text":"// misk-policy / misk.policy.opa / Request Request \u00b6 [jvm]\\ data class Request < T >(input: T ) OPA Request wrapper. Constructors \u00b6 Request [jvm] fun < T > Request (input: T ) Properties \u00b6 Name Summary input [jvm] val input : T","title":"Request - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-request/#request","text":"[jvm]\\ data class Request < T >(input: T ) OPA Request wrapper.","title":"Request"},{"location":"0.x/misk-policy/misk.policy.opa/-request/#constructors","text":"Request [jvm] fun < T > Request (input: T )","title":"Constructors"},{"location":"0.x/misk-policy/misk.policy.opa/-request/#properties","text":"Name Summary input [jvm] val input : T","title":"Properties"},{"location":"0.x/misk-policy/misk.policy.opa/-request/-request/","text":"// misk-policy / misk.policy.opa / Request / Request Request \u00b6 [jvm]\\ fun < T > Request (input: T )","title":"Request - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-request/-request/#request","text":"[jvm]\\ fun < T > Request (input: T )","title":"Request"},{"location":"0.x/misk-policy/misk.policy.opa/-request/input/","text":"// misk-policy / misk.policy.opa / Request / input input \u00b6 [jvm]\\ val input : T","title":"input - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-request/input/#input","text":"[jvm]\\ val input : T","title":"input"},{"location":"0.x/misk-policy/misk.policy.opa/-response/","text":"// misk-policy / misk.policy.opa / Response Response \u00b6 [jvm]\\ data class Response < T >(decision_id: String ?, result: T ?) OPA Response wrapper. Every response has this standard shape, made concrete by the expected response type. Constructors \u00b6 Response [jvm] fun < T > Response (decision_id: String ?, result: T ?) Properties \u00b6 Name Summary decision_id [jvm] val decision_id : String ? result [jvm] val result : T ?","title":"Response - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-response/#response","text":"[jvm]\\ data class Response < T >(decision_id: String ?, result: T ?) OPA Response wrapper. Every response has this standard shape, made concrete by the expected response type.","title":"Response"},{"location":"0.x/misk-policy/misk.policy.opa/-response/#constructors","text":"Response [jvm] fun < T > Response (decision_id: String ?, result: T ?)","title":"Constructors"},{"location":"0.x/misk-policy/misk.policy.opa/-response/#properties","text":"Name Summary decision_id [jvm] val decision_id : String ? result [jvm] val result : T ?","title":"Properties"},{"location":"0.x/misk-policy/misk.policy.opa/-response/-response/","text":"// misk-policy / misk.policy.opa / Response / Response Response \u00b6 [jvm]\\ fun < T > Response (decision_id: String ?, result: T ?)","title":"Response - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-response/-response/#response","text":"[jvm]\\ fun < T > Response (decision_id: String ?, result: T ?)","title":"Response"},{"location":"0.x/misk-policy/misk.policy.opa/-response/decision_id/","text":"// misk-policy / misk.policy.opa / Response / decision_id decision_id \u00b6 [jvm]\\ val decision_id : String ?","title":"decision_id - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-response/decision_id/#decision_id","text":"[jvm]\\ val decision_id : String ?","title":"decision_id"},{"location":"0.x/misk-policy/misk.policy.opa/-response/result/","text":"// misk-policy / misk.policy.opa / Response / result result \u00b6 [jvm]\\ val result : T ?","title":"result - Misk"},{"location":"0.x/misk-policy/misk.policy.opa/-response/result/#result","text":"[jvm]\\ val result : T ?","title":"result"},{"location":"0.x/misk-policy-testing/misk.policy.opa/","text":"// misk-policy-testing / misk.policy.opa Package misk.policy.opa \u00b6 Types \u00b6 Name Summary FakeOpaModule [jvm] class FakeOpaModule @Injectconstructor : KAbstractModule FakeOpaPolicyEngine [jvm] @Singleton class FakeOpaPolicyEngine @Injectconstructor : OpaPolicyEngine LocalOpaService [jvm] class LocalOpaService (policyPath: String , withLogging: Boolean ) : AbstractIdleService OpaDevelopmentModule [jvm] class OpaDevelopmentModule (policyDirectory: String , withLogging: Boolean ) : KAbstractModule","title":"Package misk.policy.opa - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/#package-miskpolicyopa","text":"","title":"Package misk.policy.opa"},{"location":"0.x/misk-policy-testing/misk.policy.opa/#types","text":"Name Summary FakeOpaModule [jvm] class FakeOpaModule @Injectconstructor : KAbstractModule FakeOpaPolicyEngine [jvm] @Singleton class FakeOpaPolicyEngine @Injectconstructor : OpaPolicyEngine LocalOpaService [jvm] class LocalOpaService (policyPath: String , withLogging: Boolean ) : AbstractIdleService OpaDevelopmentModule [jvm] class OpaDevelopmentModule (policyDirectory: String , withLogging: Boolean ) : KAbstractModule","title":"Types"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-module/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaModule FakeOpaModule \u00b6 [jvm]\\ class FakeOpaModule @Injectconstructor : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeOpaModule - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-module/#fakeopamodule","text":"[jvm]\\ class FakeOpaModule @Injectconstructor : KAbstractModule","title":"FakeOpaModule"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-module/-fake-opa-module/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaModule / FakeOpaModule FakeOpaModule \u00b6 [jvm]\\ @Inject fun FakeOpaModule ()","title":"FakeOpaModule - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-module/-fake-opa-module/#fakeopamodule","text":"[jvm]\\ @Inject fun FakeOpaModule ()","title":"FakeOpaModule"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaPolicyEngine FakeOpaPolicyEngine \u00b6 [jvm]\\ @Singleton class FakeOpaPolicyEngine @Injectconstructor : OpaPolicyEngine Functions \u00b6 Name Summary addOverride [jvm] fun addOverride (document: String , obj: OpaResponse) addOverrideForInput [jvm] fun addOverrideForInput (document: String , key: OpaRequest, obj: OpaResponse) evaluateNoInput [jvm] open override fun < R : OpaResponse> evaluateNoInput (document: String , returnType: Class < R >): R evaluateWithInput [jvm] open override fun < T : OpaRequest, R : OpaResponse> evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R","title":"FakeOpaPolicyEngine - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/#fakeopapolicyengine","text":"[jvm]\\ @Singleton class FakeOpaPolicyEngine @Injectconstructor : OpaPolicyEngine","title":"FakeOpaPolicyEngine"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/#functions","text":"Name Summary addOverride [jvm] fun addOverride (document: String , obj: OpaResponse) addOverrideForInput [jvm] fun addOverrideForInput (document: String , key: OpaRequest, obj: OpaResponse) evaluateNoInput [jvm] open override fun < R : OpaResponse> evaluateNoInput (document: String , returnType: Class < R >): R evaluateWithInput [jvm] open override fun < T : OpaRequest, R : OpaResponse> evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R","title":"Functions"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/-fake-opa-policy-engine/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaPolicyEngine / FakeOpaPolicyEngine FakeOpaPolicyEngine \u00b6 [jvm]\\ @Inject fun FakeOpaPolicyEngine ()","title":"FakeOpaPolicyEngine - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/-fake-opa-policy-engine/#fakeopapolicyengine","text":"[jvm]\\ @Inject fun FakeOpaPolicyEngine ()","title":"FakeOpaPolicyEngine"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/add-override-for-input/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaPolicyEngine / addOverrideForInput addOverrideForInput \u00b6 [jvm]\\ fun addOverrideForInput (document: String , key: OpaRequest, obj: OpaResponse)","title":"addOverrideForInput - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/add-override-for-input/#addoverrideforinput","text":"[jvm]\\ fun addOverrideForInput (document: String , key: OpaRequest, obj: OpaResponse)","title":"addOverrideForInput"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/add-override/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaPolicyEngine / addOverride addOverride \u00b6 [jvm]\\ fun addOverride (document: String , obj: OpaResponse)","title":"addOverride - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/add-override/#addoverride","text":"[jvm]\\ fun addOverride (document: String , obj: OpaResponse)","title":"addOverride"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/evaluate-no-input/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaPolicyEngine / evaluateNoInput evaluateNoInput \u00b6 [jvm]\\ open override fun < R : OpaResponse> evaluateNoInput (document: String , returnType: Class < R >): R","title":"evaluateNoInput - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/evaluate-no-input/#evaluatenoinput","text":"[jvm]\\ open override fun < R : OpaResponse> evaluateNoInput (document: String , returnType: Class < R >): R","title":"evaluateNoInput"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/evaluate-with-input/","text":"// misk-policy-testing / misk.policy.opa / FakeOpaPolicyEngine / evaluateWithInput evaluateWithInput \u00b6 [jvm]\\ open override fun < T : OpaRequest, R : OpaResponse> evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R","title":"evaluateWithInput - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-fake-opa-policy-engine/evaluate-with-input/#evaluatewithinput","text":"[jvm]\\ open override fun < T : OpaRequest, R : OpaResponse> evaluateWithInput (document: String , input: T , inputType: Class < T >, returnType: Class < R >): R","title":"evaluateWithInput"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService LocalOpaService \u00b6 [jvm]\\ class LocalOpaService (policyPath: String , withLogging: Boolean ) : AbstractIdleService Types \u00b6 Name Summary Callback [jvm] class Callback : ResultCallbackTemplate< LocalOpaService.Callback , Frame> Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"LocalOpaService - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/#localopaservice","text":"[jvm]\\ class LocalOpaService (policyPath: String , withLogging: Boolean ) : AbstractIdleService","title":"LocalOpaService"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/#types","text":"Name Summary Callback [jvm] class Callback : ResultCallbackTemplate< LocalOpaService.Callback , Frame> Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-local-opa-service/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / LocalOpaService LocalOpaService \u00b6 [jvm]\\ fun LocalOpaService (policyPath: String , withLogging: Boolean )","title":"LocalOpaService - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-local-opa-service/#localopaservice","text":"[jvm]\\ fun LocalOpaService (policyPath: String , withLogging: Boolean )","title":"LocalOpaService"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-callback/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Callback Callback \u00b6 [jvm]\\ class Callback : ResultCallbackTemplate< LocalOpaService.Callback , Frame> Functions \u00b6 Name Summary awaitCompletion [jvm] open fun awaitCompletion (): LocalOpaService.Callback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): LocalOpaService.Callback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"Callback - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-callback/#callback","text":"[jvm]\\ class Callback : ResultCallbackTemplate< LocalOpaService.Callback , Frame>","title":"Callback"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-callback/#functions","text":"Name Summary awaitCompletion [jvm] open fun awaitCompletion (): LocalOpaService.Callback open fun awaitCompletion (p0: Long , p1: TimeUnit ): Boolean awaitStarted [jvm] open fun awaitStarted (): LocalOpaService.Callback open fun awaitStarted (p0: Long , p1: TimeUnit ): Boolean close [jvm] open override fun close () onComplete [jvm] open override fun onComplete () onError [jvm] open override fun onError (p0: Throwable ) onNext [jvm] open override fun onNext (item: Frame) onStart [jvm] open override fun onStart (p0: Closeable ) throwFirstError [jvm] open fun throwFirstError ()","title":"Functions"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-callback/-callback/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Callback / Callback Callback \u00b6 [jvm]\\ fun Callback ()","title":"Callback - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-callback/-callback/#callback","text":"[jvm]\\ fun Callback ()","title":"Callback"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-callback/on-next/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Callback / onNext onNext \u00b6 [jvm]\\ open override fun onNext (item: Frame)","title":"onNext - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-callback/on-next/#onnext","text":"[jvm]\\ open override fun onNext (item: Frame)","title":"onNext"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary DEFAULT_POLICY_DIRECTORY [jvm] const val DEFAULT_POLICY_DIRECTORY : String OPA_CONTAINER_NAME [jvm] const val OPA_CONTAINER_NAME : String OPA_DOCKER_IMAGE [jvm] const val OPA_DOCKER_IMAGE : String OPA_EXPOSED_PORT [jvm] const val OPA_EXPOSED_PORT : Int = 8181","title":"Companion - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/#properties","text":"Name Summary DEFAULT_POLICY_DIRECTORY [jvm] const val DEFAULT_POLICY_DIRECTORY : String OPA_CONTAINER_NAME [jvm] const val OPA_CONTAINER_NAME : String OPA_DOCKER_IMAGE [jvm] const val OPA_DOCKER_IMAGE : String OPA_EXPOSED_PORT [jvm] const val OPA_EXPOSED_PORT : Int = 8181","title":"Properties"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-d-e-f-a-u-l-t_-p-o-l-i-c-y_-d-i-r-e-c-t-o-r-y/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Companion / DEFAULT_POLICY_DIRECTORY DEFAULT_POLICY_DIRECTORY \u00b6 [jvm]\\ const val DEFAULT_POLICY_DIRECTORY : String","title":"DEFAULT_POLICY_DIRECTORY - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-d-e-f-a-u-l-t_-p-o-l-i-c-y_-d-i-r-e-c-t-o-r-y/#default_policy_directory","text":"[jvm]\\ const val DEFAULT_POLICY_DIRECTORY : String","title":"DEFAULT_POLICY_DIRECTORY"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-o-p-a_-c-o-n-t-a-i-n-e-r_-n-a-m-e/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Companion / OPA_CONTAINER_NAME OPA_CONTAINER_NAME \u00b6 [jvm]\\ const val OPA_CONTAINER_NAME : String","title":"OPA_CONTAINER_NAME - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-o-p-a_-c-o-n-t-a-i-n-e-r_-n-a-m-e/#opa_container_name","text":"[jvm]\\ const val OPA_CONTAINER_NAME : String","title":"OPA_CONTAINER_NAME"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-o-p-a_-d-o-c-k-e-r_-i-m-a-g-e/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Companion / OPA_DOCKER_IMAGE OPA_DOCKER_IMAGE \u00b6 [jvm]\\ const val OPA_DOCKER_IMAGE : String","title":"OPA_DOCKER_IMAGE - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-o-p-a_-d-o-c-k-e-r_-i-m-a-g-e/#opa_docker_image","text":"[jvm]\\ const val OPA_DOCKER_IMAGE : String","title":"OPA_DOCKER_IMAGE"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-o-p-a_-e-x-p-o-s-e-d_-p-o-r-t/","text":"// misk-policy-testing / misk.policy.opa / LocalOpaService / Companion / OPA_EXPOSED_PORT OPA_EXPOSED_PORT \u00b6 [jvm]\\ const val OPA_EXPOSED_PORT : Int = 8181","title":"OPA_EXPOSED_PORT - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-local-opa-service/-companion/-o-p-a_-e-x-p-o-s-e-d_-p-o-r-t/#opa_exposed_port","text":"[jvm]\\ const val OPA_EXPOSED_PORT : Int = 8181","title":"OPA_EXPOSED_PORT"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-opa-development-module/","text":"// misk-policy-testing / misk.policy.opa / OpaDevelopmentModule OpaDevelopmentModule \u00b6 [jvm]\\ class OpaDevelopmentModule (policyDirectory: String , withLogging: Boolean ) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"OpaDevelopmentModule - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-opa-development-module/#opadevelopmentmodule","text":"[jvm]\\ class OpaDevelopmentModule (policyDirectory: String , withLogging: Boolean ) : KAbstractModule","title":"OpaDevelopmentModule"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-opa-development-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-opa-development-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-opa-development-module/-opa-development-module/","text":"// misk-policy-testing / misk.policy.opa / OpaDevelopmentModule / OpaDevelopmentModule OpaDevelopmentModule \u00b6 [jvm]\\ fun OpaDevelopmentModule (policyDirectory: String = DEFAULT_POLICY_DIRECTORY, withLogging: Boolean = false)","title":"OpaDevelopmentModule - Misk"},{"location":"0.x/misk-policy-testing/misk.policy.opa/-opa-development-module/-opa-development-module/#opadevelopmentmodule","text":"[jvm]\\ fun OpaDevelopmentModule (policyDirectory: String = DEFAULT_POLICY_DIRECTORY, withLogging: Boolean = false)","title":"OpaDevelopmentModule"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/","text":"// misk-prometheus / misk.metrics.backends.prometheus Package misk.metrics.backends.prometheus \u00b6 Types \u00b6 Name Summary PrometheusConfig [jvm] data class PrometheusConfig (hostname: String ?, http_port: Int , max_age_in_seconds: Long ?) : Config Configuration for exporting metrics to prometheus PrometheusHttpService [jvm] @Singleton class PrometheusHttpService : AbstractIdleService PrometheusMetricsClientModule [jvm] class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation whose metrics don\u2019t write to a Prometheus infrastructure. For that you should install PrometheusMetricsServiceModule . PrometheusMetricsServiceModule [jvm] class PrometheusMetricsServiceModule (config: PrometheusConfig ) : KAbstractModule Exposes prometheus metrics over a dedicated port. Allows internal metrics to be exposed via a k8s ClusterIP address, where they can be scraped by a cluster local Prometheus server without also exposing them to the outside world via the port bound to the service load balancer. If using the prometheus operator, one would generally create a k8s ClusterIP service exporting the metrics port, then a prometheus ServiceMonitor selecting that service via a label.","title":"Package misk.metrics.backends.prometheus - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/#package-miskmetricsbackendsprometheus","text":"","title":"Package misk.metrics.backends.prometheus"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/#types","text":"Name Summary PrometheusConfig [jvm] data class PrometheusConfig (hostname: String ?, http_port: Int , max_age_in_seconds: Long ?) : Config Configuration for exporting metrics to prometheus PrometheusHttpService [jvm] @Singleton class PrometheusHttpService : AbstractIdleService PrometheusMetricsClientModule [jvm] class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation whose metrics don\u2019t write to a Prometheus infrastructure. For that you should install PrometheusMetricsServiceModule . PrometheusMetricsServiceModule [jvm] class PrometheusMetricsServiceModule (config: PrometheusConfig ) : KAbstractModule Exposes prometheus metrics over a dedicated port. Allows internal metrics to be exposed via a k8s ClusterIP address, where they can be scraped by a cluster local Prometheus server without also exposing them to the outside world via the port bound to the service load balancer. If using the prometheus operator, one would generally create a k8s ClusterIP service exporting the metrics port, then a prometheus ServiceMonitor selecting that service via a label.","title":"Types"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusConfig PrometheusConfig \u00b6 [jvm]\\ data class PrometheusConfig (hostname: String ?, http_port: Int , max_age_in_seconds: Long ?) : Config Configuration for exporting metrics to prometheus Constructors \u00b6 PrometheusConfig [jvm] @Inject fun PrometheusConfig () PrometheusConfig [jvm] fun PrometheusConfig (hostname: String ? = null, http_port: Int = 9102, max_age_in_seconds: Long ? = null) Properties \u00b6 Name Summary hostname [jvm] val hostname : String ? = null http_port [jvm] val http_port : Int = 9102 max_age_in_seconds [jvm] val max_age_in_seconds : Long ? = null","title":"PrometheusConfig - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/#prometheusconfig","text":"[jvm]\\ data class PrometheusConfig (hostname: String ?, http_port: Int , max_age_in_seconds: Long ?) : Config Configuration for exporting metrics to prometheus","title":"PrometheusConfig"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/#constructors","text":"PrometheusConfig [jvm] @Inject fun PrometheusConfig () PrometheusConfig [jvm] fun PrometheusConfig (hostname: String ? = null, http_port: Int = 9102, max_age_in_seconds: Long ? = null)","title":"Constructors"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/#properties","text":"Name Summary hostname [jvm] val hostname : String ? = null http_port [jvm] val http_port : Int = 9102 max_age_in_seconds [jvm] val max_age_in_seconds : Long ? = null","title":"Properties"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/-prometheus-config/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusConfig / PrometheusConfig PrometheusConfig \u00b6 [jvm]\\ @Inject fun PrometheusConfig () fun PrometheusConfig (hostname: String ? = null, http_port: Int = 9102, max_age_in_seconds: Long ? = null)","title":"PrometheusConfig - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/-prometheus-config/#prometheusconfig","text":"[jvm]\\ @Inject fun PrometheusConfig () fun PrometheusConfig (hostname: String ? = null, http_port: Int = 9102, max_age_in_seconds: Long ? = null)","title":"PrometheusConfig"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/hostname/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusConfig / hostname hostname \u00b6 [jvm]\\ val hostname : String ? = null","title":"hostname - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/hostname/#hostname","text":"[jvm]\\ val hostname : String ? = null","title":"hostname"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/http_port/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusConfig / http_port http_port \u00b6 [jvm]\\ val http_port : Int = 9102","title":"http_port - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/http_port/#http_port","text":"[jvm]\\ val http_port : Int = 9102","title":"http_port"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/max_age_in_seconds/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusConfig / max_age_in_seconds max_age_in_seconds \u00b6 [jvm]\\ val max_age_in_seconds : Long ? = null","title":"max_age_in_seconds - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-config/max_age_in_seconds/#max_age_in_seconds","text":"[jvm]\\ val max_age_in_seconds : Long ? = null","title":"max_age_in_seconds"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-http-service/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusHttpService PrometheusHttpService \u00b6 [jvm]\\ @Singleton class PrometheusHttpService : AbstractIdleService Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"PrometheusHttpService - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-http-service/#prometheushttpservice","text":"[jvm]\\ @Singleton class PrometheusHttpService : AbstractIdleService","title":"PrometheusHttpService"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-http-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-client-module/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusMetricsClientModule PrometheusMetricsClientModule \u00b6 [jvm]\\ class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation whose metrics don\u2019t write to a Prometheus infrastructure. For that you should install PrometheusMetricsServiceModule . Constructors \u00b6 PrometheusMetricsClientModule [jvm] fun PrometheusMetricsClientModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"PrometheusMetricsClientModule - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-client-module/#prometheusmetricsclientmodule","text":"[jvm]\\ class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation whose metrics don\u2019t write to a Prometheus infrastructure. For that you should install PrometheusMetricsServiceModule .","title":"PrometheusMetricsClientModule"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-client-module/#constructors","text":"PrometheusMetricsClientModule [jvm] fun PrometheusMetricsClientModule ()","title":"Constructors"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-client-module/-prometheus-metrics-client-module/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusMetricsClientModule / PrometheusMetricsClientModule PrometheusMetricsClientModule \u00b6 [jvm]\\ fun PrometheusMetricsClientModule ()","title":"PrometheusMetricsClientModule - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-client-module/-prometheus-metrics-client-module/#prometheusmetricsclientmodule","text":"[jvm]\\ fun PrometheusMetricsClientModule ()","title":"PrometheusMetricsClientModule"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-service-module/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusMetricsServiceModule PrometheusMetricsServiceModule \u00b6 [jvm]\\ class PrometheusMetricsServiceModule (config: PrometheusConfig ) : KAbstractModule Exposes prometheus metrics over a dedicated port. Allows internal metrics to be exposed via a k8s ClusterIP address, where they can be scraped by a cluster local Prometheus server without also exposing them to the outside world via the port bound to the service load balancer. If using the prometheus operator, one would generally create a k8s ClusterIP service exporting the metrics port, then a prometheus ServiceMonitor selecting that service via a label. Constructors \u00b6 PrometheusMetricsServiceModule [jvm] fun PrometheusMetricsServiceModule (config: PrometheusConfig ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"PrometheusMetricsServiceModule - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-service-module/#prometheusmetricsservicemodule","text":"[jvm]\\ class PrometheusMetricsServiceModule (config: PrometheusConfig ) : KAbstractModule Exposes prometheus metrics over a dedicated port. Allows internal metrics to be exposed via a k8s ClusterIP address, where they can be scraped by a cluster local Prometheus server without also exposing them to the outside world via the port bound to the service load balancer. If using the prometheus operator, one would generally create a k8s ClusterIP service exporting the metrics port, then a prometheus ServiceMonitor selecting that service via a label.","title":"PrometheusMetricsServiceModule"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-service-module/#constructors","text":"PrometheusMetricsServiceModule [jvm] fun PrometheusMetricsServiceModule (config: PrometheusConfig )","title":"Constructors"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-service-module/-prometheus-metrics-service-module/","text":"// misk-prometheus / misk.metrics.backends.prometheus / PrometheusMetricsServiceModule / PrometheusMetricsServiceModule PrometheusMetricsServiceModule \u00b6 [jvm]\\ fun PrometheusMetricsServiceModule (config: PrometheusConfig )","title":"PrometheusMetricsServiceModule - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus/-prometheus-metrics-service-module/-prometheus-metrics-service-module/#prometheusmetricsservicemodule","text":"[jvm]\\ fun PrometheusMetricsServiceModule (config: PrometheusConfig )","title":"PrometheusMetricsServiceModule"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/","text":"// misk-prometheus / misk.metrics.backends.prometheus.v2 Package misk.metrics.backends.prometheus.v2 \u00b6 Types \u00b6 Name Summary PrometheusMetricsClientModule [jvm] class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation.","title":"Package misk.metrics.backends.prometheus.v2 - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/#package-miskmetricsbackendsprometheusv2","text":"","title":"Package misk.metrics.backends.prometheus.v2"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/#types","text":"Name Summary PrometheusMetricsClientModule [jvm] class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation.","title":"Types"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/-prometheus-metrics-client-module/","text":"// misk-prometheus / misk.metrics.backends.prometheus.v2 / PrometheusMetricsClientModule PrometheusMetricsClientModule \u00b6 [jvm]\\ class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation. Constructors \u00b6 PrometheusMetricsClientModule [jvm] fun PrometheusMetricsClientModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"PrometheusMetricsClientModule - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/-prometheus-metrics-client-module/#prometheusmetricsclientmodule","text":"[jvm]\\ class PrometheusMetricsClientModule : KAbstractModule Binds a Metrics implementation.","title":"PrometheusMetricsClientModule"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/-prometheus-metrics-client-module/#constructors","text":"PrometheusMetricsClientModule [jvm] fun PrometheusMetricsClientModule ()","title":"Constructors"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/-prometheus-metrics-client-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/-prometheus-metrics-client-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/-prometheus-metrics-client-module/-prometheus-metrics-client-module/","text":"// misk-prometheus / misk.metrics.backends.prometheus.v2 / PrometheusMetricsClientModule / PrometheusMetricsClientModule PrometheusMetricsClientModule \u00b6 [jvm]\\ fun PrometheusMetricsClientModule ()","title":"PrometheusMetricsClientModule - Misk"},{"location":"0.x/misk-prometheus/misk.metrics.backends.prometheus.v2/-prometheus-metrics-client-module/-prometheus-metrics-client-module/#prometheusmetricsclientmodule","text":"[jvm]\\ fun PrometheusMetricsClientModule ()","title":"PrometheusMetricsClientModule"},{"location":"0.x/misk-redis/misk.redis/","text":"// misk-redis / misk.redis Package misk.redis \u00b6 Types \u00b6 Name Summary FakeRedis [jvm] class FakeRedis : Redis Mimics a Redis instance for testing. RealRedis [jvm] class RealRedis (jedisPool: JedisPool) : Redis For each command, a Jedis instance is retrieved from the pool and returned once the command has been issued. Redis [jvm] interface Redis A Redis client. RedisConfig [jvm] class RedisConfig : LinkedHashMap < String , RedisReplicationGroupConfig > , Config RedisConnectionException [jvm] class RedisConnectionException (cluster: String , cause: Throwable ) : RuntimeException RedisModule [jvm] class RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig) : KAbstractModule Configures a JedisPool to connect to a Redis instance. The use of a JedisPool ensures thread safety. See: https://github.com/xetorthio/jedis/wiki/Getting-started#using-jedis-in-a-multithreaded-environment RedisNodeConfig [jvm] data class RedisNodeConfig (hostname: String , port: Int ) RedisReplicationGroupConfig [jvm] data class RedisReplicationGroupConfig (writer_endpoint: RedisNodeConfig , reader_endpoint: RedisNodeConfig , redis_auth_password: String , timeout_ms: Int ) RedisService [jvm] @Singleton class RedisService : AbstractIdleService Controls the connection lifecycle for Redis. RedisTestModule [jvm] class RedisTestModule : KAbstractModule","title":"Package misk.redis - Misk"},{"location":"0.x/misk-redis/misk.redis/#package-miskredis","text":"","title":"Package misk.redis"},{"location":"0.x/misk-redis/misk.redis/#types","text":"Name Summary FakeRedis [jvm] class FakeRedis : Redis Mimics a Redis instance for testing. RealRedis [jvm] class RealRedis (jedisPool: JedisPool) : Redis For each command, a Jedis instance is retrieved from the pool and returned once the command has been issued. Redis [jvm] interface Redis A Redis client. RedisConfig [jvm] class RedisConfig : LinkedHashMap < String , RedisReplicationGroupConfig > , Config RedisConnectionException [jvm] class RedisConnectionException (cluster: String , cause: Throwable ) : RuntimeException RedisModule [jvm] class RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig) : KAbstractModule Configures a JedisPool to connect to a Redis instance. The use of a JedisPool ensures thread safety. See: https://github.com/xetorthio/jedis/wiki/Getting-started#using-jedis-in-a-multithreaded-environment RedisNodeConfig [jvm] data class RedisNodeConfig (hostname: String , port: Int ) RedisReplicationGroupConfig [jvm] data class RedisReplicationGroupConfig (writer_endpoint: RedisNodeConfig , reader_endpoint: RedisNodeConfig , redis_auth_password: String , timeout_ms: Int ) RedisService [jvm] @Singleton class RedisService : AbstractIdleService Controls the connection lifecycle for Redis. RedisTestModule [jvm] class RedisTestModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/","text":"// misk-redis / misk.redis / FakeRedis FakeRedis \u00b6 [jvm]\\ class FakeRedis : Redis Mimics a Redis instance for testing. Constructors \u00b6 FakeRedis [jvm] fun FakeRedis () Functions \u00b6 Name Summary del [jvm] open override fun del (vararg keys: String ): Int Deletes multiple keys. [jvm] open override fun del (key: String ): Boolean Deletes a single key. expire [jvm] open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. expireAt [jvm] open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. get [jvm] open operator override fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString. hdel [jvm] open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields hget [jvm] open override fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString. hgetAll [jvm] open override fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found. hincrBy [jvm] open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. hmget [jvm] open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. hset [jvm] open override fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields [jvm] open override fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field incr [jvm] open override fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. incrBy [jvm] open override fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. mget [jvm] open override fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys. mset [jvm] open override fun mset (vararg keyValues: ByteString) Sets the key value pairs. multi [jvm] open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC. pExpire [jvm] open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. pExpireAt [jvm] open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. pipelined [jvm] open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance set [jvm] open operator override fun set (key: String , value: ByteString) Sets the ByteString value for the given key. [jvm] open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date. setnx [jvm] open override fun setnx (key: String , value: ByteString) open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist. unwatch [jvm] open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH. watch [jvm] open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction. Properties \u00b6 Name Summary clock [jvm] @Inject lateinit var clock : Clock","title":"FakeRedis - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/#fakeredis","text":"[jvm]\\ class FakeRedis : Redis Mimics a Redis instance for testing.","title":"FakeRedis"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/#constructors","text":"FakeRedis [jvm] fun FakeRedis ()","title":"Constructors"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/#functions","text":"Name Summary del [jvm] open override fun del (vararg keys: String ): Int Deletes multiple keys. [jvm] open override fun del (key: String ): Boolean Deletes a single key. expire [jvm] open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. expireAt [jvm] open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. get [jvm] open operator override fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString. hdel [jvm] open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields hget [jvm] open override fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString. hgetAll [jvm] open override fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found. hincrBy [jvm] open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. hmget [jvm] open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. hset [jvm] open override fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields [jvm] open override fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field incr [jvm] open override fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. incrBy [jvm] open override fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. mget [jvm] open override fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys. mset [jvm] open override fun mset (vararg keyValues: ByteString) Sets the key value pairs. multi [jvm] open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC. pExpire [jvm] open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. pExpireAt [jvm] open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. pipelined [jvm] open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance set [jvm] open operator override fun set (key: String , value: ByteString) Sets the ByteString value for the given key. [jvm] open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date. setnx [jvm] open override fun setnx (key: String , value: ByteString) open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist. unwatch [jvm] open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH. watch [jvm] open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/#properties","text":"Name Summary clock [jvm] @Inject lateinit var clock : Clock","title":"Properties"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/-fake-redis/","text":"// misk-redis / misk.redis / FakeRedis / FakeRedis FakeRedis \u00b6 [jvm]\\ fun FakeRedis ()","title":"FakeRedis - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/-fake-redis/#fakeredis","text":"[jvm]\\ fun FakeRedis ()","title":"FakeRedis"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/clock/","text":"// misk-redis / misk.redis / FakeRedis / clock clock \u00b6 [jvm]\\ @Inject lateinit var clock : Clock","title":"clock - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/clock/#clock","text":"[jvm]\\ @Inject lateinit var clock : Clock","title":"clock"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/del/","text":"// misk-redis / misk.redis / FakeRedis / del del \u00b6 [jvm]\\ open override fun del (key: String ): Boolean Deletes a single key. Return \u00b6 false if the key was not deleted, true if the key was deleted Parameters \u00b6 jvm key the key to delete [jvm]\\ open override fun del (vararg keys: String ): Int Deletes multiple keys. Return \u00b6 0 if none of the keys were deleted, otherwise a positive integer representing the number of keys that were deleted Parameters \u00b6 jvm keys the keys to delete","title":"del - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/del/#del","text":"[jvm]\\ open override fun del (key: String ): Boolean Deletes a single key.","title":"del"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/del/#return","text":"false if the key was not deleted, true if the key was deleted","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/del/#parameters","text":"jvm key the key to delete [jvm]\\ open override fun del (vararg keys: String ): Int Deletes multiple keys.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/del/#return_1","text":"0 if none of the keys were deleted, otherwise a positive integer representing the number of keys that were deleted","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/del/#parameters_1","text":"jvm keys the keys to delete","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/expire-at/","text":"// misk-redis / misk.redis / FakeRedis / expireAt expireAt \u00b6 [jvm]\\ open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. Please for the specific semantics of the command refer to the documentation of expire . Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"expireAt - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/expire-at/#expireat","text":"[jvm]\\ open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. Please for the specific semantics of the command refer to the documentation of expire .","title":"expireAt"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/expire-at/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/expire/","text":"// misk-redis / misk.redis / FakeRedis / expire expire \u00b6 [jvm]\\ open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. The timeout will only be cleared by commands that delete or overwrite the contents of the key, including del , set , GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with incr , pushing a new value into a list with LPUSH, or altering the field value of a hash with hset are all operations that will leave the timeout untouched. The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command. If a key is renamed with RENAME, the associated time to live is transferred to the new key name. If a key is overwritten by RENAME, like in the case of an existing key Key_A that is overwritten by a call like RENAME Key_B Key_A, it does not matter if the original Key_A had a timeout associated or not, the new key Key_A will inherit all the characteristics of Key_B. Note that calling expire / pExpire with a non-positive timeout or expireAt / pExpireAt with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired). Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"expire - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/expire/#expire","text":"[jvm]\\ open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. The timeout will only be cleared by commands that delete or overwrite the contents of the key, including del , set , GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with incr , pushing a new value into a list with LPUSH, or altering the field value of a hash with hset are all operations that will leave the timeout untouched. The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command. If a key is renamed with RENAME, the associated time to live is transferred to the new key name. If a key is overwritten by RENAME, like in the case of an existing key Key_A that is overwritten by a call like RENAME Key_B Key_A, it does not matter if the original Key_A had a timeout associated or not, the new key Key_A will inherit all the characteristics of Key_B. Note that calling expire / pExpire with a non-positive timeout or expireAt / pExpireAt with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired).","title":"expire"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/expire/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/get/","text":"// misk-redis / misk.redis / FakeRedis / get get \u00b6 [jvm]\\ open operator override fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString. Return \u00b6 a ByteString if the key was found, null if the key was not found Parameters \u00b6 jvm key the key to retrieve","title":"get - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/get/#get","text":"[jvm]\\ open operator override fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString.","title":"get"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/get/#return","text":"a ByteString if the key was found, null if the key was not found","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/get/#parameters","text":"jvm key the key to retrieve","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hdel/","text":"// misk-redis / misk.redis / FakeRedis / hdel hdel \u00b6 [jvm]\\ open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields Return \u00b6 If the field was present in the hash it is deleted and 1 is returned, otherwise 0 is returned and no operation is performed. Parameters \u00b6 jvm key the key for which to delete fields fields the specific fields to delete","title":"hdel - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hdel/#hdel","text":"[jvm]\\ open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields","title":"hdel"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hdel/#return","text":"If the field was present in the hash it is deleted and 1 is returned, otherwise 0 is returned and no operation is performed.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hdel/#parameters","text":"jvm key the key for which to delete fields fields the specific fields to delete","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget-all/","text":"// misk-redis / misk.redis / FakeRedis / hgetAll hgetAll \u00b6 [jvm]\\ open override fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found. Return \u00b6 a Map of the fields to their associated values Parameters \u00b6 jvm key the key","title":"hgetAll - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget-all/#hgetall","text":"[jvm]\\ open override fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found.","title":"hgetAll"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget-all/#return","text":"a Map of the fields to their associated values","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget-all/#parameters","text":"jvm key the key","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget/","text":"// misk-redis / misk.redis / FakeRedis / hget hget \u00b6 [jvm]\\ open override fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString. Return \u00b6 a ByteString if the key/field combination was found, null if not found Parameters \u00b6 jvm key the key field the field","title":"hget - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget/#hget","text":"[jvm]\\ open override fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString.","title":"hget"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget/#return","text":"a ByteString if the key/field combination was found, null if not found","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hget/#parameters","text":"jvm key the key field the field","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hincr-by/","text":"// misk-redis / misk.redis / FakeRedis / hincrBy hincrBy \u00b6 [jvm]\\ open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. Return \u00b6 the value at field after the increment operation. Parameters \u00b6 jvm key the key. field the field.","title":"hincrBy - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hincr-by/#hincrby","text":"[jvm]\\ open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed.","title":"hincrBy"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hincr-by/#return","text":"the value at field after the increment operation.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hincr-by/#parameters","text":"jvm key the key. field the field.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hmget/","text":"// misk-redis / misk.redis / FakeRedis / hmget hmget \u00b6 [jvm]\\ open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. If some specified fields do not exist, nil values are returned. Non-existing keys are considered like empty hashes. Return \u00b6 a List of the values for the specific fields requested, in the same order of the request. Null for missing fields Parameters \u00b6 jvm key the key fields the specific fields to retrieve","title":"hmget - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hmget/#hmget","text":"[jvm]\\ open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. If some specified fields do not exist, nil values are returned. Non-existing keys are considered like empty hashes.","title":"hmget"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hmget/#return","text":"a List of the values for the specific fields requested, in the same order of the request. Null for missing fields","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hmget/#parameters","text":"jvm key the key fields the specific fields to retrieve","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hset/","text":"// misk-redis / misk.redis / FakeRedis / hset hset \u00b6 [jvm]\\ open override fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field Parameters \u00b6 jvm key the key field the field value the value to set [jvm]\\ open override fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields Parameters \u00b6 jvm key the key hash the map of fields to ByteString value","title":"hset - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hset/#hset","text":"[jvm]\\ open override fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field","title":"hset"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hset/#parameters","text":"jvm key the key field the field value the value to set [jvm]\\ open override fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/hset/#parameters_1","text":"jvm key the key hash the map of fields to ByteString value","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/incr-by/","text":"// misk-redis / misk.redis / FakeRedis / incrBy incrBy \u00b6 [jvm]\\ open override fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. See incr for extra information.","title":"incrBy - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/incr-by/#incrby","text":"[jvm]\\ open override fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. See incr for extra information.","title":"incrBy"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/incr/","text":"// misk-redis / misk.redis / FakeRedis / incr incr \u00b6 [jvm]\\ open override fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. Note: this is a string operation because Redis does not have a dedicated integer type. The string stored at the key is interpreted as a base-10 64 bit signed integer to execute the operation. Redis stores integers in their integer representation, so for string values that actually hold an integer, there is no overhead for storing the string representation of the integer.","title":"incr - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/incr/#incr","text":"[jvm]\\ open override fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. Note: this is a string operation because Redis does not have a dedicated integer type. The string stored at the key is interpreted as a base-10 64 bit signed integer to execute the operation. Redis stores integers in their integer representation, so for string values that actually hold an integer, there is no overhead for storing the string representation of the integer.","title":"incr"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/mget/","text":"// misk-redis / misk.redis / FakeRedis / mget mget \u00b6 [jvm]\\ open override fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys. Return \u00b6 a list of String in the same order as the specified list of keys. For each key, a value will be returned if a key was found, otherwise null is returned. Parameters \u00b6 jvm keys the keys to retrieve","title":"mget - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/mget/#mget","text":"[jvm]\\ open override fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys.","title":"mget"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/mget/#return","text":"a list of String in the same order as the specified list of keys. For each key, a value will be returned if a key was found, otherwise null is returned.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/mget/#parameters","text":"jvm keys the keys to retrieve","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/mset/","text":"// misk-redis / misk.redis / FakeRedis / mset mset \u00b6 [jvm]\\ open override fun mset (vararg keyValues: ByteString) Sets the key value pairs. Parameters \u00b6 jvm keyValues the list of keys and values in alternating order.","title":"mset - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/mset/#mset","text":"[jvm]\\ open override fun mset (vararg keyValues: ByteString) Sets the key value pairs.","title":"mset"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/mset/#parameters","text":"jvm keyValues the list of keys and values in alternating order.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/multi/","text":"// misk-redis / misk.redis / FakeRedis / multi multi \u00b6 [jvm]\\ open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC.","title":"multi - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/multi/#multi","text":"[jvm]\\ open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC.","title":"multi"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/p-expire-at/","text":"// misk-redis / misk.redis / FakeRedis / pExpireAt pExpireAt \u00b6 [jvm]\\ open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"pExpireAt - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/p-expire-at/#pexpireat","text":"[jvm]\\ open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds.","title":"pExpireAt"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/p-expire-at/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/p-expire/","text":"// misk-redis / misk.redis / FakeRedis / pExpire pExpire \u00b6 [jvm]\\ open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"pExpire - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/p-expire/#pexpire","text":"[jvm]\\ open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds.","title":"pExpire"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/p-expire/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/pipelined/","text":"// misk-redis / misk.redis / FakeRedis / pipelined pipelined \u00b6 [jvm]\\ open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance","title":"pipelined - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/pipelined/#pipelined","text":"[jvm]\\ open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance","title":"pipelined"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/set/","text":"// misk-redis / misk.redis / FakeRedis / set set \u00b6 [jvm]\\ open operator override fun set (key: String , value: ByteString) Sets the ByteString value for the given key. Parameters \u00b6 jvm key the key to set value the value to set [jvm]\\ open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date. Parameters \u00b6 jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"set - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/set/#set","text":"[jvm]\\ open operator override fun set (key: String , value: ByteString) Sets the ByteString value for the given key.","title":"set"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/set/#parameters","text":"jvm key the key to set value the value to set [jvm]\\ open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/set/#parameters_1","text":"jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/setnx/","text":"// misk-redis / misk.redis / FakeRedis / setnx setnx \u00b6 [jvm]\\ open override fun setnx (key: String , value: ByteString) Sets the ByteString value for the given key if it does not already exist. Parameters \u00b6 jvm key the key to set value the value to set [jvm]\\ open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist. Parameters \u00b6 jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"setnx - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/setnx/#setnx","text":"[jvm]\\ open override fun setnx (key: String , value: ByteString) Sets the ByteString value for the given key if it does not already exist.","title":"setnx"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/setnx/#parameters","text":"jvm key the key to set value the value to set [jvm]\\ open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/setnx/#parameters_1","text":"jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/unwatch/","text":"// misk-redis / misk.redis / FakeRedis / unwatch unwatch \u00b6 [jvm]\\ open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH.","title":"unwatch - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/unwatch/#unwatch","text":"[jvm]\\ open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH.","title":"unwatch"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/watch/","text":"// misk-redis / misk.redis / FakeRedis / watch watch \u00b6 [jvm]\\ open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"watch - Misk"},{"location":"0.x/misk-redis/misk.redis/-fake-redis/watch/#watch","text":"[jvm]\\ open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"watch"},{"location":"0.x/misk-redis/misk.redis/-real-redis/","text":"// misk-redis / misk.redis / RealRedis RealRedis \u00b6 [jvm]\\ class RealRedis (jedisPool: JedisPool) : Redis For each command, a Jedis instance is retrieved from the pool and returned once the command has been issued. Constructors \u00b6 RealRedis [jvm] fun RealRedis (jedisPool: JedisPool) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary close [jvm] fun close () Closes the connection to Redis. del [jvm] open override fun del (vararg keys: String ): Int Delete multiple keys. [jvm] open override fun del (key: String ): Boolean Delete key. expire [jvm] open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. expireAt [jvm] open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. get [jvm] open operator override fun get (key: String ): ByteString? Get a ByteString value. hdel [jvm] open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields hget [jvm] open override fun hget (key: String , field: String ): ByteString? Get a ByteString value for the given key and field. hgetAll [jvm] open override fun hgetAll (key: String ): Map < String , ByteString>? Get a map of field -> value pairs for the given key. hincrBy [jvm] open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. hmget [jvm] open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. hset [jvm] open override fun hset (key: String , hash: Map < String , ByteString>) Set ByteArray values for the given key and fields. [jvm] open override fun hset (key: String , field: String , value: ByteString) Set a ByteArray value for the given key and field. incr [jvm] open override fun incr (key: String ): Long Interpret the value at key as a Long and increment it by 1. incrBy [jvm] open override fun incrBy (key: String , increment: Long ): Long Interpret the value at key as a Long and increment it by increment . mget [jvm] open override fun mget (vararg keys: String ): List <ByteString?> Get multiple key values. mset [jvm] open override fun mset (vararg keyValues: ByteString) Set multiple key values. multi [jvm] open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC. pExpire [jvm] open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. pExpireAt [jvm] open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. pipelined [jvm] open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance set [jvm] open operator override fun set (key: String , value: ByteString) Set a ByteArray value. [jvm] open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value with an expiration. setnx [jvm] open override fun setnx (key: String , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist. [jvm] open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist with an expiration. unwatch [jvm] open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH. watch [jvm] open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"RealRedis - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/#realredis","text":"[jvm]\\ class RealRedis (jedisPool: JedisPool) : Redis For each command, a Jedis instance is retrieved from the pool and returned once the command has been issued.","title":"RealRedis"},{"location":"0.x/misk-redis/misk.redis/-real-redis/#constructors","text":"RealRedis [jvm] fun RealRedis (jedisPool: JedisPool)","title":"Constructors"},{"location":"0.x/misk-redis/misk.redis/-real-redis/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-redis/misk.redis/-real-redis/#functions","text":"Name Summary close [jvm] fun close () Closes the connection to Redis. del [jvm] open override fun del (vararg keys: String ): Int Delete multiple keys. [jvm] open override fun del (key: String ): Boolean Delete key. expire [jvm] open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. expireAt [jvm] open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. get [jvm] open operator override fun get (key: String ): ByteString? Get a ByteString value. hdel [jvm] open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields hget [jvm] open override fun hget (key: String , field: String ): ByteString? Get a ByteString value for the given key and field. hgetAll [jvm] open override fun hgetAll (key: String ): Map < String , ByteString>? Get a map of field -> value pairs for the given key. hincrBy [jvm] open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. hmget [jvm] open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. hset [jvm] open override fun hset (key: String , hash: Map < String , ByteString>) Set ByteArray values for the given key and fields. [jvm] open override fun hset (key: String , field: String , value: ByteString) Set a ByteArray value for the given key and field. incr [jvm] open override fun incr (key: String ): Long Interpret the value at key as a Long and increment it by 1. incrBy [jvm] open override fun incrBy (key: String , increment: Long ): Long Interpret the value at key as a Long and increment it by increment . mget [jvm] open override fun mget (vararg keys: String ): List <ByteString?> Get multiple key values. mset [jvm] open override fun mset (vararg keyValues: ByteString) Set multiple key values. multi [jvm] open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC. pExpire [jvm] open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. pExpireAt [jvm] open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. pipelined [jvm] open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance set [jvm] open operator override fun set (key: String , value: ByteString) Set a ByteArray value. [jvm] open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value with an expiration. setnx [jvm] open override fun setnx (key: String , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist. [jvm] open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist with an expiration. unwatch [jvm] open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH. watch [jvm] open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-real-redis/-real-redis/","text":"// misk-redis / misk.redis / RealRedis / RealRedis RealRedis \u00b6 [jvm]\\ fun RealRedis (jedisPool: JedisPool)","title":"RealRedis - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/-real-redis/#realredis","text":"[jvm]\\ fun RealRedis (jedisPool: JedisPool)","title":"RealRedis"},{"location":"0.x/misk-redis/misk.redis/-real-redis/close/","text":"// misk-redis / misk.redis / RealRedis / close close \u00b6 [jvm]\\ fun close () Closes the connection to Redis.","title":"close - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/close/#close","text":"[jvm]\\ fun close () Closes the connection to Redis.","title":"close"},{"location":"0.x/misk-redis/misk.redis/-real-redis/del/","text":"// misk-redis / misk.redis / RealRedis / del del \u00b6 [jvm]\\ open override fun del (key: String ): Boolean Delete key. [jvm]\\ open override fun del (vararg keys: String ): Int Delete multiple keys.","title":"del - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/del/#del","text":"[jvm]\\ open override fun del (key: String ): Boolean Delete key. [jvm]\\ open override fun del (vararg keys: String ): Int Delete multiple keys.","title":"del"},{"location":"0.x/misk-redis/misk.redis/-real-redis/expire-at/","text":"// misk-redis / misk.redis / RealRedis / expireAt expireAt \u00b6 [jvm]\\ open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. Please for the specific semantics of the command refer to the documentation of expire . Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"expireAt - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/expire-at/#expireat","text":"[jvm]\\ open override fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. Please for the specific semantics of the command refer to the documentation of expire .","title":"expireAt"},{"location":"0.x/misk-redis/misk.redis/-real-redis/expire-at/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-real-redis/expire/","text":"// misk-redis / misk.redis / RealRedis / expire expire \u00b6 [jvm]\\ open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. The timeout will only be cleared by commands that delete or overwrite the contents of the key, including del , set , GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with incr , pushing a new value into a list with LPUSH, or altering the field value of a hash with hset are all operations that will leave the timeout untouched. The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command. If a key is renamed with RENAME, the associated time to live is transferred to the new key name. If a key is overwritten by RENAME, like in the case of an existing key Key_A that is overwritten by a call like RENAME Key_B Key_A, it does not matter if the original Key_A had a timeout associated or not, the new key Key_A will inherit all the characteristics of Key_B. Note that calling expire / pExpire with a non-positive timeout or expireAt / pExpireAt with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired). Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"expire - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/expire/#expire","text":"[jvm]\\ open override fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. The timeout will only be cleared by commands that delete or overwrite the contents of the key, including del , set , GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with incr , pushing a new value into a list with LPUSH, or altering the field value of a hash with hset are all operations that will leave the timeout untouched. The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command. If a key is renamed with RENAME, the associated time to live is transferred to the new key name. If a key is overwritten by RENAME, like in the case of an existing key Key_A that is overwritten by a call like RENAME Key_B Key_A, it does not matter if the original Key_A had a timeout associated or not, the new key Key_A will inherit all the characteristics of Key_B. Note that calling expire / pExpire with a non-positive timeout or expireAt / pExpireAt with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired).","title":"expire"},{"location":"0.x/misk-redis/misk.redis/-real-redis/expire/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-real-redis/get/","text":"// misk-redis / misk.redis / RealRedis / get get \u00b6 [jvm]\\ open operator override fun get (key: String ): ByteString? Get a ByteString value.","title":"get - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/get/#get","text":"[jvm]\\ open operator override fun get (key: String ): ByteString? Get a ByteString value.","title":"get"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hdel/","text":"// misk-redis / misk.redis / RealRedis / hdel hdel \u00b6 [jvm]\\ open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields Return \u00b6 If the field was present in the hash it is deleted and 1 is returned, otherwise 0 is returned and no operation is performed. Parameters \u00b6 jvm key the key for which to delete fields fields the specific fields to delete","title":"hdel - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hdel/#hdel","text":"[jvm]\\ open override fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields","title":"hdel"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hdel/#return","text":"If the field was present in the hash it is deleted and 1 is returned, otherwise 0 is returned and no operation is performed.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hdel/#parameters","text":"jvm key the key for which to delete fields fields the specific fields to delete","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hget-all/","text":"// misk-redis / misk.redis / RealRedis / hgetAll hgetAll \u00b6 [jvm]\\ open override fun hgetAll (key: String ): Map < String , ByteString>? Get a map of field -> value pairs for the given key.","title":"hgetAll - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hget-all/#hgetall","text":"[jvm]\\ open override fun hgetAll (key: String ): Map < String , ByteString>? Get a map of field -> value pairs for the given key.","title":"hgetAll"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hget/","text":"// misk-redis / misk.redis / RealRedis / hget hget \u00b6 [jvm]\\ open override fun hget (key: String , field: String ): ByteString? Get a ByteString value for the given key and field.","title":"hget - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hget/#hget","text":"[jvm]\\ open override fun hget (key: String , field: String ): ByteString? Get a ByteString value for the given key and field.","title":"hget"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hincr-by/","text":"// misk-redis / misk.redis / RealRedis / hincrBy hincrBy \u00b6 [jvm]\\ open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. Return \u00b6 the value at field after the increment operation. Parameters \u00b6 jvm key the key. field the field.","title":"hincrBy - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hincr-by/#hincrby","text":"[jvm]\\ open override fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed.","title":"hincrBy"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hincr-by/#return","text":"the value at field after the increment operation.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hincr-by/#parameters","text":"jvm key the key. field the field.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hmget/","text":"// misk-redis / misk.redis / RealRedis / hmget hmget \u00b6 [jvm]\\ open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. If some specified fields do not exist, nil values are returned. Non-existing keys are considered like empty hashes. Return \u00b6 a List of the values for the specific fields requested, in the same order of the request. Null for missing fields Parameters \u00b6 jvm key the key fields the specific fields to retrieve","title":"hmget - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hmget/#hmget","text":"[jvm]\\ open override fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. If some specified fields do not exist, nil values are returned. Non-existing keys are considered like empty hashes.","title":"hmget"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hmget/#return","text":"a List of the values for the specific fields requested, in the same order of the request. Null for missing fields","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hmget/#parameters","text":"jvm key the key fields the specific fields to retrieve","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hset/","text":"// misk-redis / misk.redis / RealRedis / hset hset \u00b6 [jvm]\\ open override fun hset (key: String , field: String , value: ByteString) Set a ByteArray value for the given key and field. [jvm]\\ open override fun hset (key: String , hash: Map < String , ByteString>) Set ByteArray values for the given key and fields.","title":"hset - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/hset/#hset","text":"[jvm]\\ open override fun hset (key: String , field: String , value: ByteString) Set a ByteArray value for the given key and field. [jvm]\\ open override fun hset (key: String , hash: Map < String , ByteString>) Set ByteArray values for the given key and fields.","title":"hset"},{"location":"0.x/misk-redis/misk.redis/-real-redis/incr-by/","text":"// misk-redis / misk.redis / RealRedis / incrBy incrBy \u00b6 [jvm]\\ open override fun incrBy (key: String , increment: Long ): Long Interpret the value at key as a Long and increment it by increment .","title":"incrBy - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/incr-by/#incrby","text":"[jvm]\\ open override fun incrBy (key: String , increment: Long ): Long Interpret the value at key as a Long and increment it by increment .","title":"incrBy"},{"location":"0.x/misk-redis/misk.redis/-real-redis/incr/","text":"// misk-redis / misk.redis / RealRedis / incr incr \u00b6 [jvm]\\ open override fun incr (key: String ): Long Interpret the value at key as a Long and increment it by 1.","title":"incr - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/incr/#incr","text":"[jvm]\\ open override fun incr (key: String ): Long Interpret the value at key as a Long and increment it by 1.","title":"incr"},{"location":"0.x/misk-redis/misk.redis/-real-redis/mget/","text":"// misk-redis / misk.redis / RealRedis / mget mget \u00b6 [jvm]\\ open override fun mget (vararg keys: String ): List <ByteString?> Get multiple key values.","title":"mget - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/mget/#mget","text":"[jvm]\\ open override fun mget (vararg keys: String ): List <ByteString?> Get multiple key values.","title":"mget"},{"location":"0.x/misk-redis/misk.redis/-real-redis/mset/","text":"// misk-redis / misk.redis / RealRedis / mset mset \u00b6 [jvm]\\ open override fun mset (vararg keyValues: ByteString) Set multiple key values.","title":"mset - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/mset/#mset","text":"[jvm]\\ open override fun mset (vararg keyValues: ByteString) Set multiple key values.","title":"mset"},{"location":"0.x/misk-redis/misk.redis/-real-redis/multi/","text":"// misk-redis / misk.redis / RealRedis / multi multi \u00b6 [jvm]\\ open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC.","title":"multi - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/multi/#multi","text":"[jvm]\\ open override fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC.","title":"multi"},{"location":"0.x/misk-redis/misk.redis/-real-redis/p-expire-at/","text":"// misk-redis / misk.redis / RealRedis / pExpireAt pExpireAt \u00b6 [jvm]\\ open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"pExpireAt - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/p-expire-at/#pexpireat","text":"[jvm]\\ open override fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds.","title":"pExpireAt"},{"location":"0.x/misk-redis/misk.redis/-real-redis/p-expire-at/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-real-redis/p-expire/","text":"// misk-redis / misk.redis / RealRedis / pExpire pExpire \u00b6 [jvm]\\ open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"pExpire - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/p-expire/#pexpire","text":"[jvm]\\ open override fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds.","title":"pExpire"},{"location":"0.x/misk-redis/misk.redis/-real-redis/p-expire/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-real-redis/pipelined/","text":"// misk-redis / misk.redis / RealRedis / pipelined pipelined \u00b6 [jvm]\\ open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance","title":"pipelined - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/pipelined/#pipelined","text":"[jvm]\\ open override fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance","title":"pipelined"},{"location":"0.x/misk-redis/misk.redis/-real-redis/set/","text":"// misk-redis / misk.redis / RealRedis / set set \u00b6 [jvm]\\ open operator override fun set (key: String , value: ByteString) Set a ByteArray value. [jvm]\\ open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value with an expiration.","title":"set - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/set/#set","text":"[jvm]\\ open operator override fun set (key: String , value: ByteString) Set a ByteArray value. [jvm]\\ open operator override fun set (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value with an expiration.","title":"set"},{"location":"0.x/misk-redis/misk.redis/-real-redis/setnx/","text":"// misk-redis / misk.redis / RealRedis / setnx setnx \u00b6 [jvm]\\ open override fun setnx (key: String , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist. [jvm]\\ open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist with an expiration.","title":"setnx - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/setnx/#setnx","text":"[jvm]\\ open override fun setnx (key: String , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist. [jvm]\\ open override fun setnx (key: String , expiryDuration: Duration , value: ByteString) Set a ByteArray value if it doesn\u2019t already exist with an expiration.","title":"setnx"},{"location":"0.x/misk-redis/misk.redis/-real-redis/unwatch/","text":"// misk-redis / misk.redis / RealRedis / unwatch unwatch \u00b6 [jvm]\\ open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH.","title":"unwatch - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/unwatch/#unwatch","text":"[jvm]\\ open override fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH.","title":"unwatch"},{"location":"0.x/misk-redis/misk.redis/-real-redis/watch/","text":"// misk-redis / misk.redis / RealRedis / watch watch \u00b6 [jvm]\\ open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"watch - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/watch/#watch","text":"[jvm]\\ open override fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"watch"},{"location":"0.x/misk-redis/misk.redis/-real-redis/-companion/","text":"// misk-redis / misk.redis / RealRedis / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-redis/misk.redis/-real-redis/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-redis/misk.redis/-redis/","text":"// misk-redis / misk.redis / Redis Redis \u00b6 [jvm]\\ interface Redis A Redis client. Functions \u00b6 Name Summary del [jvm] abstract fun del (vararg keys: String ): Int Deletes multiple keys. [jvm] abstract fun del (key: String ): Boolean Deletes a single key. expire [jvm] abstract fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. expireAt [jvm] abstract fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. get [jvm] abstract operator fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString. hdel [jvm] abstract fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields hget [jvm] abstract fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString. hgetAll [jvm] abstract fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found. hincrBy [jvm] abstract fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. hmget [jvm] abstract fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. hset [jvm] abstract fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields [jvm] abstract fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field incr [jvm] abstract fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. incrBy [jvm] abstract fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. mget [jvm] abstract fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys. mset [jvm] abstract fun mset (vararg keyValues: ByteString) Sets the key value pairs. multi [jvm] abstract fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC. pExpire [jvm] abstract fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. pExpireAt [jvm] abstract fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. pipelined [jvm] abstract fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance set [jvm] abstract operator fun set (key: String , value: ByteString) Sets the ByteString value for the given key. [jvm] abstract operator fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date. setnx [jvm] abstract fun setnx (key: String , value: ByteString) abstract fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist. unwatch [jvm] abstract fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH. watch [jvm] abstract fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction. Inheritors \u00b6 Name FakeRedis RealRedis","title":"Redis - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/#redis","text":"[jvm]\\ interface Redis A Redis client.","title":"Redis"},{"location":"0.x/misk-redis/misk.redis/-redis/#functions","text":"Name Summary del [jvm] abstract fun del (vararg keys: String ): Int Deletes multiple keys. [jvm] abstract fun del (key: String ): Boolean Deletes a single key. expire [jvm] abstract fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. expireAt [jvm] abstract fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. get [jvm] abstract operator fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString. hdel [jvm] abstract fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields hget [jvm] abstract fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString. hgetAll [jvm] abstract fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found. hincrBy [jvm] abstract fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. hmget [jvm] abstract fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. hset [jvm] abstract fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields [jvm] abstract fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field incr [jvm] abstract fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. incrBy [jvm] abstract fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. mget [jvm] abstract fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys. mset [jvm] abstract fun mset (vararg keyValues: ByteString) Sets the key value pairs. multi [jvm] abstract fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC. pExpire [jvm] abstract fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. pExpireAt [jvm] abstract fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. pipelined [jvm] abstract fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance set [jvm] abstract operator fun set (key: String , value: ByteString) Sets the ByteString value for the given key. [jvm] abstract operator fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date. setnx [jvm] abstract fun setnx (key: String , value: ByteString) abstract fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist. unwatch [jvm] abstract fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH. watch [jvm] abstract fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-redis/#inheritors","text":"Name FakeRedis RealRedis","title":"Inheritors"},{"location":"0.x/misk-redis/misk.redis/-redis/del/","text":"// misk-redis / misk.redis / Redis / del del \u00b6 [jvm]\\ abstract fun del (key: String ): Boolean Deletes a single key. Return \u00b6 false if the key was not deleted, true if the key was deleted Parameters \u00b6 jvm key the key to delete [jvm]\\ abstract fun del (vararg keys: String ): Int Deletes multiple keys. Return \u00b6 0 if none of the keys were deleted, otherwise a positive integer representing the number of keys that were deleted Parameters \u00b6 jvm keys the keys to delete","title":"del - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/del/#del","text":"[jvm]\\ abstract fun del (key: String ): Boolean Deletes a single key.","title":"del"},{"location":"0.x/misk-redis/misk.redis/-redis/del/#return","text":"false if the key was not deleted, true if the key was deleted","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/del/#parameters","text":"jvm key the key to delete [jvm]\\ abstract fun del (vararg keys: String ): Int Deletes multiple keys.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/del/#return_1","text":"0 if none of the keys were deleted, otherwise a positive integer representing the number of keys that were deleted","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/del/#parameters_1","text":"jvm keys the keys to delete","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/expire-at/","text":"// misk-redis / misk.redis / Redis / expireAt expireAt \u00b6 [jvm]\\ abstract fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. Please for the specific semantics of the command refer to the documentation of expire . Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"expireAt - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/expire-at/#expireat","text":"[jvm]\\ abstract fun expireAt (key: String , timestampSeconds: Long ): Boolean expireAt has the same effect and semantic as expire , but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately. Please for the specific semantics of the command refer to the documentation of expire .","title":"expireAt"},{"location":"0.x/misk-redis/misk.redis/-redis/expire-at/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/expire/","text":"// misk-redis / misk.redis / Redis / expire expire \u00b6 [jvm]\\ abstract fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. The timeout will only be cleared by commands that delete or overwrite the contents of the key, including del , set , GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with incr , pushing a new value into a list with LPUSH, or altering the field value of a hash with hset are all operations that will leave the timeout untouched. The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command. If a key is renamed with RENAME, the associated time to live is transferred to the new key name. If a key is overwritten by RENAME, like in the case of an existing key Key_A that is overwritten by a call like RENAME Key_B Key_A, it does not matter if the original Key_A had a timeout associated or not, the new key Key_A will inherit all the characteristics of Key_B. Note that calling expire / pExpire with a non-positive timeout or expireAt / pExpireAt with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired). Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"expire - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/expire/#expire","text":"[jvm]\\ abstract fun expire (key: String , seconds: Long ): Boolean Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology. The timeout will only be cleared by commands that delete or overwrite the contents of the key, including del , set , GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with incr , pushing a new value into a list with LPUSH, or altering the field value of a hash with hset are all operations that will leave the timeout untouched. The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command. If a key is renamed with RENAME, the associated time to live is transferred to the new key name. If a key is overwritten by RENAME, like in the case of an existing key Key_A that is overwritten by a call like RENAME Key_B Key_A, it does not matter if the original Key_A had a timeout associated or not, the new key Key_A will inherit all the characteristics of Key_B. Note that calling expire / pExpire with a non-positive timeout or expireAt / pExpireAt with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired).","title":"expire"},{"location":"0.x/misk-redis/misk.redis/-redis/expire/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/get/","text":"// misk-redis / misk.redis / Redis / get get \u00b6 [jvm]\\ abstract operator fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString. Return \u00b6 a ByteString if the key was found, null if the key was not found Parameters \u00b6 jvm key the key to retrieve","title":"get - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/get/#get","text":"[jvm]\\ abstract operator fun get (key: String ): ByteString? Retrieves the value for the given key as a ByteString.","title":"get"},{"location":"0.x/misk-redis/misk.redis/-redis/get/#return","text":"a ByteString if the key was found, null if the key was not found","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/get/#parameters","text":"jvm key the key to retrieve","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/hdel/","text":"// misk-redis / misk.redis / Redis / hdel hdel \u00b6 [jvm]\\ abstract fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields Return \u00b6 If the field was present in the hash it is deleted and 1 is returned, otherwise 0 is returned and no operation is performed. Parameters \u00b6 jvm key the key for which to delete fields fields the specific fields to delete","title":"hdel - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/hdel/#hdel","text":"[jvm]\\ abstract fun hdel (key: String , vararg fields: String ): Long Delete one or more hash fields","title":"hdel"},{"location":"0.x/misk-redis/misk.redis/-redis/hdel/#return","text":"If the field was present in the hash it is deleted and 1 is returned, otherwise 0 is returned and no operation is performed.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/hdel/#parameters","text":"jvm key the key for which to delete fields fields the specific fields to delete","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/hget-all/","text":"// misk-redis / misk.redis / Redis / hgetAll hgetAll \u00b6 [jvm]\\ abstract fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found. Return \u00b6 a Map of the fields to their associated values Parameters \u00b6 jvm key the key","title":"hgetAll - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/hget-all/#hgetall","text":"[jvm]\\ abstract fun hgetAll (key: String ): Map < String , ByteString>? Retrieves all the fields and associated values for the given key. Returns null if nothing found.","title":"hgetAll"},{"location":"0.x/misk-redis/misk.redis/-redis/hget-all/#return","text":"a Map of the fields to their associated values","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/hget-all/#parameters","text":"jvm key the key","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/hget/","text":"// misk-redis / misk.redis / Redis / hget hget \u00b6 [jvm]\\ abstract fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString. Return \u00b6 a ByteString if the key/field combination was found, null if not found Parameters \u00b6 jvm key the key field the field","title":"hget - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/hget/#hget","text":"[jvm]\\ abstract fun hget (key: String , field: String ): ByteString? Retrieves the value for the given key and field as a ByteString.","title":"hget"},{"location":"0.x/misk-redis/misk.redis/-redis/hget/#return","text":"a ByteString if the key/field combination was found, null if not found","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/hget/#parameters","text":"jvm key the key field the field","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/hincr-by/","text":"// misk-redis / misk.redis / Redis / hincrBy hincrBy \u00b6 [jvm]\\ abstract fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed. Return \u00b6 the value at field after the increment operation. Parameters \u00b6 jvm key the key. field the field.","title":"hincrBy - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/hincr-by/#hincrby","text":"[jvm]\\ abstract fun hincrBy (key: String , field: String , increment: Long ): Long Increments the number stored at field in the hash stored at key by increment . If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed.","title":"hincrBy"},{"location":"0.x/misk-redis/misk.redis/-redis/hincr-by/#return","text":"the value at field after the increment operation.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/hincr-by/#parameters","text":"jvm key the key. field the field.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/hmget/","text":"// misk-redis / misk.redis / Redis / hmget hmget \u00b6 [jvm]\\ abstract fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. If some specified fields do not exist, nil values are returned. Non-existing keys are considered like empty hashes. Return \u00b6 a List of the values for the specific fields requested, in the same order of the request. Null for missing fields Parameters \u00b6 jvm key the key fields the specific fields to retrieve","title":"hmget - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/hmget/#hmget","text":"[jvm]\\ abstract fun hmget (key: String , vararg fields: String ): List <ByteString?> Retrieve the values associated to the specified fields. If some specified fields do not exist, nil values are returned. Non-existing keys are considered like empty hashes.","title":"hmget"},{"location":"0.x/misk-redis/misk.redis/-redis/hmget/#return","text":"a List of the values for the specific fields requested, in the same order of the request. Null for missing fields","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/hmget/#parameters","text":"jvm key the key fields the specific fields to retrieve","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/hset/","text":"// misk-redis / misk.redis / Redis / hset hset \u00b6 [jvm]\\ abstract fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field Parameters \u00b6 jvm key the key field the field value the value to set [jvm]\\ abstract fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields Parameters \u00b6 jvm key the key hash the map of fields to ByteString value","title":"hset - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/hset/#hset","text":"[jvm]\\ abstract fun hset (key: String , field: String , value: ByteString) Sets the ByteString value for the given key and field","title":"hset"},{"location":"0.x/misk-redis/misk.redis/-redis/hset/#parameters","text":"jvm key the key field the field value the value to set [jvm]\\ abstract fun hset (key: String , hash: Map < String , ByteString>) Sets the ByteString values for the given key and fields","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/hset/#parameters_1","text":"jvm key the key hash the map of fields to ByteString value","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/incr-by/","text":"// misk-redis / misk.redis / Redis / incrBy incrBy \u00b6 [jvm]\\ abstract fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. See incr for extra information.","title":"incrBy - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/incr-by/#incrby","text":"[jvm]\\ abstract fun incrBy (key: String , increment: Long ): Long Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. See incr for extra information.","title":"incrBy"},{"location":"0.x/misk-redis/misk.redis/-redis/incr/","text":"// misk-redis / misk.redis / Redis / incr incr \u00b6 [jvm]\\ abstract fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. Note: this is a string operation because Redis does not have a dedicated integer type. The string stored at the key is interpreted as a base-10 64 bit signed integer to execute the operation. Redis stores integers in their integer representation, so for string values that actually hold an integer, there is no overhead for storing the string representation of the integer.","title":"incr - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/incr/#incr","text":"[jvm]\\ abstract fun incr (key: String ): Long Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. Note: this is a string operation because Redis does not have a dedicated integer type. The string stored at the key is interpreted as a base-10 64 bit signed integer to execute the operation. Redis stores integers in their integer representation, so for string values that actually hold an integer, there is no overhead for storing the string representation of the integer.","title":"incr"},{"location":"0.x/misk-redis/misk.redis/-redis/mget/","text":"// misk-redis / misk.redis / Redis / mget mget \u00b6 [jvm]\\ abstract fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys. Return \u00b6 a list of String in the same order as the specified list of keys. For each key, a value will be returned if a key was found, otherwise null is returned. Parameters \u00b6 jvm keys the keys to retrieve","title":"mget - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/mget/#mget","text":"[jvm]\\ abstract fun mget (vararg keys: String ): List <ByteString?> Retrieves the values for the given list of keys.","title":"mget"},{"location":"0.x/misk-redis/misk.redis/-redis/mget/#return","text":"a list of String in the same order as the specified list of keys. For each key, a value will be returned if a key was found, otherwise null is returned.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/mget/#parameters","text":"jvm keys the keys to retrieve","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/mset/","text":"// misk-redis / misk.redis / Redis / mset mset \u00b6 [jvm]\\ abstract fun mset (vararg keyValues: ByteString) Sets the key value pairs. Parameters \u00b6 jvm keyValues the list of keys and values in alternating order.","title":"mset - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/mset/#mset","text":"[jvm]\\ abstract fun mset (vararg keyValues: ByteString) Sets the key value pairs.","title":"mset"},{"location":"0.x/misk-redis/misk.redis/-redis/mset/#parameters","text":"jvm keyValues the list of keys and values in alternating order.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/multi/","text":"// misk-redis / misk.redis / Redis / multi multi \u00b6 [jvm]\\ abstract fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC.","title":"multi - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/multi/#multi","text":"[jvm]\\ abstract fun multi (): Transaction Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC.","title":"multi"},{"location":"0.x/misk-redis/misk.redis/-redis/p-expire-at/","text":"// misk-redis / misk.redis / Redis / pExpireAt pExpireAt \u00b6 [jvm]\\ abstract fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds. Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"pExpireAt - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/p-expire-at/#pexpireat","text":"[jvm]\\ abstract fun pExpireAt (key: String , timestampMilliseconds: Long ): Boolean pExpireAt has the same effect and semantic as expireAt , but the Unix time at which the key will expire is specified in milliseconds instead of seconds.","title":"pExpireAt"},{"location":"0.x/misk-redis/misk.redis/-redis/p-expire-at/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/p-expire/","text":"// misk-redis / misk.redis / Redis / pExpire pExpire \u00b6 [jvm]\\ abstract fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds. Return \u00b6 true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"pExpire - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/p-expire/#pexpire","text":"[jvm]\\ abstract fun pExpire (key: String , milliseconds: Long ): Boolean This command works exactly like expire but the time to live of the key is specified in milliseconds instead of seconds.","title":"pExpire"},{"location":"0.x/misk-redis/misk.redis/-redis/p-expire/#return","text":"true if the timeout was set. false if the timeout was not set. e.g. key doesn\u2019t exist, or operation skipped due to the provided arguments.","title":"Return"},{"location":"0.x/misk-redis/misk.redis/-redis/pipelined/","text":"// misk-redis / misk.redis / Redis / pipelined pipelined \u00b6 [jvm]\\ abstract fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance","title":"pipelined - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/pipelined/#pipelined","text":"[jvm]\\ abstract fun pipelined (): Pipeline Begin a pipeline operation to batch together several updates for optimal performance","title":"pipelined"},{"location":"0.x/misk-redis/misk.redis/-redis/set/","text":"// misk-redis / misk.redis / Redis / set set \u00b6 [jvm]\\ abstract operator fun set (key: String , value: ByteString) Sets the ByteString value for the given key. Parameters \u00b6 jvm key the key to set value the value to set [jvm]\\ abstract operator fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date. Parameters \u00b6 jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"set - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/set/#set","text":"[jvm]\\ abstract operator fun set (key: String , value: ByteString) Sets the ByteString value for the given key.","title":"set"},{"location":"0.x/misk-redis/misk.redis/-redis/set/#parameters","text":"jvm key the key to set value the value to set [jvm]\\ abstract operator fun set (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for a key with an expiration date.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/set/#parameters_1","text":"jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/setnx/","text":"// misk-redis / misk.redis / Redis / setnx setnx \u00b6 [jvm]\\ abstract fun setnx (key: String , value: ByteString) Sets the ByteString value for the given key if it does not already exist. Parameters \u00b6 jvm key the key to set value the value to set [jvm]\\ abstract fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist. Parameters \u00b6 jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"setnx - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/setnx/#setnx","text":"[jvm]\\ abstract fun setnx (key: String , value: ByteString) Sets the ByteString value for the given key if it does not already exist.","title":"setnx"},{"location":"0.x/misk-redis/misk.redis/-redis/setnx/#parameters","text":"jvm key the key to set value the value to set [jvm]\\ abstract fun setnx (key: String , expiryDuration: Duration , value: ByteString) Sets the ByteString value for the given key if it does not already exist.","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/setnx/#parameters_1","text":"jvm key the key to set expiryDuration the amount of time before the key expires value the value to set","title":"Parameters"},{"location":"0.x/misk-redis/misk.redis/-redis/unwatch/","text":"// misk-redis / misk.redis / Redis / unwatch unwatch \u00b6 [jvm]\\ abstract fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH.","title":"unwatch - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/unwatch/#unwatch","text":"[jvm]\\ abstract fun unwatch (vararg keys: String ) Flushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there\u2019s no need to manually call UNWATCH.","title":"unwatch"},{"location":"0.x/misk-redis/misk.redis/-redis/watch/","text":"// misk-redis / misk.redis / Redis / watch watch \u00b6 [jvm]\\ abstract fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"watch - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis/watch/#watch","text":"[jvm]\\ abstract fun watch (vararg keys: String ) Marks the given keys to be watched for conditional execution of a transaction.","title":"watch"},{"location":"0.x/misk-redis/misk.redis/-redis-config/","text":"// misk-redis / misk.redis / RedisConfig RedisConfig \u00b6 [jvm]\\ class RedisConfig : LinkedHashMap < String , RedisReplicationGroupConfig > , Config Constructors \u00b6 RedisConfig [jvm] fun RedisConfig () RedisConfig [jvm] fun RedisConfig (m: Map < String , RedisReplicationGroupConfig >) Functions \u00b6 Name Summary afterNodeAccess [jvm] open override fun afterNodeAccess (p0: HashMap.Node < String , RedisReplicationGroupConfig >) afterNodeInsertion [jvm] open override fun afterNodeInsertion (p0: Boolean ) afterNodeRemoval [jvm] open override fun afterNodeRemoval (p0: HashMap.Node < String , RedisReplicationGroupConfig >) capacity [jvm] fun capacity (): Int clear [jvm] open override fun clear () clone [jvm] open override fun clone (): Any compute [jvm] open override fun compute (p0: String , p1: BiFunction <in String , in RedisReplicationGroupConfig ?, out RedisReplicationGroupConfig ?>): RedisReplicationGroupConfig ? computeIfAbsent [jvm] open override fun computeIfAbsent (p0: String , p1: Function <in String , out RedisReplicationGroupConfig >): RedisReplicationGroupConfig computeIfPresent [jvm] open override fun computeIfPresent (p0: String , p1: BiFunction <in String , in RedisReplicationGroupConfig , out RedisReplicationGroupConfig ?>): RedisReplicationGroupConfig ? containsKey [jvm] open override fun containsKey (key: String ): Boolean containsValue [jvm] open override fun containsValue (value: RedisReplicationGroupConfig ): Boolean equals [jvm] open operator override fun equals (other: Any ?): Boolean forEach [jvm] open override fun forEach (p0: BiConsumer <in String , in RedisReplicationGroupConfig >) get [jvm] open operator override fun get (key: String ): RedisReplicationGroupConfig ? getNode [jvm] fun getNode (p0: Int , p1: Any ): HashMap.Node < String , RedisReplicationGroupConfig > getOrDefault [jvm] open override fun getOrDefault (key: String , defaultValue: RedisReplicationGroupConfig ): RedisReplicationGroupConfig hashCode [jvm] open override fun hashCode (): Int internalWriteEntries [jvm] open override fun internalWriteEntries (p0: ObjectOutputStream ) isEmpty [jvm] open override fun isEmpty (): Boolean loadFactor [jvm] fun loadFactor (): Float merge [jvm] open override fun merge (p0: String , p1: RedisReplicationGroupConfig , p2: BiFunction <in RedisReplicationGroupConfig , in RedisReplicationGroupConfig , out RedisReplicationGroupConfig ?>): RedisReplicationGroupConfig ? newNode [jvm] open override fun newNode (p0: Int , p1: String , p2: RedisReplicationGroupConfig , p3: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.Node < String , RedisReplicationGroupConfig > newTreeNode [jvm] open override fun newTreeNode (p0: Int , p1: String , p2: RedisReplicationGroupConfig , p3: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.TreeNode < String , RedisReplicationGroupConfig > put [jvm] open override fun put (key: String , value: RedisReplicationGroupConfig ): RedisReplicationGroupConfig ? putAll [jvm] open override fun putAll (from: Map <out String , RedisReplicationGroupConfig >) putIfAbsent [jvm] open override fun putIfAbsent (p0: String , p1: RedisReplicationGroupConfig ): RedisReplicationGroupConfig ? putMapEntries [jvm] fun putMapEntries (p0: MutableMap <out String , out RedisReplicationGroupConfig >, p1: Boolean ) putVal [jvm] fun putVal (p0: Int , p1: String , p2: RedisReplicationGroupConfig , p3: Boolean , p4: Boolean ): RedisReplicationGroupConfig reinitialize [jvm] open override fun reinitialize () remove [jvm] open override fun remove (key: String ): RedisReplicationGroupConfig ? open override fun remove (key: String , value: RedisReplicationGroupConfig ): Boolean removeEldestEntry [jvm] open fun removeEldestEntry (p0: MutableMap.MutableEntry < String , RedisReplicationGroupConfig >): Boolean removeNode [jvm] fun removeNode (p0: Int , p1: Any , p2: Any , p3: Boolean , p4: Boolean ): HashMap.Node < String , RedisReplicationGroupConfig > replace [jvm] open override fun replace (p0: String , p1: RedisReplicationGroupConfig ): RedisReplicationGroupConfig ? open override fun replace (p0: String , p1: RedisReplicationGroupConfig , p2: RedisReplicationGroupConfig ): Boolean replaceAll [jvm] open override fun replaceAll (p0: BiFunction <in String , in RedisReplicationGroupConfig , out RedisReplicationGroupConfig >) replacementNode [jvm] open override fun replacementNode (p0: HashMap.Node < String , RedisReplicationGroupConfig >, p1: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.Node < String , RedisReplicationGroupConfig > replacementTreeNode [jvm] open override fun replacementTreeNode (p0: HashMap.Node < String , RedisReplicationGroupConfig >, p1: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.TreeNode < String , RedisReplicationGroupConfig > resize [jvm] fun resize (): Array < HashMap.Node < String , RedisReplicationGroupConfig >> toString [jvm] open override fun toString (): String treeifyBin [jvm] fun treeifyBin (p0: Array < HashMap.Node < String , RedisReplicationGroupConfig >>, p1: Int ) Properties \u00b6 Name Summary accessOrder [jvm] val accessOrder : Boolean entries [jvm] open override val entries : MutableSet < MutableMap.MutableEntry < String , RedisReplicationGroupConfig >> entrySet [jvm] val entrySet : MutableSet < MutableMap.MutableEntry < String , RedisReplicationGroupConfig >> head [jvm] val head : LinkedHashMap.Entry < String , RedisReplicationGroupConfig > keys [jvm] open override val keys : MutableSet < String > keySet [jvm] val keySet : MutableSet < String > loadFactor [jvm] val loadFactor : Float modCount [jvm] val modCount : Int size [jvm] open override val size : Int size [jvm] val size : Int table [jvm] val table : Array < HashMap.Node < String , RedisReplicationGroupConfig >> tail [jvm] val tail : LinkedHashMap.Entry < String , RedisReplicationGroupConfig > threshold [jvm] val threshold : Int values [jvm] open override val values : MutableCollection < RedisReplicationGroupConfig > values [jvm] val values : MutableCollection < RedisReplicationGroupConfig >","title":"RedisConfig - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-config/#redisconfig","text":"[jvm]\\ class RedisConfig : LinkedHashMap < String , RedisReplicationGroupConfig > , Config","title":"RedisConfig"},{"location":"0.x/misk-redis/misk.redis/-redis-config/#constructors","text":"RedisConfig [jvm] fun RedisConfig () RedisConfig [jvm] fun RedisConfig (m: Map < String , RedisReplicationGroupConfig >)","title":"Constructors"},{"location":"0.x/misk-redis/misk.redis/-redis-config/#functions","text":"Name Summary afterNodeAccess [jvm] open override fun afterNodeAccess (p0: HashMap.Node < String , RedisReplicationGroupConfig >) afterNodeInsertion [jvm] open override fun afterNodeInsertion (p0: Boolean ) afterNodeRemoval [jvm] open override fun afterNodeRemoval (p0: HashMap.Node < String , RedisReplicationGroupConfig >) capacity [jvm] fun capacity (): Int clear [jvm] open override fun clear () clone [jvm] open override fun clone (): Any compute [jvm] open override fun compute (p0: String , p1: BiFunction <in String , in RedisReplicationGroupConfig ?, out RedisReplicationGroupConfig ?>): RedisReplicationGroupConfig ? computeIfAbsent [jvm] open override fun computeIfAbsent (p0: String , p1: Function <in String , out RedisReplicationGroupConfig >): RedisReplicationGroupConfig computeIfPresent [jvm] open override fun computeIfPresent (p0: String , p1: BiFunction <in String , in RedisReplicationGroupConfig , out RedisReplicationGroupConfig ?>): RedisReplicationGroupConfig ? containsKey [jvm] open override fun containsKey (key: String ): Boolean containsValue [jvm] open override fun containsValue (value: RedisReplicationGroupConfig ): Boolean equals [jvm] open operator override fun equals (other: Any ?): Boolean forEach [jvm] open override fun forEach (p0: BiConsumer <in String , in RedisReplicationGroupConfig >) get [jvm] open operator override fun get (key: String ): RedisReplicationGroupConfig ? getNode [jvm] fun getNode (p0: Int , p1: Any ): HashMap.Node < String , RedisReplicationGroupConfig > getOrDefault [jvm] open override fun getOrDefault (key: String , defaultValue: RedisReplicationGroupConfig ): RedisReplicationGroupConfig hashCode [jvm] open override fun hashCode (): Int internalWriteEntries [jvm] open override fun internalWriteEntries (p0: ObjectOutputStream ) isEmpty [jvm] open override fun isEmpty (): Boolean loadFactor [jvm] fun loadFactor (): Float merge [jvm] open override fun merge (p0: String , p1: RedisReplicationGroupConfig , p2: BiFunction <in RedisReplicationGroupConfig , in RedisReplicationGroupConfig , out RedisReplicationGroupConfig ?>): RedisReplicationGroupConfig ? newNode [jvm] open override fun newNode (p0: Int , p1: String , p2: RedisReplicationGroupConfig , p3: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.Node < String , RedisReplicationGroupConfig > newTreeNode [jvm] open override fun newTreeNode (p0: Int , p1: String , p2: RedisReplicationGroupConfig , p3: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.TreeNode < String , RedisReplicationGroupConfig > put [jvm] open override fun put (key: String , value: RedisReplicationGroupConfig ): RedisReplicationGroupConfig ? putAll [jvm] open override fun putAll (from: Map <out String , RedisReplicationGroupConfig >) putIfAbsent [jvm] open override fun putIfAbsent (p0: String , p1: RedisReplicationGroupConfig ): RedisReplicationGroupConfig ? putMapEntries [jvm] fun putMapEntries (p0: MutableMap <out String , out RedisReplicationGroupConfig >, p1: Boolean ) putVal [jvm] fun putVal (p0: Int , p1: String , p2: RedisReplicationGroupConfig , p3: Boolean , p4: Boolean ): RedisReplicationGroupConfig reinitialize [jvm] open override fun reinitialize () remove [jvm] open override fun remove (key: String ): RedisReplicationGroupConfig ? open override fun remove (key: String , value: RedisReplicationGroupConfig ): Boolean removeEldestEntry [jvm] open fun removeEldestEntry (p0: MutableMap.MutableEntry < String , RedisReplicationGroupConfig >): Boolean removeNode [jvm] fun removeNode (p0: Int , p1: Any , p2: Any , p3: Boolean , p4: Boolean ): HashMap.Node < String , RedisReplicationGroupConfig > replace [jvm] open override fun replace (p0: String , p1: RedisReplicationGroupConfig ): RedisReplicationGroupConfig ? open override fun replace (p0: String , p1: RedisReplicationGroupConfig , p2: RedisReplicationGroupConfig ): Boolean replaceAll [jvm] open override fun replaceAll (p0: BiFunction <in String , in RedisReplicationGroupConfig , out RedisReplicationGroupConfig >) replacementNode [jvm] open override fun replacementNode (p0: HashMap.Node < String , RedisReplicationGroupConfig >, p1: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.Node < String , RedisReplicationGroupConfig > replacementTreeNode [jvm] open override fun replacementTreeNode (p0: HashMap.Node < String , RedisReplicationGroupConfig >, p1: HashMap.Node < String , RedisReplicationGroupConfig >): HashMap.TreeNode < String , RedisReplicationGroupConfig > resize [jvm] fun resize (): Array < HashMap.Node < String , RedisReplicationGroupConfig >> toString [jvm] open override fun toString (): String treeifyBin [jvm] fun treeifyBin (p0: Array < HashMap.Node < String , RedisReplicationGroupConfig >>, p1: Int )","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-redis-config/#properties","text":"Name Summary accessOrder [jvm] val accessOrder : Boolean entries [jvm] open override val entries : MutableSet < MutableMap.MutableEntry < String , RedisReplicationGroupConfig >> entrySet [jvm] val entrySet : MutableSet < MutableMap.MutableEntry < String , RedisReplicationGroupConfig >> head [jvm] val head : LinkedHashMap.Entry < String , RedisReplicationGroupConfig > keys [jvm] open override val keys : MutableSet < String > keySet [jvm] val keySet : MutableSet < String > loadFactor [jvm] val loadFactor : Float modCount [jvm] val modCount : Int size [jvm] open override val size : Int size [jvm] val size : Int table [jvm] val table : Array < HashMap.Node < String , RedisReplicationGroupConfig >> tail [jvm] val tail : LinkedHashMap.Entry < String , RedisReplicationGroupConfig > threshold [jvm] val threshold : Int values [jvm] open override val values : MutableCollection < RedisReplicationGroupConfig > values [jvm] val values : MutableCollection < RedisReplicationGroupConfig >","title":"Properties"},{"location":"0.x/misk-redis/misk.redis/-redis-config/-redis-config/","text":"// misk-redis / misk.redis / RedisConfig / RedisConfig RedisConfig \u00b6 [jvm]\\ fun RedisConfig () fun RedisConfig (m: Map < String , RedisReplicationGroupConfig >)","title":"RedisConfig - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-config/-redis-config/#redisconfig","text":"[jvm]\\ fun RedisConfig () fun RedisConfig (m: Map < String , RedisReplicationGroupConfig >)","title":"RedisConfig"},{"location":"0.x/misk-redis/misk.redis/-redis-connection-exception/","text":"// misk-redis / misk.redis / RedisConnectionException RedisConnectionException \u00b6 [jvm]\\ class RedisConnectionException (cluster: String , cause: Throwable ) : RuntimeException Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"RedisConnectionException - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-connection-exception/#redisconnectionexception","text":"[jvm]\\ class RedisConnectionException (cluster: String , cause: Throwable ) : RuntimeException","title":"RedisConnectionException"},{"location":"0.x/misk-redis/misk.redis/-redis-connection-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-redis-connection-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"0.x/misk-redis/misk.redis/-redis-connection-exception/-redis-connection-exception/","text":"// misk-redis / misk.redis / RedisConnectionException / RedisConnectionException RedisConnectionException \u00b6 [jvm]\\ fun RedisConnectionException (cluster: String , cause: Throwable )","title":"RedisConnectionException - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-connection-exception/-redis-connection-exception/#redisconnectionexception","text":"[jvm]\\ fun RedisConnectionException (cluster: String , cause: Throwable )","title":"RedisConnectionException"},{"location":"0.x/misk-redis/misk.redis/-redis-module/","text":"// misk-redis / misk.redis / RedisModule RedisModule \u00b6 [jvm]\\ class RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig) : KAbstractModule Configures a JedisPool to connect to a Redis instance. The use of a JedisPool ensures thread safety. See: https://github.com/xetorthio/jedis/wiki/Getting-started#using-jedis-in-a-multithreaded-environment Constructors \u00b6 RedisModule [jvm] fun RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RedisModule - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-module/#redismodule","text":"[jvm]\\ class RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig) : KAbstractModule Configures a JedisPool to connect to a Redis instance. The use of a JedisPool ensures thread safety. See: https://github.com/xetorthio/jedis/wiki/Getting-started#using-jedis-in-a-multithreaded-environment","title":"RedisModule"},{"location":"0.x/misk-redis/misk.redis/-redis-module/#constructors","text":"RedisModule [jvm] fun RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig)","title":"Constructors"},{"location":"0.x/misk-redis/misk.redis/-redis-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-redis-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-redis/misk.redis/-redis-module/-redis-module/","text":"// misk-redis / misk.redis / RedisModule / RedisModule RedisModule \u00b6 [jvm]\\ fun RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig)","title":"RedisModule - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-module/-redis-module/#redismodule","text":"[jvm]\\ fun RedisModule (redisConfig: RedisConfig , jedisPoolConfig: JedisPoolConfig)","title":"RedisModule"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/","text":"// misk-redis / misk.redis / RedisNodeConfig RedisNodeConfig \u00b6 [jvm]\\ data class RedisNodeConfig (hostname: String , port: Int ) Properties \u00b6 Name Summary hostname [jvm] val hostname : String port [jvm] val port : Int","title":"RedisNodeConfig - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/#redisnodeconfig","text":"[jvm]\\ data class RedisNodeConfig (hostname: String , port: Int )","title":"RedisNodeConfig"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/#properties","text":"Name Summary hostname [jvm] val hostname : String port [jvm] val port : Int","title":"Properties"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/-redis-node-config/","text":"// misk-redis / misk.redis / RedisNodeConfig / RedisNodeConfig RedisNodeConfig \u00b6 [jvm]\\ fun RedisNodeConfig (hostname: String , port: Int )","title":"RedisNodeConfig - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/-redis-node-config/#redisnodeconfig","text":"[jvm]\\ fun RedisNodeConfig (hostname: String , port: Int )","title":"RedisNodeConfig"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/hostname/","text":"// misk-redis / misk.redis / RedisNodeConfig / hostname hostname \u00b6 [jvm]\\ val hostname : String","title":"hostname - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/hostname/#hostname","text":"[jvm]\\ val hostname : String","title":"hostname"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/port/","text":"// misk-redis / misk.redis / RedisNodeConfig / port port \u00b6 [jvm]\\ val port : Int","title":"port - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-node-config/port/#port","text":"[jvm]\\ val port : Int","title":"port"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/","text":"// misk-redis / misk.redis / RedisReplicationGroupConfig RedisReplicationGroupConfig \u00b6 [jvm]\\ data class RedisReplicationGroupConfig (writer_endpoint: RedisNodeConfig , reader_endpoint: RedisNodeConfig , redis_auth_password: String , timeout_ms: Int ) Properties \u00b6 Name Summary reader_endpoint [jvm] val reader_endpoint : RedisNodeConfig redis_auth_password [jvm] val redis_auth_password : String timeout_ms [jvm] val timeout_ms : Int writer_endpoint [jvm] val writer_endpoint : RedisNodeConfig","title":"RedisReplicationGroupConfig - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/#redisreplicationgroupconfig","text":"[jvm]\\ data class RedisReplicationGroupConfig (writer_endpoint: RedisNodeConfig , reader_endpoint: RedisNodeConfig , redis_auth_password: String , timeout_ms: Int )","title":"RedisReplicationGroupConfig"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/#properties","text":"Name Summary reader_endpoint [jvm] val reader_endpoint : RedisNodeConfig redis_auth_password [jvm] val redis_auth_password : String timeout_ms [jvm] val timeout_ms : Int writer_endpoint [jvm] val writer_endpoint : RedisNodeConfig","title":"Properties"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/-redis-replication-group-config/","text":"// misk-redis / misk.redis / RedisReplicationGroupConfig / RedisReplicationGroupConfig RedisReplicationGroupConfig \u00b6 [jvm]\\ fun RedisReplicationGroupConfig (writer_endpoint: RedisNodeConfig , reader_endpoint: RedisNodeConfig , redis_auth_password: String , timeout_ms: Int = Protocol.DEFAULT_TIMEOUT)","title":"RedisReplicationGroupConfig - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/-redis-replication-group-config/#redisreplicationgroupconfig","text":"[jvm]\\ fun RedisReplicationGroupConfig (writer_endpoint: RedisNodeConfig , reader_endpoint: RedisNodeConfig , redis_auth_password: String , timeout_ms: Int = Protocol.DEFAULT_TIMEOUT)","title":"RedisReplicationGroupConfig"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/reader_endpoint/","text":"// misk-redis / misk.redis / RedisReplicationGroupConfig / reader_endpoint reader_endpoint \u00b6 [jvm]\\ val reader_endpoint : RedisNodeConfig","title":"reader_endpoint - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/reader_endpoint/#reader_endpoint","text":"[jvm]\\ val reader_endpoint : RedisNodeConfig","title":"reader_endpoint"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/redis_auth_password/","text":"// misk-redis / misk.redis / RedisReplicationGroupConfig / redis_auth_password redis_auth_password \u00b6 [jvm]\\ val redis_auth_password : String","title":"redis_auth_password - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/redis_auth_password/#redis_auth_password","text":"[jvm]\\ val redis_auth_password : String","title":"redis_auth_password"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/timeout_ms/","text":"// misk-redis / misk.redis / RedisReplicationGroupConfig / timeout_ms timeout_ms \u00b6 [jvm]\\ val timeout_ms : Int","title":"timeout_ms - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/timeout_ms/#timeout_ms","text":"[jvm]\\ val timeout_ms : Int","title":"timeout_ms"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/writer_endpoint/","text":"// misk-redis / misk.redis / RedisReplicationGroupConfig / writer_endpoint writer_endpoint \u00b6 [jvm]\\ val writer_endpoint : RedisNodeConfig","title":"writer_endpoint - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-replication-group-config/writer_endpoint/#writer_endpoint","text":"[jvm]\\ val writer_endpoint : RedisNodeConfig","title":"writer_endpoint"},{"location":"0.x/misk-redis/misk.redis/-redis-service/","text":"// misk-redis / misk.redis / RedisService RedisService \u00b6 [jvm]\\ @Singleton class RedisService : AbstractIdleService Controls the connection lifecycle for Redis. Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"RedisService - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-service/#redisservice","text":"[jvm]\\ @Singleton class RedisService : AbstractIdleService Controls the connection lifecycle for Redis.","title":"RedisService"},{"location":"0.x/misk-redis/misk.redis/-redis-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-redis-test-module/","text":"// misk-redis / misk.redis / RedisTestModule RedisTestModule \u00b6 [jvm]\\ class RedisTestModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"RedisTestModule - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-test-module/#redistestmodule","text":"[jvm]\\ class RedisTestModule : KAbstractModule","title":"RedisTestModule"},{"location":"0.x/misk-redis/misk.redis/-redis-test-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-redis/misk.redis/-redis-test-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-redis/misk.redis/-redis-test-module/-redis-test-module/","text":"// misk-redis / misk.redis / RedisTestModule / RedisTestModule RedisTestModule \u00b6 [jvm]\\ fun RedisTestModule ()","title":"RedisTestModule - Misk"},{"location":"0.x/misk-redis/misk.redis/-redis-test-module/-redis-test-module/#redistestmodule","text":"[jvm]\\ fun RedisTestModule ()","title":"RedisTestModule"},{"location":"0.x/misk-service/misk/","text":"// misk-service / misk Package misk \u00b6 Types \u00b6 Name Summary DelegatingService [jvm] interface DelegatingService : Service Interface to retrieve the underlying Service of a wrapper Service ServiceManagerModule [jvm] class ServiceManagerModule : KAbstractModule ServiceModule [jvm] class ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>>, enhancedBy: List <Key<out Service>>, enhances: Key<out Service>?) : KAbstractModule Services in Misk can depend on other services. Functions \u00b6 Name Summary ServiceModule [jvm] inline fun < T : Service> ServiceModule (qualifier: KClass <out Annotation >? = null): ServiceModule Returns a ServiceModule and hooks up service dependencies and enhancements.","title":"Package misk - Misk"},{"location":"0.x/misk-service/misk/#package-misk","text":"","title":"Package misk"},{"location":"0.x/misk-service/misk/#types","text":"Name Summary DelegatingService [jvm] interface DelegatingService : Service Interface to retrieve the underlying Service of a wrapper Service ServiceManagerModule [jvm] class ServiceManagerModule : KAbstractModule ServiceModule [jvm] class ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>>, enhancedBy: List <Key<out Service>>, enhances: Key<out Service>?) : KAbstractModule Services in Misk can depend on other services.","title":"Types"},{"location":"0.x/misk-service/misk/#functions","text":"Name Summary ServiceModule [jvm] inline fun < T : Service> ServiceModule (qualifier: KClass <out Annotation >? = null): ServiceModule Returns a ServiceModule and hooks up service dependencies and enhancements.","title":"Functions"},{"location":"0.x/misk-service/misk/-service-module/","text":"// misk-service / misk / ServiceModule ServiceModule \u00b6 [jvm]\\ inline fun < T : Service> ServiceModule (qualifier: KClass <out Annotation >? = null): ServiceModule Returns a ServiceModule and hooks up service dependencies and enhancements. Here\u2019s how: Guice.createInjector(object : KAbstractModule() {\\ override fun configure() {\\ install(ServiceModule<MyService>()\\ .dependsOn<MyServiceDependency>())\\ install(ServiceModule<MyServiceDependency>())\\ }\\ } Dependencies and services may be optionally annotated: Guice.createInjector(object : KAbstractModule() {\\ override fun configure() {\\ install(ServiceModule<MyService>(MyAnnotation::class)\\ .dependsOn<MyServiceDependency>(AnotherAnnotation::class))\\ install(ServiceModule<MyServiceDependency>(AnotherAnnotation::class))\\ }\\ }","title":"ServiceModule - Misk"},{"location":"0.x/misk-service/misk/-service-module/#servicemodule","text":"[jvm]\\ inline fun < T : Service> ServiceModule (qualifier: KClass <out Annotation >? = null): ServiceModule Returns a ServiceModule and hooks up service dependencies and enhancements. Here\u2019s how: Guice.createInjector(object : KAbstractModule() {\\ override fun configure() {\\ install(ServiceModule<MyService>()\\ .dependsOn<MyServiceDependency>())\\ install(ServiceModule<MyServiceDependency>())\\ }\\ } Dependencies and services may be optionally annotated: Guice.createInjector(object : KAbstractModule() {\\ override fun configure() {\\ install(ServiceModule<MyService>(MyAnnotation::class)\\ .dependsOn<MyServiceDependency>(AnotherAnnotation::class))\\ install(ServiceModule<MyServiceDependency>(AnotherAnnotation::class))\\ }\\ }","title":"ServiceModule"},{"location":"0.x/misk-service/misk/-delegating-service/","text":"// misk-service / misk / DelegatingService DelegatingService \u00b6 [jvm]\\ interface DelegatingService : Service Interface to retrieve the underlying Service of a wrapper Service Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service Properties \u00b6 Name Summary service [jvm] abstract val service : Service","title":"DelegatingService - Misk"},{"location":"0.x/misk-service/misk/-delegating-service/#delegatingservice","text":"[jvm]\\ interface DelegatingService : Service Interface to retrieve the underlying Service of a wrapper Service","title":"DelegatingService"},{"location":"0.x/misk-service/misk/-delegating-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-service/misk/-delegating-service/#properties","text":"Name Summary service [jvm] abstract val service : Service","title":"Properties"},{"location":"0.x/misk-service/misk/-delegating-service/service/","text":"// misk-service / misk / DelegatingService / service service \u00b6 [jvm]\\ abstract val service : Service","title":"service - Misk"},{"location":"0.x/misk-service/misk/-delegating-service/service/#service","text":"[jvm]\\ abstract val service : Service","title":"service"},{"location":"0.x/misk-service/misk/-service-manager-module/","text":"// misk-service / misk / ServiceManagerModule ServiceManagerModule \u00b6 [jvm]\\ class ServiceManagerModule : KAbstractModule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ServiceManagerModule - Misk"},{"location":"0.x/misk-service/misk/-service-manager-module/#servicemanagermodule","text":"[jvm]\\ class ServiceManagerModule : KAbstractModule","title":"ServiceManagerModule"},{"location":"0.x/misk-service/misk/-service-manager-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-service/misk/-service-manager-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-service/misk/-service-manager-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-service/misk/-service-manager-module/-service-manager-module/","text":"// misk-service / misk / ServiceManagerModule / ServiceManagerModule ServiceManagerModule \u00b6 [jvm]\\ fun ServiceManagerModule ()","title":"ServiceManagerModule - Misk"},{"location":"0.x/misk-service/misk/-service-manager-module/-service-manager-module/#servicemanagermodule","text":"[jvm]\\ fun ServiceManagerModule ()","title":"ServiceManagerModule"},{"location":"0.x/misk-service/misk/-service-manager-module/-companion/","text":"// misk-service / misk / ServiceManagerModule / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-service/misk/-service-manager-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-service/misk/-service-module/","text":"// misk-service / misk / ServiceModule ServiceModule \u00b6 [jvm]\\ class ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>>, enhancedBy: List <Key<out Service>>, enhances: Key<out Service>?) : KAbstractModule Misk Services \u00b6 Services in Misk can depend on other services. Dependencies \u00b6 Suppose we have a DatabaseService and a MovieService, with the MovieService depending on the DatabaseService. DatabaseService\\ depended on by MovieService When you install a service via this module, start-up and shut-down of its dependencies are handled automatically, so that a service can only run when the services it depends on are running. In the example above, the MovieService doesn\u2019t enter the STARTING state until the DatabaseService has entered the RUNNING state. Conversely, the MovieService must enter the TERMINATED state before the DatabaseService enters the STOPPING state. Dependencies can have their own dependencies, so there\u2019s an entire graph to manage of what starts and stops when. Enhancements \u00b6 Some services exist to enhance the behavior of another service. For example, a DatabaseService may manage a generic connection to a MySQL database, and the SchemaMigrationService may create tables specific to the application. We treat such enhancements as implementation details of the enhanced service: they depend on the service, but downstream dependencies like the MovieService don\u2019t need to know that they exist. DatabaseService\\ enhanced by SchemaMigrationService\\ depended on by MovieService In the above service graph we start the DatabaseService first, the SchemaMigrationService second, and finally the MovieService. The MovieService doesn\u2019t need to express a dependency on the SchemaMigrationService, that happens automatically for enhancements. What does this look like? \u00b6 Instead of using the regular service multi-bindings you might be used to, in the configure block of a Guice KAbstractModule, you would set up the above relationship as follows: override fun configure() {\\ install(ServiceModule<SchemaMigrationService())\\ install(ServiceModule<DatabaseService>()\\ .enhancedBy<SchemaMigrationService>())\\ install(ServiceModule<MoviesService>()\\ .dependsOn<DatabaseService>())\\ } How does this work? \u00b6 Bindings are hooked up for a ServiceManager provider, which decorates the service with its dependencies and enhancements to defer its start up and shut down until its dependent services are ready. This service will stall in the STARTING state until all upstream services are RUNNING. Symmetrically it stalls in the STOPPING state until all dependent services are TERMINATED. Constructors \u00b6 ServiceModule [jvm] fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf()) ServiceModule [jvm] fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf(), enhances: Key<out Service>? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage dependsOn [jvm] fun dependsOn (upstream: Key<out Service>): ServiceModule inline fun < T : Service> dependsOn (qualifier: KClass <out Annotation >? = null): ServiceModule enhancedBy [jvm] fun enhancedBy (enhancement: Key<out Service>): ServiceModule inline fun < T : Service> enhancedBy (qualifier: KClass <out Annotation >? = null): ServiceModule enhances [jvm] fun enhances (toBeEnhanced: Key<out Service>): ServiceModule inline fun < T : Service> enhances (qualifier: KClass <out Annotation >? = null): ServiceModule getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder dependsOn [jvm] val dependsOn : List <Key<out Service>> enhancedBy [jvm] val enhancedBy : List <Key<out Service>> enhances [jvm] val enhances : Key<out Service>? = null key [jvm] val key : Key<out Service>","title":"ServiceModule - Misk"},{"location":"0.x/misk-service/misk/-service-module/#servicemodule","text":"[jvm]\\ class ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>>, enhancedBy: List <Key<out Service>>, enhances: Key<out Service>?) : KAbstractModule","title":"ServiceModule"},{"location":"0.x/misk-service/misk/-service-module/#misk-services","text":"Services in Misk can depend on other services.","title":"Misk Services"},{"location":"0.x/misk-service/misk/-service-module/#dependencies","text":"Suppose we have a DatabaseService and a MovieService, with the MovieService depending on the DatabaseService. DatabaseService\\ depended on by MovieService When you install a service via this module, start-up and shut-down of its dependencies are handled automatically, so that a service can only run when the services it depends on are running. In the example above, the MovieService doesn\u2019t enter the STARTING state until the DatabaseService has entered the RUNNING state. Conversely, the MovieService must enter the TERMINATED state before the DatabaseService enters the STOPPING state. Dependencies can have their own dependencies, so there\u2019s an entire graph to manage of what starts and stops when.","title":"Dependencies"},{"location":"0.x/misk-service/misk/-service-module/#enhancements","text":"Some services exist to enhance the behavior of another service. For example, a DatabaseService may manage a generic connection to a MySQL database, and the SchemaMigrationService may create tables specific to the application. We treat such enhancements as implementation details of the enhanced service: they depend on the service, but downstream dependencies like the MovieService don\u2019t need to know that they exist. DatabaseService\\ enhanced by SchemaMigrationService\\ depended on by MovieService In the above service graph we start the DatabaseService first, the SchemaMigrationService second, and finally the MovieService. The MovieService doesn\u2019t need to express a dependency on the SchemaMigrationService, that happens automatically for enhancements.","title":"Enhancements"},{"location":"0.x/misk-service/misk/-service-module/#what-does-this-look-like","text":"Instead of using the regular service multi-bindings you might be used to, in the configure block of a Guice KAbstractModule, you would set up the above relationship as follows: override fun configure() {\\ install(ServiceModule<SchemaMigrationService())\\ install(ServiceModule<DatabaseService>()\\ .enhancedBy<SchemaMigrationService>())\\ install(ServiceModule<MoviesService>()\\ .dependsOn<DatabaseService>())\\ }","title":"What does this look like?"},{"location":"0.x/misk-service/misk/-service-module/#how-does-this-work","text":"Bindings are hooked up for a ServiceManager provider, which decorates the service with its dependencies and enhancements to defer its start up and shut down until its dependent services are ready. This service will stall in the STARTING state until all upstream services are RUNNING. Symmetrically it stalls in the STOPPING state until all dependent services are TERMINATED.","title":"How does this work?"},{"location":"0.x/misk-service/misk/-service-module/#constructors","text":"ServiceModule [jvm] fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf()) ServiceModule [jvm] fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf(), enhances: Key<out Service>? = null)","title":"Constructors"},{"location":"0.x/misk-service/misk/-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage dependsOn [jvm] fun dependsOn (upstream: Key<out Service>): ServiceModule inline fun < T : Service> dependsOn (qualifier: KClass <out Annotation >? = null): ServiceModule enhancedBy [jvm] fun enhancedBy (enhancement: Key<out Service>): ServiceModule inline fun < T : Service> enhancedBy (qualifier: KClass <out Annotation >? = null): ServiceModule enhances [jvm] fun enhances (toBeEnhanced: Key<out Service>): ServiceModule inline fun < T : Service> enhances (qualifier: KClass <out Annotation >? = null): ServiceModule getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-service/misk/-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder dependsOn [jvm] val dependsOn : List <Key<out Service>> enhancedBy [jvm] val enhancedBy : List <Key<out Service>> enhances [jvm] val enhances : Key<out Service>? = null key [jvm] val key : Key<out Service>","title":"Properties"},{"location":"0.x/misk-service/misk/-service-module/-service-module/","text":"// misk-service / misk / ServiceModule / ServiceModule ServiceModule \u00b6 [jvm]\\ fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf()) fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf(), enhances: Key<out Service>? = null)","title":"ServiceModule - Misk"},{"location":"0.x/misk-service/misk/-service-module/-service-module/#servicemodule","text":"[jvm]\\ fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf()) fun ServiceModule (key: Key<out Service>, dependsOn: List <Key<out Service>> = listOf(), enhancedBy: List <Key<out Service>> = listOf(), enhances: Key<out Service>? = null)","title":"ServiceModule"},{"location":"0.x/misk-service/misk/-service-module/depends-on/","text":"// misk-service / misk / ServiceModule / dependsOn dependsOn \u00b6 [jvm]\\ fun dependsOn (upstream: Key<out Service>): ServiceModule inline fun < T : Service> dependsOn (qualifier: KClass <out Annotation >? = null): ServiceModule val dependsOn : List <Key<out Service>>","title":"dependsOn - Misk"},{"location":"0.x/misk-service/misk/-service-module/depends-on/#dependson","text":"[jvm]\\ fun dependsOn (upstream: Key<out Service>): ServiceModule inline fun < T : Service> dependsOn (qualifier: KClass <out Annotation >? = null): ServiceModule val dependsOn : List <Key<out Service>>","title":"dependsOn"},{"location":"0.x/misk-service/misk/-service-module/enhanced-by/","text":"// misk-service / misk / ServiceModule / enhancedBy enhancedBy \u00b6 [jvm]\\ fun enhancedBy (enhancement: Key<out Service>): ServiceModule inline fun < T : Service> enhancedBy (qualifier: KClass <out Annotation >? = null): ServiceModule val enhancedBy : List <Key<out Service>>","title":"enhancedBy - Misk"},{"location":"0.x/misk-service/misk/-service-module/enhanced-by/#enhancedby","text":"[jvm]\\ fun enhancedBy (enhancement: Key<out Service>): ServiceModule inline fun < T : Service> enhancedBy (qualifier: KClass <out Annotation >? = null): ServiceModule val enhancedBy : List <Key<out Service>>","title":"enhancedBy"},{"location":"0.x/misk-service/misk/-service-module/enhances/","text":"// misk-service / misk / ServiceModule / enhances enhances \u00b6 [jvm]\\ fun enhances (toBeEnhanced: Key<out Service>): ServiceModule inline fun < T : Service> enhances (qualifier: KClass <out Annotation >? = null): ServiceModule val enhances : Key<out Service>? = null","title":"enhances - Misk"},{"location":"0.x/misk-service/misk/-service-module/enhances/#enhances","text":"[jvm]\\ fun enhances (toBeEnhanced: Key<out Service>): ServiceModule inline fun < T : Service> enhances (qualifier: KClass <out Annotation >? = null): ServiceModule val enhances : Key<out Service>? = null","title":"enhances"},{"location":"0.x/misk-service/misk/-service-module/key/","text":"// misk-service / misk / ServiceModule / key key \u00b6 [jvm]\\ val key : Key<out Service>","title":"key - Misk"},{"location":"0.x/misk-service/misk/-service-module/key/#key","text":"[jvm]\\ val key : Key<out Service>","title":"key"},{"location":"0.x/misk-slack/misk.slack/","text":"// misk-slack / misk.slack Package misk.slack \u00b6 Types \u00b6 Name Summary RealSlackClient [jvm] class RealSlackClient @Injectconstructor(slackWebHookApi: SlackWebhookApi , config: SlackConfig ) : SlackClient SlackClient [jvm] open class SlackClient @Injectconstructor Dummy client that does nothing if SlackModule is not installed . SlackConfig [jvm] data class SlackConfig (baseUrl: String , webhook_path: Secret< String >, default_channel: String ?) SlackModule [jvm] class SlackModule (config: SlackConfig ) : KAbstractModule Installs the Slack webhook client. This should be installed once per service and enables imported libraries to post to Slack using the service level config. SlackWebhookApi [jvm] interface SlackWebhookApi SlackWebhookRequest [jvm] @JsonClass(generateAdapter = true) data class SlackWebhookRequest (channel: String , username: String , text: String , icon_emoji: String ) SlackWebhookResponse [jvm] @JsonClass(generateAdapter = true) enum SlackWebhookResponse : Enum < SlackWebhookResponse >","title":"Package misk.slack - Misk"},{"location":"0.x/misk-slack/misk.slack/#package-miskslack","text":"","title":"Package misk.slack"},{"location":"0.x/misk-slack/misk.slack/#types","text":"Name Summary RealSlackClient [jvm] class RealSlackClient @Injectconstructor(slackWebHookApi: SlackWebhookApi , config: SlackConfig ) : SlackClient SlackClient [jvm] open class SlackClient @Injectconstructor Dummy client that does nothing if SlackModule is not installed . SlackConfig [jvm] data class SlackConfig (baseUrl: String , webhook_path: Secret< String >, default_channel: String ?) SlackModule [jvm] class SlackModule (config: SlackConfig ) : KAbstractModule Installs the Slack webhook client. This should be installed once per service and enables imported libraries to post to Slack using the service level config. SlackWebhookApi [jvm] interface SlackWebhookApi SlackWebhookRequest [jvm] @JsonClass(generateAdapter = true) data class SlackWebhookRequest (channel: String , username: String , text: String , icon_emoji: String ) SlackWebhookResponse [jvm] @JsonClass(generateAdapter = true) enum SlackWebhookResponse : Enum < SlackWebhookResponse >","title":"Types"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/","text":"// misk-slack / misk.slack / RealSlackClient RealSlackClient \u00b6 [jvm]\\ class RealSlackClient @Injectconstructor(slackWebHookApi: SlackWebhookApi , config: SlackConfig ) : SlackClient Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary postMessage [jvm] open override fun postMessage (username: String , iconEmoji: String , message: String , channel: String ?): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. Does not throw on IO exceptions.","title":"RealSlackClient - Misk"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/#realslackclient","text":"[jvm]\\ class RealSlackClient @Injectconstructor(slackWebHookApi: SlackWebhookApi , config: SlackConfig ) : SlackClient","title":"RealSlackClient"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/#functions","text":"Name Summary postMessage [jvm] open override fun postMessage (username: String , iconEmoji: String , message: String , channel: String ?): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. Does not throw on IO exceptions.","title":"Functions"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/-real-slack-client/","text":"// misk-slack / misk.slack / RealSlackClient / RealSlackClient RealSlackClient \u00b6 [jvm]\\ @Inject fun RealSlackClient (slackWebHookApi: SlackWebhookApi , config: SlackConfig )","title":"RealSlackClient - Misk"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/-real-slack-client/#realslackclient","text":"[jvm]\\ @Inject fun RealSlackClient (slackWebHookApi: SlackWebhookApi , config: SlackConfig )","title":"RealSlackClient"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/post-message/","text":"// misk-slack / misk.slack / RealSlackClient / postMessage postMessage \u00b6 [jvm]\\ open override fun postMessage (username: String , iconEmoji: String , message: String , channel: String ?): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. Does not throw on IO exceptions.","title":"postMessage - Misk"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/post-message/#postmessage","text":"[jvm]\\ open override fun postMessage (username: String , iconEmoji: String , message: String , channel: String ?): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. Does not throw on IO exceptions.","title":"postMessage"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/-companion/","text":"// misk-slack / misk.slack / RealSlackClient / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary logger [jvm] val logger : KLogger","title":"Companion - Misk"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/-companion/#properties","text":"Name Summary logger [jvm] val logger : KLogger","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/-companion/logger/","text":"// misk-slack / misk.slack / RealSlackClient / Companion / logger logger \u00b6 [jvm]\\ val logger : KLogger","title":"logger - Misk"},{"location":"0.x/misk-slack/misk.slack/-real-slack-client/-companion/logger/#logger","text":"[jvm]\\ val logger : KLogger","title":"logger"},{"location":"0.x/misk-slack/misk.slack/-slack-client/","text":"// misk-slack / misk.slack / SlackClient SlackClient \u00b6 [jvm]\\ open class SlackClient @Injectconstructor Dummy client that does nothing if SlackModule is not installed . Constructors \u00b6 SlackClient [jvm] @Inject fun SlackClient () Functions \u00b6 Name Summary postMessage [jvm] open fun postMessage (username: String , iconEmoji: String , message: String , channel: String ? = null): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. If the service has not configured a slack module, this method is a no-op. Does not throw on IO exceptions. Inheritors \u00b6 Name RealSlackClient","title":"SlackClient - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-client/#slackclient","text":"[jvm]\\ open class SlackClient @Injectconstructor Dummy client that does nothing if SlackModule is not installed .","title":"SlackClient"},{"location":"0.x/misk-slack/misk.slack/-slack-client/#constructors","text":"SlackClient [jvm] @Inject fun SlackClient ()","title":"Constructors"},{"location":"0.x/misk-slack/misk.slack/-slack-client/#functions","text":"Name Summary postMessage [jvm] open fun postMessage (username: String , iconEmoji: String , message: String , channel: String ? = null): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. If the service has not configured a slack module, this method is a no-op. Does not throw on IO exceptions.","title":"Functions"},{"location":"0.x/misk-slack/misk.slack/-slack-client/#inheritors","text":"Name RealSlackClient","title":"Inheritors"},{"location":"0.x/misk-slack/misk.slack/-slack-client/-slack-client/","text":"// misk-slack / misk.slack / SlackClient / SlackClient SlackClient \u00b6 [jvm]\\ @Inject fun SlackClient ()","title":"SlackClient - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-client/-slack-client/#slackclient","text":"[jvm]\\ @Inject fun SlackClient ()","title":"SlackClient"},{"location":"0.x/misk-slack/misk.slack/-slack-client/post-message/","text":"// misk-slack / misk.slack / SlackClient / postMessage postMessage \u00b6 [jvm]\\ open fun postMessage (username: String , iconEmoji: String , message: String , channel: String ? = null): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. If the service has not configured a slack module, this method is a no-op. Does not throw on IO exceptions.","title":"postMessage - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-client/post-message/#postmessage","text":"[jvm]\\ open fun postMessage (username: String , iconEmoji: String , message: String , channel: String ? = null): SlackWebhookResponse ? Post a message as the specified bot username and icon emoji in the channel. If no channel is provided, the default channel configured by the service is used. If the service has not configured a slack module, this method is a no-op. Does not throw on IO exceptions.","title":"postMessage"},{"location":"0.x/misk-slack/misk.slack/-slack-config/","text":"// misk-slack / misk.slack / SlackConfig SlackConfig \u00b6 [jvm]\\ data class SlackConfig (baseUrl: String , webhook_path: Secret< String >, default_channel: String ?) Properties \u00b6 Name Summary baseUrl [jvm] val baseUrl : String default_channel [jvm] val default_channel : String ? The channel to post to if the caller doesn\u2019t specify one. A service that always posts to one channel should specify this, but a service that operates on other services can instead specify a channel for each message. webhook_path [jvm] val webhook_path : Secret< String > The full webhook path, i.e. /services/\u2026 Ideally this is not stored plaintext in the config file, but in a secret.","title":"SlackConfig - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-config/#slackconfig","text":"[jvm]\\ data class SlackConfig (baseUrl: String , webhook_path: Secret< String >, default_channel: String ?)","title":"SlackConfig"},{"location":"0.x/misk-slack/misk.slack/-slack-config/#properties","text":"Name Summary baseUrl [jvm] val baseUrl : String default_channel [jvm] val default_channel : String ? The channel to post to if the caller doesn\u2019t specify one. A service that always posts to one channel should specify this, but a service that operates on other services can instead specify a channel for each message. webhook_path [jvm] val webhook_path : Secret< String > The full webhook path, i.e. /services/\u2026 Ideally this is not stored plaintext in the config file, but in a secret.","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-config/-slack-config/","text":"// misk-slack / misk.slack / SlackConfig / SlackConfig SlackConfig \u00b6 [jvm]\\ fun SlackConfig (baseUrl: String = \u201c https://hooks.slack.com/ \u201d, webhook_path: Secret< String >, default_channel: String ?)","title":"SlackConfig - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-config/-slack-config/#slackconfig","text":"[jvm]\\ fun SlackConfig (baseUrl: String = \u201c https://hooks.slack.com/ \u201d, webhook_path: Secret< String >, default_channel: String ?)","title":"SlackConfig"},{"location":"0.x/misk-slack/misk.slack/-slack-config/base-url/","text":"// misk-slack / misk.slack / SlackConfig / baseUrl baseUrl \u00b6 [jvm]\\ val baseUrl : String","title":"baseUrl - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-config/base-url/#baseurl","text":"[jvm]\\ val baseUrl : String","title":"baseUrl"},{"location":"0.x/misk-slack/misk.slack/-slack-config/default_channel/","text":"// misk-slack / misk.slack / SlackConfig / default_channel default_channel \u00b6 [jvm]\\ val default_channel : String ? The channel to post to if the caller doesn\u2019t specify one. A service that always posts to one channel should specify this, but a service that operates on other services can instead specify a channel for each message.","title":"default_channel - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-config/default_channel/#default_channel","text":"[jvm]\\ val default_channel : String ? The channel to post to if the caller doesn\u2019t specify one. A service that always posts to one channel should specify this, but a service that operates on other services can instead specify a channel for each message.","title":"default_channel"},{"location":"0.x/misk-slack/misk.slack/-slack-config/webhook_path/","text":"// misk-slack / misk.slack / SlackConfig / webhook_path webhook_path \u00b6 [jvm]\\ val webhook_path : Secret< String > The full webhook path, i.e. /services/\u2026 Ideally this is not stored plaintext in the config file, but in a secret.","title":"webhook_path - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-config/webhook_path/#webhook_path","text":"[jvm]\\ val webhook_path : Secret< String > The full webhook path, i.e. /services/\u2026 Ideally this is not stored plaintext in the config file, but in a secret.","title":"webhook_path"},{"location":"0.x/misk-slack/misk.slack/-slack-module/","text":"// misk-slack / misk.slack / SlackModule SlackModule \u00b6 [jvm]\\ class SlackModule (config: SlackConfig ) : KAbstractModule Installs the Slack webhook client. This should be installed once per service and enables imported libraries to post to Slack using the service level config. Constructors \u00b6 SlackModule [jvm] fun SlackModule (config: SlackConfig ) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideMoshi [jvm] @Provides @Singleton @Named(value = \u201cmisk-slack\u201d) fun provideMoshi (): Moshi provideSlackWebhookApi [jvm] @Provides @Singleton fun provideSlackWebhookApi (httpClientFactory: HttpClientFactory, @Named(value = \u201cmisk-slack\u201d)moshi: Moshi): SlackWebhookApi requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"SlackModule - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-module/#slackmodule","text":"[jvm]\\ class SlackModule (config: SlackConfig ) : KAbstractModule Installs the Slack webhook client. This should be installed once per service and enables imported libraries to post to Slack using the service level config.","title":"SlackModule"},{"location":"0.x/misk-slack/misk.slack/-slack-module/#constructors","text":"SlackModule [jvm] fun SlackModule (config: SlackConfig )","title":"Constructors"},{"location":"0.x/misk-slack/misk.slack/-slack-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideMoshi [jvm] @Provides @Singleton @Named(value = \u201cmisk-slack\u201d) fun provideMoshi (): Moshi provideSlackWebhookApi [jvm] @Provides @Singleton fun provideSlackWebhookApi (httpClientFactory: HttpClientFactory, @Named(value = \u201cmisk-slack\u201d)moshi: Moshi): SlackWebhookApi requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-slack/misk.slack/-slack-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-module/-slack-module/","text":"// misk-slack / misk.slack / SlackModule / SlackModule SlackModule \u00b6 [jvm]\\ fun SlackModule (config: SlackConfig )","title":"SlackModule - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-module/-slack-module/#slackmodule","text":"[jvm]\\ fun SlackModule (config: SlackConfig )","title":"SlackModule"},{"location":"0.x/misk-slack/misk.slack/-slack-module/provide-moshi/","text":"// misk-slack / misk.slack / SlackModule / provideMoshi provideMoshi \u00b6 [jvm]\\ @Provides @Singleton @Named(value = \u201cmisk-slack\u201d) fun provideMoshi (): Moshi","title":"provideMoshi - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-module/provide-moshi/#providemoshi","text":"[jvm]\\ @Provides @Singleton @Named(value = \u201cmisk-slack\u201d) fun provideMoshi (): Moshi","title":"provideMoshi"},{"location":"0.x/misk-slack/misk.slack/-slack-module/provide-slack-webhook-api/","text":"// misk-slack / misk.slack / SlackModule / provideSlackWebhookApi provideSlackWebhookApi \u00b6 [jvm]\\ @Provides @Singleton fun provideSlackWebhookApi (httpClientFactory: HttpClientFactory, @Named(value = \u201cmisk-slack\u201d)moshi: Moshi): SlackWebhookApi","title":"provideSlackWebhookApi - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-module/provide-slack-webhook-api/#provideslackwebhookapi","text":"[jvm]\\ @Provides @Singleton fun provideSlackWebhookApi (httpClientFactory: HttpClientFactory, @Named(value = \u201cmisk-slack\u201d)moshi: Moshi): SlackWebhookApi","title":"provideSlackWebhookApi"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-api/","text":"// misk-slack / misk.slack / SlackWebhookApi SlackWebhookApi \u00b6 [jvm]\\ interface SlackWebhookApi Functions \u00b6 Name Summary post [jvm] @POST abstract fun post (@Urlurl: String , @Bodyrequest: SlackWebhookRequest ): Call< Void >","title":"SlackWebhookApi - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-api/#slackwebhookapi","text":"[jvm]\\ interface SlackWebhookApi","title":"SlackWebhookApi"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-api/#functions","text":"Name Summary post [jvm] @POST abstract fun post (@Urlurl: String , @Bodyrequest: SlackWebhookRequest ): Call< Void >","title":"Functions"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-api/post/","text":"// misk-slack / misk.slack / SlackWebhookApi / post post \u00b6 [jvm]\\ @POST abstract fun post (@Urlurl: String , @Bodyrequest: SlackWebhookRequest ): Call< Void >","title":"post - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-api/post/#post","text":"[jvm]\\ @POST abstract fun post (@Urlurl: String , @Bodyrequest: SlackWebhookRequest ): Call< Void >","title":"post"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/","text":"// misk-slack / misk.slack / SlackWebhookRequest SlackWebhookRequest \u00b6 [jvm]\\ @JsonClass(generateAdapter = true) data class SlackWebhookRequest (channel: String , username: String , text: String , icon_emoji: String ) Properties \u00b6 Name Summary channel [jvm] val channel : String icon_emoji [jvm] val icon_emoji : String text [jvm] val text : String username [jvm] val username : String","title":"SlackWebhookRequest - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/#slackwebhookrequest","text":"[jvm]\\ @JsonClass(generateAdapter = true) data class SlackWebhookRequest (channel: String , username: String , text: String , icon_emoji: String )","title":"SlackWebhookRequest"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/#properties","text":"Name Summary channel [jvm] val channel : String icon_emoji [jvm] val icon_emoji : String text [jvm] val text : String username [jvm] val username : String","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/-slack-webhook-request/","text":"// misk-slack / misk.slack / SlackWebhookRequest / SlackWebhookRequest SlackWebhookRequest \u00b6 [jvm]\\ fun SlackWebhookRequest (channel: String , username: String , text: String , icon_emoji: String )","title":"SlackWebhookRequest - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/-slack-webhook-request/#slackwebhookrequest","text":"[jvm]\\ fun SlackWebhookRequest (channel: String , username: String , text: String , icon_emoji: String )","title":"SlackWebhookRequest"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/channel/","text":"// misk-slack / misk.slack / SlackWebhookRequest / channel channel \u00b6 [jvm]\\ val channel : String","title":"channel - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/channel/#channel","text":"[jvm]\\ val channel : String","title":"channel"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/icon_emoji/","text":"// misk-slack / misk.slack / SlackWebhookRequest / icon_emoji icon_emoji \u00b6 [jvm]\\ val icon_emoji : String","title":"icon_emoji - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/icon_emoji/#icon_emoji","text":"[jvm]\\ val icon_emoji : String","title":"icon_emoji"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/text/","text":"// misk-slack / misk.slack / SlackWebhookRequest / text text \u00b6 [jvm]\\ val text : String","title":"text - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/text/#text","text":"[jvm]\\ val text : String","title":"text"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/username/","text":"// misk-slack / misk.slack / SlackWebhookRequest / username username \u00b6 [jvm]\\ val username : String","title":"username - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-request/username/#username","text":"[jvm]\\ val username : String","title":"username"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/","text":"// misk-slack / misk.slack / SlackWebhookResponse SlackWebhookResponse \u00b6 [jvm]\\ @JsonClass(generateAdapter = true) enum SlackWebhookResponse : Enum < SlackWebhookResponse > Entries \u00b6 missing_text_or_fallback_or_attachments [jvm] missing_text_or_fallback_or_attachments () action_prohibited [jvm] action_prohibited () channel_is_archived [jvm] channel_is_archived () channel_not_found [jvm] channel_not_found () user_not_found [jvm] user_not_found () invalid_payload [jvm] invalid_payload () ok [jvm] ok () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"SlackWebhookResponse - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/#slackwebhookresponse","text":"[jvm]\\ @JsonClass(generateAdapter = true) enum SlackWebhookResponse : Enum < SlackWebhookResponse >","title":"SlackWebhookResponse"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/#entries","text":"missing_text_or_fallback_or_attachments [jvm] missing_text_or_fallback_or_attachments () action_prohibited [jvm] action_prohibited () channel_is_archived [jvm] channel_is_archived () channel_not_found [jvm] channel_not_found () user_not_found [jvm] user_not_found () invalid_payload [jvm] invalid_payload () ok [jvm] ok ()","title":"Entries"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/action_prohibited/","text":"// misk-slack / misk.slack / SlackWebhookResponse / action_prohibited action_prohibited \u00b6 [jvm]\\ action_prohibited () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"action_prohibited - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/action_prohibited/#action_prohibited","text":"[jvm]\\ action_prohibited ()","title":"action_prohibited"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/action_prohibited/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/channel_is_archived/","text":"// misk-slack / misk.slack / SlackWebhookResponse / channel_is_archived channel_is_archived \u00b6 [jvm]\\ channel_is_archived () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"channel_is_archived - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/channel_is_archived/#channel_is_archived","text":"[jvm]\\ channel_is_archived ()","title":"channel_is_archived"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/channel_is_archived/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/channel_not_found/","text":"// misk-slack / misk.slack / SlackWebhookResponse / channel_not_found channel_not_found \u00b6 [jvm]\\ channel_not_found () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"channel_not_found - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/channel_not_found/#channel_not_found","text":"[jvm]\\ channel_not_found ()","title":"channel_not_found"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/channel_not_found/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/invalid_payload/","text":"// misk-slack / misk.slack / SlackWebhookResponse / invalid_payload invalid_payload \u00b6 [jvm]\\ invalid_payload () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"invalid_payload - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/invalid_payload/#invalid_payload","text":"[jvm]\\ invalid_payload ()","title":"invalid_payload"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/invalid_payload/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/missing_text_or_fallback_or_attachments/","text":"// misk-slack / misk.slack / SlackWebhookResponse / missing_text_or_fallback_or_attachments missing_text_or_fallback_or_attachments \u00b6 [jvm]\\ missing_text_or_fallback_or_attachments () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"missing_text_or_fallback_or_attachments - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/missing_text_or_fallback_or_attachments/#missing_text_or_fallback_or_attachments","text":"[jvm]\\ missing_text_or_fallback_or_attachments ()","title":"missing_text_or_fallback_or_attachments"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/missing_text_or_fallback_or_attachments/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/ok/","text":"// misk-slack / misk.slack / SlackWebhookResponse / ok ok \u00b6 [jvm]\\ ok () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"ok - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/ok/#ok","text":"[jvm]\\ ok ()","title":"ok"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/ok/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/user_not_found/","text":"// misk-slack / misk.slack / SlackWebhookResponse / user_not_found user_not_found \u00b6 [jvm]\\ user_not_found () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"user_not_found - Misk"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/user_not_found/#user_not_found","text":"[jvm]\\ user_not_found ()","title":"user_not_found"},{"location":"0.x/misk-slack/misk.slack/-slack-webhook-response/user_not_found/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-testing/misk/","text":"// misk-testing / misk Package misk \u00b6 Types \u00b6 Name Summary MiskTestingServiceModule [jvm] class MiskTestingServiceModule : KAbstractModule MiskTestingServiceModule should be installed in unit testing environments.","title":"Package misk - Misk"},{"location":"0.x/misk-testing/misk/#package-misk","text":"","title":"Package misk"},{"location":"0.x/misk-testing/misk/#types","text":"Name Summary MiskTestingServiceModule [jvm] class MiskTestingServiceModule : KAbstractModule MiskTestingServiceModule should be installed in unit testing environments.","title":"Types"},{"location":"0.x/misk-testing/misk/-misk-testing-service-module/","text":"// misk-testing / misk / MiskTestingServiceModule MiskTestingServiceModule \u00b6 [jvm]\\ class MiskTestingServiceModule : KAbstractModule MiskTestingServiceModule should be installed in unit testing environments. This should not contain application level fakes for testing. It includes a small, selective set of fake bindings to replace real bindings that cannot exist in a unit testing environment (e.g system env vars and filesystem dependencies). Constructors \u00b6 MiskTestingServiceModule [jvm] fun MiskTestingServiceModule () Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"MiskTestingServiceModule - Misk"},{"location":"0.x/misk-testing/misk/-misk-testing-service-module/#misktestingservicemodule","text":"[jvm]\\ class MiskTestingServiceModule : KAbstractModule MiskTestingServiceModule should be installed in unit testing environments. This should not contain application level fakes for testing. It includes a small, selective set of fake bindings to replace real bindings that cannot exist in a unit testing environment (e.g system env vars and filesystem dependencies).","title":"MiskTestingServiceModule"},{"location":"0.x/misk-testing/misk/-misk-testing-service-module/#constructors","text":"MiskTestingServiceModule [jvm] fun MiskTestingServiceModule ()","title":"Constructors"},{"location":"0.x/misk-testing/misk/-misk-testing-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk/-misk-testing-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk/-misk-testing-service-module/-misk-testing-service-module/","text":"// misk-testing / misk / MiskTestingServiceModule / MiskTestingServiceModule MiskTestingServiceModule \u00b6 [jvm]\\ fun MiskTestingServiceModule ()","title":"MiskTestingServiceModule - Misk"},{"location":"0.x/misk-testing/misk/-misk-testing-service-module/-misk-testing-service-module/#misktestingservicemodule","text":"[jvm]\\ fun MiskTestingServiceModule ()","title":"MiskTestingServiceModule"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/","text":"// misk-testing / misk.cloud.fake.security.keys Package misk.cloud.fake.security.keys \u00b6 Types \u00b6 Name Summary FakeKeyManagementModule [jvm] class FakeKeyManagementModule : KAbstractModule FakeKeyService [jvm] class FakeKeyService : KeyService","title":"Package misk.cloud.fake.security.keys - Misk"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/#package-miskcloudfakesecuritykeys","text":"","title":"Package misk.cloud.fake.security.keys"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/#types","text":"Name Summary FakeKeyManagementModule [jvm] class FakeKeyManagementModule : KAbstractModule FakeKeyService [jvm] class FakeKeyService : KeyService","title":"Types"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-management-module/","text":"// misk-testing / misk.cloud.fake.security.keys / FakeKeyManagementModule FakeKeyManagementModule \u00b6 [jvm]\\ class FakeKeyManagementModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeKeyManagementModule - Misk"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-management-module/#fakekeymanagementmodule","text":"[jvm]\\ class FakeKeyManagementModule : KAbstractModule","title":"FakeKeyManagementModule"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-management-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-management-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-management-module/-fake-key-management-module/","text":"// misk-testing / misk.cloud.fake.security.keys / FakeKeyManagementModule / FakeKeyManagementModule FakeKeyManagementModule \u00b6 [jvm]\\ fun FakeKeyManagementModule ()","title":"FakeKeyManagementModule - Misk"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-management-module/-fake-key-management-module/#fakekeymanagementmodule","text":"[jvm]\\ fun FakeKeyManagementModule ()","title":"FakeKeyManagementModule"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/","text":"// misk-testing / misk.cloud.fake.security.keys / FakeKeyService FakeKeyService \u00b6 [jvm]\\ class FakeKeyService : KeyService Functions \u00b6 Name Summary decrypt [jvm] open override fun decrypt (keyAlias: String , cipherText: ByteString): ByteString encrypt [jvm] open override fun encrypt (keyAlias: String , plainText: ByteString): ByteString","title":"FakeKeyService - Misk"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/#fakekeyservice","text":"[jvm]\\ class FakeKeyService : KeyService","title":"FakeKeyService"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/#functions","text":"Name Summary decrypt [jvm] open override fun decrypt (keyAlias: String , cipherText: ByteString): ByteString encrypt [jvm] open override fun encrypt (keyAlias: String , plainText: ByteString): ByteString","title":"Functions"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/-fake-key-service/","text":"// misk-testing / misk.cloud.fake.security.keys / FakeKeyService / FakeKeyService FakeKeyService \u00b6 [jvm]\\ fun FakeKeyService ()","title":"FakeKeyService - Misk"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/-fake-key-service/#fakekeyservice","text":"[jvm]\\ fun FakeKeyService ()","title":"FakeKeyService"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/decrypt/","text":"// misk-testing / misk.cloud.fake.security.keys / FakeKeyService / decrypt decrypt \u00b6 [jvm]\\ open override fun decrypt (keyAlias: String , cipherText: ByteString): ByteString","title":"decrypt - Misk"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/decrypt/#decrypt","text":"[jvm]\\ open override fun decrypt (keyAlias: String , cipherText: ByteString): ByteString","title":"decrypt"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/encrypt/","text":"// misk-testing / misk.cloud.fake.security.keys / FakeKeyService / encrypt encrypt \u00b6 [jvm]\\ open override fun encrypt (keyAlias: String , plainText: ByteString): ByteString","title":"encrypt - Misk"},{"location":"0.x/misk-testing/misk.cloud.fake.security.keys/-fake-key-service/encrypt/#encrypt","text":"[jvm]\\ open override fun encrypt (keyAlias: String , plainText: ByteString): ByteString","title":"encrypt"},{"location":"0.x/misk-testing/misk.concurrent/","text":"// misk-testing / misk.concurrent Package misk.concurrent \u00b6 Types \u00b6 Name Summary FakeScheduledExecutorService [jvm] @Singleton class FakeScheduledExecutorService @Injectconstructor(clock: Clock ) : ScheduledExecutorService , ExecutorService ScheduledExecutorService for testing that runs in the current thread and is triggered using the tick() method. An injected Clock is used to decide whether to execute a scheduled task. FakeSleeper [jvm] @Singleton class FakeSleeper @Injectconstructor(clock: Clock ) : Sleeper Sleeper for testing that blocks threads calling sleep , and checks whether the threads should wake using the tick() method. An injected Clock is used to decide whether to wake a thread. FakeSleeperModule [jvm] class FakeSleeperModule : KAbstractModule FakeTicker [jvm] @Singleton class FakeTicker @Injectconstructor : Ticker, Sleeper","title":"Package misk.concurrent - Misk"},{"location":"0.x/misk-testing/misk.concurrent/#package-miskconcurrent","text":"","title":"Package misk.concurrent"},{"location":"0.x/misk-testing/misk.concurrent/#types","text":"Name Summary FakeScheduledExecutorService [jvm] @Singleton class FakeScheduledExecutorService @Injectconstructor(clock: Clock ) : ScheduledExecutorService , ExecutorService ScheduledExecutorService for testing that runs in the current thread and is triggered using the tick() method. An injected Clock is used to decide whether to execute a scheduled task. FakeSleeper [jvm] @Singleton class FakeSleeper @Injectconstructor(clock: Clock ) : Sleeper Sleeper for testing that blocks threads calling sleep , and checks whether the threads should wake using the tick() method. An injected Clock is used to decide whether to wake a thread. FakeSleeperModule [jvm] class FakeSleeperModule : KAbstractModule FakeTicker [jvm] @Singleton class FakeTicker @Injectconstructor : Ticker, Sleeper","title":"Types"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService FakeScheduledExecutorService \u00b6 [jvm]\\ @Singleton class FakeScheduledExecutorService @Injectconstructor(clock: Clock ) : ScheduledExecutorService , ExecutorService ScheduledExecutorService for testing that runs in the current thread and is triggered using the tick() method. An injected Clock is used to decide whether to execute a scheduled task. This service must always \u201ccatch up\u201d to the clock, so fixed rate and fixed delay jobs are not different. Constructors \u00b6 FakeScheduledExecutorService [jvm] @Inject fun FakeScheduledExecutorService (clock: Clock ) Types \u00b6 Name Summary ScheduledFutureTask [jvm] inner class ScheduledFutureTask < V >(executeAt: Long , fixedDelay: Long , clock: Clock , task: () -> V ) : FutureTask < V > , ScheduledFuture < V > Functions \u00b6 Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean execute [jvm] open override fun execute (p0: Runnable ) invokeAll [jvm] open override fun <T : Any > invokeAll (p0: MutableCollection <out Callable <T>>): MutableList < Future <T>> open override fun <T : Any > invokeAll (p0: MutableCollection <out Callable <T>>, p1: Long , p2: TimeUnit ): MutableList < Future <T>> invokeAny [jvm] open override fun <T : Any > invokeAny (p0: MutableCollection <out Callable <T>>): T open override fun <T : Any > invokeAny (p0: MutableCollection <out Callable <T>>, p1: Long , p2: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean schedule [jvm] open override fun schedule (command: Runnable , delay: Long , unit: TimeUnit ): ScheduledFuture < Unit > open override fun < V > schedule (callable: Callable < V >, delay: Long , unit: TimeUnit ): ScheduledFuture < V > scheduleAtFixedRate [jvm] open override fun scheduleAtFixedRate (command: Runnable , initialDelay: Long , period: Long , unit: TimeUnit ): ScheduledFuture <*> scheduleWithFixedDelay [jvm] open override fun scheduleWithFixedDelay (command: Runnable , initialDelay: Long , delay: Long , unit: TimeUnit ): ScheduledFuture <*> shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (p0: Runnable ): Future <*> open override fun <T : Any > submit (p0: Callable <T>): Future <T> open override fun <T : Any > submit (p0: Runnable , p1: T): Future <T> tick [jvm] fun tick () Check the current time on the clock and run any scheduled tasks that are due.","title":"FakeScheduledExecutorService - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/#fakescheduledexecutorservice","text":"[jvm]\\ @Singleton class FakeScheduledExecutorService @Injectconstructor(clock: Clock ) : ScheduledExecutorService , ExecutorService ScheduledExecutorService for testing that runs in the current thread and is triggered using the tick() method. An injected Clock is used to decide whether to execute a scheduled task. This service must always \u201ccatch up\u201d to the clock, so fixed rate and fixed delay jobs are not different.","title":"FakeScheduledExecutorService"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/#constructors","text":"FakeScheduledExecutorService [jvm] @Inject fun FakeScheduledExecutorService (clock: Clock )","title":"Constructors"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/#types","text":"Name Summary ScheduledFutureTask [jvm] inner class ScheduledFutureTask < V >(executeAt: Long , fixedDelay: Long , clock: Clock , task: () -> V ) : FutureTask < V > , ScheduledFuture < V >","title":"Types"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/#functions","text":"Name Summary awaitTermination [jvm] open override fun awaitTermination (p0: Long , p1: TimeUnit ): Boolean execute [jvm] open override fun execute (p0: Runnable ) invokeAll [jvm] open override fun <T : Any > invokeAll (p0: MutableCollection <out Callable <T>>): MutableList < Future <T>> open override fun <T : Any > invokeAll (p0: MutableCollection <out Callable <T>>, p1: Long , p2: TimeUnit ): MutableList < Future <T>> invokeAny [jvm] open override fun <T : Any > invokeAny (p0: MutableCollection <out Callable <T>>): T open override fun <T : Any > invokeAny (p0: MutableCollection <out Callable <T>>, p1: Long , p2: TimeUnit ): T isShutdown [jvm] open override fun isShutdown (): Boolean isTerminated [jvm] open override fun isTerminated (): Boolean schedule [jvm] open override fun schedule (command: Runnable , delay: Long , unit: TimeUnit ): ScheduledFuture < Unit > open override fun < V > schedule (callable: Callable < V >, delay: Long , unit: TimeUnit ): ScheduledFuture < V > scheduleAtFixedRate [jvm] open override fun scheduleAtFixedRate (command: Runnable , initialDelay: Long , period: Long , unit: TimeUnit ): ScheduledFuture <*> scheduleWithFixedDelay [jvm] open override fun scheduleWithFixedDelay (command: Runnable , initialDelay: Long , delay: Long , unit: TimeUnit ): ScheduledFuture <*> shutdown [jvm] open override fun shutdown () shutdownNow [jvm] open override fun shutdownNow (): MutableList < Runnable > submit [jvm] open override fun submit (p0: Runnable ): Future <*> open override fun <T : Any > submit (p0: Callable <T>): Future <T> open override fun <T : Any > submit (p0: Runnable , p1: T): Future <T> tick [jvm] fun tick () Check the current time on the clock and run any scheduled tasks that are due.","title":"Functions"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-fake-scheduled-executor-service/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / FakeScheduledExecutorService FakeScheduledExecutorService \u00b6 [jvm]\\ @Inject fun FakeScheduledExecutorService (clock: Clock )","title":"FakeScheduledExecutorService - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-fake-scheduled-executor-service/#fakescheduledexecutorservice","text":"[jvm]\\ @Inject fun FakeScheduledExecutorService (clock: Clock )","title":"FakeScheduledExecutorService"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/is-shutdown/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / isShutdown isShutdown \u00b6 [jvm]\\ open override fun isShutdown (): Boolean","title":"isShutdown - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/is-shutdown/#isshutdown","text":"[jvm]\\ open override fun isShutdown (): Boolean","title":"isShutdown"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/schedule-at-fixed-rate/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / scheduleAtFixedRate scheduleAtFixedRate \u00b6 [jvm]\\ open override fun scheduleAtFixedRate (command: Runnable , initialDelay: Long , period: Long , unit: TimeUnit ): ScheduledFuture <*>","title":"scheduleAtFixedRate - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/schedule-at-fixed-rate/#scheduleatfixedrate","text":"[jvm]\\ open override fun scheduleAtFixedRate (command: Runnable , initialDelay: Long , period: Long , unit: TimeUnit ): ScheduledFuture <*>","title":"scheduleAtFixedRate"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/schedule-with-fixed-delay/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / scheduleWithFixedDelay scheduleWithFixedDelay \u00b6 [jvm]\\ open override fun scheduleWithFixedDelay (command: Runnable , initialDelay: Long , delay: Long , unit: TimeUnit ): ScheduledFuture <*>","title":"scheduleWithFixedDelay - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/schedule-with-fixed-delay/#schedulewithfixeddelay","text":"[jvm]\\ open override fun scheduleWithFixedDelay (command: Runnable , initialDelay: Long , delay: Long , unit: TimeUnit ): ScheduledFuture <*>","title":"scheduleWithFixedDelay"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/schedule/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / schedule schedule \u00b6 [jvm]\\ open override fun schedule (command: Runnable , delay: Long , unit: TimeUnit ): ScheduledFuture < Unit > open override fun < V > schedule (callable: Callable < V >, delay: Long , unit: TimeUnit ): ScheduledFuture < V >","title":"schedule - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/schedule/#schedule","text":"[jvm]\\ open override fun schedule (command: Runnable , delay: Long , unit: TimeUnit ): ScheduledFuture < Unit > open override fun < V > schedule (callable: Callable < V >, delay: Long , unit: TimeUnit ): ScheduledFuture < V >","title":"schedule"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/shutdown/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / shutdown shutdown \u00b6 [jvm]\\ open override fun shutdown ()","title":"shutdown - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/shutdown/#shutdown","text":"[jvm]\\ open override fun shutdown ()","title":"shutdown"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/tick/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / tick tick \u00b6 [jvm]\\ fun tick () Check the current time on the clock and run any scheduled tasks that are due.","title":"tick - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/tick/#tick","text":"[jvm]\\ fun tick () Check the current time on the clock and run any scheduled tasks that are due.","title":"tick"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask ScheduledFutureTask \u00b6 [jvm]\\ inner class ScheduledFutureTask < V >(executeAt: Long , fixedDelay: Long , clock: Clock , task: () -> V ) : FutureTask < V > , ScheduledFuture < V > Constructors \u00b6 ScheduledFutureTask [jvm] fun < V > ScheduledFutureTask (executeAt: Long , clock: Clock , task: () -> V ) Functions \u00b6 Name Summary cancel [jvm] open override fun cancel (p0: Boolean ): Boolean compareTo [jvm] open operator override fun compareTo (other: Delayed ): Int done [jvm] open fun done () get [jvm] open override fun get (): V open operator override fun get (p0: Long , p1: TimeUnit ): V getDelay [jvm] open override fun getDelay (unit: TimeUnit ): Long isCancelled [jvm] open override fun isCancelled (): Boolean isDone [jvm] open override fun isDone (): Boolean run [jvm] open override fun run () runAndReset [jvm] open override fun runAndReset (): Boolean set [jvm] open fun set (p0: V ) setException [jvm] open fun setException (p0: Throwable ) toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary clock [jvm] val clock : Clock executeAt [jvm] var executeAt : Long isRepeated [jvm] val isRepeated : Boolean task [jvm] val task : () -> V","title":"ScheduledFutureTask - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/#scheduledfuturetask","text":"[jvm]\\ inner class ScheduledFutureTask < V >(executeAt: Long , fixedDelay: Long , clock: Clock , task: () -> V ) : FutureTask < V > , ScheduledFuture < V >","title":"ScheduledFutureTask"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/#constructors","text":"ScheduledFutureTask [jvm] fun < V > ScheduledFutureTask (executeAt: Long , clock: Clock , task: () -> V )","title":"Constructors"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/#functions","text":"Name Summary cancel [jvm] open override fun cancel (p0: Boolean ): Boolean compareTo [jvm] open operator override fun compareTo (other: Delayed ): Int done [jvm] open fun done () get [jvm] open override fun get (): V open operator override fun get (p0: Long , p1: TimeUnit ): V getDelay [jvm] open override fun getDelay (unit: TimeUnit ): Long isCancelled [jvm] open override fun isCancelled (): Boolean isDone [jvm] open override fun isDone (): Boolean run [jvm] open override fun run () runAndReset [jvm] open override fun runAndReset (): Boolean set [jvm] open fun set (p0: V ) setException [jvm] open fun setException (p0: Throwable ) toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/#properties","text":"Name Summary clock [jvm] val clock : Clock executeAt [jvm] var executeAt : Long isRepeated [jvm] val isRepeated : Boolean task [jvm] val task : () -> V","title":"Properties"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/-scheduled-future-task/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / ScheduledFutureTask ScheduledFutureTask \u00b6 [jvm]\\ fun < V > ScheduledFutureTask (executeAt: Long , clock: Clock , task: () -> V ) fun < V > ScheduledFutureTask (executeAt: Long , fixedDelay: Long , clock: Clock , task: () -> V )","title":"ScheduledFutureTask - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/-scheduled-future-task/#scheduledfuturetask","text":"[jvm]\\ fun < V > ScheduledFutureTask (executeAt: Long , clock: Clock , task: () -> V ) fun < V > ScheduledFutureTask (executeAt: Long , fixedDelay: Long , clock: Clock , task: () -> V )","title":"ScheduledFutureTask"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/clock/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / clock clock \u00b6 [jvm]\\ val clock : Clock","title":"clock - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/clock/#clock","text":"[jvm]\\ val clock : Clock","title":"clock"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/compare-to/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / compareTo compareTo \u00b6 [jvm]\\ open operator override fun compareTo (other: Delayed ): Int","title":"compareTo - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/compare-to/#compareto","text":"[jvm]\\ open operator override fun compareTo (other: Delayed ): Int","title":"compareTo"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/execute-at/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / executeAt executeAt \u00b6 [jvm]\\ var executeAt : Long","title":"executeAt - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/execute-at/#executeat","text":"[jvm]\\ var executeAt : Long","title":"executeAt"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/get-delay/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / getDelay getDelay \u00b6 [jvm]\\ open override fun getDelay (unit: TimeUnit ): Long","title":"getDelay - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/get-delay/#getdelay","text":"[jvm]\\ open override fun getDelay (unit: TimeUnit ): Long","title":"getDelay"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/is-repeated/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / isRepeated isRepeated \u00b6 [jvm]\\ val isRepeated : Boolean","title":"isRepeated - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/is-repeated/#isrepeated","text":"[jvm]\\ val isRepeated : Boolean","title":"isRepeated"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/run-and-reset/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / runAndReset runAndReset \u00b6 [jvm]\\ open override fun runAndReset (): Boolean","title":"runAndReset - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/run-and-reset/#runandreset","text":"[jvm]\\ open override fun runAndReset (): Boolean","title":"runAndReset"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/task/","text":"// misk-testing / misk.concurrent / FakeScheduledExecutorService / ScheduledFutureTask / task task \u00b6 [jvm]\\ val task : () -> V","title":"task - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-scheduled-executor-service/-scheduled-future-task/task/#task","text":"[jvm]\\ val task : () -> V","title":"task"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/","text":"// misk-testing / misk.concurrent / FakeSleeper FakeSleeper \u00b6 [jvm]\\ @Singleton class FakeSleeper @Injectconstructor(clock: Clock ) : Sleeper Sleeper for testing that blocks threads calling sleep , and checks whether the threads should wake using the tick() method. An injected Clock is used to decide whether to wake a thread. Constructors \u00b6 FakeSleeper [jvm] @Inject fun FakeSleeper (clock: Clock ) Functions \u00b6 Name Summary lastSleepDuration [jvm] fun lastSleepDuration (): Duration ? Returns the last duration FakeSleeper was called with. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently. sleep [jvm] open override fun sleep (duration: Duration ) sleepCount [jvm] fun sleepCount (): Int Returns the total number of times the FakeSleeper has been called. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently. tick [jvm] fun tick () Check the current time and triggers any sleeping threads that are due to be awoken. waitForSleep [jvm] fun waitForSleep (numThreads: Int ) Blocks until the given number of threads are asleep (as a result of calling sleep on this FakeSleeper ).","title":"FakeSleeper - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/#fakesleeper","text":"[jvm]\\ @Singleton class FakeSleeper @Injectconstructor(clock: Clock ) : Sleeper Sleeper for testing that blocks threads calling sleep , and checks whether the threads should wake using the tick() method. An injected Clock is used to decide whether to wake a thread.","title":"FakeSleeper"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/#constructors","text":"FakeSleeper [jvm] @Inject fun FakeSleeper (clock: Clock )","title":"Constructors"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/#functions","text":"Name Summary lastSleepDuration [jvm] fun lastSleepDuration (): Duration ? Returns the last duration FakeSleeper was called with. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently. sleep [jvm] open override fun sleep (duration: Duration ) sleepCount [jvm] fun sleepCount (): Int Returns the total number of times the FakeSleeper has been called. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently. tick [jvm] fun tick () Check the current time and triggers any sleeping threads that are due to be awoken. waitForSleep [jvm] fun waitForSleep (numThreads: Int ) Blocks until the given number of threads are asleep (as a result of calling sleep on this FakeSleeper ).","title":"Functions"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/-fake-sleeper/","text":"// misk-testing / misk.concurrent / FakeSleeper / FakeSleeper FakeSleeper \u00b6 [jvm]\\ @Inject fun FakeSleeper (clock: Clock )","title":"FakeSleeper - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/-fake-sleeper/#fakesleeper","text":"[jvm]\\ @Inject fun FakeSleeper (clock: Clock )","title":"FakeSleeper"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/last-sleep-duration/","text":"// misk-testing / misk.concurrent / FakeSleeper / lastSleepDuration lastSleepDuration \u00b6 [jvm]\\ fun lastSleepDuration (): Duration ? Returns the last duration FakeSleeper was called with. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently.","title":"lastSleepDuration - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/last-sleep-duration/#lastsleepduration","text":"[jvm]\\ fun lastSleepDuration (): Duration ? Returns the last duration FakeSleeper was called with. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently.","title":"lastSleepDuration"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/sleep-count/","text":"// misk-testing / misk.concurrent / FakeSleeper / sleepCount sleepCount \u00b6 [jvm]\\ fun sleepCount (): Int Returns the total number of times the FakeSleeper has been called. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently.","title":"sleepCount - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/sleep-count/#sleepcount","text":"[jvm]\\ fun sleepCount (): Int Returns the total number of times the FakeSleeper has been called. This is thread-safe, but the value may not be meaningful if the sleeper is being used concurrently.","title":"sleepCount"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/sleep/","text":"// misk-testing / misk.concurrent / FakeSleeper / sleep sleep \u00b6 [jvm]\\ open override fun sleep (duration: Duration )","title":"sleep - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/sleep/#sleep","text":"[jvm]\\ open override fun sleep (duration: Duration )","title":"sleep"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/tick/","text":"// misk-testing / misk.concurrent / FakeSleeper / tick tick \u00b6 [jvm]\\ fun tick () Check the current time and triggers any sleeping threads that are due to be awoken.","title":"tick - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/tick/#tick","text":"[jvm]\\ fun tick () Check the current time and triggers any sleeping threads that are due to be awoken.","title":"tick"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/wait-for-sleep/","text":"// misk-testing / misk.concurrent / FakeSleeper / waitForSleep waitForSleep \u00b6 [jvm]\\ fun waitForSleep (numThreads: Int ) Blocks until the given number of threads are asleep (as a result of calling sleep on this FakeSleeper ).","title":"waitForSleep - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper/wait-for-sleep/#waitforsleep","text":"[jvm]\\ fun waitForSleep (numThreads: Int ) Blocks until the given number of threads are asleep (as a result of calling sleep on this FakeSleeper ).","title":"waitForSleep"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper-module/","text":"// misk-testing / misk.concurrent / FakeSleeperModule FakeSleeperModule \u00b6 [jvm]\\ class FakeSleeperModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeSleeperModule - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper-module/#fakesleepermodule","text":"[jvm]\\ class FakeSleeperModule : KAbstractModule","title":"FakeSleeperModule"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper-module/-fake-sleeper-module/","text":"// misk-testing / misk.concurrent / FakeSleeperModule / FakeSleeperModule FakeSleeperModule \u00b6 [jvm]\\ fun FakeSleeperModule ()","title":"FakeSleeperModule - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-sleeper-module/-fake-sleeper-module/#fakesleepermodule","text":"[jvm]\\ fun FakeSleeperModule ()","title":"FakeSleeperModule"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/","text":"// misk-testing / misk.concurrent / FakeTicker FakeTicker \u00b6 [jvm]\\ @Singleton class FakeTicker @Injectconstructor : Ticker, Sleeper Functions \u00b6 Name Summary read [jvm] open override fun read (): Long sleep [jvm] open override fun sleep (duration: Duration ) sleepMs [jvm] fun sleepMs (durationMs: Long ) Properties \u00b6 Name Summary nowMs [jvm] val nowMs : Long","title":"FakeTicker - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/#faketicker","text":"[jvm]\\ @Singleton class FakeTicker @Injectconstructor : Ticker, Sleeper","title":"FakeTicker"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/#functions","text":"Name Summary read [jvm] open override fun read (): Long sleep [jvm] open override fun sleep (duration: Duration ) sleepMs [jvm] fun sleepMs (durationMs: Long )","title":"Functions"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/#properties","text":"Name Summary nowMs [jvm] val nowMs : Long","title":"Properties"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/-fake-ticker/","text":"// misk-testing / misk.concurrent / FakeTicker / FakeTicker FakeTicker \u00b6 [jvm]\\ @Inject fun FakeTicker ()","title":"FakeTicker - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/-fake-ticker/#faketicker","text":"[jvm]\\ @Inject fun FakeTicker ()","title":"FakeTicker"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/now-ms/","text":"// misk-testing / misk.concurrent / FakeTicker / nowMs nowMs \u00b6 [jvm]\\ val nowMs : Long","title":"nowMs - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/now-ms/#nowms","text":"[jvm]\\ val nowMs : Long","title":"nowMs"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/read/","text":"// misk-testing / misk.concurrent / FakeTicker / read read \u00b6 [jvm]\\ open override fun read (): Long","title":"read - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/read/#read","text":"[jvm]\\ open override fun read (): Long","title":"read"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/sleep-ms/","text":"// misk-testing / misk.concurrent / FakeTicker / sleepMs sleepMs \u00b6 [jvm]\\ fun sleepMs (durationMs: Long )","title":"sleepMs - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/sleep-ms/#sleepms","text":"[jvm]\\ fun sleepMs (durationMs: Long )","title":"sleepMs"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/sleep/","text":"// misk-testing / misk.concurrent / FakeTicker / sleep sleep \u00b6 [jvm]\\ open override fun sleep (duration: Duration )","title":"sleep - Misk"},{"location":"0.x/misk-testing/misk.concurrent/-fake-ticker/sleep/#sleep","text":"[jvm]\\ open override fun sleep (duration: Duration )","title":"sleep"},{"location":"0.x/misk-testing/misk.containers/","text":"// misk-testing / misk.containers Package misk.containers \u00b6 Types \u00b6 Name Summary Composer [jvm] class Composer (name: String , containers: Container ) Composer composes many Container s together to use in a unit test. Container [jvm] data class Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit ) A Container creates a Docker container for testing.","title":"Package misk.containers - Misk"},{"location":"0.x/misk-testing/misk.containers/#package-miskcontainers","text":"","title":"Package misk.containers"},{"location":"0.x/misk-testing/misk.containers/#types","text":"Name Summary Composer [jvm] class Composer (name: String , containers: Container ) Composer composes many Container s together to use in a unit test. Container [jvm] data class Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit ) A Container creates a Docker container for testing.","title":"Types"},{"location":"0.x/misk-testing/misk.containers/-composer/","text":"// misk-testing / misk.containers / Composer Composer \u00b6 [jvm]\\ class Composer (name: String , containers: Container ) Composer composes many Container s together to use in a unit test. The Container s are networked using a dedicated Docker network. Tests need to expose ports in order for the test to communicate with the containers over 127.0.0.1. The following example composes Kafka and Zookeeper containers for testing. Kafka is exposed to the jUnit test via 127.0.0.1:9102. In this example, Zookeeper is not exposed to the test. val zkContainer = Container {\\ withImage(\"confluentinc/cp-zookeeper\")\\ withName(\"zookeeper\")\\ withEnv(\"ZOOKEEPER_CLIENT_PORT=2181\")\\ }\\ val kafka = Container {\\ withImage(\"confluentinc/cp-kafka\"\\ withName(\"kafka\")\\ withExposedPorts(ExposedPort.tcp(port))\\ withPortBindings(Ports().apply {\\ bind(ExposedPort.tcp(9102), Ports.Binding.bindPort(9102))\\ })\\ withEnv(\\ \"KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\",\\ \"KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9102\")\\ }\\ val composer = Composer(\"e-kafka\", zkContainer, kafka)\\ composer.start() Constructors \u00b6 Composer [jvm] fun Composer (name: String , vararg containers: Container ) Functions \u00b6 Name Summary start [jvm] fun start () stop [jvm] fun stop ()","title":"Composer - Misk"},{"location":"0.x/misk-testing/misk.containers/-composer/#composer","text":"[jvm]\\ class Composer (name: String , containers: Container ) Composer composes many Container s together to use in a unit test. The Container s are networked using a dedicated Docker network. Tests need to expose ports in order for the test to communicate with the containers over 127.0.0.1. The following example composes Kafka and Zookeeper containers for testing. Kafka is exposed to the jUnit test via 127.0.0.1:9102. In this example, Zookeeper is not exposed to the test. val zkContainer = Container {\\ withImage(\"confluentinc/cp-zookeeper\")\\ withName(\"zookeeper\")\\ withEnv(\"ZOOKEEPER_CLIENT_PORT=2181\")\\ }\\ val kafka = Container {\\ withImage(\"confluentinc/cp-kafka\"\\ withName(\"kafka\")\\ withExposedPorts(ExposedPort.tcp(port))\\ withPortBindings(Ports().apply {\\ bind(ExposedPort.tcp(9102), Ports.Binding.bindPort(9102))\\ })\\ withEnv(\\ \"KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\",\\ \"KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9102\")\\ }\\ val composer = Composer(\"e-kafka\", zkContainer, kafka)\\ composer.start()","title":"Composer"},{"location":"0.x/misk-testing/misk.containers/-composer/#constructors","text":"Composer [jvm] fun Composer (name: String , vararg containers: Container )","title":"Constructors"},{"location":"0.x/misk-testing/misk.containers/-composer/#functions","text":"Name Summary start [jvm] fun start () stop [jvm] fun stop ()","title":"Functions"},{"location":"0.x/misk-testing/misk.containers/-composer/-composer/","text":"// misk-testing / misk.containers / Composer / Composer Composer \u00b6 [jvm]\\ fun Composer (name: String , vararg containers: Container )","title":"Composer - Misk"},{"location":"0.x/misk-testing/misk.containers/-composer/-composer/#composer","text":"[jvm]\\ fun Composer (name: String , vararg containers: Container )","title":"Composer"},{"location":"0.x/misk-testing/misk.containers/-composer/start/","text":"// misk-testing / misk.containers / Composer / start start \u00b6 [jvm]\\ fun start ()","title":"start - Misk"},{"location":"0.x/misk-testing/misk.containers/-composer/start/#start","text":"[jvm]\\ fun start ()","title":"start"},{"location":"0.x/misk-testing/misk.containers/-composer/stop/","text":"// misk-testing / misk.containers / Composer / stop stop \u00b6 [jvm]\\ fun stop ()","title":"stop - Misk"},{"location":"0.x/misk-testing/misk.containers/-composer/stop/#stop","text":"[jvm]\\ fun stop ()","title":"stop"},{"location":"0.x/misk-testing/misk.containers/-container/","text":"// misk-testing / misk.containers / Container Container \u00b6 [jvm]\\ data class Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit ) A Container creates a Docker container for testing. Tests provide a lambda to build a CreateContainerCmd. The createCmd lambda must set CreateContainerCmd.withName and CreateContainerCmd.withImage. All other fields are optional. The Composer takes care of setting up the network. There may be a need to configure your container between the creation and start steps. beforeStartHook provides you with an id to your container allowing you to manipulate as necessary before the command/entrypoint is invoked. See Composer for an example. Constructors \u00b6 Container [jvm] fun Container (createCmd: CreateContainerCmd.() -> Unit ) Container [jvm] fun Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit ) Properties \u00b6 Name Summary beforeStartHook [jvm] val beforeStartHook : (docker: DockerClient, id: String ) -> Unit createCmd [jvm] val createCmd : CreateContainerCmd.() -> Unit","title":"Container - Misk"},{"location":"0.x/misk-testing/misk.containers/-container/#container","text":"[jvm]\\ data class Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit ) A Container creates a Docker container for testing. Tests provide a lambda to build a CreateContainerCmd. The createCmd lambda must set CreateContainerCmd.withName and CreateContainerCmd.withImage. All other fields are optional. The Composer takes care of setting up the network. There may be a need to configure your container between the creation and start steps. beforeStartHook provides you with an id to your container allowing you to manipulate as necessary before the command/entrypoint is invoked. See Composer for an example.","title":"Container"},{"location":"0.x/misk-testing/misk.containers/-container/#constructors","text":"Container [jvm] fun Container (createCmd: CreateContainerCmd.() -> Unit ) Container [jvm] fun Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit )","title":"Constructors"},{"location":"0.x/misk-testing/misk.containers/-container/#properties","text":"Name Summary beforeStartHook [jvm] val beforeStartHook : (docker: DockerClient, id: String ) -> Unit createCmd [jvm] val createCmd : CreateContainerCmd.() -> Unit","title":"Properties"},{"location":"0.x/misk-testing/misk.containers/-container/-container/","text":"// misk-testing / misk.containers / Container / Container Container \u00b6 [jvm]\\ fun Container (createCmd: CreateContainerCmd.() -> Unit ) fun Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit )","title":"Container - Misk"},{"location":"0.x/misk-testing/misk.containers/-container/-container/#container","text":"[jvm]\\ fun Container (createCmd: CreateContainerCmd.() -> Unit ) fun Container (createCmd: CreateContainerCmd.() -> Unit , beforeStartHook: (docker: DockerClient, id: String ) -> Unit )","title":"Container"},{"location":"0.x/misk-testing/misk.containers/-container/before-start-hook/","text":"// misk-testing / misk.containers / Container / beforeStartHook beforeStartHook \u00b6 [jvm]\\ val beforeStartHook : (docker: DockerClient, id: String ) -> Unit","title":"beforeStartHook - Misk"},{"location":"0.x/misk-testing/misk.containers/-container/before-start-hook/#beforestarthook","text":"[jvm]\\ val beforeStartHook : (docker: DockerClient, id: String ) -> Unit","title":"beforeStartHook"},{"location":"0.x/misk-testing/misk.containers/-container/create-cmd/","text":"// misk-testing / misk.containers / Container / createCmd createCmd \u00b6 [jvm]\\ val createCmd : CreateContainerCmd.() -> Unit","title":"createCmd - Misk"},{"location":"0.x/misk-testing/misk.containers/-container/create-cmd/#createcmd","text":"[jvm]\\ val createCmd : CreateContainerCmd.() -> Unit","title":"createCmd"},{"location":"0.x/misk-testing/misk.logging/","text":"// misk-testing / misk.logging Package misk.logging \u00b6 Types \u00b6 Name Summary LogCollectorModule [jvm] class LogCollectorModule : KAbstractModule LogCollectorService [jvm] interface LogCollectorService : Service Marker interface for the service that produces a LogCollector.","title":"Package misk.logging - Misk"},{"location":"0.x/misk-testing/misk.logging/#package-misklogging","text":"","title":"Package misk.logging"},{"location":"0.x/misk-testing/misk.logging/#types","text":"Name Summary LogCollectorModule [jvm] class LogCollectorModule : KAbstractModule LogCollectorService [jvm] interface LogCollectorService : Service Marker interface for the service that produces a LogCollector.","title":"Types"},{"location":"0.x/misk-testing/misk.logging/-log-collector-module/","text":"// misk-testing / misk.logging / LogCollectorModule LogCollectorModule \u00b6 [jvm]\\ class LogCollectorModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"LogCollectorModule - Misk"},{"location":"0.x/misk-testing/misk.logging/-log-collector-module/#logcollectormodule","text":"[jvm]\\ class LogCollectorModule : KAbstractModule","title":"LogCollectorModule"},{"location":"0.x/misk-testing/misk.logging/-log-collector-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.logging/-log-collector-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.logging/-log-collector-module/-log-collector-module/","text":"// misk-testing / misk.logging / LogCollectorModule / LogCollectorModule LogCollectorModule \u00b6 [jvm]\\ fun LogCollectorModule ()","title":"LogCollectorModule - Misk"},{"location":"0.x/misk-testing/misk.logging/-log-collector-module/-log-collector-module/#logcollectormodule","text":"[jvm]\\ fun LogCollectorModule ()","title":"LogCollectorModule"},{"location":"0.x/misk-testing/misk.logging/-log-collector-service/","text":"// misk-testing / misk.logging / LogCollectorService LogCollectorService \u00b6 [jvm]\\ interface LogCollectorService : Service Marker interface for the service that produces a LogCollector. Functions \u00b6 Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"LogCollectorService - Misk"},{"location":"0.x/misk-testing/misk.logging/-log-collector-service/#logcollectorservice","text":"[jvm]\\ interface LogCollectorService : Service Marker interface for the service that produces a LogCollector.","title":"LogCollectorService"},{"location":"0.x/misk-testing/misk.logging/-log-collector-service/#functions","text":"Name Summary addListener [jvm] abstract fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] abstract fun awaitRunning () open fun awaitRunning (p0: Duration ) abstract fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] abstract fun awaitTerminated () open fun awaitTerminated (p0: Duration ) abstract fun awaitTerminated (p0: Long , p1: TimeUnit ) failureCause [jvm] abstract fun failureCause (): Throwable isRunning [jvm] abstract fun isRunning (): Boolean startAsync [jvm] @CanIgnoreReturnValue abstract fun startAsync (): Service state [jvm] abstract fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue abstract fun stopAsync (): Service","title":"Functions"},{"location":"0.x/misk-testing/misk.mockito/","text":"// misk-testing / misk.mockito Package misk.mockito \u00b6 Types \u00b6 Name Summary Mockito [jvm] object Mockito","title":"Package misk.mockito - Misk"},{"location":"0.x/misk-testing/misk.mockito/#package-miskmockito","text":"","title":"Package misk.mockito"},{"location":"0.x/misk-testing/misk.mockito/#types","text":"Name Summary Mockito [jvm] object Mockito","title":"Types"},{"location":"0.x/misk-testing/misk.mockito/-mockito/","text":"// misk-testing / misk.mockito / Mockito Mockito \u00b6 [jvm]\\ object Mockito Functions \u00b6 Name Summary captor [jvm] inline fun < T : Any > captor (): ArgumentCaptor< T > mock [jvm] inline fun < T : Any > mock (): T whenever [jvm] inline fun < T : Any > whenever (t: T ): OngoingStubbing< T >","title":"Mockito - Misk"},{"location":"0.x/misk-testing/misk.mockito/-mockito/#mockito","text":"[jvm]\\ object Mockito","title":"Mockito"},{"location":"0.x/misk-testing/misk.mockito/-mockito/#functions","text":"Name Summary captor [jvm] inline fun < T : Any > captor (): ArgumentCaptor< T > mock [jvm] inline fun < T : Any > mock (): T whenever [jvm] inline fun < T : Any > whenever (t: T ): OngoingStubbing< T >","title":"Functions"},{"location":"0.x/misk-testing/misk.mockito/-mockito/captor/","text":"// misk-testing / misk.mockito / Mockito / captor captor \u00b6 [jvm]\\ inline fun < T : Any > captor (): ArgumentCaptor< T >","title":"captor - Misk"},{"location":"0.x/misk-testing/misk.mockito/-mockito/captor/#captor","text":"[jvm]\\ inline fun < T : Any > captor (): ArgumentCaptor< T >","title":"captor"},{"location":"0.x/misk-testing/misk.mockito/-mockito/mock/","text":"// misk-testing / misk.mockito / Mockito / mock mock \u00b6 [jvm]\\ inline fun < T : Any > mock (): T","title":"mock - Misk"},{"location":"0.x/misk-testing/misk.mockito/-mockito/mock/#mock","text":"[jvm]\\ inline fun < T : Any > mock (): T","title":"mock"},{"location":"0.x/misk-testing/misk.mockito/-mockito/whenever/","text":"// misk-testing / misk.mockito / Mockito / whenever whenever \u00b6 [jvm]\\ inline fun < T : Any > whenever (t: T ): OngoingStubbing< T >","title":"whenever - Misk"},{"location":"0.x/misk-testing/misk.mockito/-mockito/whenever/#whenever","text":"[jvm]\\ inline fun < T : Any > whenever (t: T ): OngoingStubbing< T >","title":"whenever"},{"location":"0.x/misk-testing/misk.random/","text":"// misk-testing / misk.random Package misk.random \u00b6 Types \u00b6 Name Summary FakeRandom [jvm] @Singleton class FakeRandom @Injectconstructor : Random FakeRandomModule [jvm] class FakeRandomModule : KAbstractModule FakeThreadLocalRandom [jvm] @Singleton class FakeThreadLocalRandom @Injectconstructor : ThreadLocalRandom","title":"Package misk.random - Misk"},{"location":"0.x/misk-testing/misk.random/#package-miskrandom","text":"","title":"Package misk.random"},{"location":"0.x/misk-testing/misk.random/#types","text":"Name Summary FakeRandom [jvm] @Singleton class FakeRandom @Injectconstructor : Random FakeRandomModule [jvm] class FakeRandomModule : KAbstractModule FakeThreadLocalRandom [jvm] @Singleton class FakeThreadLocalRandom @Injectconstructor : ThreadLocalRandom","title":"Types"},{"location":"0.x/misk-testing/misk.random/-fake-random/","text":"// misk-testing / misk.random / FakeRandom FakeRandom \u00b6 [jvm]\\ @Singleton class FakeRandom @Injectconstructor : Random Functions \u00b6 Name Summary doubles [jvm] open fun doubles (): DoubleStream open fun doubles (p0: Long ): DoubleStream open fun doubles (p0: Double , p1: Double ): DoubleStream open fun doubles (p0: Long , p1: Double , p2: Double ): DoubleStream internalNextDouble [jvm] fun internalNextDouble (p0: Double , p1: Double ): Double internalNextInt [jvm] fun internalNextInt (p0: Int , p1: Int ): Int internalNextLong [jvm] fun internalNextLong (p0: Long , p1: Long ): Long ints [jvm] open fun ints (): IntStream open fun ints (p0: Long ): IntStream open fun ints (p0: Int , p1: Int ): IntStream open fun ints (p0: Long , p1: Int , p2: Int ): IntStream longs [jvm] open fun longs (): LongStream open fun longs (p0: Long ): LongStream open fun longs (p0: Long , p1: Long ): LongStream open fun longs (p0: Long , p1: Long , p2: Long ): LongStream next [jvm] open fun next (p0: Int ): Int nextBoolean [jvm] open override fun nextBoolean (): Boolean nextBytes [jvm] open fun nextBytes (p0: ByteArray ) nextDouble [jvm] open override fun nextDouble (): Double nextFloat [jvm] open override fun nextFloat (): Float nextGaussian [jvm] open fun nextGaussian (): Double nextInt [jvm] open override fun nextInt (): Int open fun nextInt (p0: Int ): Int nextLong [jvm] open override fun nextLong (): Long setSeed [jvm] open fun setSeed (p0: Long ) Properties \u00b6 Name Summary nextBoolean [jvm] var nextBoolean : Boolean ? = null nextDouble [jvm] var nextDouble : Double ? = null nextFloat [jvm] var nextFloat : Float ? = null nextInt [jvm] var nextInt : Int ? = null nextLong [jvm] var nextLong : Long ? = null","title":"FakeRandom - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random/#fakerandom","text":"[jvm]\\ @Singleton class FakeRandom @Injectconstructor : Random","title":"FakeRandom"},{"location":"0.x/misk-testing/misk.random/-fake-random/#functions","text":"Name Summary doubles [jvm] open fun doubles (): DoubleStream open fun doubles (p0: Long ): DoubleStream open fun doubles (p0: Double , p1: Double ): DoubleStream open fun doubles (p0: Long , p1: Double , p2: Double ): DoubleStream internalNextDouble [jvm] fun internalNextDouble (p0: Double , p1: Double ): Double internalNextInt [jvm] fun internalNextInt (p0: Int , p1: Int ): Int internalNextLong [jvm] fun internalNextLong (p0: Long , p1: Long ): Long ints [jvm] open fun ints (): IntStream open fun ints (p0: Long ): IntStream open fun ints (p0: Int , p1: Int ): IntStream open fun ints (p0: Long , p1: Int , p2: Int ): IntStream longs [jvm] open fun longs (): LongStream open fun longs (p0: Long ): LongStream open fun longs (p0: Long , p1: Long ): LongStream open fun longs (p0: Long , p1: Long , p2: Long ): LongStream next [jvm] open fun next (p0: Int ): Int nextBoolean [jvm] open override fun nextBoolean (): Boolean nextBytes [jvm] open fun nextBytes (p0: ByteArray ) nextDouble [jvm] open override fun nextDouble (): Double nextFloat [jvm] open override fun nextFloat (): Float nextGaussian [jvm] open fun nextGaussian (): Double nextInt [jvm] open override fun nextInt (): Int open fun nextInt (p0: Int ): Int nextLong [jvm] open override fun nextLong (): Long setSeed [jvm] open fun setSeed (p0: Long )","title":"Functions"},{"location":"0.x/misk-testing/misk.random/-fake-random/#properties","text":"Name Summary nextBoolean [jvm] var nextBoolean : Boolean ? = null nextDouble [jvm] var nextDouble : Double ? = null nextFloat [jvm] var nextFloat : Float ? = null nextInt [jvm] var nextInt : Int ? = null nextLong [jvm] var nextLong : Long ? = null","title":"Properties"},{"location":"0.x/misk-testing/misk.random/-fake-random/-fake-random/","text":"// misk-testing / misk.random / FakeRandom / FakeRandom FakeRandom \u00b6 [jvm]\\ @Inject fun FakeRandom ()","title":"FakeRandom - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random/-fake-random/#fakerandom","text":"[jvm]\\ @Inject fun FakeRandom ()","title":"FakeRandom"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-boolean/","text":"// misk-testing / misk.random / FakeRandom / nextBoolean nextBoolean \u00b6 [jvm]\\ open override fun nextBoolean (): Boolean var nextBoolean : Boolean ? = null","title":"nextBoolean - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-boolean/#nextboolean","text":"[jvm]\\ open override fun nextBoolean (): Boolean var nextBoolean : Boolean ? = null","title":"nextBoolean"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-double/","text":"// misk-testing / misk.random / FakeRandom / nextDouble nextDouble \u00b6 [jvm]\\ open override fun nextDouble (): Double var nextDouble : Double ? = null","title":"nextDouble - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-double/#nextdouble","text":"[jvm]\\ open override fun nextDouble (): Double var nextDouble : Double ? = null","title":"nextDouble"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-float/","text":"// misk-testing / misk.random / FakeRandom / nextFloat nextFloat \u00b6 [jvm]\\ open override fun nextFloat (): Float var nextFloat : Float ? = null","title":"nextFloat - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-float/#nextfloat","text":"[jvm]\\ open override fun nextFloat (): Float var nextFloat : Float ? = null","title":"nextFloat"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-int/","text":"// misk-testing / misk.random / FakeRandom / nextInt nextInt \u00b6 [jvm]\\ open override fun nextInt (): Int var nextInt : Int ? = null","title":"nextInt - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-int/#nextint","text":"[jvm]\\ open override fun nextInt (): Int var nextInt : Int ? = null","title":"nextInt"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-long/","text":"// misk-testing / misk.random / FakeRandom / nextLong nextLong \u00b6 [jvm]\\ open override fun nextLong (): Long var nextLong : Long ? = null","title":"nextLong - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random/next-long/#nextlong","text":"[jvm]\\ open override fun nextLong (): Long var nextLong : Long ? = null","title":"nextLong"},{"location":"0.x/misk-testing/misk.random/-fake-random-module/","text":"// misk-testing / misk.random / FakeRandomModule FakeRandomModule \u00b6 [jvm]\\ class FakeRandomModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeRandomModule - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random-module/#fakerandommodule","text":"[jvm]\\ class FakeRandomModule : KAbstractModule","title":"FakeRandomModule"},{"location":"0.x/misk-testing/misk.random/-fake-random-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.random/-fake-random-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.random/-fake-random-module/-fake-random-module/","text":"// misk-testing / misk.random / FakeRandomModule / FakeRandomModule FakeRandomModule \u00b6 [jvm]\\ fun FakeRandomModule ()","title":"FakeRandomModule - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-random-module/-fake-random-module/#fakerandommodule","text":"[jvm]\\ fun FakeRandomModule ()","title":"FakeRandomModule"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/","text":"// misk-testing / misk.random / FakeThreadLocalRandom FakeThreadLocalRandom \u00b6 [jvm]\\ @Singleton class FakeThreadLocalRandom @Injectconstructor : ThreadLocalRandom Functions \u00b6 Name Summary current [jvm] open override fun current (): FakeRandom Properties \u00b6 Name Summary fakeRandom [jvm] @Inject lateinit var fakeRandom : FakeRandom","title":"FakeThreadLocalRandom - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/#fakethreadlocalrandom","text":"[jvm]\\ @Singleton class FakeThreadLocalRandom @Injectconstructor : ThreadLocalRandom","title":"FakeThreadLocalRandom"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/#functions","text":"Name Summary current [jvm] open override fun current (): FakeRandom","title":"Functions"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/#properties","text":"Name Summary fakeRandom [jvm] @Inject lateinit var fakeRandom : FakeRandom","title":"Properties"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/-fake-thread-local-random/","text":"// misk-testing / misk.random / FakeThreadLocalRandom / FakeThreadLocalRandom FakeThreadLocalRandom \u00b6 [jvm]\\ @Inject fun FakeThreadLocalRandom ()","title":"FakeThreadLocalRandom - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/-fake-thread-local-random/#fakethreadlocalrandom","text":"[jvm]\\ @Inject fun FakeThreadLocalRandom ()","title":"FakeThreadLocalRandom"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/current/","text":"// misk-testing / misk.random / FakeThreadLocalRandom / current current \u00b6 [jvm]\\ open override fun current (): FakeRandom","title":"current - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/current/#current","text":"[jvm]\\ open override fun current (): FakeRandom","title":"current"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/fake-random/","text":"// misk-testing / misk.random / FakeThreadLocalRandom / fakeRandom fakeRandom \u00b6 [jvm]\\ @Inject lateinit var fakeRandom : FakeRandom","title":"fakeRandom - Misk"},{"location":"0.x/misk-testing/misk.random/-fake-thread-local-random/fake-random/#fakerandom","text":"[jvm]\\ @Inject lateinit var fakeRandom : FakeRandom","title":"fakeRandom"},{"location":"0.x/misk-testing/misk.service/","text":"// misk-testing / misk.service Package misk.service \u00b6 Types \u00b6 Name Summary CachedTestService [jvm] abstract class CachedTestService : AbstractIdleService Test services can derive from CachedTestService if they\u2019d like to reuse the same service for the span of a given runtime. This is helpful when you want to avoid incurring the cost of service startup and shutdown with each test run.","title":"Package misk.service - Misk"},{"location":"0.x/misk-testing/misk.service/#package-miskservice","text":"","title":"Package misk.service"},{"location":"0.x/misk-testing/misk.service/#types","text":"Name Summary CachedTestService [jvm] abstract class CachedTestService : AbstractIdleService Test services can derive from CachedTestService if they\u2019d like to reuse the same service for the span of a given runtime. This is helpful when you want to avoid incurring the cost of service startup and shutdown with each test run.","title":"Types"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/","text":"// misk-testing / misk.service / CachedTestService CachedTestService \u00b6 [jvm]\\ abstract class CachedTestService : AbstractIdleService Test services can derive from CachedTestService if they\u2019d like to reuse the same service for the span of a given runtime. This is helpful when you want to avoid incurring the cost of service startup and shutdown with each test run. NOTE: The caching is only useful if the implementing service references a shared instance of their underlying resources. A common way to do this is to leverage a companion object. Example: Constructors \u00b6 CachedTestService [jvm] fun CachedTestService () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary actualShutdown [jvm] abstract fun actualShutdown () Actually shuts the service down. This will be invoked once per runtime. actualStartup [jvm] abstract fun actualStartup () Actually starts the service up. This will be invoked once per runtime. addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"CachedTestService - Misk"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/#cachedtestservice","text":"[jvm]\\ abstract class CachedTestService : AbstractIdleService Test services can derive from CachedTestService if they\u2019d like to reuse the same service for the span of a given runtime. This is helpful when you want to avoid incurring the cost of service startup and shutdown with each test run. NOTE: The caching is only useful if the implementing service references a shared instance of their underlying resources. A common way to do this is to leverage a companion object. Example:","title":"CachedTestService"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/#constructors","text":"CachedTestService [jvm] fun CachedTestService ()","title":"Constructors"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/#functions","text":"Name Summary actualShutdown [jvm] abstract fun actualShutdown () Actually shuts the service down. This will be invoked once per runtime. actualStartup [jvm] abstract fun actualStartup () Actually starts the service up. This will be invoked once per runtime. addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/-cached-test-service/","text":"// misk-testing / misk.service / CachedTestService / CachedTestService CachedTestService \u00b6 [jvm]\\ fun CachedTestService ()","title":"CachedTestService - Misk"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/-cached-test-service/#cachedtestservice","text":"[jvm]\\ fun CachedTestService ()","title":"CachedTestService"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/actual-shutdown/","text":"// misk-testing / misk.service / CachedTestService / actualShutdown actualShutdown \u00b6 [jvm]\\ abstract fun actualShutdown () Actually shuts the service down. This will be invoked once per runtime.","title":"actualShutdown - Misk"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/actual-shutdown/#actualshutdown","text":"[jvm]\\ abstract fun actualShutdown () Actually shuts the service down. This will be invoked once per runtime.","title":"actualShutdown"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/actual-startup/","text":"// misk-testing / misk.service / CachedTestService / actualStartup actualStartup \u00b6 [jvm]\\ abstract fun actualStartup () Actually starts the service up. This will be invoked once per runtime.","title":"actualStartup - Misk"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/actual-startup/#actualstartup","text":"[jvm]\\ abstract fun actualStartup () Actually starts the service up. This will be invoked once per runtime.","title":"actualStartup"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/-companion/","text":"// misk-testing / misk.service / CachedTestService / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-testing/misk.service/-cached-test-service/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-testing/misk.services/","text":"// misk-testing / misk.services Package misk.services \u00b6 Types \u00b6 Name Summary FakeService [jvm] @Singleton class FakeService @Injectconstructor : AbstractIdleService FakeServiceModule [jvm] class FakeServiceModule : KAbstractModule","title":"Package misk.services - Misk"},{"location":"0.x/misk-testing/misk.services/#package-miskservices","text":"","title":"Package misk.services"},{"location":"0.x/misk-testing/misk.services/#types","text":"Name Summary FakeService [jvm] @Singleton class FakeService @Injectconstructor : AbstractIdleService FakeServiceModule [jvm] class FakeServiceModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-testing/misk.services/-fake-service/","text":"// misk-testing / misk.services / FakeService FakeService \u00b6 [jvm]\\ @Singleton class FakeService @Injectconstructor : AbstractIdleService Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"FakeService - Misk"},{"location":"0.x/misk-testing/misk.services/-fake-service/#fakeservice","text":"[jvm]\\ @Singleton class FakeService @Injectconstructor : AbstractIdleService","title":"FakeService"},{"location":"0.x/misk-testing/misk.services/-fake-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-testing/misk.services/-fake-service/-fake-service/","text":"// misk-testing / misk.services / FakeService / FakeService FakeService \u00b6 [jvm]\\ @Inject fun FakeService ()","title":"FakeService - Misk"},{"location":"0.x/misk-testing/misk.services/-fake-service/-fake-service/#fakeservice","text":"[jvm]\\ @Inject fun FakeService ()","title":"FakeService"},{"location":"0.x/misk-testing/misk.services/-fake-service-module/","text":"// misk-testing / misk.services / FakeServiceModule FakeServiceModule \u00b6 [jvm]\\ class FakeServiceModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeServiceModule - Misk"},{"location":"0.x/misk-testing/misk.services/-fake-service-module/#fakeservicemodule","text":"[jvm]\\ class FakeServiceModule : KAbstractModule","title":"FakeServiceModule"},{"location":"0.x/misk-testing/misk.services/-fake-service-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.services/-fake-service-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.services/-fake-service-module/-fake-service-module/","text":"// misk-testing / misk.services / FakeServiceModule / FakeServiceModule FakeServiceModule \u00b6 [jvm]\\ fun FakeServiceModule ()","title":"FakeServiceModule - Misk"},{"location":"0.x/misk-testing/misk.services/-fake-service-module/-fake-service-module/#fakeservicemodule","text":"[jvm]\\ fun FakeServiceModule ()","title":"FakeServiceModule"},{"location":"0.x/misk-testing/misk.testing/","text":"// misk-testing / misk.testing Package misk.testing \u00b6 Types \u00b6 Name Summary ConcurrentMockTracer [jvm] @Singleton class ConcurrentMockTracer @Injectconstructor : MockTracer Extends MockTracer for use in concurrent environments, such as a web server and test client. Prefer this wherever you\u2019d otherwise use MockTracer. ExternalDependency [jvm] interface ExternalDependency An external dependency of the Misk Application that needs to be started for test, like Redis, Vitess, MySQL, SQS, etc. LogLevel [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class LogLevel (level: LogLevel.Level ) Annotate your test classes or methods with @LogLevel to change the log level used by the test. It can be useful to have different LogLevel by test, specially if you\u2019re debugging issues on CI. LogLevelExtension [jvm] class LogLevelExtension @Injectconstructor : BeforeEachCallback MiskExternalDependency [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskExternalDependency MiskTest [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [MiskTestExtension::class]) annotation class MiskTest (startService: Boolean ) Annotate your test classes with @MiskTest to have fields annotated with @Inject initialized. Provide modules to be installed by annotating a Module field in your test class with MiskTestModule . This can be a compound module, composed using Modules.combine. MiskTestModule [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskTestModule MockTracingBackendModule [jvm] class MockTracingBackendModule : KAbstractModule TemporaryFolder [jvm] class TemporaryFolder (root: Path ) A temporary folder for use by a given test TemporaryFolderModule [jvm] class TemporaryFolderModule : KAbstractModule Functions \u00b6 Name Summary retrieve [jvm] inline fun < T > ExtensionContext. retrieve (name: String ): T store [jvm] fun < T > ExtensionContext. store (name: String , value: T ) Stores an object scoped to the test class on the context","title":"Package misk.testing - Misk"},{"location":"0.x/misk-testing/misk.testing/#package-misktesting","text":"","title":"Package misk.testing"},{"location":"0.x/misk-testing/misk.testing/#types","text":"Name Summary ConcurrentMockTracer [jvm] @Singleton class ConcurrentMockTracer @Injectconstructor : MockTracer Extends MockTracer for use in concurrent environments, such as a web server and test client. Prefer this wherever you\u2019d otherwise use MockTracer. ExternalDependency [jvm] interface ExternalDependency An external dependency of the Misk Application that needs to be started for test, like Redis, Vitess, MySQL, SQS, etc. LogLevel [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class LogLevel (level: LogLevel.Level ) Annotate your test classes or methods with @LogLevel to change the log level used by the test. It can be useful to have different LogLevel by test, specially if you\u2019re debugging issues on CI. LogLevelExtension [jvm] class LogLevelExtension @Injectconstructor : BeforeEachCallback MiskExternalDependency [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskExternalDependency MiskTest [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [MiskTestExtension::class]) annotation class MiskTest (startService: Boolean ) Annotate your test classes with @MiskTest to have fields annotated with @Inject initialized. Provide modules to be installed by annotating a Module field in your test class with MiskTestModule . This can be a compound module, composed using Modules.combine. MiskTestModule [jvm] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskTestModule MockTracingBackendModule [jvm] class MockTracingBackendModule : KAbstractModule TemporaryFolder [jvm] class TemporaryFolder (root: Path ) A temporary folder for use by a given test TemporaryFolderModule [jvm] class TemporaryFolderModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-testing/misk.testing/#functions","text":"Name Summary retrieve [jvm] inline fun < T > ExtensionContext. retrieve (name: String ): T store [jvm] fun < T > ExtensionContext. store (name: String , value: T ) Stores an object scoped to the test class on the context","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/retrieve/","text":"// misk-testing / misk.testing / retrieve retrieve \u00b6 [jvm]\\ inline fun < T > ExtensionContext. retrieve (name: String ): T Return \u00b6 A previously stored object scoped to the test class","title":"retrieve - Misk"},{"location":"0.x/misk-testing/misk.testing/retrieve/#retrieve","text":"[jvm]\\ inline fun < T > ExtensionContext. retrieve (name: String ): T","title":"retrieve"},{"location":"0.x/misk-testing/misk.testing/retrieve/#return","text":"A previously stored object scoped to the test class","title":"Return"},{"location":"0.x/misk-testing/misk.testing/store/","text":"// misk-testing / misk.testing / store store \u00b6 [jvm]\\ fun < T > ExtensionContext. store (name: String , value: T ) Stores an object scoped to the test class on the context","title":"store - Misk"},{"location":"0.x/misk-testing/misk.testing/store/#store","text":"[jvm]\\ fun < T > ExtensionContext. store (name: String , value: T ) Stores an object scoped to the test class on the context","title":"store"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/","text":"// misk-testing / misk.testing / ConcurrentMockTracer ConcurrentMockTracer \u00b6 [jvm]\\ @Singleton class ConcurrentMockTracer @Injectconstructor : MockTracer Extends MockTracer for use in concurrent environments, such as a web server and test client. Prefer this wherever you\u2019d otherwise use MockTracer. Constructors \u00b6 ConcurrentMockTracer [jvm] @Inject fun ConcurrentMockTracer () Functions \u00b6 Name Summary activateSpan [jvm] open override fun activateSpan (p0: Span): Scope activeSpan [jvm] open override fun activeSpan (): Span appendFinishedSpan [jvm] open fun appendFinishedSpan (p0: MockSpan) buildSpan [jvm] open override fun buildSpan (p0: String ): MockTracer.SpanBuilder close [jvm] open override fun close () extract [jvm] open override fun < C : Any > extract (p0: Format< C >, p1: C ): SpanContext finishedSpans [jvm] open fun finishedSpans (): MutableList <MockSpan> inject [jvm] open override fun < C : Any > inject (p0: SpanContext, p1: Format< C >, p2: C ) reset [jvm] open fun reset () scopeManager [jvm] open override fun scopeManager (): ScopeManager take [jvm] fun take (): MockSpan Awaits a span, removes it, and returns it. [jvm] fun take (operationName: String ): MockSpan Awaits a span named operationName , removes it, and returns it. Spans with other names are consumed and discarded.","title":"ConcurrentMockTracer - Misk"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/#concurrentmocktracer","text":"[jvm]\\ @Singleton class ConcurrentMockTracer @Injectconstructor : MockTracer Extends MockTracer for use in concurrent environments, such as a web server and test client. Prefer this wherever you\u2019d otherwise use MockTracer.","title":"ConcurrentMockTracer"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/#constructors","text":"ConcurrentMockTracer [jvm] @Inject fun ConcurrentMockTracer ()","title":"Constructors"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/#functions","text":"Name Summary activateSpan [jvm] open override fun activateSpan (p0: Span): Scope activeSpan [jvm] open override fun activeSpan (): Span appendFinishedSpan [jvm] open fun appendFinishedSpan (p0: MockSpan) buildSpan [jvm] open override fun buildSpan (p0: String ): MockTracer.SpanBuilder close [jvm] open override fun close () extract [jvm] open override fun < C : Any > extract (p0: Format< C >, p1: C ): SpanContext finishedSpans [jvm] open fun finishedSpans (): MutableList <MockSpan> inject [jvm] open override fun < C : Any > inject (p0: SpanContext, p1: Format< C >, p2: C ) reset [jvm] open fun reset () scopeManager [jvm] open override fun scopeManager (): ScopeManager take [jvm] fun take (): MockSpan Awaits a span, removes it, and returns it. [jvm] fun take (operationName: String ): MockSpan Awaits a span named operationName , removes it, and returns it. Spans with other names are consumed and discarded.","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/-concurrent-mock-tracer/","text":"// misk-testing / misk.testing / ConcurrentMockTracer / ConcurrentMockTracer ConcurrentMockTracer \u00b6 [jvm]\\ @Inject fun ConcurrentMockTracer ()","title":"ConcurrentMockTracer - Misk"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/-concurrent-mock-tracer/#concurrentmocktracer","text":"[jvm]\\ @Inject fun ConcurrentMockTracer ()","title":"ConcurrentMockTracer"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/take/","text":"// misk-testing / misk.testing / ConcurrentMockTracer / take take \u00b6 [jvm]\\ fun take (): MockSpan Awaits a span, removes it, and returns it. [jvm]\\ fun take (operationName: String ): MockSpan Awaits a span named operationName , removes it, and returns it. Spans with other names are consumed and discarded.","title":"take - Misk"},{"location":"0.x/misk-testing/misk.testing/-concurrent-mock-tracer/take/#take","text":"[jvm]\\ fun take (): MockSpan Awaits a span, removes it, and returns it. [jvm]\\ fun take (operationName: String ): MockSpan Awaits a span named operationName , removes it, and returns it. Spans with other names are consumed and discarded.","title":"take"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/","text":"// misk-testing / misk.testing / ExternalDependency ExternalDependency \u00b6 [jvm]\\ interface ExternalDependency An external dependency of the Misk Application that needs to be started for test, like Redis, Vitess, MySQL, SQS, etc. Functions \u00b6 Name Summary afterEach [jvm] abstract fun afterEach () Called before each test run beforeEach [jvm] abstract fun beforeEach () Called before each test run shutdown [jvm] abstract fun shutdown () Stops the dependency. startup [jvm] abstract fun startup () Starts the dependency. Properties \u00b6 Name Summary id [jvm] open val id : String Unique ID for the dependency, used as a stable key across tests. Can be overridden if more than one instance of the dependency is supported.","title":"ExternalDependency - Misk"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/#externaldependency","text":"[jvm]\\ interface ExternalDependency An external dependency of the Misk Application that needs to be started for test, like Redis, Vitess, MySQL, SQS, etc.","title":"ExternalDependency"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/#functions","text":"Name Summary afterEach [jvm] abstract fun afterEach () Called before each test run beforeEach [jvm] abstract fun beforeEach () Called before each test run shutdown [jvm] abstract fun shutdown () Stops the dependency. startup [jvm] abstract fun startup () Starts the dependency.","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/#properties","text":"Name Summary id [jvm] open val id : String Unique ID for the dependency, used as a stable key across tests. Can be overridden if more than one instance of the dependency is supported.","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/after-each/","text":"// misk-testing / misk.testing / ExternalDependency / afterEach afterEach \u00b6 [jvm]\\ abstract fun afterEach () Called before each test run","title":"afterEach - Misk"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/after-each/#aftereach","text":"[jvm]\\ abstract fun afterEach () Called before each test run","title":"afterEach"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/before-each/","text":"// misk-testing / misk.testing / ExternalDependency / beforeEach beforeEach \u00b6 [jvm]\\ abstract fun beforeEach () Called before each test run","title":"beforeEach - Misk"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/before-each/#beforeeach","text":"[jvm]\\ abstract fun beforeEach () Called before each test run","title":"beforeEach"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/id/","text":"// misk-testing / misk.testing / ExternalDependency / id id \u00b6 [jvm]\\ open val id : String Unique ID for the dependency, used as a stable key across tests. Can be overridden if more than one instance of the dependency is supported.","title":"id - Misk"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/id/#id","text":"[jvm]\\ open val id : String Unique ID for the dependency, used as a stable key across tests. Can be overridden if more than one instance of the dependency is supported.","title":"id"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/shutdown/","text":"// misk-testing / misk.testing / ExternalDependency / shutdown shutdown \u00b6 [jvm]\\ abstract fun shutdown () Stops the dependency.","title":"shutdown - Misk"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/shutdown/#shutdown","text":"[jvm]\\ abstract fun shutdown () Stops the dependency.","title":"shutdown"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/startup/","text":"// misk-testing / misk.testing / ExternalDependency / startup startup \u00b6 [jvm]\\ abstract fun startup () Starts the dependency.","title":"startup - Misk"},{"location":"0.x/misk-testing/misk.testing/-external-dependency/startup/#startup","text":"[jvm]\\ abstract fun startup () Starts the dependency.","title":"startup"},{"location":"0.x/misk-testing/misk.testing/-log-level/","text":"// misk-testing / misk.testing / LogLevel LogLevel \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class LogLevel (level: LogLevel.Level ) Annotate your test classes or methods with @LogLevel to change the log level used by the test. It can be useful to have different LogLevel by test, specially if you\u2019re debugging issues on CI. You can annotate methods: @LogLevel(level = LogLevel.Level.DEBUG)\\ @Test fun levelDebug() {\\ } Also, You can annotate test classes: @LogLevel(level = LogLevel.Level.ERROR)\\ class you can annotate the test {\\ @Test fun levelError() { Constructors \u00b6 LogLevel [jvm] fun LogLevel (level: LogLevel.Level = Level.INFO) Types \u00b6 Name Summary Level [jvm] enum Level : Enum < LogLevel.Level > Properties \u00b6 Name Summary level [jvm] val level : LogLevel.Level","title":"LogLevel - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/#loglevel","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class LogLevel (level: LogLevel.Level ) Annotate your test classes or methods with @LogLevel to change the log level used by the test. It can be useful to have different LogLevel by test, specially if you\u2019re debugging issues on CI. You can annotate methods: @LogLevel(level = LogLevel.Level.DEBUG)\\ @Test fun levelDebug() {\\ } Also, You can annotate test classes: @LogLevel(level = LogLevel.Level.ERROR)\\ class you can annotate the test {\\ @Test fun levelError() {","title":"LogLevel"},{"location":"0.x/misk-testing/misk.testing/-log-level/#constructors","text":"LogLevel [jvm] fun LogLevel (level: LogLevel.Level = Level.INFO)","title":"Constructors"},{"location":"0.x/misk-testing/misk.testing/-log-level/#types","text":"Name Summary Level [jvm] enum Level : Enum < LogLevel.Level >","title":"Types"},{"location":"0.x/misk-testing/misk.testing/-log-level/#properties","text":"Name Summary level [jvm] val level : LogLevel.Level","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-log-level/-log-level/","text":"// misk-testing / misk.testing / LogLevel / LogLevel LogLevel \u00b6 [jvm]\\ fun LogLevel (level: LogLevel.Level = Level.INFO)","title":"LogLevel - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/-log-level/#loglevel","text":"[jvm]\\ fun LogLevel (level: LogLevel.Level = Level.INFO)","title":"LogLevel"},{"location":"0.x/misk-testing/misk.testing/-log-level/level/","text":"// misk-testing / misk.testing / LogLevel / level level \u00b6 [jvm]\\ val level : LogLevel.Level","title":"level - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/level/#level","text":"[jvm]\\ val level : LogLevel.Level","title":"level"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/","text":"// misk-testing / misk.testing / LogLevel / Level Level \u00b6 [jvm]\\ enum Level : Enum < LogLevel.Level > Entries \u00b6 ERROR [jvm] ERROR () WARN [jvm] WARN () INFO [jvm] INFO () DEBUG [jvm] DEBUG () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Level - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/#level","text":"[jvm]\\ enum Level : Enum < LogLevel.Level >","title":"Level"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/#entries","text":"ERROR [jvm] ERROR () WARN [jvm] WARN () INFO [jvm] INFO () DEBUG [jvm] DEBUG ()","title":"Entries"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-d-e-b-u-g/","text":"// misk-testing / misk.testing / LogLevel / Level / DEBUG DEBUG \u00b6 [jvm]\\ DEBUG () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"DEBUG - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-d-e-b-u-g/#debug","text":"[jvm]\\ DEBUG ()","title":"DEBUG"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-d-e-b-u-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-e-r-r-o-r/","text":"// misk-testing / misk.testing / LogLevel / Level / ERROR ERROR \u00b6 [jvm]\\ ERROR () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"ERROR - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-e-r-r-o-r/#error","text":"[jvm]\\ ERROR ()","title":"ERROR"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-e-r-r-o-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-i-n-f-o/","text":"// misk-testing / misk.testing / LogLevel / Level / INFO INFO \u00b6 [jvm]\\ INFO () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"INFO - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-i-n-f-o/#info","text":"[jvm]\\ INFO ()","title":"INFO"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-i-n-f-o/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-w-a-r-n/","text":"// misk-testing / misk.testing / LogLevel / Level / WARN WARN \u00b6 [jvm]\\ WARN () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"WARN - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-w-a-r-n/#warn","text":"[jvm]\\ WARN ()","title":"WARN"},{"location":"0.x/misk-testing/misk.testing/-log-level/-level/-w-a-r-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-log-level-extension/","text":"// misk-testing / misk.testing / LogLevelExtension LogLevelExtension \u00b6 [jvm]\\ class LogLevelExtension @Injectconstructor : BeforeEachCallback Functions \u00b6 Name Summary beforeEach [jvm] open override fun beforeEach (context: ExtensionContext?)","title":"LogLevelExtension - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level-extension/#loglevelextension","text":"[jvm]\\ class LogLevelExtension @Injectconstructor : BeforeEachCallback","title":"LogLevelExtension"},{"location":"0.x/misk-testing/misk.testing/-log-level-extension/#functions","text":"Name Summary beforeEach [jvm] open override fun beforeEach (context: ExtensionContext?)","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/-log-level-extension/-log-level-extension/","text":"// misk-testing / misk.testing / LogLevelExtension / LogLevelExtension LogLevelExtension \u00b6 [jvm]\\ @Inject fun LogLevelExtension ()","title":"LogLevelExtension - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level-extension/-log-level-extension/#loglevelextension","text":"[jvm]\\ @Inject fun LogLevelExtension ()","title":"LogLevelExtension"},{"location":"0.x/misk-testing/misk.testing/-log-level-extension/before-each/","text":"// misk-testing / misk.testing / LogLevelExtension / beforeEach beforeEach \u00b6 [jvm]\\ open override fun beforeEach (context: ExtensionContext?)","title":"beforeEach - Misk"},{"location":"0.x/misk-testing/misk.testing/-log-level-extension/before-each/#beforeeach","text":"[jvm]\\ open override fun beforeEach (context: ExtensionContext?)","title":"beforeEach"},{"location":"0.x/misk-testing/misk.testing/-misk-external-dependency/","text":"// misk-testing / misk.testing / MiskExternalDependency MiskExternalDependency \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskExternalDependency","title":"MiskExternalDependency - Misk"},{"location":"0.x/misk-testing/misk.testing/-misk-external-dependency/#miskexternaldependency","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskExternalDependency","title":"MiskExternalDependency"},{"location":"0.x/misk-testing/misk.testing/-misk-external-dependency/-misk-external-dependency/","text":"// misk-testing / misk.testing / MiskExternalDependency / MiskExternalDependency MiskExternalDependency \u00b6 [jvm]\\ fun MiskExternalDependency ()","title":"MiskExternalDependency - Misk"},{"location":"0.x/misk-testing/misk.testing/-misk-external-dependency/-misk-external-dependency/#miskexternaldependency","text":"[jvm]\\ fun MiskExternalDependency ()","title":"MiskExternalDependency"},{"location":"0.x/misk-testing/misk.testing/-misk-test/","text":"// misk-testing / misk.testing / MiskTest MiskTest \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [MiskTestExtension::class]) annotation class MiskTest (startService: Boolean ) Annotate your test classes with @MiskTest to have fields annotated with @Inject initialized. Provide modules to be installed by annotating a Module field in your test class with MiskTestModule . This can be a compound module, composed using Modules.combine. Configure test callbacks with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<BeforeEachCallback>().to<MyBeforeEach>()\\ multibind<AfterEachCallback>().to<MyAfterEach>() Constructors \u00b6 MiskTest [jvm] fun MiskTest (startService: Boolean = false) Properties \u00b6 Name Summary startService [jvm] val startService : Boolean = false","title":"MiskTest - Misk"},{"location":"0.x/misk-testing/misk.testing/-misk-test/#misktest","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [MiskTestExtension::class]) annotation class MiskTest (startService: Boolean ) Annotate your test classes with @MiskTest to have fields annotated with @Inject initialized. Provide modules to be installed by annotating a Module field in your test class with MiskTestModule . This can be a compound module, composed using Modules.combine. Configure test callbacks with Guice multibindings. Register instances by calling multibind() in a KAbstractModule: multibind<BeforeEachCallback>().to<MyBeforeEach>()\\ multibind<AfterEachCallback>().to<MyAfterEach>()","title":"MiskTest"},{"location":"0.x/misk-testing/misk.testing/-misk-test/#constructors","text":"MiskTest [jvm] fun MiskTest (startService: Boolean = false)","title":"Constructors"},{"location":"0.x/misk-testing/misk.testing/-misk-test/#properties","text":"Name Summary startService [jvm] val startService : Boolean = false","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-misk-test/-misk-test/","text":"// misk-testing / misk.testing / MiskTest / MiskTest MiskTest \u00b6 [jvm]\\ fun MiskTest (startService: Boolean = false)","title":"MiskTest - Misk"},{"location":"0.x/misk-testing/misk.testing/-misk-test/-misk-test/#misktest","text":"[jvm]\\ fun MiskTest (startService: Boolean = false)","title":"MiskTest"},{"location":"0.x/misk-testing/misk.testing/-misk-test/start-service/","text":"// misk-testing / misk.testing / MiskTest / startService startService \u00b6 [jvm]\\ val startService : Boolean = false","title":"startService - Misk"},{"location":"0.x/misk-testing/misk.testing/-misk-test/start-service/#startservice","text":"[jvm]\\ val startService : Boolean = false","title":"startService"},{"location":"0.x/misk-testing/misk.testing/-misk-test-module/","text":"// misk-testing / misk.testing / MiskTestModule MiskTestModule \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskTestModule","title":"MiskTestModule - Misk"},{"location":"0.x/misk-testing/misk.testing/-misk-test-module/#misktestmodule","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class MiskTestModule","title":"MiskTestModule"},{"location":"0.x/misk-testing/misk.testing/-misk-test-module/-misk-test-module/","text":"// misk-testing / misk.testing / MiskTestModule / MiskTestModule MiskTestModule \u00b6 [jvm]\\ fun MiskTestModule ()","title":"MiskTestModule - Misk"},{"location":"0.x/misk-testing/misk.testing/-misk-test-module/-misk-test-module/#misktestmodule","text":"[jvm]\\ fun MiskTestModule ()","title":"MiskTestModule"},{"location":"0.x/misk-testing/misk.testing/-mock-tracing-backend-module/","text":"// misk-testing / misk.testing / MockTracingBackendModule MockTracingBackendModule \u00b6 [jvm]\\ class MockTracingBackendModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"MockTracingBackendModule - Misk"},{"location":"0.x/misk-testing/misk.testing/-mock-tracing-backend-module/#mocktracingbackendmodule","text":"[jvm]\\ class MockTracingBackendModule : KAbstractModule","title":"MockTracingBackendModule"},{"location":"0.x/misk-testing/misk.testing/-mock-tracing-backend-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/-mock-tracing-backend-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-mock-tracing-backend-module/-mock-tracing-backend-module/","text":"// misk-testing / misk.testing / MockTracingBackendModule / MockTracingBackendModule MockTracingBackendModule \u00b6 [jvm]\\ fun MockTracingBackendModule ()","title":"MockTracingBackendModule - Misk"},{"location":"0.x/misk-testing/misk.testing/-mock-tracing-backend-module/-mock-tracing-backend-module/#mocktracingbackendmodule","text":"[jvm]\\ fun MockTracingBackendModule ()","title":"MockTracingBackendModule"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/","text":"// misk-testing / misk.testing / TemporaryFolder TemporaryFolder \u00b6 [jvm]\\ class TemporaryFolder (root: Path ) A temporary folder for use by a given test Constructors \u00b6 TemporaryFolder [jvm] fun TemporaryFolder (root: Path ) Functions \u00b6 Name Summary delete [jvm] fun delete () Deletes all files and folders under the temporary folder newFile [jvm] fun newFile (): Path fun newFile (name: String ): Path newFolder [jvm] fun newFolder (): Path fun newFolder (name: String ): Path Properties \u00b6 Name Summary root [jvm] val root : Path","title":"TemporaryFolder - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/#temporaryfolder","text":"[jvm]\\ class TemporaryFolder (root: Path ) A temporary folder for use by a given test","title":"TemporaryFolder"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/#constructors","text":"TemporaryFolder [jvm] fun TemporaryFolder (root: Path )","title":"Constructors"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/#functions","text":"Name Summary delete [jvm] fun delete () Deletes all files and folders under the temporary folder newFile [jvm] fun newFile (): Path fun newFile (name: String ): Path newFolder [jvm] fun newFolder (): Path fun newFolder (name: String ): Path","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/#properties","text":"Name Summary root [jvm] val root : Path","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/-temporary-folder/","text":"// misk-testing / misk.testing / TemporaryFolder / TemporaryFolder TemporaryFolder \u00b6 [jvm]\\ fun TemporaryFolder (root: Path )","title":"TemporaryFolder - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/-temporary-folder/#temporaryfolder","text":"[jvm]\\ fun TemporaryFolder (root: Path )","title":"TemporaryFolder"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/delete/","text":"// misk-testing / misk.testing / TemporaryFolder / delete delete \u00b6 [jvm]\\ fun delete () Deletes all files and folders under the temporary folder","title":"delete - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/delete/#delete","text":"[jvm]\\ fun delete () Deletes all files and folders under the temporary folder","title":"delete"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-file/","text":"// misk-testing / misk.testing / TemporaryFolder / newFile newFile \u00b6 [jvm]\\ fun newFile (): Path Return \u00b6 a new file with a randomly generated name [jvm]\\ fun newFile (name: String ): Path Return \u00b6 a new file with the given name","title":"newFile - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-file/#newfile","text":"[jvm]\\ fun newFile (): Path","title":"newFile"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-file/#return","text":"a new file with a randomly generated name [jvm]\\ fun newFile (name: String ): Path","title":"Return"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-file/#return_1","text":"a new file with the given name","title":"Return"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-folder/","text":"// misk-testing / misk.testing / TemporaryFolder / newFolder newFolder \u00b6 [jvm]\\ fun newFolder (): Path Return \u00b6 a new folder with a randomly generated name [jvm]\\ fun newFolder (name: String ): Path Return \u00b6 a new folder with the given name","title":"newFolder - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-folder/#newfolder","text":"[jvm]\\ fun newFolder (): Path","title":"newFolder"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-folder/#return","text":"a new folder with a randomly generated name [jvm]\\ fun newFolder (name: String ): Path","title":"Return"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/new-folder/#return_1","text":"a new folder with the given name","title":"Return"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/root/","text":"// misk-testing / misk.testing / TemporaryFolder / root root \u00b6 [jvm]\\ val root : Path","title":"root - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder/root/#root","text":"[jvm]\\ val root : Path","title":"root"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/","text":"// misk-testing / misk.testing / TemporaryFolderModule TemporaryFolderModule \u00b6 [jvm]\\ class TemporaryFolderModule : KAbstractModule Types \u00b6 Name Summary DeleteTempFolder [jvm] class DeleteTempFolder @Injectconstructor(tempDir: TemporaryFolder ) : AfterEachCallback Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideTemporaryFolder [jvm] @Provides @Singleton fun provideTemporaryFolder (): TemporaryFolder requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"TemporaryFolderModule - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/#temporaryfoldermodule","text":"[jvm]\\ class TemporaryFolderModule : KAbstractModule","title":"TemporaryFolderModule"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/#types","text":"Name Summary DeleteTempFolder [jvm] class DeleteTempFolder @Injectconstructor(tempDir: TemporaryFolder ) : AfterEachCallback","title":"Types"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideTemporaryFolder [jvm] @Provides @Singleton fun provideTemporaryFolder (): TemporaryFolder requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-temporary-folder-module/","text":"// misk-testing / misk.testing / TemporaryFolderModule / TemporaryFolderModule TemporaryFolderModule \u00b6 [jvm]\\ fun TemporaryFolderModule ()","title":"TemporaryFolderModule - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-temporary-folder-module/#temporaryfoldermodule","text":"[jvm]\\ fun TemporaryFolderModule ()","title":"TemporaryFolderModule"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/provide-temporary-folder/","text":"// misk-testing / misk.testing / TemporaryFolderModule / provideTemporaryFolder provideTemporaryFolder \u00b6 [jvm]\\ @Provides @Singleton fun provideTemporaryFolder (): TemporaryFolder","title":"provideTemporaryFolder - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/provide-temporary-folder/#providetemporaryfolder","text":"[jvm]\\ @Provides @Singleton fun provideTemporaryFolder (): TemporaryFolder","title":"provideTemporaryFolder"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-delete-temp-folder/","text":"// misk-testing / misk.testing / TemporaryFolderModule / DeleteTempFolder DeleteTempFolder \u00b6 [jvm]\\ class DeleteTempFolder @Injectconstructor(tempDir: TemporaryFolder ) : AfterEachCallback Functions \u00b6 Name Summary afterEach [jvm] open override fun afterEach (context: ExtensionContext)","title":"DeleteTempFolder - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-delete-temp-folder/#deletetempfolder","text":"[jvm]\\ class DeleteTempFolder @Injectconstructor(tempDir: TemporaryFolder ) : AfterEachCallback","title":"DeleteTempFolder"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-delete-temp-folder/#functions","text":"Name Summary afterEach [jvm] open override fun afterEach (context: ExtensionContext)","title":"Functions"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-delete-temp-folder/-delete-temp-folder/","text":"// misk-testing / misk.testing / TemporaryFolderModule / DeleteTempFolder / DeleteTempFolder DeleteTempFolder \u00b6 [jvm]\\ @Inject fun DeleteTempFolder (tempDir: TemporaryFolder )","title":"DeleteTempFolder - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-delete-temp-folder/-delete-temp-folder/#deletetempfolder","text":"[jvm]\\ @Inject fun DeleteTempFolder (tempDir: TemporaryFolder )","title":"DeleteTempFolder"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-delete-temp-folder/after-each/","text":"// misk-testing / misk.testing / TemporaryFolderModule / DeleteTempFolder / afterEach afterEach \u00b6 [jvm]\\ open override fun afterEach (context: ExtensionContext)","title":"afterEach - Misk"},{"location":"0.x/misk-testing/misk.testing/-temporary-folder-module/-delete-temp-folder/after-each/#aftereach","text":"[jvm]\\ open override fun afterEach (context: ExtensionContext)","title":"afterEach"},{"location":"0.x/misk-testing/misk.time/","text":"// misk-testing / misk.time Package misk.time \u00b6 Types \u00b6 Name Summary FakeClock [jvm] class FakeClock (epochMillis: Long , zone: ZoneId ) : Clock FakeClockModule [jvm] class FakeClockModule : KAbstractModule FakeTickerModule [jvm] class FakeTickerModule : KAbstractModule","title":"Package misk.time - Misk"},{"location":"0.x/misk-testing/misk.time/#package-misktime","text":"","title":"Package misk.time"},{"location":"0.x/misk-testing/misk.time/#types","text":"Name Summary FakeClock [jvm] class FakeClock (epochMillis: Long , zone: ZoneId ) : Clock FakeClockModule [jvm] class FakeClockModule : KAbstractModule FakeTickerModule [jvm] class FakeTickerModule : KAbstractModule","title":"Types"},{"location":"0.x/misk-testing/misk.time/-fake-clock/","text":"// misk-testing / misk.time / FakeClock FakeClock \u00b6 [jvm]\\ class FakeClock (epochMillis: Long , zone: ZoneId ) : Clock Functions \u00b6 Name Summary add [jvm] fun add (d: Duration ): Long fun add (n: Long , unit: TimeUnit ): Long equals [jvm] open operator override fun equals (other: Any ?): Boolean getZone [jvm] open override fun getZone (): ZoneId hashCode [jvm] open override fun hashCode (): Int instant [jvm] open override fun instant (): Instant millis [jvm] open fun millis (): Long setNow [jvm] fun setNow (instant: Instant ) withZone [jvm] open override fun withZone (zone: ZoneId ): Clock","title":"FakeClock - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock/#fakeclock","text":"[jvm]\\ class FakeClock (epochMillis: Long , zone: ZoneId ) : Clock","title":"FakeClock"},{"location":"0.x/misk-testing/misk.time/-fake-clock/#functions","text":"Name Summary add [jvm] fun add (d: Duration ): Long fun add (n: Long , unit: TimeUnit ): Long equals [jvm] open operator override fun equals (other: Any ?): Boolean getZone [jvm] open override fun getZone (): ZoneId hashCode [jvm] open override fun hashCode (): Int instant [jvm] open override fun instant (): Instant millis [jvm] open fun millis (): Long setNow [jvm] fun setNow (instant: Instant ) withZone [jvm] open override fun withZone (zone: ZoneId ): Clock","title":"Functions"},{"location":"0.x/misk-testing/misk.time/-fake-clock/-fake-clock/","text":"// misk-testing / misk.time / FakeClock / FakeClock FakeClock \u00b6 [jvm]\\ fun FakeClock (epochMillis: Long = Instant.parse(\u201c2018-01-01T00:00:00Z\u201d).toEpochMilli(), zone: ZoneId = ZoneId.of(\u201cUTC\u201d))","title":"FakeClock - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock/-fake-clock/#fakeclock","text":"[jvm]\\ fun FakeClock (epochMillis: Long = Instant.parse(\u201c2018-01-01T00:00:00Z\u201d).toEpochMilli(), zone: ZoneId = ZoneId.of(\u201cUTC\u201d))","title":"FakeClock"},{"location":"0.x/misk-testing/misk.time/-fake-clock/add/","text":"// misk-testing / misk.time / FakeClock / add add \u00b6 [jvm]\\ fun add (d: Duration ): Long fun add (n: Long , unit: TimeUnit ): Long","title":"add - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock/add/#add","text":"[jvm]\\ fun add (d: Duration ): Long fun add (n: Long , unit: TimeUnit ): Long","title":"add"},{"location":"0.x/misk-testing/misk.time/-fake-clock/get-zone/","text":"// misk-testing / misk.time / FakeClock / getZone getZone \u00b6 [jvm]\\ open override fun getZone (): ZoneId","title":"getZone - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock/get-zone/#getzone","text":"[jvm]\\ open override fun getZone (): ZoneId","title":"getZone"},{"location":"0.x/misk-testing/misk.time/-fake-clock/instant/","text":"// misk-testing / misk.time / FakeClock / instant instant \u00b6 [jvm]\\ open override fun instant (): Instant","title":"instant - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock/instant/#instant","text":"[jvm]\\ open override fun instant (): Instant","title":"instant"},{"location":"0.x/misk-testing/misk.time/-fake-clock/set-now/","text":"// misk-testing / misk.time / FakeClock / setNow setNow \u00b6 [jvm]\\ fun setNow (instant: Instant )","title":"setNow - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock/set-now/#setnow","text":"[jvm]\\ fun setNow (instant: Instant )","title":"setNow"},{"location":"0.x/misk-testing/misk.time/-fake-clock/with-zone/","text":"// misk-testing / misk.time / FakeClock / withZone withZone \u00b6 [jvm]\\ open override fun withZone (zone: ZoneId ): Clock","title":"withZone - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock/with-zone/#withzone","text":"[jvm]\\ open override fun withZone (zone: ZoneId ): Clock","title":"withZone"},{"location":"0.x/misk-testing/misk.time/-fake-clock-module/","text":"// misk-testing / misk.time / FakeClockModule FakeClockModule \u00b6 [jvm]\\ class FakeClockModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeClockModule - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock-module/#fakeclockmodule","text":"[jvm]\\ class FakeClockModule : KAbstractModule","title":"FakeClockModule"},{"location":"0.x/misk-testing/misk.time/-fake-clock-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.time/-fake-clock-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.time/-fake-clock-module/-fake-clock-module/","text":"// misk-testing / misk.time / FakeClockModule / FakeClockModule FakeClockModule \u00b6 [jvm]\\ fun FakeClockModule ()","title":"FakeClockModule - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-clock-module/-fake-clock-module/#fakeclockmodule","text":"[jvm]\\ fun FakeClockModule ()","title":"FakeClockModule"},{"location":"0.x/misk-testing/misk.time/-fake-ticker-module/","text":"// misk-testing / misk.time / FakeTickerModule FakeTickerModule \u00b6 [jvm]\\ class FakeTickerModule : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FakeTickerModule - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-ticker-module/#faketickermodule","text":"[jvm]\\ class FakeTickerModule : KAbstractModule","title":"FakeTickerModule"},{"location":"0.x/misk-testing/misk.time/-fake-ticker-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.time/-fake-ticker-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.time/-fake-ticker-module/-fake-ticker-module/","text":"// misk-testing / misk.time / FakeTickerModule / FakeTickerModule FakeTickerModule \u00b6 [jvm]\\ fun FakeTickerModule ()","title":"FakeTickerModule - Misk"},{"location":"0.x/misk-testing/misk.time/-fake-ticker-module/-fake-ticker-module/#faketickermodule","text":"[jvm]\\ fun FakeTickerModule ()","title":"FakeTickerModule"},{"location":"0.x/misk-testing/misk.web/","text":"// misk-testing / misk.web Package misk.web \u00b6 Types \u00b6 Name Summary FakeHttpCall [jvm] data class FakeHttpCall (url: HttpUrl, linkLayerLocalAddress: SocketAddress, dispatchMechanism: DispatchMechanism, requestHeaders: Headers, statusCode: Int , networkStatusCode: Int , headersBuilder: Headers.Builder, sendTrailers: Boolean , trailersBuilder: Headers.Builder, requestBody: BufferedSource?, responseBody: BufferedSink?, webSocket: WebSocket?, webSocketListener: WebSocketListener?) : HttpCall FakeWebSocketListener [jvm] class FakeWebSocketListener : WebSocketListener MiskCallerExtension [jvm] class MiskCallerExtension : BeforeTestExecutionCallback, AfterTestExecutionCallback WebServerTestingModule [jvm] class WebServerTestingModule (webConfig: WebConfig) : KAbstractModule A module that starts an embedded Jetty web server configured for testing. The server supports both plaintext and TLS. WebTestClient [jvm] class WebTestClient @Injectconstructor(moshi: Moshi, jettyService: JettyService) Use WebTestClient to test calls to the application at the integration level. WithMiskCaller [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [ MiskCallerExtension::class ]) annotation class WithMiskCaller (user: String , service: String ) Use this annotation to specify an ActionScoped for this class.","title":"Package misk.web - Misk"},{"location":"0.x/misk-testing/misk.web/#package-miskweb","text":"","title":"Package misk.web"},{"location":"0.x/misk-testing/misk.web/#types","text":"Name Summary FakeHttpCall [jvm] data class FakeHttpCall (url: HttpUrl, linkLayerLocalAddress: SocketAddress, dispatchMechanism: DispatchMechanism, requestHeaders: Headers, statusCode: Int , networkStatusCode: Int , headersBuilder: Headers.Builder, sendTrailers: Boolean , trailersBuilder: Headers.Builder, requestBody: BufferedSource?, responseBody: BufferedSink?, webSocket: WebSocket?, webSocketListener: WebSocketListener?) : HttpCall FakeWebSocketListener [jvm] class FakeWebSocketListener : WebSocketListener MiskCallerExtension [jvm] class MiskCallerExtension : BeforeTestExecutionCallback, AfterTestExecutionCallback WebServerTestingModule [jvm] class WebServerTestingModule (webConfig: WebConfig) : KAbstractModule A module that starts an embedded Jetty web server configured for testing. The server supports both plaintext and TLS. WebTestClient [jvm] class WebTestClient @Injectconstructor(moshi: Moshi, jettyService: JettyService) Use WebTestClient to test calls to the application at the integration level. WithMiskCaller [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [ MiskCallerExtension::class ]) annotation class WithMiskCaller (user: String , service: String ) Use this annotation to specify an ActionScoped for this class.","title":"Types"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/","text":"// misk-testing / misk.web / FakeHttpCall FakeHttpCall \u00b6 [jvm]\\ data class FakeHttpCall (url: HttpUrl, linkLayerLocalAddress: SocketAddress, dispatchMechanism: DispatchMechanism, requestHeaders: Headers, statusCode: Int , networkStatusCode: Int , headersBuilder: Headers.Builder, sendTrailers: Boolean , trailersBuilder: Headers.Builder, requestBody: BufferedSource?, responseBody: BufferedSink?, webSocket: WebSocket?, webSocketListener: WebSocketListener?) : HttpCall Functions \u00b6 Name Summary accepts [jvm] open fun accepts (): List <MediaRange> addResponseHeaders [jvm] open override fun addResponseHeaders (headers: Headers) asOkHttpRequest [jvm] open fun asOkHttpRequest (): Request computeRequestHeader [jvm] open fun computeRequestHeader (name: String , computeFn: ( String ?) -> Pair < String , String >?) contentType [jvm] open fun contentType (): MediaType? initWebSocketListener [jvm] open override fun initWebSocketListener (webSocketListener: WebSocketListener) putRequestBody [jvm] open override fun putRequestBody (requestBody: BufferedSource) putResponseBody [jvm] open override fun putResponseBody (responseBody: BufferedSink) putWebSocket [jvm] open override fun putWebSocket (webSocket: WebSocket) requireTrailers [jvm] open override fun requireTrailers () setResponseHeader [jvm] open override fun setResponseHeader (name: String , value: String ) setResponseTrailer [jvm] open override fun setResponseTrailer (name: String , value: String ) setStatusCodes [jvm] open override fun setStatusCodes (statusCode: Int , networkStatusCode: Int ) takeRequestBody [jvm] open override fun takeRequestBody (): BufferedSource? takeResponseBody [jvm] open override fun takeResponseBody (): BufferedSink? takeWebSocket [jvm] open override fun takeWebSocket (): WebSocket? Properties \u00b6 Name Summary dispatchMechanism [jvm] open override val dispatchMechanism : DispatchMechanism headersBuilder [jvm] val headersBuilder : Headers.Builder linkLayerLocalAddress [jvm] open override val linkLayerLocalAddress : SocketAddress networkStatusCode [jvm] open override var networkStatusCode : Int = 200 requestBody [jvm] var requestBody : BufferedSource? requestHeaders [jvm] open override var requestHeaders : Headers responseBody [jvm] var responseBody : BufferedSink? responseHeaders [jvm] open override val responseHeaders : Headers sendTrailers [jvm] var sendTrailers : Boolean = false statusCode [jvm] open override var statusCode : Int = 200 trailersBuilder [jvm] val trailersBuilder : Headers.Builder url [jvm] open override val url : HttpUrl webSocket [jvm] var webSocket : WebSocket? = null webSocketListener [jvm] var webSocketListener : WebSocketListener? = null","title":"FakeHttpCall - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/#fakehttpcall","text":"[jvm]\\ data class FakeHttpCall (url: HttpUrl, linkLayerLocalAddress: SocketAddress, dispatchMechanism: DispatchMechanism, requestHeaders: Headers, statusCode: Int , networkStatusCode: Int , headersBuilder: Headers.Builder, sendTrailers: Boolean , trailersBuilder: Headers.Builder, requestBody: BufferedSource?, responseBody: BufferedSink?, webSocket: WebSocket?, webSocketListener: WebSocketListener?) : HttpCall","title":"FakeHttpCall"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/#functions","text":"Name Summary accepts [jvm] open fun accepts (): List <MediaRange> addResponseHeaders [jvm] open override fun addResponseHeaders (headers: Headers) asOkHttpRequest [jvm] open fun asOkHttpRequest (): Request computeRequestHeader [jvm] open fun computeRequestHeader (name: String , computeFn: ( String ?) -> Pair < String , String >?) contentType [jvm] open fun contentType (): MediaType? initWebSocketListener [jvm] open override fun initWebSocketListener (webSocketListener: WebSocketListener) putRequestBody [jvm] open override fun putRequestBody (requestBody: BufferedSource) putResponseBody [jvm] open override fun putResponseBody (responseBody: BufferedSink) putWebSocket [jvm] open override fun putWebSocket (webSocket: WebSocket) requireTrailers [jvm] open override fun requireTrailers () setResponseHeader [jvm] open override fun setResponseHeader (name: String , value: String ) setResponseTrailer [jvm] open override fun setResponseTrailer (name: String , value: String ) setStatusCodes [jvm] open override fun setStatusCodes (statusCode: Int , networkStatusCode: Int ) takeRequestBody [jvm] open override fun takeRequestBody (): BufferedSource? takeResponseBody [jvm] open override fun takeResponseBody (): BufferedSink? takeWebSocket [jvm] open override fun takeWebSocket (): WebSocket?","title":"Functions"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/#properties","text":"Name Summary dispatchMechanism [jvm] open override val dispatchMechanism : DispatchMechanism headersBuilder [jvm] val headersBuilder : Headers.Builder linkLayerLocalAddress [jvm] open override val linkLayerLocalAddress : SocketAddress networkStatusCode [jvm] open override var networkStatusCode : Int = 200 requestBody [jvm] var requestBody : BufferedSource? requestHeaders [jvm] open override var requestHeaders : Headers responseBody [jvm] var responseBody : BufferedSink? responseHeaders [jvm] open override val responseHeaders : Headers sendTrailers [jvm] var sendTrailers : Boolean = false statusCode [jvm] open override var statusCode : Int = 200 trailersBuilder [jvm] val trailersBuilder : Headers.Builder url [jvm] open override val url : HttpUrl webSocket [jvm] var webSocket : WebSocket? = null webSocketListener [jvm] var webSocketListener : WebSocketListener? = null","title":"Properties"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/-fake-http-call/","text":"// misk-testing / misk.web / FakeHttpCall / FakeHttpCall FakeHttpCall \u00b6 [jvm]\\ fun FakeHttpCall (url: HttpUrl = \u201c https://example.com/\".toHttpUrl (), linkLayerLocalAddress: SocketAddress = SocketAddress.Network(\u201c1.2.3.4\u201d, 56789), dispatchMechanism: DispatchMechanism = DispatchMechanism.GET, requestHeaders: Headers = headersOf(), statusCode: Int = 200, networkStatusCode: Int = 200, headersBuilder: Headers.Builder = Headers.Builder(), sendTrailers: Boolean = false, trailersBuilder: Headers.Builder = Headers.Builder(), requestBody: BufferedSource? = Buffer(), responseBody: BufferedSink? = Buffer(), webSocket: WebSocket? = null, webSocketListener: WebSocketListener? = null)","title":"FakeHttpCall - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/-fake-http-call/#fakehttpcall","text":"[jvm]\\ fun FakeHttpCall (url: HttpUrl = \u201c https://example.com/\".toHttpUrl (), linkLayerLocalAddress: SocketAddress = SocketAddress.Network(\u201c1.2.3.4\u201d, 56789), dispatchMechanism: DispatchMechanism = DispatchMechanism.GET, requestHeaders: Headers = headersOf(), statusCode: Int = 200, networkStatusCode: Int = 200, headersBuilder: Headers.Builder = Headers.Builder(), sendTrailers: Boolean = false, trailersBuilder: Headers.Builder = Headers.Builder(), requestBody: BufferedSource? = Buffer(), responseBody: BufferedSink? = Buffer(), webSocket: WebSocket? = null, webSocketListener: WebSocketListener? = null)","title":"FakeHttpCall"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/add-response-headers/","text":"// misk-testing / misk.web / FakeHttpCall / addResponseHeaders addResponseHeaders \u00b6 [jvm]\\ open override fun addResponseHeaders (headers: Headers)","title":"addResponseHeaders - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/add-response-headers/#addresponseheaders","text":"[jvm]\\ open override fun addResponseHeaders (headers: Headers)","title":"addResponseHeaders"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/dispatch-mechanism/","text":"// misk-testing / misk.web / FakeHttpCall / dispatchMechanism dispatchMechanism \u00b6 [jvm]\\ open override val dispatchMechanism : DispatchMechanism","title":"dispatchMechanism - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/dispatch-mechanism/#dispatchmechanism","text":"[jvm]\\ open override val dispatchMechanism : DispatchMechanism","title":"dispatchMechanism"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/headers-builder/","text":"// misk-testing / misk.web / FakeHttpCall / headersBuilder headersBuilder \u00b6 [jvm]\\ val headersBuilder : Headers.Builder","title":"headersBuilder - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/headers-builder/#headersbuilder","text":"[jvm]\\ val headersBuilder : Headers.Builder","title":"headersBuilder"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/init-web-socket-listener/","text":"// misk-testing / misk.web / FakeHttpCall / initWebSocketListener initWebSocketListener \u00b6 [jvm]\\ open override fun initWebSocketListener (webSocketListener: WebSocketListener)","title":"initWebSocketListener - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/init-web-socket-listener/#initwebsocketlistener","text":"[jvm]\\ open override fun initWebSocketListener (webSocketListener: WebSocketListener)","title":"initWebSocketListener"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/link-layer-local-address/","text":"// misk-testing / misk.web / FakeHttpCall / linkLayerLocalAddress linkLayerLocalAddress \u00b6 [jvm]\\ open override val linkLayerLocalAddress : SocketAddress","title":"linkLayerLocalAddress - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/link-layer-local-address/#linklayerlocaladdress","text":"[jvm]\\ open override val linkLayerLocalAddress : SocketAddress","title":"linkLayerLocalAddress"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/network-status-code/","text":"// misk-testing / misk.web / FakeHttpCall / networkStatusCode networkStatusCode \u00b6 [jvm]\\ open override var networkStatusCode : Int = 200","title":"networkStatusCode - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/network-status-code/#networkstatuscode","text":"[jvm]\\ open override var networkStatusCode : Int = 200","title":"networkStatusCode"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/put-request-body/","text":"// misk-testing / misk.web / FakeHttpCall / putRequestBody putRequestBody \u00b6 [jvm]\\ open override fun putRequestBody (requestBody: BufferedSource)","title":"putRequestBody - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/put-request-body/#putrequestbody","text":"[jvm]\\ open override fun putRequestBody (requestBody: BufferedSource)","title":"putRequestBody"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/put-response-body/","text":"// misk-testing / misk.web / FakeHttpCall / putResponseBody putResponseBody \u00b6 [jvm]\\ open override fun putResponseBody (responseBody: BufferedSink)","title":"putResponseBody - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/put-response-body/#putresponsebody","text":"[jvm]\\ open override fun putResponseBody (responseBody: BufferedSink)","title":"putResponseBody"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/put-web-socket/","text":"// misk-testing / misk.web / FakeHttpCall / putWebSocket putWebSocket \u00b6 [jvm]\\ open override fun putWebSocket (webSocket: WebSocket)","title":"putWebSocket - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/put-web-socket/#putwebsocket","text":"[jvm]\\ open override fun putWebSocket (webSocket: WebSocket)","title":"putWebSocket"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/request-body/","text":"// misk-testing / misk.web / FakeHttpCall / requestBody requestBody \u00b6 [jvm]\\ var requestBody : BufferedSource?","title":"requestBody - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/request-body/#requestbody","text":"[jvm]\\ var requestBody : BufferedSource?","title":"requestBody"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/request-headers/","text":"// misk-testing / misk.web / FakeHttpCall / requestHeaders requestHeaders \u00b6 [jvm]\\ open override var requestHeaders : Headers","title":"requestHeaders - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/request-headers/#requestheaders","text":"[jvm]\\ open override var requestHeaders : Headers","title":"requestHeaders"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/require-trailers/","text":"// misk-testing / misk.web / FakeHttpCall / requireTrailers requireTrailers \u00b6 [jvm]\\ open override fun requireTrailers ()","title":"requireTrailers - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/require-trailers/#requiretrailers","text":"[jvm]\\ open override fun requireTrailers ()","title":"requireTrailers"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/response-body/","text":"// misk-testing / misk.web / FakeHttpCall / responseBody responseBody \u00b6 [jvm]\\ var responseBody : BufferedSink?","title":"responseBody - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/response-body/#responsebody","text":"[jvm]\\ var responseBody : BufferedSink?","title":"responseBody"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/response-headers/","text":"// misk-testing / misk.web / FakeHttpCall / responseHeaders responseHeaders \u00b6 [jvm]\\ open override val responseHeaders : Headers","title":"responseHeaders - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/response-headers/#responseheaders","text":"[jvm]\\ open override val responseHeaders : Headers","title":"responseHeaders"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/send-trailers/","text":"// misk-testing / misk.web / FakeHttpCall / sendTrailers sendTrailers \u00b6 [jvm]\\ var sendTrailers : Boolean = false","title":"sendTrailers - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/send-trailers/#sendtrailers","text":"[jvm]\\ var sendTrailers : Boolean = false","title":"sendTrailers"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/set-response-header/","text":"// misk-testing / misk.web / FakeHttpCall / setResponseHeader setResponseHeader \u00b6 [jvm]\\ open override fun setResponseHeader (name: String , value: String )","title":"setResponseHeader - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/set-response-header/#setresponseheader","text":"[jvm]\\ open override fun setResponseHeader (name: String , value: String )","title":"setResponseHeader"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/set-response-trailer/","text":"// misk-testing / misk.web / FakeHttpCall / setResponseTrailer setResponseTrailer \u00b6 [jvm]\\ open override fun setResponseTrailer (name: String , value: String )","title":"setResponseTrailer - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/set-response-trailer/#setresponsetrailer","text":"[jvm]\\ open override fun setResponseTrailer (name: String , value: String )","title":"setResponseTrailer"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/set-status-codes/","text":"// misk-testing / misk.web / FakeHttpCall / setStatusCodes setStatusCodes \u00b6 [jvm]\\ open override fun setStatusCodes (statusCode: Int , networkStatusCode: Int )","title":"setStatusCodes - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/set-status-codes/#setstatuscodes","text":"[jvm]\\ open override fun setStatusCodes (statusCode: Int , networkStatusCode: Int )","title":"setStatusCodes"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/status-code/","text":"// misk-testing / misk.web / FakeHttpCall / statusCode statusCode \u00b6 [jvm]\\ open override var statusCode : Int = 200","title":"statusCode - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/status-code/#statuscode","text":"[jvm]\\ open override var statusCode : Int = 200","title":"statusCode"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/take-request-body/","text":"// misk-testing / misk.web / FakeHttpCall / takeRequestBody takeRequestBody \u00b6 [jvm]\\ open override fun takeRequestBody (): BufferedSource?","title":"takeRequestBody - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/take-request-body/#takerequestbody","text":"[jvm]\\ open override fun takeRequestBody (): BufferedSource?","title":"takeRequestBody"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/take-response-body/","text":"// misk-testing / misk.web / FakeHttpCall / takeResponseBody takeResponseBody \u00b6 [jvm]\\ open override fun takeResponseBody (): BufferedSink?","title":"takeResponseBody - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/take-response-body/#takeresponsebody","text":"[jvm]\\ open override fun takeResponseBody (): BufferedSink?","title":"takeResponseBody"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/take-web-socket/","text":"// misk-testing / misk.web / FakeHttpCall / takeWebSocket takeWebSocket \u00b6 [jvm]\\ open override fun takeWebSocket (): WebSocket?","title":"takeWebSocket - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/take-web-socket/#takewebsocket","text":"[jvm]\\ open override fun takeWebSocket (): WebSocket?","title":"takeWebSocket"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/trailers-builder/","text":"// misk-testing / misk.web / FakeHttpCall / trailersBuilder trailersBuilder \u00b6 [jvm]\\ val trailersBuilder : Headers.Builder","title":"trailersBuilder - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/trailers-builder/#trailersbuilder","text":"[jvm]\\ val trailersBuilder : Headers.Builder","title":"trailersBuilder"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/url/","text":"// misk-testing / misk.web / FakeHttpCall / url url \u00b6 [jvm]\\ open override val url : HttpUrl","title":"url - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/url/#url","text":"[jvm]\\ open override val url : HttpUrl","title":"url"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/web-socket-listener/","text":"// misk-testing / misk.web / FakeHttpCall / webSocketListener webSocketListener \u00b6 [jvm]\\ var webSocketListener : WebSocketListener? = null","title":"webSocketListener - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/web-socket-listener/#websocketlistener","text":"[jvm]\\ var webSocketListener : WebSocketListener? = null","title":"webSocketListener"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/web-socket/","text":"// misk-testing / misk.web / FakeHttpCall / webSocket webSocket \u00b6 [jvm]\\ var webSocket : WebSocket? = null","title":"webSocket - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-http-call/web-socket/#websocket","text":"[jvm]\\ var webSocket : WebSocket? = null","title":"webSocket"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/","text":"// misk-testing / misk.web / FakeWebSocketListener FakeWebSocketListener \u00b6 [jvm]\\ class FakeWebSocketListener : WebSocketListener Functions \u00b6 Name Summary onClosed [jvm] open fun onClosed (webSocket: WebSocket, code: Int , reason: String ) onClosing [jvm] open fun onClosing (webSocket: WebSocket, code: Int , reason: String ) onFailure [jvm] open fun onFailure (webSocket: WebSocket, t: Throwable , response: Response?) onMessage [jvm] open override fun onMessage (webSocket: WebSocket, text: String ) open fun onMessage (webSocket: WebSocket, bytes: ByteString) onOpen [jvm] open fun onOpen (webSocket: WebSocket, response: Response) takeMessage [jvm] fun takeMessage (): String Properties \u00b6 Name Summary messages [jvm] val messages : LinkedBlockingDeque < String >","title":"FakeWebSocketListener - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/#fakewebsocketlistener","text":"[jvm]\\ class FakeWebSocketListener : WebSocketListener","title":"FakeWebSocketListener"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/#functions","text":"Name Summary onClosed [jvm] open fun onClosed (webSocket: WebSocket, code: Int , reason: String ) onClosing [jvm] open fun onClosing (webSocket: WebSocket, code: Int , reason: String ) onFailure [jvm] open fun onFailure (webSocket: WebSocket, t: Throwable , response: Response?) onMessage [jvm] open override fun onMessage (webSocket: WebSocket, text: String ) open fun onMessage (webSocket: WebSocket, bytes: ByteString) onOpen [jvm] open fun onOpen (webSocket: WebSocket, response: Response) takeMessage [jvm] fun takeMessage (): String","title":"Functions"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/#properties","text":"Name Summary messages [jvm] val messages : LinkedBlockingDeque < String >","title":"Properties"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/-fake-web-socket-listener/","text":"// misk-testing / misk.web / FakeWebSocketListener / FakeWebSocketListener FakeWebSocketListener \u00b6 [jvm]\\ fun FakeWebSocketListener ()","title":"FakeWebSocketListener - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/-fake-web-socket-listener/#fakewebsocketlistener","text":"[jvm]\\ fun FakeWebSocketListener ()","title":"FakeWebSocketListener"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/messages/","text":"// misk-testing / misk.web / FakeWebSocketListener / messages messages \u00b6 [jvm]\\ val messages : LinkedBlockingDeque < String >","title":"messages - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/messages/#messages","text":"[jvm]\\ val messages : LinkedBlockingDeque < String >","title":"messages"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/on-message/","text":"// misk-testing / misk.web / FakeWebSocketListener / onMessage onMessage \u00b6 [jvm]\\ open override fun onMessage (webSocket: WebSocket, text: String )","title":"onMessage - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/on-message/#onmessage","text":"[jvm]\\ open override fun onMessage (webSocket: WebSocket, text: String )","title":"onMessage"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/take-message/","text":"// misk-testing / misk.web / FakeWebSocketListener / takeMessage takeMessage \u00b6 [jvm]\\ fun takeMessage (): String","title":"takeMessage - Misk"},{"location":"0.x/misk-testing/misk.web/-fake-web-socket-listener/take-message/#takemessage","text":"[jvm]\\ fun takeMessage (): String","title":"takeMessage"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/","text":"// misk-testing / misk.web / MiskCallerExtension MiskCallerExtension \u00b6 [jvm]\\ class MiskCallerExtension : BeforeTestExecutionCallback, AfterTestExecutionCallback Functions \u00b6 Name Summary afterTestExecution [jvm] open override fun afterTestExecution (context: ExtensionContext) beforeTestExecution [jvm] open override fun beforeTestExecution (context: ExtensionContext)","title":"MiskCallerExtension - Misk"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/#miskcallerextension","text":"[jvm]\\ class MiskCallerExtension : BeforeTestExecutionCallback, AfterTestExecutionCallback","title":"MiskCallerExtension"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/#functions","text":"Name Summary afterTestExecution [jvm] open override fun afterTestExecution (context: ExtensionContext) beforeTestExecution [jvm] open override fun beforeTestExecution (context: ExtensionContext)","title":"Functions"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/-misk-caller-extension/","text":"// misk-testing / misk.web / MiskCallerExtension / MiskCallerExtension MiskCallerExtension \u00b6 [jvm]\\ fun MiskCallerExtension ()","title":"MiskCallerExtension - Misk"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/-misk-caller-extension/#miskcallerextension","text":"[jvm]\\ fun MiskCallerExtension ()","title":"MiskCallerExtension"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/after-test-execution/","text":"// misk-testing / misk.web / MiskCallerExtension / afterTestExecution afterTestExecution \u00b6 [jvm]\\ open override fun afterTestExecution (context: ExtensionContext)","title":"afterTestExecution - Misk"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/after-test-execution/#aftertestexecution","text":"[jvm]\\ open override fun afterTestExecution (context: ExtensionContext)","title":"afterTestExecution"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/before-test-execution/","text":"// misk-testing / misk.web / MiskCallerExtension / beforeTestExecution beforeTestExecution \u00b6 [jvm]\\ open override fun beforeTestExecution (context: ExtensionContext)","title":"beforeTestExecution - Misk"},{"location":"0.x/misk-testing/misk.web/-misk-caller-extension/before-test-execution/#beforetestexecution","text":"[jvm]\\ open override fun beforeTestExecution (context: ExtensionContext)","title":"beforeTestExecution"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/","text":"// misk-testing / misk.web / WebServerTestingModule WebServerTestingModule \u00b6 [jvm]\\ class WebServerTestingModule (webConfig: WebConfig) : KAbstractModule A module that starts an embedded Jetty web server configured for testing. The server supports both plaintext and TLS. Constructors \u00b6 WebServerTestingModule [jvm] fun WebServerTestingModule (webConfig: WebConfig = TESTING_WEB_CONFIG) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"WebServerTestingModule - Misk"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/#webservertestingmodule","text":"[jvm]\\ class WebServerTestingModule (webConfig: WebConfig) : KAbstractModule A module that starts an embedded Jetty web server configured for testing. The server supports both plaintext and TLS.","title":"WebServerTestingModule"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/#constructors","text":"WebServerTestingModule [jvm] fun WebServerTestingModule (webConfig: WebConfig = TESTING_WEB_CONFIG)","title":"Constructors"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/-web-server-testing-module/","text":"// misk-testing / misk.web / WebServerTestingModule / WebServerTestingModule WebServerTestingModule \u00b6 [jvm]\\ fun WebServerTestingModule (webConfig: WebConfig = TESTING_WEB_CONFIG)","title":"WebServerTestingModule - Misk"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/-web-server-testing-module/#webservertestingmodule","text":"[jvm]\\ fun WebServerTestingModule (webConfig: WebConfig = TESTING_WEB_CONFIG)","title":"WebServerTestingModule"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/-companion/","text":"// misk-testing / misk.web / WebServerTestingModule / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary TESTING_WEB_CONFIG [jvm] val TESTING_WEB_CONFIG : WebConfig","title":"Companion - Misk"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/-companion/#properties","text":"Name Summary TESTING_WEB_CONFIG [jvm] val TESTING_WEB_CONFIG : WebConfig","title":"Properties"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/-companion/-t-e-s-t-i-n-g_-w-e-b_-c-o-n-f-i-g/","text":"// misk-testing / misk.web / WebServerTestingModule / Companion / TESTING_WEB_CONFIG TESTING_WEB_CONFIG \u00b6 [jvm]\\ val TESTING_WEB_CONFIG : WebConfig","title":"TESTING_WEB_CONFIG - Misk"},{"location":"0.x/misk-testing/misk.web/-web-server-testing-module/-companion/-t-e-s-t-i-n-g_-w-e-b_-c-o-n-f-i-g/#testing_web_config","text":"[jvm]\\ val TESTING_WEB_CONFIG : WebConfig","title":"TESTING_WEB_CONFIG"},{"location":"0.x/misk-testing/misk.web/-web-test-client/","text":"// misk-testing / misk.web / WebTestClient WebTestClient \u00b6 [jvm]\\ class WebTestClient @Injectconstructor(moshi: Moshi, jettyService: JettyService) Use WebTestClient to test calls to the application at the integration level. To use: Add @MiskTest(startService = true) to the test class Add a module under test: @MiskTestModule val module = TestModule() Add WebTestingModule to the module under test: install(WebTestingModule()) Inject WebTestClient in the test class Constructors \u00b6 WebTestClient [jvm] @Inject fun WebTestClient (moshi: Moshi, jettyService: JettyService) Types \u00b6 Name Summary WebTestResponse [jvm] data class WebTestResponse (response: Response, moshi: Moshi) Functions \u00b6 Name Summary call [jvm] fun call (path: String , action: Request.Builder.() -> Unit ): WebTestClient.WebTestResponse Performs a call to the started service. Allows the caller to customize the action before it\u2019s sent through. get [jvm] fun get (path: String ): WebTestClient.WebTestResponse post [jvm] inline fun < T : Any > post (path: String , body: T ): WebTestClient.WebTestResponse fun < T : Any > post (path: String , body: T , tClass: KClass < T >): WebTestClient.WebTestResponse Performs a POST request with a JSON request body created from the input. [jvm] fun post (path: String , body: String , mediaType: MediaType = MediaTypes.APPLICATION_JSON_MEDIA_TYPE): WebTestClient.WebTestResponse Performs a POST request.","title":"WebTestClient - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/#webtestclient","text":"[jvm]\\ class WebTestClient @Injectconstructor(moshi: Moshi, jettyService: JettyService) Use WebTestClient to test calls to the application at the integration level. To use: Add @MiskTest(startService = true) to the test class Add a module under test: @MiskTestModule val module = TestModule() Add WebTestingModule to the module under test: install(WebTestingModule()) Inject WebTestClient in the test class","title":"WebTestClient"},{"location":"0.x/misk-testing/misk.web/-web-test-client/#constructors","text":"WebTestClient [jvm] @Inject fun WebTestClient (moshi: Moshi, jettyService: JettyService)","title":"Constructors"},{"location":"0.x/misk-testing/misk.web/-web-test-client/#types","text":"Name Summary WebTestResponse [jvm] data class WebTestResponse (response: Response, moshi: Moshi)","title":"Types"},{"location":"0.x/misk-testing/misk.web/-web-test-client/#functions","text":"Name Summary call [jvm] fun call (path: String , action: Request.Builder.() -> Unit ): WebTestClient.WebTestResponse Performs a call to the started service. Allows the caller to customize the action before it\u2019s sent through. get [jvm] fun get (path: String ): WebTestClient.WebTestResponse post [jvm] inline fun < T : Any > post (path: String , body: T ): WebTestClient.WebTestResponse fun < T : Any > post (path: String , body: T , tClass: KClass < T >): WebTestClient.WebTestResponse Performs a POST request with a JSON request body created from the input. [jvm] fun post (path: String , body: String , mediaType: MediaType = MediaTypes.APPLICATION_JSON_MEDIA_TYPE): WebTestClient.WebTestResponse Performs a POST request.","title":"Functions"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-client/","text":"// misk-testing / misk.web / WebTestClient / WebTestClient WebTestClient \u00b6 [jvm]\\ @Inject fun WebTestClient (moshi: Moshi, jettyService: JettyService)","title":"WebTestClient - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-client/#webtestclient","text":"[jvm]\\ @Inject fun WebTestClient (moshi: Moshi, jettyService: JettyService)","title":"WebTestClient"},{"location":"0.x/misk-testing/misk.web/-web-test-client/call/","text":"// misk-testing / misk.web / WebTestClient / call call \u00b6 [jvm]\\ fun call (path: String , action: Request.Builder.() -> Unit ): WebTestClient.WebTestResponse Performs a call to the started service. Allows the caller to customize the action before it\u2019s sent through.","title":"call - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/call/#call","text":"[jvm]\\ fun call (path: String , action: Request.Builder.() -> Unit ): WebTestClient.WebTestResponse Performs a call to the started service. Allows the caller to customize the action before it\u2019s sent through.","title":"call"},{"location":"0.x/misk-testing/misk.web/-web-test-client/get/","text":"// misk-testing / misk.web / WebTestClient / get get \u00b6 [jvm]\\ fun get (path: String ): WebTestClient.WebTestResponse","title":"get - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/get/#get","text":"[jvm]\\ fun get (path: String ): WebTestClient.WebTestResponse","title":"get"},{"location":"0.x/misk-testing/misk.web/-web-test-client/post/","text":"// misk-testing / misk.web / WebTestClient / post post \u00b6 [jvm]\\ fun < T : Any > post (path: String , body: T , tClass: KClass < T >): WebTestClient.WebTestResponse inline fun < T : Any > post (path: String , body: T ): WebTestClient.WebTestResponse Performs a POST request with a JSON request body created from the input. [jvm]\\ fun post (path: String , body: String , mediaType: MediaType = MediaTypes.APPLICATION_JSON_MEDIA_TYPE): WebTestClient.WebTestResponse Performs a POST request.","title":"post - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/post/#post","text":"[jvm]\\ fun < T : Any > post (path: String , body: T , tClass: KClass < T >): WebTestClient.WebTestResponse inline fun < T : Any > post (path: String , body: T ): WebTestClient.WebTestResponse Performs a POST request with a JSON request body created from the input. [jvm]\\ fun post (path: String , body: String , mediaType: MediaType = MediaTypes.APPLICATION_JSON_MEDIA_TYPE): WebTestClient.WebTestResponse Performs a POST request.","title":"post"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/","text":"// misk-testing / misk.web / WebTestClient / WebTestResponse WebTestResponse \u00b6 [jvm]\\ data class WebTestResponse (response: Response, moshi: Moshi) Functions \u00b6 Name Summary parseJson [jvm] inline fun < T : Any > parseJson (): T fun < T : Any > parseJson (tClass: KClass < T >): T Properties \u00b6 Name Summary response [jvm] val response : Response","title":"WebTestResponse - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/#webtestresponse","text":"[jvm]\\ data class WebTestResponse (response: Response, moshi: Moshi)","title":"WebTestResponse"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/#functions","text":"Name Summary parseJson [jvm] inline fun < T : Any > parseJson (): T fun < T : Any > parseJson (tClass: KClass < T >): T","title":"Functions"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/#properties","text":"Name Summary response [jvm] val response : Response","title":"Properties"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/-web-test-response/","text":"// misk-testing / misk.web / WebTestClient / WebTestResponse / WebTestResponse WebTestResponse \u00b6 [jvm]\\ fun WebTestResponse (response: Response, moshi: Moshi)","title":"WebTestResponse - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/-web-test-response/#webtestresponse","text":"[jvm]\\ fun WebTestResponse (response: Response, moshi: Moshi)","title":"WebTestResponse"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/parse-json/","text":"// misk-testing / misk.web / WebTestClient / WebTestResponse / parseJson parseJson \u00b6 [jvm]\\ fun < T : Any > parseJson (tClass: KClass < T >): T inline fun < T : Any > parseJson (): T","title":"parseJson - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/parse-json/#parsejson","text":"[jvm]\\ fun < T : Any > parseJson (tClass: KClass < T >): T inline fun < T : Any > parseJson (): T","title":"parseJson"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/response/","text":"// misk-testing / misk.web / WebTestClient / WebTestResponse / response response \u00b6 [jvm]\\ val response : Response","title":"response - Misk"},{"location":"0.x/misk-testing/misk.web/-web-test-client/-web-test-response/response/#response","text":"[jvm]\\ val response : Response","title":"response"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/","text":"// misk-testing / misk.web / WithMiskCaller WithMiskCaller \u00b6 [jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [ MiskCallerExtension::class ]) annotation class WithMiskCaller (user: String , service: String ) Use this annotation to specify an ActionScoped for this class. Annotate after misk.testing.MiskTest . Constructors \u00b6 WithMiskCaller [jvm] fun WithMiskCaller (user: String = \u201c\u201d, service: String = \u201c\u201d) Properties \u00b6 Name Summary service [jvm] val service : String user [jvm] val user : String","title":"WithMiskCaller - Misk"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/#withmiskcaller","text":"[jvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS ]) @ExtendWith(value = [ MiskCallerExtension::class ]) annotation class WithMiskCaller (user: String , service: String ) Use this annotation to specify an ActionScoped for this class. Annotate after misk.testing.MiskTest .","title":"WithMiskCaller"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/#constructors","text":"WithMiskCaller [jvm] fun WithMiskCaller (user: String = \u201c\u201d, service: String = \u201c\u201d)","title":"Constructors"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/#properties","text":"Name Summary service [jvm] val service : String user [jvm] val user : String","title":"Properties"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/-with-misk-caller/","text":"// misk-testing / misk.web / WithMiskCaller / WithMiskCaller WithMiskCaller \u00b6 [jvm]\\ fun WithMiskCaller (user: String = \u201c\u201d, service: String = \u201c\u201d)","title":"WithMiskCaller - Misk"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/-with-misk-caller/#withmiskcaller","text":"[jvm]\\ fun WithMiskCaller (user: String = \u201c\u201d, service: String = \u201c\u201d)","title":"WithMiskCaller"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/service/","text":"// misk-testing / misk.web / WithMiskCaller / service service \u00b6 [jvm]\\ val service : String","title":"service - Misk"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/service/#service","text":"[jvm]\\ val service : String","title":"service"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/user/","text":"// misk-testing / misk.web / WithMiskCaller / user user \u00b6 [jvm]\\ val user : String","title":"user - Misk"},{"location":"0.x/misk-testing/misk.web/-with-misk-caller/user/#user","text":"[jvm]\\ val user : String","title":"user"},{"location":"0.x/misk-testing/org.assertj.core.api/","text":"// misk-testing / org.assertj.core.api Package org.assertj.core.api \u00b6 Functions \u00b6 Name Summary assertOrdering [jvm] fun < A : Comparable < A >> assertOrdering (vararg values: A ) containsExactly [jvm] inline fun < KEY , VALUE > MapAssert< KEY , VALUE >. containsExactly (vararg p: Pair < KEY , VALUE >): MapAssert< KEY , VALUE > isEqualToAsJson [jvm] fun < ACTUAL : CharSequence > AbstractCharSequenceAssert< , ACTUAL >. isEqualToAsJson (expected: CharSequence ): AbstractCharSequenceAssert< , ACTUAL >","title":"Package org.assertj.core.api - Misk"},{"location":"0.x/misk-testing/org.assertj.core.api/#package-orgassertjcoreapi","text":"","title":"Package org.assertj.core.api"},{"location":"0.x/misk-testing/org.assertj.core.api/#functions","text":"Name Summary assertOrdering [jvm] fun < A : Comparable < A >> assertOrdering (vararg values: A ) containsExactly [jvm] inline fun < KEY , VALUE > MapAssert< KEY , VALUE >. containsExactly (vararg p: Pair < KEY , VALUE >): MapAssert< KEY , VALUE > isEqualToAsJson [jvm] fun < ACTUAL : CharSequence > AbstractCharSequenceAssert< , ACTUAL >. isEqualToAsJson (expected: CharSequence ): AbstractCharSequenceAssert< , ACTUAL >","title":"Functions"},{"location":"0.x/misk-testing/org.assertj.core.api/assert-ordering/","text":"// misk-testing / org.assertj.core.api / assertOrdering assertOrdering \u00b6 [jvm]\\ fun < A : Comparable < A >> assertOrdering (vararg values: A )","title":"assertOrdering - Misk"},{"location":"0.x/misk-testing/org.assertj.core.api/assert-ordering/#assertordering","text":"[jvm]\\ fun < A : Comparable < A >> assertOrdering (vararg values: A )","title":"assertOrdering"},{"location":"0.x/misk-testing/org.assertj.core.api/contains-exactly/","text":"// misk-testing / org.assertj.core.api / containsExactly containsExactly \u00b6 [jvm]\\ inline fun < KEY , VALUE > MapAssert< KEY , VALUE >. containsExactly (vararg p: Pair < KEY , VALUE >): MapAssert< KEY , VALUE >","title":"containsExactly - Misk"},{"location":"0.x/misk-testing/org.assertj.core.api/contains-exactly/#containsexactly","text":"[jvm]\\ inline fun < KEY , VALUE > MapAssert< KEY , VALUE >. containsExactly (vararg p: Pair < KEY , VALUE >): MapAssert< KEY , VALUE >","title":"containsExactly"},{"location":"0.x/misk-testing/org.assertj.core.api/is-equal-to-as-json/","text":"// misk-testing / org.assertj.core.api / isEqualToAsJson isEqualToAsJson \u00b6 [jvm]\\ fun < ACTUAL : CharSequence > AbstractCharSequenceAssert< , ACTUAL >. isEqualToAsJson (expected: CharSequence ): AbstractCharSequenceAssert< , ACTUAL >","title":"isEqualToAsJson - Misk"},{"location":"0.x/misk-testing/org.assertj.core.api/is-equal-to-as-json/#isequaltoasjson","text":"[jvm]\\ fun < ACTUAL : CharSequence > AbstractCharSequenceAssert< , ACTUAL >. isEqualToAsJson (expected: CharSequence ): AbstractCharSequenceAssert< , ACTUAL >","title":"isEqualToAsJson"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/","text":"// misk-transactional-jobqueue / misk.jobqueue Package misk.jobqueue \u00b6 Types \u00b6 Name Summary TransactionalJobQueue [jvm] interface TransactionalJobQueue A TransactionalJobQueue supports enqueueing messages atomically in conjunction with making local database updates. With the transactional job queue, messages are written to a spooling table that is on the same database shard as the application\u2019s database entities, then forwards the messages asynchronously to the actual queueing system. Two variants of the enqueue operation exist - one which writes to the application\u2019s main shard, and another which writes to the shard on which a given entity group exists. Applications will typically use tbe second variant, writing jobs to the local shard in the context of a transaction that modifies the contents of an entity group.","title":"Package misk.jobqueue - Misk"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/#package-miskjobqueue","text":"","title":"Package misk.jobqueue"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/#types","text":"Name Summary TransactionalJobQueue [jvm] interface TransactionalJobQueue A TransactionalJobQueue supports enqueueing messages atomically in conjunction with making local database updates. With the transactional job queue, messages are written to a spooling table that is on the same database shard as the application\u2019s database entities, then forwards the messages asynchronously to the actual queueing system. Two variants of the enqueue operation exist - one which writes to the application\u2019s main shard, and another which writes to the shard on which a given entity group exists. Applications will typically use tbe second variant, writing jobs to the local shard in the context of a transaction that modifies the contents of an entity group.","title":"Types"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/-transactional-job-queue/","text":"// misk-transactional-jobqueue / misk.jobqueue / TransactionalJobQueue TransactionalJobQueue \u00b6 [jvm]\\ interface TransactionalJobQueue A TransactionalJobQueue supports enqueueing messages atomically in conjunction with making local database updates. With the transactional job queue, messages are written to a spooling table that is on the same database shard as the application\u2019s database entities, then forwards the messages asynchronously to the actual queueing system. Two variants of the enqueue operation exist - one which writes to the application\u2019s main shard, and another which writes to the shard on which a given entity group exists. Applications will typically use tbe second variant, writing jobs to the local shard in the context of a transaction that modifies the contents of an entity group. Functions \u00b6 Name Summary enqueue [jvm] abstract fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the primary (unaffiliated) database shard . Will throw an exception if the session is associated with an entity group. [jvm] abstract fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the database shard associated with the given entity group. Will throw an exception if the session is associated with a different entity group.","title":"TransactionalJobQueue - Misk"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/-transactional-job-queue/#transactionaljobqueue","text":"[jvm]\\ interface TransactionalJobQueue A TransactionalJobQueue supports enqueueing messages atomically in conjunction with making local database updates. With the transactional job queue, messages are written to a spooling table that is on the same database shard as the application\u2019s database entities, then forwards the messages asynchronously to the actual queueing system. Two variants of the enqueue operation exist - one which writes to the application\u2019s main shard, and another which writes to the shard on which a given entity group exists. Applications will typically use tbe second variant, writing jobs to the local shard in the context of a transaction that modifies the contents of an entity group.","title":"TransactionalJobQueue"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/-transactional-job-queue/#functions","text":"Name Summary enqueue [jvm] abstract fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the primary (unaffiliated) database shard . Will throw an exception if the session is associated with an entity group. [jvm] abstract fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the database shard associated with the given entity group. Will throw an exception if the session is associated with a different entity group.","title":"Functions"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/-transactional-job-queue/enqueue/","text":"// misk-transactional-jobqueue / misk.jobqueue / TransactionalJobQueue / enqueue enqueue \u00b6 [jvm]\\ abstract fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the database shard associated with the given entity group. Will throw an exception if the session is associated with a different entity group. Parameters \u00b6 jvm session The database session to use in writing the job gid The id of the entity group with which the job should be associated queueName the name of the queue on which to place the job body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandlers). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. attributes Arbitrary contextual attributes associated with the job [jvm]\\ abstract fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the primary (unaffiliated) database shard . Will throw an exception if the session is associated with an entity group. Parameters \u00b6 jvm session The database session to use in writing the job queueName the name of the queue on which to place the job body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandlers). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. attributes Arbitrary contextual attributes associated with the job","title":"enqueue - Misk"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/-transactional-job-queue/enqueue/#enqueue","text":"[jvm]\\ abstract fun enqueue (session: Session, gid: Gid<*, *>, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the database shard associated with the given entity group. Will throw an exception if the session is associated with a different entity group.","title":"enqueue"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/-transactional-job-queue/enqueue/#parameters","text":"jvm session The database session to use in writing the job gid The id of the entity group with which the job should be associated queueName the name of the queue on which to place the job body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandlers). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. attributes Arbitrary contextual attributes associated with the job [jvm]\\ abstract fun enqueue (session: Session, queueName: QueueName, body: String , idempotenceKey: String = UUID.randomUUID().toString(), deliveryDelay: Duration ? = null, attributes: Map < String , String > = mapOf()) Enqueues a job to the primary (unaffiliated) database shard . Will throw an exception if the session is associated with an entity group.","title":"Parameters"},{"location":"0.x/misk-transactional-jobqueue/misk.jobqueue/-transactional-job-queue/enqueue/#parameters_1","text":"jvm session The database session to use in writing the job queueName the name of the queue on which to place the job body The body of the job; can be any arbitrary string - it is up to the enqueuer and consumer to agree on the format of the body idempotenceKey Client-assigned unique key, useful for application code to detect duplicate work. Implementations are expected to not perform any filtering based on this value, as it carries meaning only for application code (i.e. any logic around this property should take place in JobHandlers). Defaults to a randomly generated UUID when not explicitly set. deliveryDelay If specified, the job will only become visible to the consumer after the provided duration. Used for jobs that should delay processing for a period of time. attributes Arbitrary contextual attributes associated with the job","title":"Parameters"},{"location":"0.x/misk-warmup/misk.warmup/","text":"// misk-warmup / misk.warmup Package misk.warmup \u00b6 Types \u00b6 Name Summary WarmupModule [jvm] class WarmupModule (name: String , key: Key<out WarmupTask >) : KAbstractModule WarmupTask [jvm] abstract class WarmupTask Register a warmup task in your service with the following: Functions \u00b6 Name Summary WarmupModule [jvm] inline fun < T : WarmupTask > WarmupModule (qualifier: KClass <out Annotation >? = null): WarmupModule","title":"Package misk.warmup - Misk"},{"location":"0.x/misk-warmup/misk.warmup/#package-miskwarmup","text":"","title":"Package misk.warmup"},{"location":"0.x/misk-warmup/misk.warmup/#types","text":"Name Summary WarmupModule [jvm] class WarmupModule (name: String , key: Key<out WarmupTask >) : KAbstractModule WarmupTask [jvm] abstract class WarmupTask Register a warmup task in your service with the following:","title":"Types"},{"location":"0.x/misk-warmup/misk.warmup/#functions","text":"Name Summary WarmupModule [jvm] inline fun < T : WarmupTask > WarmupModule (qualifier: KClass <out Annotation >? = null): WarmupModule","title":"Functions"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/","text":"// misk-warmup / misk.warmup / WarmupModule WarmupModule \u00b6 [jvm]\\ inline fun < T : WarmupTask > WarmupModule (qualifier: KClass <out Annotation >? = null): WarmupModule","title":"WarmupModule - Misk"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/#warmupmodule","text":"[jvm]\\ inline fun < T : WarmupTask > WarmupModule (qualifier: KClass <out Annotation >? = null): WarmupModule","title":"WarmupModule"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/","text":"// misk-warmup / misk.warmup / WarmupModule WarmupModule \u00b6 [jvm]\\ class WarmupModule (name: String , key: Key<out WarmupTask >) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"WarmupModule - Misk"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/#warmupmodule","text":"[jvm]\\ class WarmupModule (name: String , key: Key<out WarmupTask >) : KAbstractModule","title":"WarmupModule"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/-warmup-module/","text":"// misk-warmup / misk.warmup / WarmupModule / WarmupModule WarmupModule \u00b6 [jvm]\\ fun WarmupModule (name: String , key: Key<out WarmupTask >)","title":"WarmupModule - Misk"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-module/-warmup-module/#warmupmodule","text":"[jvm]\\ fun WarmupModule (name: String , key: Key<out WarmupTask >)","title":"WarmupModule"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/","text":"// misk-warmup / misk.warmup / WarmupTask WarmupTask \u00b6 [jvm]\\ abstract class WarmupTask Register a warmup task in your service with the following: install(WarmupModule<MyWarmupTask>()) Misk will run the task after all services have started successfully, but before health checks report the service as healthy. Warm up tasks should complete quickly (under 10 seconds is best) because the service won\u2019t serve live traffic until all warm up tasks complete. Constructors \u00b6 WarmupTask [jvm] fun WarmupTask () Functions \u00b6 Name Summary execute [jvm] abstract fun execute () Perform production-like work to cause caches to be seeded, pools to be filled, and hot spots to be compiled. This should return once warmup is complete.","title":"WarmupTask - Misk"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/#warmuptask","text":"[jvm]\\ abstract class WarmupTask Register a warmup task in your service with the following: install(WarmupModule<MyWarmupTask>()) Misk will run the task after all services have started successfully, but before health checks report the service as healthy. Warm up tasks should complete quickly (under 10 seconds is best) because the service won\u2019t serve live traffic until all warm up tasks complete.","title":"WarmupTask"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/#constructors","text":"WarmupTask [jvm] fun WarmupTask ()","title":"Constructors"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/#functions","text":"Name Summary execute [jvm] abstract fun execute () Perform production-like work to cause caches to be seeded, pools to be filled, and hot spots to be compiled. This should return once warmup is complete.","title":"Functions"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/-warmup-task/","text":"// misk-warmup / misk.warmup / WarmupTask / WarmupTask WarmupTask \u00b6 [jvm]\\ fun WarmupTask ()","title":"WarmupTask - Misk"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/-warmup-task/#warmuptask","text":"[jvm]\\ fun WarmupTask ()","title":"WarmupTask"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/execute/","text":"// misk-warmup / misk.warmup / WarmupTask / execute execute \u00b6 [jvm]\\ abstract fun execute () Perform production-like work to cause caches to be seeded, pools to be filled, and hot spots to be compiled. This should return once warmup is complete.","title":"execute - Misk"},{"location":"0.x/misk-warmup/misk.warmup/-warmup-task/execute/#execute","text":"[jvm]\\ abstract fun execute () Perform production-like work to cause caches to be seeded, pools to be filled, and hot spots to be compiled. This should return once warmup is complete.","title":"execute"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/","text":"// misk-zookeeper / misk.clustering.zookeeper Package misk.clustering.zookeeper \u00b6 Types \u00b6 Name Summary ForZkLease [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class ForZkLease ZkLeaseModule [jvm] class ZkLeaseModule : KAbstractModule Provides a zk impl for a LeaseManager. Applications must still provide a zk connection. See ZookeeperDefaultModule for an example. ZookeeperConfig [jvm] data class ZookeeperConfig (zk_connect: String , session_timeout_msecs: Int , cert_store: CertStoreConfig?, trust_store: TrustStoreConfig?) : Config Properties \u00b6 Name Summary asZkNamespace [jvm] val String . asZkNamespace : String asZkPath [jvm] val String . asZkPath : String isConnected [jvm] val CuratorFramework. isConnected : Boolean isRunning [jvm] val CuratorFramework. isRunning : Boolean","title":"Package misk.clustering.zookeeper - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/#package-miskclusteringzookeeper","text":"","title":"Package misk.clustering.zookeeper"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/#types","text":"Name Summary ForZkLease [jvm] @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class ForZkLease ZkLeaseModule [jvm] class ZkLeaseModule : KAbstractModule Provides a zk impl for a LeaseManager. Applications must still provide a zk connection. See ZookeeperDefaultModule for an example. ZookeeperConfig [jvm] data class ZookeeperConfig (zk_connect: String , session_timeout_msecs: Int , cert_store: CertStoreConfig?, trust_store: TrustStoreConfig?) : Config","title":"Types"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/#properties","text":"Name Summary asZkNamespace [jvm] val String . asZkNamespace : String asZkPath [jvm] val String . asZkPath : String isConnected [jvm] val CuratorFramework. isConnected : Boolean isRunning [jvm] val CuratorFramework. isRunning : Boolean","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/as-zk-namespace/","text":"// misk-zookeeper / misk.clustering.zookeeper / asZkNamespace asZkNamespace \u00b6 [jvm]\\ val String . asZkNamespace : String Return \u00b6 a version of the path suitable for as a namespace (see CuratorFramework.usingNamespace","title":"asZkNamespace - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/as-zk-namespace/#aszknamespace","text":"[jvm]\\ val String . asZkNamespace : String","title":"asZkNamespace"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/as-zk-namespace/#return","text":"a version of the path suitable for as a namespace (see CuratorFramework.usingNamespace","title":"Return"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/as-zk-path/","text":"// misk-zookeeper / misk.clustering.zookeeper / asZkPath asZkPath \u00b6 [jvm]\\ val String . asZkPath : String Return \u00b6 a version of the string suitable as a path","title":"asZkPath - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/as-zk-path/#aszkpath","text":"[jvm]\\ val String . asZkPath : String","title":"asZkPath"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/as-zk-path/#return","text":"a version of the string suitable as a path","title":"Return"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/is-connected/","text":"// misk-zookeeper / misk.clustering.zookeeper / isConnected isConnected \u00b6 [jvm]\\ val CuratorFramework. isConnected : Boolean Return \u00b6 true if the client is connected to zk","title":"isConnected - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/is-connected/#isconnected","text":"[jvm]\\ val CuratorFramework. isConnected : Boolean","title":"isConnected"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/is-connected/#return","text":"true if the client is connected to zk","title":"Return"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/is-running/","text":"// misk-zookeeper / misk.clustering.zookeeper / isRunning isRunning \u00b6 [jvm]\\ val CuratorFramework. isRunning : Boolean Return \u00b6 true if the client is running","title":"isRunning - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/is-running/#isrunning","text":"[jvm]\\ val CuratorFramework. isRunning : Boolean","title":"isRunning"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/is-running/#return","text":"true if the client is running","title":"Return"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-for-zk-lease/","text":"// misk-zookeeper / misk.clustering.zookeeper / ForZkLease ForZkLease \u00b6 [jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class ForZkLease","title":"ForZkLease - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-for-zk-lease/#forzklease","text":"[jvm]\\ @Qualifier @ Target (allowedTargets = [ AnnotationTarget.FIELD , AnnotationTarget.FUNCTION , AnnotationTarget.VALUE_PARAMETER ]) annotation class ForZkLease","title":"ForZkLease"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-for-zk-lease/-for-zk-lease/","text":"// misk-zookeeper / misk.clustering.zookeeper / ForZkLease / ForZkLease ForZkLease \u00b6 [jvm]\\ fun ForZkLease ()","title":"ForZkLease - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-for-zk-lease/-for-zk-lease/#forzklease","text":"[jvm]\\ fun ForZkLease ()","title":"ForZkLease"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZkLeaseModule ZkLeaseModule \u00b6 [jvm]\\ class ZkLeaseModule : KAbstractModule Provides a zk impl for a LeaseManager. Applications must still provide a zk connection. See ZookeeperDefaultModule for an example. Constructors \u00b6 ZkLeaseModule [jvm] fun ZkLeaseModule () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideTaskQueue [jvm] @Provides @Singleton fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ZkLeaseModule - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/#zkleasemodule","text":"[jvm]\\ class ZkLeaseModule : KAbstractModule Provides a zk impl for a LeaseManager. Applications must still provide a zk connection. See ZookeeperDefaultModule for an example.","title":"ZkLeaseModule"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/#constructors","text":"ZkLeaseModule [jvm] fun ZkLeaseModule ()","title":"Constructors"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) provideTaskQueue [jvm] @Provides @Singleton fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/-zk-lease-module/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZkLeaseModule / ZkLeaseModule ZkLeaseModule \u00b6 [jvm]\\ fun ZkLeaseModule ()","title":"ZkLeaseModule - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/-zk-lease-module/#zkleasemodule","text":"[jvm]\\ fun ZkLeaseModule ()","title":"ZkLeaseModule"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/provide-task-queue/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZkLeaseModule / provideTaskQueue provideTaskQueue \u00b6 [jvm]\\ @Provides @Singleton fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue","title":"provideTaskQueue - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/provide-task-queue/#providetaskqueue","text":"[jvm]\\ @Provides @Singleton fun provideTaskQueue (queueFactory: RepeatedTaskQueueFactory): RepeatedTaskQueue","title":"provideTaskQueue"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/-companion/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZkLeaseModule / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary leaseManagerKey [jvm] val leaseManagerKey : Key<*>","title":"Companion - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/-companion/#properties","text":"Name Summary leaseManagerKey [jvm] val leaseManagerKey : Key<*>","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/-companion/lease-manager-key/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZkLeaseModule / Companion / leaseManagerKey leaseManagerKey \u00b6 [jvm]\\ val leaseManagerKey : Key<*>","title":"leaseManagerKey - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zk-lease-module/-companion/lease-manager-key/#leasemanagerkey","text":"[jvm]\\ val leaseManagerKey : Key<*>","title":"leaseManagerKey"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZookeeperConfig ZookeeperConfig \u00b6 [jvm]\\ data class ZookeeperConfig (zk_connect: String , session_timeout_msecs: Int , cert_store: CertStoreConfig?, trust_store: TrustStoreConfig?) : Config Properties \u00b6 Name Summary cert_store [jvm] val cert_store : CertStoreConfig? = null session_timeout_msecs [jvm] val session_timeout_msecs : Int = 3000 trust_store [jvm] val trust_store : TrustStoreConfig? = null zk_connect [jvm] val zk_connect : String","title":"ZookeeperConfig - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/#zookeeperconfig","text":"[jvm]\\ data class ZookeeperConfig (zk_connect: String , session_timeout_msecs: Int , cert_store: CertStoreConfig?, trust_store: TrustStoreConfig?) : Config","title":"ZookeeperConfig"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/#properties","text":"Name Summary cert_store [jvm] val cert_store : CertStoreConfig? = null session_timeout_msecs [jvm] val session_timeout_msecs : Int = 3000 trust_store [jvm] val trust_store : TrustStoreConfig? = null zk_connect [jvm] val zk_connect : String","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/-zookeeper-config/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZookeeperConfig / ZookeeperConfig ZookeeperConfig \u00b6 [jvm]\\ fun ZookeeperConfig (zk_connect: String , session_timeout_msecs: Int = 3000, cert_store: CertStoreConfig? = null, trust_store: TrustStoreConfig? = null)","title":"ZookeeperConfig - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/-zookeeper-config/#zookeeperconfig","text":"[jvm]\\ fun ZookeeperConfig (zk_connect: String , session_timeout_msecs: Int = 3000, cert_store: CertStoreConfig? = null, trust_store: TrustStoreConfig? = null)","title":"ZookeeperConfig"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/cert_store/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZookeeperConfig / cert_store cert_store \u00b6 [jvm]\\ val cert_store : CertStoreConfig? = null","title":"cert_store - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/cert_store/#cert_store","text":"[jvm]\\ val cert_store : CertStoreConfig? = null","title":"cert_store"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/session_timeout_msecs/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZookeeperConfig / session_timeout_msecs session_timeout_msecs \u00b6 [jvm]\\ val session_timeout_msecs : Int = 3000","title":"session_timeout_msecs - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/session_timeout_msecs/#session_timeout_msecs","text":"[jvm]\\ val session_timeout_msecs : Int = 3000","title":"session_timeout_msecs"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/trust_store/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZookeeperConfig / trust_store trust_store \u00b6 [jvm]\\ val trust_store : TrustStoreConfig? = null","title":"trust_store - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/trust_store/#trust_store","text":"[jvm]\\ val trust_store : TrustStoreConfig? = null","title":"trust_store"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/zk_connect/","text":"// misk-zookeeper / misk.clustering.zookeeper / ZookeeperConfig / zk_connect zk_connect \u00b6 [jvm]\\ val zk_connect : String","title":"zk_connect - Misk"},{"location":"0.x/misk-zookeeper/misk.clustering.zookeeper/-zookeeper-config/zk_connect/#zk_connect","text":"[jvm]\\ val zk_connect : String","title":"zk_connect"},{"location":"0.x/misk-zookeeper/misk.zookeeper/","text":"// misk-zookeeper / misk.zookeeper Package misk.zookeeper \u00b6 Types \u00b6 Name Summary CuratorFrameworkModule [jvm] class CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a CuratorFramework for an application to use. A Service is also installed to manage the lifecycle of the CuratorFramework. FixedEnsembleProviderModule [jvm] class FixedEnsembleProviderModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule StaticHostModule [jvm] class StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a zk HostProvider to a StaticHostProvider. ZkClientFactory [jvm] class ZkClientFactory (appName: String , curator: CuratorFramework) Factory for generating a zookeeper client that\u2019s configured to read and write data within the app\u2019s namespace. ZkService [jvm] class ZkService : AbstractIdleService ZookeeperDefaultModule [jvm] class ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Provides a connection to a qualified Zookeeper server with default settings. Properties \u00b6 Name Summary DEFAULT_PERMS [jvm] const val DEFAULT_PERMS : Int SERVICES_NODE [jvm] const val SERVICES_NODE : String SHARED_DIR_PERMS [jvm] const val SHARED_DIR_PERMS : Int","title":"Package misk.zookeeper - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/#package-miskzookeeper","text":"","title":"Package misk.zookeeper"},{"location":"0.x/misk-zookeeper/misk.zookeeper/#types","text":"Name Summary CuratorFrameworkModule [jvm] class CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a CuratorFramework for an application to use. A Service is also installed to manage the lifecycle of the CuratorFramework. FixedEnsembleProviderModule [jvm] class FixedEnsembleProviderModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule StaticHostModule [jvm] class StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a zk HostProvider to a StaticHostProvider. ZkClientFactory [jvm] class ZkClientFactory (appName: String , curator: CuratorFramework) Factory for generating a zookeeper client that\u2019s configured to read and write data within the app\u2019s namespace. ZkService [jvm] class ZkService : AbstractIdleService ZookeeperDefaultModule [jvm] class ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Provides a connection to a qualified Zookeeper server with default settings.","title":"Types"},{"location":"0.x/misk-zookeeper/misk.zookeeper/#properties","text":"Name Summary DEFAULT_PERMS [jvm] const val DEFAULT_PERMS : Int SERVICES_NODE [jvm] const val SERVICES_NODE : String SHARED_DIR_PERMS [jvm] const val SHARED_DIR_PERMS : Int","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-d-e-f-a-u-l-t_-p-e-r-m-s/","text":"// misk-zookeeper / misk.zookeeper / DEFAULT_PERMS DEFAULT_PERMS \u00b6 [jvm]\\ const val DEFAULT_PERMS : Int","title":"DEFAULT_PERMS - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-d-e-f-a-u-l-t_-p-e-r-m-s/#default_perms","text":"[jvm]\\ const val DEFAULT_PERMS : Int","title":"DEFAULT_PERMS"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-s-e-r-v-i-c-e-s_-n-o-d-e/","text":"// misk-zookeeper / misk.zookeeper / SERVICES_NODE SERVICES_NODE \u00b6 [jvm]\\ const val SERVICES_NODE : String","title":"SERVICES_NODE - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-s-e-r-v-i-c-e-s_-n-o-d-e/#services_node","text":"[jvm]\\ const val SERVICES_NODE : String","title":"SERVICES_NODE"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-s-h-a-r-e-d_-d-i-r_-p-e-r-m-s/","text":"// misk-zookeeper / misk.zookeeper / SHARED_DIR_PERMS SHARED_DIR_PERMS \u00b6 [jvm]\\ const val SHARED_DIR_PERMS : Int","title":"SHARED_DIR_PERMS - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-s-h-a-r-e-d_-d-i-r_-p-e-r-m-s/#shared_dir_perms","text":"[jvm]\\ const val SHARED_DIR_PERMS : Int","title":"SHARED_DIR_PERMS"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-curator-framework-module/","text":"// misk-zookeeper / misk.zookeeper / CuratorFrameworkModule CuratorFrameworkModule \u00b6 [jvm]\\ class CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a CuratorFramework for an application to use. A Service is also installed to manage the lifecycle of the CuratorFramework. If an application needs to connect to multiple Zookeepers, an optional qualifier can be passed resulting in an annotated CuratorFramework binding. @Qualifier\\ annotation class MyZk\\ \\ install(CuratorFrameworkModule(config, MyZk::class)\\ \\ @Inject @MyZk CuratorFramework Constructors \u00b6 CuratorFrameworkModule [jvm] fun CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"CuratorFrameworkModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-curator-framework-module/#curatorframeworkmodule","text":"[jvm]\\ class CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a CuratorFramework for an application to use. A Service is also installed to manage the lifecycle of the CuratorFramework. If an application needs to connect to multiple Zookeepers, an optional qualifier can be passed resulting in an annotated CuratorFramework binding. @Qualifier\\ annotation class MyZk\\ \\ install(CuratorFrameworkModule(config, MyZk::class)\\ \\ @Inject @MyZk CuratorFramework","title":"CuratorFrameworkModule"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-curator-framework-module/#constructors","text":"CuratorFrameworkModule [jvm] fun CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"Constructors"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-curator-framework-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-curator-framework-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-curator-framework-module/-curator-framework-module/","text":"// misk-zookeeper / misk.zookeeper / CuratorFrameworkModule / CuratorFrameworkModule CuratorFrameworkModule \u00b6 [jvm]\\ fun CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"CuratorFrameworkModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-curator-framework-module/-curator-framework-module/#curatorframeworkmodule","text":"[jvm]\\ fun CuratorFrameworkModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"CuratorFrameworkModule"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-fixed-ensemble-provider-module/","text":"// misk-zookeeper / misk.zookeeper / FixedEnsembleProviderModule FixedEnsembleProviderModule \u00b6 [jvm]\\ class FixedEnsembleProviderModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"FixedEnsembleProviderModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-fixed-ensemble-provider-module/#fixedensembleprovidermodule","text":"[jvm]\\ class FixedEnsembleProviderModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule","title":"FixedEnsembleProviderModule"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-fixed-ensemble-provider-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-fixed-ensemble-provider-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-fixed-ensemble-provider-module/-fixed-ensemble-provider-module/","text":"// misk-zookeeper / misk.zookeeper / FixedEnsembleProviderModule / FixedEnsembleProviderModule FixedEnsembleProviderModule \u00b6 [jvm]\\ fun FixedEnsembleProviderModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?)","title":"FixedEnsembleProviderModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-fixed-ensemble-provider-module/-fixed-ensemble-provider-module/#fixedensembleprovidermodule","text":"[jvm]\\ fun FixedEnsembleProviderModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?)","title":"FixedEnsembleProviderModule"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-static-host-module/","text":"// misk-zookeeper / misk.zookeeper / StaticHostModule StaticHostModule \u00b6 [jvm]\\ class StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a zk HostProvider to a StaticHostProvider. This is the default implementation used by Zookeeper. Constructors \u00b6 StaticHostModule [jvm] fun StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"StaticHostModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-static-host-module/#statichostmodule","text":"[jvm]\\ class StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Binds a zk HostProvider to a StaticHostProvider. This is the default implementation used by Zookeeper.","title":"StaticHostModule"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-static-host-module/#constructors","text":"StaticHostModule [jvm] fun StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"Constructors"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-static-host-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-static-host-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-static-host-module/-static-host-module/","text":"// misk-zookeeper / misk.zookeeper / StaticHostModule / StaticHostModule StaticHostModule \u00b6 [jvm]\\ fun StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"StaticHostModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-static-host-module/-static-host-module/#statichostmodule","text":"[jvm]\\ fun StaticHostModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"StaticHostModule"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/","text":"// misk-zookeeper / misk.zookeeper / ZkClientFactory ZkClientFactory \u00b6 [jvm]\\ class ZkClientFactory (appName: String , curator: CuratorFramework) Factory for generating a zookeeper client that\u2019s configured to read and write data within the app\u2019s namespace. Constructors \u00b6 ZkClientFactory [jvm] fun ZkClientFactory (appName: String , curator: CuratorFramework) Functions \u00b6 Name Summary client [jvm] fun client (): CuratorFramework","title":"ZkClientFactory - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/#zkclientfactory","text":"[jvm]\\ class ZkClientFactory (appName: String , curator: CuratorFramework) Factory for generating a zookeeper client that\u2019s configured to read and write data within the app\u2019s namespace.","title":"ZkClientFactory"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/#constructors","text":"ZkClientFactory [jvm] fun ZkClientFactory (appName: String , curator: CuratorFramework)","title":"Constructors"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/#functions","text":"Name Summary client [jvm] fun client (): CuratorFramework","title":"Functions"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/-zk-client-factory/","text":"// misk-zookeeper / misk.zookeeper / ZkClientFactory / ZkClientFactory ZkClientFactory \u00b6 [jvm]\\ fun ZkClientFactory (appName: String , curator: CuratorFramework)","title":"ZkClientFactory - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/-zk-client-factory/#zkclientfactory","text":"[jvm]\\ fun ZkClientFactory (appName: String , curator: CuratorFramework)","title":"ZkClientFactory"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/client/","text":"// misk-zookeeper / misk.zookeeper / ZkClientFactory / client client \u00b6 [jvm]\\ fun client (): CuratorFramework","title":"client - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-client-factory/client/#client","text":"[jvm]\\ fun client (): CuratorFramework","title":"client"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-service/","text":"// misk-zookeeper / misk.zookeeper / ZkService ZkService \u00b6 [jvm]\\ class ZkService : AbstractIdleService Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"ZkService - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-service/#zkservice","text":"[jvm]\\ class ZkService : AbstractIdleService","title":"ZkService"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-service/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-service/#functions","text":"Name Summary addListener [jvm] override fun addListener (p0: Service.Listener, p1: Executor ) awaitRunning [jvm] override fun awaitRunning () override fun awaitRunning (p0: Duration ) override fun awaitRunning (p0: Long , p1: TimeUnit ) awaitTerminated [jvm] override fun awaitTerminated () override fun awaitTerminated (p0: Duration ) override fun awaitTerminated (p0: Long , p1: TimeUnit ) executor [jvm] open fun executor (): Executor failureCause [jvm] override fun failureCause (): Throwable isRunning [jvm] override fun isRunning (): Boolean serviceName [jvm] open fun serviceName (): String startAsync [jvm] @CanIgnoreReturnValue override fun startAsync (): Service state [jvm] override fun state (): Service.State stopAsync [jvm] @CanIgnoreReturnValue override fun stopAsync (): Service toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-service/-companion/","text":"// misk-zookeeper / misk.zookeeper / ZkService / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zk-service/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zookeeper-default-module/","text":"// misk-zookeeper / misk.zookeeper / ZookeeperDefaultModule ZookeeperDefaultModule \u00b6 [jvm]\\ class ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Provides a connection to a qualified Zookeeper server with default settings. Applications can install this module directly to use the default settings or provide explicit bindings to override the defaults. Constructors \u00b6 ZookeeperDefaultModule [jvm] fun ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null) Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ZookeeperDefaultModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zookeeper-default-module/#zookeeperdefaultmodule","text":"[jvm]\\ class ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >?) : KAbstractModule Provides a connection to a qualified Zookeeper server with default settings. Applications can install this module directly to use the default settings or provide explicit bindings to override the defaults.","title":"ZookeeperDefaultModule"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zookeeper-default-module/#constructors","text":"ZookeeperDefaultModule [jvm] fun ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"Constructors"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zookeeper-default-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zookeeper-default-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zookeeper-default-module/-zookeeper-default-module/","text":"// misk-zookeeper / misk.zookeeper / ZookeeperDefaultModule / ZookeeperDefaultModule ZookeeperDefaultModule \u00b6 [jvm]\\ fun ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"ZookeeperDefaultModule - Misk"},{"location":"0.x/misk-zookeeper/misk.zookeeper/-zookeeper-default-module/-zookeeper-default-module/#zookeeperdefaultmodule","text":"[jvm]\\ fun ZookeeperDefaultModule (config: ZookeeperConfig , qualifier: KClass <out Annotation >? = null)","title":"ZookeeperDefaultModule"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/","text":"// misk-zookeeper-testing / misk.zookeeper.testing Package misk.zookeeper.testing \u00b6 Types \u00b6 Name Summary EmbeddedZookeeper [jvm] class EmbeddedZookeeper (basePort: Int ) ZkTestModule [jvm] class ZkTestModule (qualifier: KClass <out Annotation >?) : KAbstractModule Functions \u00b6 Name Summary main [jvm] fun main (args: Array < String >)","title":"Package misk.zookeeper.testing - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/#package-miskzookeepertesting","text":"","title":"Package misk.zookeeper.testing"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/#types","text":"Name Summary EmbeddedZookeeper [jvm] class EmbeddedZookeeper (basePort: Int ) ZkTestModule [jvm] class ZkTestModule (qualifier: KClass <out Annotation >?) : KAbstractModule","title":"Types"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/#functions","text":"Name Summary main [jvm] fun main (args: Array < String >)","title":"Functions"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/main/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / main main \u00b6 [jvm]\\ fun main (args: Array < String >)","title":"main - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/main/#main","text":"[jvm]\\ fun main (args: Array < String >)","title":"main"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper EmbeddedZookeeper \u00b6 [jvm]\\ class EmbeddedZookeeper (basePort: Int ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary start [jvm] fun start () stop [jvm] fun stop () Properties \u00b6 Name Summary basePort [jvm] val basePort : Int","title":"EmbeddedZookeeper - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/#embeddedzookeeper","text":"[jvm]\\ class EmbeddedZookeeper (basePort: Int )","title":"EmbeddedZookeeper"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/#functions","text":"Name Summary start [jvm] fun start () stop [jvm] fun stop ()","title":"Functions"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/#properties","text":"Name Summary basePort [jvm] val basePort : Int","title":"Properties"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-embedded-zookeeper/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / EmbeddedZookeeper EmbeddedZookeeper \u00b6 [jvm]\\ fun EmbeddedZookeeper (basePort: Int )","title":"EmbeddedZookeeper - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-embedded-zookeeper/#embeddedzookeeper","text":"[jvm]\\ fun EmbeddedZookeeper (basePort: Int )","title":"EmbeddedZookeeper"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/base-port/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / basePort basePort \u00b6 [jvm]\\ val basePort : Int","title":"basePort - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/base-port/#baseport","text":"[jvm]\\ val basePort : Int","title":"basePort"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/start/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / start start \u00b6 [jvm]\\ fun start ()","title":"start - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/start/#start","text":"[jvm]\\ fun start ()","title":"start"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/stop/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / stop stop \u00b6 [jvm]\\ fun stop ()","title":"stop - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/stop/#stop","text":"[jvm]\\ fun stop ()","title":"stop"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary CLIENT_PORT [jvm] const val CLIENT_PORT : Int = 2181 LEADER_PORT [jvm] const val LEADER_PORT : Int = 3888 PEER_PORT [jvm] const val PEER_PORT : Int = 2888","title":"Companion - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/#properties","text":"Name Summary CLIENT_PORT [jvm] const val CLIENT_PORT : Int = 2181 LEADER_PORT [jvm] const val LEADER_PORT : Int = 3888 PEER_PORT [jvm] const val PEER_PORT : Int = 2888","title":"Properties"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/-c-l-i-e-n-t_-p-o-r-t/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / Companion / CLIENT_PORT CLIENT_PORT \u00b6 [jvm]\\ const val CLIENT_PORT : Int = 2181","title":"CLIENT_PORT - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/-c-l-i-e-n-t_-p-o-r-t/#client_port","text":"[jvm]\\ const val CLIENT_PORT : Int = 2181","title":"CLIENT_PORT"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/-l-e-a-d-e-r_-p-o-r-t/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / Companion / LEADER_PORT LEADER_PORT \u00b6 [jvm]\\ const val LEADER_PORT : Int = 3888","title":"LEADER_PORT - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/-l-e-a-d-e-r_-p-o-r-t/#leader_port","text":"[jvm]\\ const val LEADER_PORT : Int = 3888","title":"LEADER_PORT"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/-p-e-e-r_-p-o-r-t/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / EmbeddedZookeeper / Companion / PEER_PORT PEER_PORT \u00b6 [jvm]\\ const val PEER_PORT : Int = 2888","title":"PEER_PORT - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-embedded-zookeeper/-companion/-p-e-e-r_-p-o-r-t/#peer_port","text":"[jvm]\\ const val PEER_PORT : Int = 2888","title":"PEER_PORT"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / ZkTestModule ZkTestModule \u00b6 [jvm]\\ class ZkTestModule (qualifier: KClass <out Annotation >?) : KAbstractModule Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >) Properties \u00b6 Name Summary binder [jvm] val binder : Binder","title":"ZkTestModule - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/#zktestmodule","text":"[jvm]\\ class ZkTestModule (qualifier: KClass <out Annotation >?) : KAbstractModule","title":"ZkTestModule"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/#functions","text":"Name Summary addError [jvm] open fun addError (p0: Message) open fun addError (p0: Throwable ) open fun addError (p0: String , vararg p1: Any ) bind [jvm] open fun < T : Any > bind (p0: Key< T >): LinkedBindingBuilder< T > open fun < T : Any > bind (p0: TypeLiteral< T >): AnnotatedBindingBuilder< T > open fun < T : Any > bind (p0: Class < T >): AnnotatedBindingBuilder< T > bindConstant [jvm] open fun bindConstant (): AnnotatedConstantBindingBuilder bindInterceptor [jvm] open fun bindInterceptor (p0: Matcher<in Class <*>>, p1: Matcher<in Method >, vararg p2: MethodInterceptor) bindListener [jvm] open fun bindListener (p0: Matcher<in Binding< >>, vararg p1: ProvisionListener) open fun bindListener (p0: Matcher<in TypeLiteral< >>, p1: TypeListener) bindScope [jvm] open fun bindScope (p0: Class <out Annotation >, p1: Scope) configure [jvm] override fun configure (p0: Binder) convertToTypes [jvm] open fun convertToTypes (p0: Matcher<in TypeLiteral<*>>, p1: TypeConverter) currentStage [jvm] open fun currentStage (): Stage getMembersInjector [jvm] open fun < T : Any > getMembersInjector (p0: TypeLiteral< T >): MembersInjector< T > open fun < T : Any > getMembersInjector (p0: Class < T >): MembersInjector< T > getProvider [jvm] open fun < T : Any > getProvider (p0: Key< T >): Provider< T > open fun < T : Any > getProvider (p0: Class < T >): Provider< T > install [jvm] open fun install (p0: Module) requestInjection [jvm] open fun requestInjection (p0: Any ) requestStaticInjection [jvm] open fun requestStaticInjection (vararg p0: Class <*>) requireBinding [jvm] open fun requireBinding (p0: Key< >) open fun requireBinding (p0: Class < >)","title":"Functions"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/#properties","text":"Name Summary binder [jvm] val binder : Binder","title":"Properties"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/-zk-test-module/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / ZkTestModule / ZkTestModule ZkTestModule \u00b6 [jvm]\\ fun ZkTestModule (qualifier: KClass <out Annotation >?)","title":"ZkTestModule - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/-zk-test-module/#zktestmodule","text":"[jvm]\\ fun ZkTestModule (qualifier: KClass <out Annotation >?)","title":"ZkTestModule"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/-companion/","text":"// misk-zookeeper-testing / misk.zookeeper.testing / ZkTestModule / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Companion - Misk"},{"location":"0.x/misk-zookeeper-testing/misk.zookeeper.testing/-zk-test-module/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"}]}